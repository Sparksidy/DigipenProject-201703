#include "Application.hpp"
#include "Shapes.hpp"
#include "Geometry.hpp"
#include "Math/Utilities.hpp"
#include "DebugDraw.hpp"
#include "Components.hpp"
#include "SimpleNSquared.hpp"
#include "UnitTests.hpp"

void TestAabbSurfaceArea(const Aabb& aabb, FILE* outFile)
{
  float epsilon = 0.001f;
  float surfaceArea = aabb.GetSurfaceArea();

  if (outFile != NULL)
    fprintf(outFile, "  Result: %s\n", PrintFloat(surfaceArea).c_str());
}

void TestAabbVolume(const Aabb& aabb, FILE* outFile)
{
  float epsilon = 0.001f;
  float volume = aabb.GetVolume();

  if (outFile != NULL)
    fprintf(outFile, "  Result: %s\n", PrintFloat(volume).c_str());
}

void TestAabbContains(const Aabb& aabb0, const Aabb& aabb1, FILE* outFile)
{
  bool result = aabb0.Contains(aabb1);

  if (outFile != NULL)
  {
    if (result)
      fprintf(outFile, "  Result:true\n");
    else
      fprintf(outFile, "  Result:false\n");
  }

  Vector4 color0(1);
  Vector4 color1(0.5f);
  if (result == true)
  {
    color0 = Vector4(1, 0, 0, 1);
    color1 = Vector4(0.5f, 0, 0, 0.5f);
  }

  aabb0.DebugDraw().Color(color0);
  aabb1.DebugDraw().Color(color1);
}

void TestAabbTransform(const Vector3& scale, const Matrix3& rotation, const Vector3& translation, Aabb& inputAabb, FILE* outFile)
{
  Aabb resultAabb = inputAabb;
  resultAabb.Transform(scale, rotation, translation);

  // Draw the original aabb and the transformed aabb
  inputAabb.DebugDraw().Color(Vector4(0.5f));
  resultAabb.DebugDraw().Color(Vector4(1));

  // Also, to make it easier to see what we're after, draw the obb that resulted from this transformation
  Matrix4 transform = Math::BuildTransform(translation, rotation, scale);
  DebugShape& transformedShape = inputAabb.DebugDraw();
  transformedShape.Color(Vector4(1, 0, 0, 1));
  transformedShape.SetTransform(transform);

  if (outFile != NULL)
    fprintf(outFile, "  %s\n", PrintAabb(resultAabb).c_str());
}

void DrawSphereComputedFromPoints(const std::vector<Vector3>& input, const Sphere& result)
{
  for (size_t i = 0; i < input.size(); ++i)
    gDebugDrawer->DrawPoint(input[i]);
  gDebugDrawer->DrawSphere(result);
}

void TestSphereCentroid(const std::vector<Vector3>& input, FILE* outFile)
{
  float epsilon = 0.001f;

  Sphere sphere;
  sphere.ComputeCentroid(input);
  DrawSphereComputedFromPoints(input, sphere);

  if (outFile != NULL)
    fprintf(outFile, "  %s\n", PrintSphere(sphere).c_str());
}

void TestSphereRitter(const std::vector<Vector3>& input, FILE* outFile)
{
  float epsilon = 0.001f;

  Sphere sphere;
  sphere.ComputeRitter(input);
  DrawSphereComputedFromPoints(input, sphere);

  if (outFile != NULL)
    fprintf(outFile, "  %s\n", PrintSphere(sphere).c_str());
}

void TestSpherePCA(const std::vector<Vector3>& input, FILE* outFile)
{
  float epsilon = 0.001f;

  Matrix3 covariance = ComputeCovarianceMatrix(input);
  Matrix3 firstRotation = ComputeJacobiRotation(covariance);

  Vector3 eigenValues;
  Matrix3 eigenVectors;
  ComputeEigenValuesAndVectors(covariance, eigenValues, eigenVectors, 50);

  Sphere sphere;
  sphere.ComputePCA(input);
  DrawSphereComputedFromPoints(input, sphere);

  if (outFile != NULL)
  {
    fprintf(outFile, "  %s\n", PrintSphere(sphere).c_str());
    fprintf(outFile, "    Covariance: %s\n", PrintMatrix3(covariance).c_str());
    fprintf(outFile, "    FirstRotation: %s\n", PrintMatrix3(firstRotation).c_str());
    fprintf(outFile, "    EigenValues: %s\n", PrintVector3(eigenValues).c_str());
    fprintf(outFile, "    EigenVectors: %s\n", PrintMatrix3(eigenVectors).c_str());
  }
}


void AabbSurfaceAreaTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Aabb aabb(Vector3(-1, -1, -1), Vector3(1, 1, 1));

  TestAabbSurfaceArea(aabb, file);
}

void AabbSurfaceAreaTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Aabb aabb(Vector3(-1, -2, -3), Vector3(1, 2, 3));

  TestAabbSurfaceArea(aabb, file);
}


void AabbVolumeTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Aabb aabb(Vector3(-1, -1, -1), Vector3(1, 1, 1));

  TestAabbVolume(aabb, file);
}

void AabbVolumeTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Aabb aabb(Vector3(-1, -2, -3), Vector3(1, 2, 3));

  TestAabbVolume(aabb, file);
}


void AabbContainsTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Aabb aabb0(Vector3(-2.5f, -0.5f, -0.5f), Vector3(-1.5f, 0.5f, 0.5f));
  Aabb aabb1(Vector3(1.5f, -0.5f, -0.5f), Vector3(2.5f, 0.5f, 0.5f));

  TestAabbContains(aabb0, aabb1, file);
}

void AabbContainsTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Aabb aabb0(Vector3(-1.5f, -1.5f, -1.5f), Vector3(-0.5f, -0.5f, -0.5f));
  Aabb aabb1(Vector3(-1, -1, -1), Vector3(1, 1, 1));

  TestAabbContains(aabb0, aabb1, file);
}

void AabbContainsTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Aabb aabb0(Vector3(0.5f, 0.5f, 0.5f), Vector3(1.5f, 1.5f, 1.5f));
  Aabb aabb1(Vector3(-1, -1, -1), Vector3(1, 1, 1));

  TestAabbContains(aabb0, aabb1, file);
}

void AabbContainsTest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Aabb aabb0(Vector3(-0.5f, -0.5f, -0.5f), Vector3(0.5f, 0.5f, 0.5f));
  Aabb aabb1(Vector3(-1, -1, -1), Vector3(1, 1, 1));

  TestAabbContains(aabb0, aabb1, file);
}

void AabbContainsTest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Aabb aabb0(Vector3(-1, -1, -1), Vector3(1, 1, 1));
  Aabb aabb1(Vector3(-0.5f, -0.5f, -0.5f), Vector3(0.5f, 0.5f, 0.5f));

  TestAabbContains(aabb0, aabb1, file);
}


void AabbTransformTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Vector3 scale(Vector3(2, 2, 2));
  Matrix3 rotation = Math::ToMatrix3(Vector3(Vector3(1, 0, 0)).Normalized(), 0);
  Vector3 translation(Vector3(0, 0, 0));

  Aabb aabb(Vector3(-1, -1, -1), Vector3(1, 1, 1));

  TestAabbTransform(scale, rotation, translation, aabb, file);
}

void AabbTransformTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Vector3 scale(Vector3(1, 1, 1));
  Matrix3 rotation = Math::ToMatrix3(Vector3(Vector3(1, 0, 0)).Normalized(), 0);
  Vector3 translation(Vector3(1, 2, 3));

  Aabb aabb(Vector3(-1, -1, -1), Vector3(1, 1, 1));

  TestAabbTransform(scale, rotation, translation, aabb, file);
}

// Rotate about (1, 0, 0) by 45 degrees
void AabbTransformTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Vector3 scale(Vector3(1, 1, 1));
  Matrix3 rotation = Math::ToMatrix3(Vector3(Vector3(1, 0, 0)).Normalized(), 0.785398f);
  Vector3 translation(Vector3(0, 0, 0));

  Aabb aabb(Vector3(-1, -1, -1), Vector3(1, 1, 1));

  TestAabbTransform(scale, rotation, translation, aabb, file);
}

// Scale by 2, Rotate about (1, 1, 0) by 45 degrees, translate by (0, 1, 0)
void AabbTransformTest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Vector3 scale(Vector3(2, 2, 2));
  Matrix3 rotation = Math::ToMatrix3(Vector3(Vector3(1, 1, 0)).Normalized(), 0.785398f);
  Vector3 translation(Vector3(0, 1, 0));

  Aabb aabb(Vector3(0, 0, 0), Vector3(1, 1, 1));

  TestAabbTransform(scale, rotation, translation, aabb, file);
}

void AabbTransformTest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Vector3 scale(Vector3(1, 1, 1));
  Matrix3 rotation = Math::ToMatrix3(Vector3(Vector3(0, 1, 0)).Normalized(), 0.785398f);
  Vector3 translation(Vector3(0, 0, 0));

  Aabb aabb(Vector3(-1, -1, -1), Vector3(1, 1, 1));

  TestAabbTransform(scale, rotation, translation, aabb, file);
}

void AabbTransformTest6(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Vector3 scale(Vector3(1, 1, 1));
  Matrix3 rotation = Math::ToMatrix3(Vector3(Vector3(0, 0, 1)).Normalized(), 0.785398f);
  Vector3 translation(Vector3(0, 0, 0));

  Aabb aabb(Vector3(-1, -1, -1), Vector3(1, 1, 1));

  TestAabbTransform(scale, rotation, translation, aabb, file);
}

void AabbTransformTest7(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  Vector3 scale(Vector3(1, 1, 1));
  Matrix3 rotation = Math::ToMatrix3(Vector3(Vector3(1, 0, 0)).Normalized(), 3.14159f);
  Vector3 translation(Vector3(0, 0, 0));

  Aabb aabb(Vector3(-1, -1, -1), Vector3(1, 1, 1));

  TestAabbTransform(scale, rotation, translation, aabb, file);
}

void SphereCentroidTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.97681f, -5.28855f, 2.96304f));
  points.push_back(Vector3(-8.51253f, -4.59517f, -2.79946f));
  points.push_back(Vector3(-4.89425f, 9.7058f, -3.62163f));
  points.push_back(Vector3(8.68465f, -6.4275f, 7.1514f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.96704f, 7.51335f, -2.51991f));
  points.push_back(Vector3(4.92294f, 6.88284f, 9.18394f));
  points.push_back(Vector3(4.60433f, 0.772423f, 6.76809f));
  points.push_back(Vector3(9.92248f, -6.87857f, 7.28629f));
  points.push_back(Vector3(-1.73986f, 0.666829f, -9.73998f));
  points.push_back(Vector3(-7.37114f, -2.69814f, 2.27271f));
  points.push_back(Vector3(-2.584f, -9.24863f, -2.36f));
  points.push_back(Vector3(-3.29081f, 9.03928f, 7.21915f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.62767f, 2.76528f, -8.93796f));
  points.push_back(Vector3(1.72704f, -2.88003f, -3.37931f));
  points.push_back(Vector3(7.55181f, -2.96121f, 0.00640889f));
  points.push_back(Vector3(-8.00043f, -2.2251f, -8.14386f));
  points.push_back(Vector3(-4.61531f, -2.49001f, -7.08609f));
  points.push_back(Vector3(-8.37458f, -0.0698874f, -5.93066f));
  points.push_back(Vector3(7.37114f, -8.3343f, 2.11035f));
  points.push_back(Vector3(3.0076f, 6.97439f, -4.94797f));
  points.push_back(Vector3(1.03183f, -7.98761f, 3.62651f));
  points.push_back(Vector3(-8.83969f, 3.29936f, 7.06107f));
  points.push_back(Vector3(-7.97174f, 8.00836f, -1.49205f));
  points.push_back(Vector3(8.44172f, -5.90381f, 1.49998f));
  points.push_back(Vector3(3.98907f, -0.987884f, 6.69485f));
  points.push_back(Vector3(-5.2794f, -0.556352f, 2.80496f));
  points.push_back(Vector3(-1.67821f, -9.61242f, 2.08045f));
  points.push_back(Vector3(2.11035f, -9.63805f, 9.59532f));
  points.push_back(Vector3(2.88858f, -8.84274f, 8.53267f));
  points.push_back(Vector3(-0.0332652f, -5.33372f, -5.47044f));
  points.push_back(Vector3(0.150456f, 6.35548f, -7.56462f));
  points.push_back(Vector3(8.4228f, 2.8489f, 7.20267f));
  points.push_back(Vector3(-3.14066f, -7.11539f, 0.357372f));
  points.push_back(Vector3(9.68566f, 1.29917f, -6.84133f));
  points.push_back(Vector3(-9.01608f, 6.78152f, -6.87857f));
  points.push_back(Vector3(-1.75451f, 4.41389f, 9.36888f));
  points.push_back(Vector3(9.89563f, -5.17502f, -7.54936f));
  points.push_back(Vector3(-3.50505f, 1.08982f, 4.65194f));
  points.push_back(Vector3(9.33775f, -3.07047f, -4.08551f));
  points.push_back(Vector3(3.549f, 7.26188f, 5.13535f));
  points.push_back(Vector3(7.90643f, -9.86755f, 2.68715f));
  points.push_back(Vector3(4.77462f, -3.09366f, 2.38746f));
  points.push_back(Vector3(-0.868252f, 2.88308f, -0.955535f));
  points.push_back(Vector3(-9.78332f, 2.01148f, 7.83074f));
  points.push_back(Vector3(5.35325f, 2.09754f, -8.81649f));
  points.push_back(Vector3(-5.80309f, -0.359813f, -6.04602f));
  points.push_back(Vector3(6.80776f, 7.68792f, -3.75164f));
  points.push_back(Vector3(-1.60253f, -5.84948f, -6.79067f));
  points.push_back(Vector3(8.31721f, 2.42531f, 2.96976f));
  points.push_back(Vector3(-0.759606f, 7.17826f, -8.26411f));
  points.push_back(Vector3(7.07816f, 1.61107f, 3.51482f));
  points.push_back(Vector3(9.76257f, -0.25544f, -0.174261f));
  points.push_back(Vector3(-9.1052f, 9.55748f, -9.47325f));
  points.push_back(Vector3(9.04599f, 2.32032f, 6.66066f));
  points.push_back(Vector3(-0.81576f, 0.8652f, 0.400098f));
  points.push_back(Vector3(-8.93735f, -7.72149f, -4.00189f));
  points.push_back(Vector3(-8.20917f, 6.3976f, -1.90039f));
  points.push_back(Vector3(2.00659f, 6.51662f, -5.51683f));
  points.push_back(Vector3(5.53636f, -0.811487f, -7.21122f));
  points.push_back(Vector3(-6.65456f, 2.51259f, 7.76177f));
  points.push_back(Vector3(7.97296f, 6.83828f, -0.372021f));
  points.push_back(Vector3(-0.542924f, -3.69854f, -6.01001f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.24458f, -4.38215f, -1.96081f));
  points.push_back(Vector3(-5.43931f, 6.20899f, -0.0796533f));
  points.push_back(Vector3(5.93616f, -2.90811f, -5.94836f));
  points.push_back(Vector3(7.77703f, -4.87594f, -9.48668f));
  points.push_back(Vector3(-6.94266f, 6.26881f, -6.84194f));
  points.push_back(Vector3(-4.23688f, -0.397046f, -1.301f));
  points.push_back(Vector3(2.83486f, -3.6607f, -2.46437f));
  points.push_back(Vector3(0.484939f, 7.01468f, 6.32313f));
  points.push_back(Vector3(6.61794f, -3.66497f, 9.58617f));
  points.push_back(Vector3(9.99695f, -3.84136f, 1.84851f));
  points.push_back(Vector3(3.18094f, 1.19419f, -0.529496f));
  points.push_back(Vector3(2.64199f, 4.27412f, 0.500809f));
  points.push_back(Vector3(-5.22874f, -5.84765f, 6.292f));
  points.push_back(Vector3(-1.57323f, 8.15302f, -4.77767f));
  points.push_back(Vector3(-8.64681f, 2.68899f, 4.25031f));
  points.push_back(Vector3(-1.40294f, -8.73165f, -2.28736f));
  points.push_back(Vector3(0.226753f, -8.53267f, -1.58238f));
  points.push_back(Vector3(-5.51134f, 8.70785f, 9.17478f));
  points.push_back(Vector3(-2.85623f, -1.09592f, 5.2794f));
  points.push_back(Vector3(-4.8027f, -3.72723f, -3.32072f));
  points.push_back(Vector3(6.1919f, -9.4348f, -6.60634f));
  points.push_back(Vector3(3.02713f, -8.12738f, 5.80004f));
  points.push_back(Vector3(-8.47957f, -4.8381f, 1.89367f));
  points.push_back(Vector3(-1.47374f, -1.23569f, -4.20392f));
  points.push_back(Vector3(-2.99905f, 9.87243f, -8.36665f));
  points.push_back(Vector3(5.72192f, -6.15223f, 2.78115f));
  points.push_back(Vector3(-7.40104f, -6.36708f, 8.04132f));
  points.push_back(Vector3(-4.63729f, 2.53395f, 1.29429f));
  points.push_back(Vector3(-8.86349f, -7.58843f, -1.33152f));
  points.push_back(Vector3(-7.81915f, -2.79458f, 8.21039f));
  points.push_back(Vector3(-1.32786f, 1.73193f, 4.59273f));
  points.push_back(Vector3(3.74859f, 1.49754f, -2.68166f));
  points.push_back(Vector3(8.49849f, -8.5168f, 5.60472f));
  points.push_back(Vector3(6.07105f, -9.99817f, -9.24009f));
  points.push_back(Vector3(-4.80697f, -1.32237f, -2.8367f));
  points.push_back(Vector3(7.02506f, -4.93027f, 7.2924f));
  points.push_back(Vector3(3.80779f, -2.05237f, 4.77279f));
  points.push_back(Vector3(5.65844f, 1.64281f, -0.411084f));
  points.push_back(Vector3(-7.4279f, 9.59288f, -8.6877f));
  points.push_back(Vector3(-4.27107f, -0.00701926f, 5.94348f));
  points.push_back(Vector3(8.02728f, 3.48308f, -2.54616f));
  points.push_back(Vector3(8.14753f, 7.38273f, -1.66417f));
  points.push_back(Vector3(1.67699f, 6.51662f, 7.00797f));
  points.push_back(Vector3(-8.29096f, -4.52498f, -8.62484f));
  points.push_back(Vector3(9.64965f, 4.20026f, 0.544145f));
  points.push_back(Vector3(-2.82571f, 3.33232f, 7.60308f));
  points.push_back(Vector3(3.89508f, 5.70666f, 4.21369f));
  points.push_back(Vector3(-1.15329f, 8.53572f, -3.45378f));
  points.push_back(Vector3(-2.24342f, -1.02512f, 9.04477f));
  points.push_back(Vector3(2.84707f, 3.84991f, 0.283517f));
  points.push_back(Vector3(2.64443f, 0.606403f, 1.49815f));
  points.push_back(Vector3(-5.24766f, -3.58928f, 9.54344f));
  points.push_back(Vector3(-1.29368f, 6.89138f, 1.24241f));
  points.push_back(Vector3(-6.30909f, 3.18766f, 4.11908f));
  points.push_back(Vector3(-6.79189f, -0.149846f, -0.488601f));
  points.push_back(Vector3(7.81549f, -7.09098f, 2.01392f));
  points.push_back(Vector3(8.32575f, -1.84606f, 3.46416f));
  points.push_back(Vector3(9.89502f, -6.72658f, -4.14472f));
  points.push_back(Vector3(-2.23914f, 9.682f, -8.76949f));
  points.push_back(Vector3(-6.02527f, -4.41084f, -4.85763f));
  points.push_back(Vector3(-8.51314f, 2.85745f, 1.27659f));
  points.push_back(Vector3(-2.7897f, -0.501419f, 1.37852f));
  points.push_back(Vector3(2.46254f, -9.83703f, -9.16501f));
  points.push_back(Vector3(-2.39723f, 0.627155f, 2.53883f));
  points.push_back(Vector3(-9.05087f, -8.02118f, -5.99536f));
  points.push_back(Vector3(-9.1052f, 6.39027f, 6.19983f));
  points.push_back(Vector3(3.50322f, 4.54817f, 3.08512f));
  points.push_back(Vector3(-9.14914f, 2.25929f, -0.586871f));
  points.push_back(Vector3(-2.68044f, -5.02609f, -0.555132f));
  points.push_back(Vector3(9.07285f, -4.96078f, -9.33226f));
  points.push_back(Vector3(-1.03183f, -8.80734f, 5.08957f));
  points.push_back(Vector3(-4.14228f, 3.66802f, -2.58034f));
  points.push_back(Vector3(2.03345f, 8.34651f, 5.65233f));
  points.push_back(Vector3(4.87533f, 4.16364f, -5.71581f));
  points.push_back(Vector3(-6.60939f, -2.61818f, 2.32887f));
  points.push_back(Vector3(4.18134f, -3.81207f, -5.46556f));
  points.push_back(Vector3(5.21226f, -0.425733f, -3.33232f));
  points.push_back(Vector3(-3.24503f, -3.32194f, 3.49162f));
  points.push_back(Vector3(-8.11396f, 4.44258f, -9.18943f));
  points.push_back(Vector3(-2.172f, -6.28956f, -0.646687f));
  points.push_back(Vector3(0.279855f, 0.758995f, 9.0698f));
  points.push_back(Vector3(6.33412f, 3.64483f, 7.31803f));
  points.push_back(Vector3(-9.27915f, 3.52458f, 7.23319f));
  points.push_back(Vector3(6.26637f, -0.84994f, -0.827357f));
  points.push_back(Vector3(7.21305f, -3.62529f, 6.21937f));
  points.push_back(Vector3(3.16507f, 7.48772f, -4.75814f));
  points.push_back(Vector3(1.21006f, -8.58272f, -0.970183f));
  points.push_back(Vector3(3.78338f, 9.86816f, -8.76339f));
  points.push_back(Vector3(-3.70281f, -0.500809f, 7.07816f));
  points.push_back(Vector3(5.78784f, -3.67046f, 1.66967f));
  points.push_back(Vector3(-6.19617f, 5.78295f, -3.82305f));
  points.push_back(Vector3(1.57567f, -1.0947f, 6.5276f));
  points.push_back(Vector3(-5.73168f, 0.893277f, -3.53435f));
  points.push_back(Vector3(-1.5598f, -8.64864f, -8.62667f));
  points.push_back(Vector3(-0.751061f, 9.17356f, -3.37138f));
  points.push_back(Vector3(-1.06357f, -1.07944f, 5.46129f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.8114f, -0.7828f, 7.94733f));
  points.push_back(Vector3(-9.48485f, -2.06763f, -3.87494f));
  points.push_back(Vector3(-7.21976f, 1.41209f, -7.15812f));
  points.push_back(Vector3(-2.772f, 6.0802f, 9.38292f));
  points.push_back(Vector3(-7.76544f, 8.39534f, 6.77236f));
  points.push_back(Vector3(-1.94922f, -5.96301f, -0.550249f));
  points.push_back(Vector3(4.57198f, -9.29991f, 1.10324f));
  points.push_back(Vector3(-6.28346f, 3.85662f, 1.16611f));
  points.push_back(Vector3(1.04038f, -8.96359f, 7.10135f));
  points.push_back(Vector3(6.01245f, 2.17139f, 2.39174f));
  points.push_back(Vector3(3.51848f, 1.1301f, -3.75225f));
  points.push_back(Vector3(4.25397f, -1.48961f, -4.1319f));
  points.push_back(Vector3(8.55464f, -9.21995f, 9.57213f));
  points.push_back(Vector3(7.83196f, 6.01245f, -8.00531f));
  points.push_back(Vector3(4.26008f, -8.53389f, 3.9256f));
  points.push_back(Vector3(-3.93719f, 5.8623f, 3.56243f));
  points.push_back(Vector3(1.97302f, 3.79681f, 2.38075f));
  points.push_back(Vector3(-1.20945f, -9.90417f, -6.48976f));
  points.push_back(Vector3(4.46883f, -1.59032f, -5.11765f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest6(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.94507f, -0.323191f, -2.58217f));
  points.push_back(Vector3(6.48122f, -3.867f, -4.45235f));
  points.push_back(Vector3(5.50096f, 1.11911f, -2.37587f));
  points.push_back(Vector3(8.64498f, -7.87164f, 7.58171f));
  points.push_back(Vector3(6.89749f, -8.24335f, -0.744346f));
  points.push_back(Vector3(9.035f, -2.64626f, 5.97705f));
  points.push_back(Vector3(9.70763f, 8.6932f, -5.71764f));
  points.push_back(Vector3(0.646077f, 9.8468f, -5.6859f));
  points.push_back(Vector3(3.8731f, -1.19663f, -4.28083f));
  points.push_back(Vector3(-7.73736f, -6.47694f, 8.77438f));
  points.push_back(Vector3(0.79928f, -3.22611f, 6.55873f));
  points.push_back(Vector3(-7.49199f, -6.53554f, -9.97192f));
  points.push_back(Vector3(4.48714f, -8.6932f, 2.31971f));
  points.push_back(Vector3(-1.31565f, -0.0735496f, -0.443434f));
  points.push_back(Vector3(-2.50221f, 2.46925f, -6.68752f));
  points.push_back(Vector3(7.09403f, 6.06311f, 0.472732f));
  points.push_back(Vector3(-3.47636f, 0.827357f, 9.63988f));
  points.push_back(Vector3(-9.24009f, -3.45012f, 6.24683f));
  points.push_back(Vector3(2.39601f, 8.92758f, 2.31727f));
  points.push_back(Vector3(-0.564898f, -2.50404f, 1.22715f));
  points.push_back(Vector3(7.80572f, -9.78271f, 0.165716f));
  points.push_back(Vector3(-2.10303f, -5.41734f, 7.06351f));
  points.push_back(Vector3(-4.52803f, 2.29652f, 6.87613f));
  points.push_back(Vector3(4.37727f, 8.96481f, 1.49876f));
  points.push_back(Vector3(2.30201f, 2.79031f, 8.28669f));
  points.push_back(Vector3(-6.05152f, -8.6053f, 3.09244f));
  points.push_back(Vector3(3.89325f, -0.182196f, 9.04477f));
  points.push_back(Vector3(4.41572f, -3.01004f, 9.67589f));
  points.push_back(Vector3(-9.03012f, 7.30522f, -7.17093f));
  points.push_back(Vector3(-2.88797f, -1.63488f, -7.70745f));
  points.push_back(Vector3(7.47917f, -9.07285f, 3.8255f));
  points.push_back(Vector3(-5.39048f, 6.19312f, -7.48527f));
  points.push_back(Vector3(1.69286f, 5.65294f, 1.51097f));
  points.push_back(Vector3(-5.92944f, -4.05988f, 1.83325f));
  points.push_back(Vector3(9.20957f, 3.23893f, 8.71944f));
  points.push_back(Vector3(-8.56502f, -9.77783f, 9.83886f));
  points.push_back(Vector3(2.69265f, 0.108341f, -3.32255f));
  points.push_back(Vector3(0.277413f, 0.290841f, 5.61449f));
  points.push_back(Vector3(-9.85839f, -4.71358f, -7.00369f));
  points.push_back(Vector3(2.45888f, -9.76501f, -3.39152f));
  points.push_back(Vector3(3.80047f, 7.02933f, 1.7069f));
  points.push_back(Vector3(-1.75695f, -4.05621f, 3.87066f));
  points.push_back(Vector3(-1.87658f, 7.89911f, -8.92392f));
  points.push_back(Vector3(3.71075f, -9.72167f, -5.73779f));
  points.push_back(Vector3(9.94812f, -6.12537f, -2.54677f));
  points.push_back(Vector3(5.70727f, -1.22654f, -8.29218f));
  points.push_back(Vector3(9.6588f, -3.91888f, -5.6212f));
  points.push_back(Vector3(1.6245f, -1.02878f, 3.18461f));
  points.push_back(Vector3(-8.73592f, 6.42079f, 8.1048f));
  points.push_back(Vector3(-4.4322f, 3.70769f, -6.53005f));
  points.push_back(Vector3(-5.67614f, -6.71987f, 6.02954f));
  points.push_back(Vector3(6.42384f, -3.15531f, -1.82104f));
  points.push_back(Vector3(4.14716f, 3.043f, 5.82629f));
  points.push_back(Vector3(-0.555742f, 1.54637f, 9.79614f));
  points.push_back(Vector3(1.0947f, 9.90844f, -7.21061f));
  points.push_back(Vector3(-6.17176f, -1.27842f, -1.17038f));
  points.push_back(Vector3(7.68487f, 2.94961f, -6.42872f));
  points.push_back(Vector3(-3.25663f, -0.749229f, -5.75427f));
  points.push_back(Vector3(-4.04462f, -2.00293f, -1.40904f));
  points.push_back(Vector3(1.95654f, -9.48851f, -3.38176f));
  points.push_back(Vector3(9.80895f, 5.22813f, -4.56587f));
  points.push_back(Vector3(1.11667f, 8.08405f, 6.37867f));
  points.push_back(Vector3(-9.81689f, 3.86517f, -5.9563f));
  points.push_back(Vector3(0.296335f, 9.79369f, -9.32981f));
  points.push_back(Vector3(7.54265f, 5.59374f, -6.09363f));
  points.push_back(Vector3(6.1681f, -6.01794f, -1.85705f));
  points.push_back(Vector3(8.6639f, 0.658895f, 6.29749f));
  points.push_back(Vector3(-2.37526f, 9.56481f, -5.98254f));
  points.push_back(Vector3(-4.26862f, 7.70501f, 3.43608f));
  points.push_back(Vector3(2.29896f, -5.47777f, 0.468459f));
  points.push_back(Vector3(-2.37831f, 2.6603f, 3.62835f));
  points.push_back(Vector3(5.74389f, -5.47349f, 2.23182f));
  points.push_back(Vector3(8.62239f, -4.07758f, -0.362255f));
  points.push_back(Vector3(6.5569f, -3.12906f, 6.92496f));
  points.push_back(Vector3(1.14414f, -6.77602f, -0.872524f));
  points.push_back(Vector3(5.91357f, 9.28587f, 6.32984f));
  points.push_back(Vector3(8.66695f, 6.39454f, -6.44703f));
  points.push_back(Vector3(-2.62978f, 1.08188f, 1.32542f));
  points.push_back(Vector3(5.86535f, 8.22138f, 7.86981f));
  points.push_back(Vector3(-5.14328f, 7.84295f, 1.79724f));
  points.push_back(Vector3(6.9335f, 3.32987f, -9.682f));
  points.push_back(Vector3(-3.95672f, 3.12052f, 6.15589f));
  points.push_back(Vector3(3.18827f, 6.86575f, 1.92602f));
  points.push_back(Vector3(-2.79092f, 3.74737f, -4.3675f));
  points.push_back(Vector3(9.4879f, -2.65297f, 1.62084f));
  points.push_back(Vector3(6.87551f, 1.99011f, -1.31016f));
  points.push_back(Vector3(8.42769f, -8.19758f, -2.38929f));
  points.push_back(Vector3(1.28269f, -9.71007f, 3.26701f));
  points.push_back(Vector3(-5.8684f, -7.23258f, -8.67489f));
  points.push_back(Vector3(-2.20374f, 5.33738f, -8.31538f));
  points.push_back(Vector3(6.23218f, -9.67528f, -0.674764f));
  points.push_back(Vector3(5.03647f, -9.88952f, -2.75918f));
  points.push_back(Vector3(-8.13654f, 0.726646f, 3.63201f));
  points.push_back(Vector3(-6.61855f, -2.09754f, 5.51622f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest7(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.36421f, 1.99988f, 3.83404f));
  points.push_back(Vector3(-6.66433f, 8.47835f, -3.88104f));
  points.push_back(Vector3(-8.0456f, 4.29243f, 9.37986f));
  points.push_back(Vector3(-7.0745f, 0.540483f, 8.90072f));
  points.push_back(Vector3(2.30812f, 0.324412f, 0.457472f));
  points.push_back(Vector3(0.823084f, -2.5016f, 3.94757f));
  points.push_back(Vector3(-4.2082f, -5.15976f, -0.513016f));
  points.push_back(Vector3(-6.44398f, -2.84524f, 9.4409f));
  points.push_back(Vector3(-8.15912f, -8.64925f, 9.24375f));
  points.push_back(Vector3(6.6393f, -9.79492f, -4.67513f));
  points.push_back(Vector3(-6.71743f, 7.14408f, 9.30113f));
  points.push_back(Vector3(0.780358f, -5.02121f, 9.00204f));
  points.push_back(Vector3(-0.512406f, -6.86819f, -1.39683f));
  points.push_back(Vector3(7.84722f, -1.47618f, -4.87167f));
  points.push_back(Vector3(-2.16468f, 6.87063f, -5.8507f));
  points.push_back(Vector3(1.60985f, 3.98541f, -5.35203f));
  points.push_back(Vector3(3.10831f, 4.92782f, 2.23182f));
  points.push_back(Vector3(-1.06113f, 2.2483f, 4.16181f));
  points.push_back(Vector3(-3.51848f, -5.40819f, -2.69021f));
  points.push_back(Vector3(1.23997f, -6.50197f, -6.32984f));
  points.push_back(Vector3(5.03891f, -2.89407f, 6.90664f));
  points.push_back(Vector3(-4.06354f, -5.7561f, -8.95321f));
  points.push_back(Vector3(-8.29524f, 7.80938f, 1.42308f));
  points.push_back(Vector3(-3.68816f, 9.91577f, 7.92047f));
  points.push_back(Vector3(6.58864f, -4.85824f, -2.01331f));
  points.push_back(Vector3(7.40287f, 4.90646f, 6.34388f));
  points.push_back(Vector3(-3.41777f, 3.0253f, -0.212104f));
  points.push_back(Vector3(8.52046f, -6.62526f, -8.69137f));
  points.push_back(Vector3(-6.95242f, -7.90094f, -0.522782f));
  points.push_back(Vector3(1.7423f, -2.24403f, 3.26884f));
  points.push_back(Vector3(-9.87609f, -2.77932f, 9.41588f));
  points.push_back(Vector3(-7.04703f, -9.75524f, -0.158391f));
  points.push_back(Vector3(1.07883f, -6.04297f, -4.46089f));
  points.push_back(Vector3(-9.82665f, -1.9602f, -0.606403f));
  points.push_back(Vector3(9.68444f, -1.86865f, -2.28187f));
  points.push_back(Vector3(5.52965f, 8.305f, -6.43239f));
  points.push_back(Vector3(-9.63561f, -7.83258f, -9.67772f));
  points.push_back(Vector3(-5.27146f, 6.21387f, 3.69427f));
  points.push_back(Vector3(7.31376f, 2.678f, 4.70199f));
  points.push_back(Vector3(3.91644f, -8.50154f, -0.176092f));
  points.push_back(Vector3(-8.61324f, 7.81243f, -7.00736f));
  points.push_back(Vector3(0.674764f, -1.81616f, 3.32072f));
  points.push_back(Vector3(6.93716f, -7.05618f, -7.45415f));
  points.push_back(Vector3(6.29322f, 1.13559f, -2.86477f));
  points.push_back(Vector3(-8.78292f, 1.73864f, 4.82894f));
  points.push_back(Vector3(2.72195f, 4.18378f, -5.51988f));
  points.push_back(Vector3(9.22422f, 9.06247f, 4.43648f));
  points.push_back(Vector3(2.3484f, 0.406812f, 9.15891f));
  points.push_back(Vector3(9.1876f, -4.95651f, -4.738f));
  points.push_back(Vector3(4.39802f, 8.15424f, -8.21467f));
  points.push_back(Vector3(1.02756f, 8.39167f, 4.53658f));
  points.push_back(Vector3(0.872524f, 9.10276f, 8.04071f));
  points.push_back(Vector3(4.31806f, -5.71276f, 3.74493f));
  points.push_back(Vector3(-0.0424207f, -0.491653f, 0.461745f));
  points.push_back(Vector3(-3.72784f, -9.64171f, 0.961028f));
  points.push_back(Vector3(8.33186f, 5.39354f, -3.43913f));
  points.push_back(Vector3(6.38112f, 5.80676f, -5.69628f));
  points.push_back(Vector3(-1.79235f, -0.843226f, 5.77746f));
  points.push_back(Vector3(5.16037f, -3.6607f, 3.63628f));
  points.push_back(Vector3(2.7897f, 1.56285f, 8.44722f));
  points.push_back(Vector3(-7.52922f, -6.49525f, -0.330515f));
  points.push_back(Vector3(-2.37465f, -8.33857f, 4.07514f));
  points.push_back(Vector3(-1.42613f, 3.95245f, -1.08493f));
  points.push_back(Vector3(-2.4424f, -9.44395f, -3.78216f));
  points.push_back(Vector3(0.956145f, 4.49629f, 1.85217f));
  points.push_back(Vector3(-7.86676f, 5.40025f, 9.78332f));
  points.push_back(Vector3(4.54634f, 5.14206f, -7.17032f));
  points.push_back(Vector3(-1.05258f, -9.77172f, 5.9508f));
  points.push_back(Vector3(4.68795f, -3.02896f, 6.0332f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest8(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.16135f, -2.12317f, 2.46376f));
  points.push_back(Vector3(-1.49632f, -9.729f, -2.55532f));
  points.push_back(Vector3(-7.92108f, -1.04099f, -1.77099f));
  points.push_back(Vector3(-6.08142f, -3.35002f, -1.85278f));
  points.push_back(Vector3(-2.69143f, 0.693686f, 2.44911f));
  points.push_back(Vector3(7.89117f, -9.86328f, 5.60167f));
  points.push_back(Vector3(8.83908f, -8.4875f, -7.50175f));
  points.push_back(Vector3(-5.97034f, -8.57479f, -3.1077f));
  points.push_back(Vector3(6.66189f, -8.54732f, 6.96158f));
  points.push_back(Vector3(4.2552f, -9.48302f, -1.49754f));
  points.push_back(Vector3(0.630207f, 6.80593f, 8.17011f));
  points.push_back(Vector3(1.70202f, 6.34632f, -7.65557f));
  points.push_back(Vector3(-2.40455f, -7.00674f, 0.679647f));
  points.push_back(Vector3(3.98175f, 0.99704f, 1.17038f));
  points.push_back(Vector3(1.04465f, 8.08039f, -6.52516f));
  points.push_back(Vector3(8.36116f, 8.76583f, 7.54875f));
  points.push_back(Vector3(-4.34919f, -5.33738f, 7.65801f));
  points.push_back(Vector3(8.60958f, 5.8562f, 4.0788f));
  points.push_back(Vector3(-1.26682f, -0.825526f, -2.48451f));
  points.push_back(Vector3(-5.14328f, 1.66906f, 6.94021f));
  points.push_back(Vector3(-2.64504f, 7.37663f, 3.65764f));
  points.push_back(Vector3(-4.66353f, -9.94873f, -7.30583f));
  points.push_back(Vector3(6.26576f, 5.45762f, 4.9559f));
  points.push_back(Vector3(-5.11826f, -9.07651f, 2.0835f));
  points.push_back(Vector3(-9.49583f, -9.72655f, -6.32618f));
  points.push_back(Vector3(-8.05963f, -8.03827f, -3.24137f));
  points.push_back(Vector3(9.80346f, -7.69768f, -1.89856f));
  points.push_back(Vector3(-3.76446f, -1.0184f, -1.92358f));
  points.push_back(Vector3(-7.54631f, 3.35063f, -8.46675f));
  points.push_back(Vector3(5.48509f, -5.24094f, 3.65947f));
  points.push_back(Vector3(6.46962f, 0.477615f, 8.23542f));
  points.push_back(Vector3(-5.68163f, 1.89611f, 9.99268f));
  points.push_back(Vector3(-1.71361f, -9.55077f, 8.43806f));
  points.push_back(Vector3(4.19477f, -1.70751f, -9.71679f));
  points.push_back(Vector3(6.292f, 7.82037f, 8.08466f));
  points.push_back(Vector3(2.22877f, -3.46416f, 8.73592f));
  points.push_back(Vector3(0.744346f, 6.96768f, 7.32414f));
  points.push_back(Vector3(1.8656f, 3.35246f, -2.27332f));
  points.push_back(Vector3(5.58763f, -3.42082f, 7.29728f));
  points.push_back(Vector3(-8.16828f, -5.12864f, 5.69262f));
  points.push_back(Vector3(-6.21021f, -3.32682f, 9.92309f));
  points.push_back(Vector3(4.18928f, -9.8059f, 3.22001f));
  points.push_back(Vector3(8.67061f, -4.20331f, 2.80068f));
  points.push_back(Vector3(-9.81445f, -7.79656f, -4.46516f));
  points.push_back(Vector3(1.67455f, -8.00348f, -6.60939f));
  points.push_back(Vector3(6.37196f, 3.19498f, -6.33839f));
  points.push_back(Vector3(4.75204f, -1.89917f, 5.9209f));
  points.push_back(Vector3(5.69079f, 6.21509f, 6.57399f));
  points.push_back(Vector3(5.39293f, 2.16956f, 3.37992f));
  points.push_back(Vector3(1.40721f, 3.51543f, -4.86801f));
  points.push_back(Vector3(-3.08512f, 0.289621f, -1.87353f));
  points.push_back(Vector3(8.33857f, -6.2859f, -1.9779f));
  points.push_back(Vector3(8.39351f, 3.59661f, 0.431227f));
  points.push_back(Vector3(8.39961f, 1.64647f, 2.7488f));
  points.push_back(Vector3(-9.97131f, 7.07938f, -2.70669f));
  points.push_back(Vector3(-1.55675f, 1.95227f, -6.45619f));
  points.push_back(Vector3(-6.58071f, -3.17606f, 6.57033f));
  points.push_back(Vector3(0.293893f, -8.28669f, 5.25681f));
  points.push_back(Vector3(-5.51073f, 7.39006f, 6.33717f));
  points.push_back(Vector3(8.22077f, 1.38524f, -9.52513f));
  points.push_back(Vector3(-7.63604f, 4.48775f, 8.95871f));
  points.push_back(Vector3(0.395215f, -0.584429f, 8.71761f));
  points.push_back(Vector3(-7.34855f, 2.54616f, 6.11805f));
  points.push_back(Vector3(-9.40916f, -3.24564f, -5.92456f));
  points.push_back(Vector3(0.999481f, -5.39171f, 7.5042f));
  points.push_back(Vector3(7.05679f, 5.46678f, -6.32801f));
  points.push_back(Vector3(4.83261f, -4.232f, 4.46577f));
  points.push_back(Vector3(-0.408032f, 3.36161f, -3.80169f));
  points.push_back(Vector3(0.472732f, 3.62102f, 3.28532f));
  points.push_back(Vector3(-4.09955f, -3.57524f, -9.83825f));
  points.push_back(Vector3(1.75878f, 2.32398f, 3.22306f));
  points.push_back(Vector3(-3.24259f, 5.42039f, 7.75262f));
  points.push_back(Vector3(-2.57302f, 3.49895f, -5.32884f));
  points.push_back(Vector3(-1.04099f, 4.7795f, 4.96994f));
  points.push_back(Vector3(0.33845f, 9.7235f, -4.83749f));
  points.push_back(Vector3(7.85882f, 3.34513f, 4.31867f));
  points.push_back(Vector3(4.63729f, 7.35527f, -1.98706f));
  points.push_back(Vector3(-9.90051f, -9.83398f, 5.46556f));
  points.push_back(Vector3(9.62401f, 7.32414f, -7.32902f));
  points.push_back(Vector3(4.36201f, 6.86514f, -5.68285f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest9(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.03806f, 4.61592f, -1.52379f));
  points.push_back(Vector3(9.10276f, 0.592975f, 6.03992f));
  points.push_back(Vector3(9.86023f, 8.18598f, 3.05765f));
  points.push_back(Vector3(1.26499f, -8.94711f, -0.186468f));
  points.push_back(Vector3(-4.91623f, 6.83645f, 2.24036f));
  points.push_back(Vector3(3.99579f, 4.97787f, 2.84524f));
  points.push_back(Vector3(-1.88391f, 1.72826f, 4.48225f));
  points.push_back(Vector3(-0.143132f, -0.386059f, 2.33741f));
  points.push_back(Vector3(-0.735801f, 9.93774f, -6.68508f));
  points.push_back(Vector3(7.72515f, 8.66878f, 9.91028f));
  points.push_back(Vector3(-5.80859f, 6.65822f, -4.65499f));
  points.push_back(Vector3(-5.04074f, -2.71584f, 2.22633f));
  points.push_back(Vector3(-4.61104f, -9.28526f, -6.04236f));
  points.push_back(Vector3(5.58092f, 9.61364f, 1.93396f));
  points.push_back(Vector3(-1.65319f, -0.907315f, 6.57949f));
  points.push_back(Vector3(5.91479f, -0.375072f, 2.04871f));
  points.push_back(Vector3(-1.99316f, 8.75423f, 5.71703f));
  points.push_back(Vector3(2.01086f, -2.80313f, -7.40898f));
  points.push_back(Vector3(-5.91601f, 4.96445f, 1.08371f));
  points.push_back(Vector3(-8.05414f, -4.79781f, 7.38334f));
  points.push_back(Vector3(6.54592f, 7.28507f, 4.3614f));
  points.push_back(Vector3(3.32987f, 1.60131f, -6.06067f));
  points.push_back(Vector3(7.40898f, 9.72228f, 2.10791f));
  points.push_back(Vector3(-5.49669f, -3.93292f, 2.88858f));
  points.push_back(Vector3(-5.40269f, -7.17215f, -1.55797f));
  points.push_back(Vector3(9.53734f, -4.13129f, -2.25562f));
  points.push_back(Vector3(0.35432f, 5.26475f, 9.96277f));
  points.push_back(Vector3(-5.36058f, 3.11258f, 3.72784f));
  points.push_back(Vector3(-6.85476f, -6.99332f, -6.63503f));
  points.push_back(Vector3(9.60509f, 7.52434f, 8.0987f));
  points.push_back(Vector3(-9.3646f, -1.52745f, -6.08203f));
  points.push_back(Vector3(4.80697f, 8.19025f, -3.28166f));
  points.push_back(Vector3(4.61959f, 1.89306f, -7.16178f));
  points.push_back(Vector3(4.62203f, 6.65334f, 4.69588f));
  points.push_back(Vector3(-0.682089f, -4.28205f, -3.82244f));
  points.push_back(Vector3(4.44014f, 4.86007f, -4.41511f));
  points.push_back(Vector3(-5.36424f, -7.72698f, -0.411695f));
  points.push_back(Vector3(-6.84072f, 7.29606f, 6.15223f));
  points.push_back(Vector3(-1.64464f, 7.72454f, -5.20554f));
  points.push_back(Vector3(-1.29551f, 9.64904f, 4.68307f));
  points.push_back(Vector3(-1.68249f, 4.20026f, 7.19901f));
  points.push_back(Vector3(3.24442f, 9.03317f, -7.26493f));
  points.push_back(Vector3(-0.0979644f, 9.15464f, 2.41127f));
  points.push_back(Vector3(9.78271f, 5.68834f, -4.41755f));
  points.push_back(Vector3(8.05353f, 9.20713f, 4.96384f));
  points.push_back(Vector3(5.30625f, -4.35163f, -2.11158f));
  points.push_back(Vector3(-0.754723f, -2.69997f, 7.69097f));
  points.push_back(Vector3(0.0723289f, -9.38536f, -9.12595f));
  points.push_back(Vector3(-0.419019f, -0.434889f, 7.62139f));
  points.push_back(Vector3(-9.53001f, -2.266f, 7.91375f));
  points.push_back(Vector3(-6.74795f, 4.24543f, -3.67962f));
  points.push_back(Vector3(-3.31889f, 0.599078f, -0.425123f));
  points.push_back(Vector3(3.26151f, 1.9541f, -8.15485f));
  points.push_back(Vector3(8.59127f, -3.88531f, -0.805383f));
  points.push_back(Vector3(6.19678f, 6.88772f, -1.53844f));
  points.push_back(Vector3(-3.42387f, -7.61467f, -1.48839f));
  points.push_back(Vector3(-2.57179f, 4.91684f, -8.63155f));
  points.push_back(Vector3(-9.63012f, -7.03299f, -7.66289f));
  points.push_back(Vector3(4.84359f, 9.17722f, -0.481277f));
  points.push_back(Vector3(1.77892f, -4.78744f, 4.0611f));
  points.push_back(Vector3(-9.31944f, -0.514847f, -7.38151f));
  points.push_back(Vector3(7.96625f, 7.51396f, -7.40226f));
  points.push_back(Vector3(-5.33006f, 0.96408f, 1.10141f));
  points.push_back(Vector3(3.97137f, -5.50645f, 8.60775f));
  points.push_back(Vector3(9.99329f, 2.34107f, 2.72805f));
  points.push_back(Vector3(-1.55675f, 3.15653f, -4.03058f));
  points.push_back(Vector3(-0.912198f, 7.82159f, 9.06247f));
  points.push_back(Vector3(7.89239f, -0.873745f, 6.11011f));
  points.push_back(Vector3(1.52623f, 0.890225f, -8.18903f));
  points.push_back(Vector3(4.45845f, 2.93374f, -9.68322f));
  points.push_back(Vector3(-6.44337f, -3.78521f, -4.52559f));
  points.push_back(Vector3(-7.10318f, -5.68529f, 1.14231f));
  points.push_back(Vector3(1.00497f, 9.63073f, 1.36876f));
  points.push_back(Vector3(-3.4611f, 0.174871f, -9.07956f));
  points.push_back(Vector3(-3.55449f, 8.40815f, -8.56746f));
  points.push_back(Vector3(2.05847f, -8.22871f, 5.78234f));
  points.push_back(Vector3(0.540483f, -2.82388f, 0.70101f));
  points.push_back(Vector3(-8.65535f, 1.21799f, -0.191961f));
  points.push_back(Vector3(8.53755f, -8.54305f, -2.44911f));
  points.push_back(Vector3(-1.82287f, -0.821253f, -1.26499f));
  points.push_back(Vector3(8.77743f, -6.67043f, 3.20414f));
  points.push_back(Vector3(-9.72228f, 7.08121f, 8.25251f));
  points.push_back(Vector3(3.03323f, -5.30381f, 9.02463f));
  points.push_back(Vector3(-3.91522f, 0.779138f, -8.95077f));
  points.push_back(Vector3(-8.77133f, -4.4377f, 4.42549f));
  points.push_back(Vector3(-7.17887f, -9.05209f, -8.19025f));
  points.push_back(Vector3(-2.05786f, 0.0613422f, 2.1427f));
  points.push_back(Vector3(-9.38841f, -9.02097f, -7.18314f));
  points.push_back(Vector3(7.69036f, 4.28327f, -6.25111f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest10(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.30723f, -1.02512f, 6.51357f));
  points.push_back(Vector3(6.34693f, -9.30174f, 2.48695f));
  points.push_back(Vector3(-6.59841f, 9.38597f, 2.54433f));
  points.push_back(Vector3(7.85028f, 3.24076f, -3.81573f));
  points.push_back(Vector3(-9.10337f, 3.4611f, -6.33778f));
  points.push_back(Vector3(-4.61959f, -4.75692f, 4.65377f));
  points.push_back(Vector3(7.26981f, 3.35551f, 3.87371f));
  points.push_back(Vector3(4.26679f, 2.43019f, 4.35286f));
  points.push_back(Vector3(-3.98358f, -1.27842f, -2.45521f));
  points.push_back(Vector3(-9.83032f, 5.2739f, -9.76806f));
  points.push_back(Vector3(6.92129f, 5.0444f, 7.4633f));
  points.push_back(Vector3(-4.22956f, -3.62957f, -8.64559f));
  points.push_back(Vector3(6.00085f, 3.41777f, -3.34147f));
  points.push_back(Vector3(1.77648f, -2.05176f, 6.72353f));
  points.push_back(Vector3(2.93008f, -6.49892f, -6.14856f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest11(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.60204f, 8.04926f, -7.19352f));
  points.push_back(Vector3(-7.34123f, -1.03793f, 7.77764f));
  points.push_back(Vector3(-7.75262f, -6.18763f, -8.98129f));
  points.push_back(Vector3(3.21757f, -3.39885f, -7.79473f));
  points.push_back(Vector3(-8.95321f, 8.79818f, 8.9996f));
  points.push_back(Vector3(9.19614f, -7.2808f, 0.265816f));
  points.push_back(Vector3(1.89734f, -1.67577f, -7.31254f));
  points.push_back(Vector3(5.84216f, 6.11072f, -9.29075f));
  points.push_back(Vector3(-3.09976f, -0.240181f, -7.29972f));
  points.push_back(Vector3(1.88818f, 2.5895f, 8.80795f));
  points.push_back(Vector3(-4.15998f, -4.28144f, 9.04538f));
  points.push_back(Vector3(-7.48894f, -5.22324f, -9.00937f));
  points.push_back(Vector3(0.300607f, 7.56706f, 3.02713f));
  points.push_back(Vector3(6.34632f, -7.13675f, -2.84158f));
  points.push_back(Vector3(2.91787f, 9.14914f, -8.39778f));
  points.push_back(Vector3(-4.20942f, -6.39332f, 3.9256f));
  points.push_back(Vector3(6.93106f, -9.7589f, -9.2938f));
  points.push_back(Vector3(6.00269f, -3.60088f, 7.28263f));
  points.push_back(Vector3(5.62731f, -4.0434f, 3.82855f));
  points.push_back(Vector3(8.78048f, 2.78298f, 0.521561f));
  points.push_back(Vector3(-0.890835f, 4.80148f, 2.76284f));
  points.push_back(Vector3(-4.44502f, -8.21467f, 5.35508f));
  points.push_back(Vector3(9.61119f, -3.29264f, 1.55736f));
  points.push_back(Vector3(1.39195f, -9.66979f, -6.59169f));
  points.push_back(Vector3(-1.18198f, -4.31684f, 4.74105f));
  points.push_back(Vector3(-8.20246f, -1.63915f, -5.78661f));
  points.push_back(Vector3(-6.19251f, 2.22816f, -0.630818f));
  points.push_back(Vector3(-1.30161f, 4.5793f, -3.03446f));
  points.push_back(Vector3(-5.17441f, -9.13327f, -0.154729f));
  points.push_back(Vector3(-6.29749f, 3.45378f, 9.12534f));
  points.push_back(Vector3(-9.34996f, -9.47325f, 7.33329f));
  points.push_back(Vector3(8.22321f, -0.216987f, 7.95038f));
  points.push_back(Vector3(8.29402f, 2.56142f, -5.63524f));
  points.push_back(Vector3(3.64177f, 6.23218f, 3.75042f));
  points.push_back(Vector3(-4.33271f, -4.52742f, -7.53899f));
  points.push_back(Vector3(-6.94571f, 4.28327f, -1.4835f));
  points.push_back(Vector3(1.22959f, -0.655843f, 8.76705f));
  points.push_back(Vector3(-8.39167f, -7.47917f, 3.18033f));
  points.push_back(Vector3(-4.11603f, -0.890835f, 9.28098f));
  points.push_back(Vector3(-2.34535f, -9.41527f, 3.48491f));
  points.push_back(Vector3(2.16712f, 6.61916f, 3.82672f));
  points.push_back(Vector3(-5.66881f, 4.97971f, -9.08628f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest12(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.27732f, -2.62062f, -9.9353f));
  points.push_back(Vector3(6.65334f, 5.13108f, -1.56285f));
  points.push_back(Vector3(1.89673f, 2.58583f, -6.28773f));
  points.push_back(Vector3(-8.43745f, 1.88635f, -3.41227f));
  points.push_back(Vector3(-6.41591f, -5.05295f, -3.16263f));
  points.push_back(Vector3(-5.88427f, 0.769372f, -6.65883f));
  points.push_back(Vector3(4.03058f, -1.26988f, 8.38557f));
  points.push_back(Vector3(5.99902f, -0.105289f, 8.57356f));
  points.push_back(Vector3(9.71068f, -0.0320444f, -7.36991f));
  points.push_back(Vector3(1.00986f, -3.23771f, -3.137f));
  points.push_back(Vector3(-5.60411f, -1.44322f, -4.99435f));
  points.push_back(Vector3(-8.76461f, -1.30528f, -0.771203f));
  points.push_back(Vector3(4.82162f, 8.67367f, -1.41942f));
  points.push_back(Vector3(4.42122f, -9.64476f, 1.74657f));
  points.push_back(Vector3(-8.69015f, 7.45598f, 6.37745f));
  points.push_back(Vector3(-8.06085f, 5.05905f, -4.08124f));
  points.push_back(Vector3(3.76995f, -4.326f, -6.65517f));
  points.push_back(Vector3(-9.08872f, 4.279f, 2.5663f));
  points.push_back(Vector3(-7.24052f, -3.66131f, 5.14512f));
  points.push_back(Vector3(4.03119f, 9.65392f, 1.36387f));
  points.push_back(Vector3(4.24055f, 0.365917f, -8.61385f));
  points.push_back(Vector3(9.14975f, 6.34388f, 4.43403f));
  points.push_back(Vector3(7.77764f, -4.98398f, 1.16794f));
  points.push_back(Vector3(-9.92554f, -1.62999f, 7.13736f));
  points.push_back(Vector3(-6.22791f, 3.36772f, -8.85189f));
  points.push_back(Vector3(-7.10196f, -2.01453f, 4.86923f));
  points.push_back(Vector3(8.32087f, 4.04767f, -6.54347f));
  points.push_back(Vector3(0.954314f, 4.79476f, 3.75774f));
  points.push_back(Vector3(-3.03262f, -7.61834f, -5.01816f));
  points.push_back(Vector3(8.72799f, 8.62545f, -1.78442f));
  points.push_back(Vector3(-6.46046f, 9.45006f, 3.56426f));
  points.push_back(Vector3(3.21635f, 5.68529f, 1.76427f));
  points.push_back(Vector3(9.7821f, 6.84072f, -7.29179f));
  points.push_back(Vector3(-7.17215f, 2.72927f, 1.96265f));
  points.push_back(Vector3(8.30012f, -5.37523f, -2.71279f));
  points.push_back(Vector3(1.44993f, -8.67122f, 8.13532f));
  points.push_back(Vector3(7.74957f, 0.713218f, -9.3115f));
  points.push_back(Vector3(-8.69991f, -3.56304f, -5.63829f));
  points.push_back(Vector3(7.83746f, -6.10523f, 1.57323f));
  points.push_back(Vector3(-4.9205f, -7.34001f, -7.55669f));
  points.push_back(Vector3(5.0383f, -7.14225f, -1.72216f));
  points.push_back(Vector3(8.29951f, -9.3646f, 2.70486f));
  points.push_back(Vector3(-9.57823f, 2.01025f, -6.51234f));
  points.push_back(Vector3(-1.04953f, -2.99173f, 7.10318f));
  points.push_back(Vector3(-8.80978f, 4.28388f, -6.46779f));
  points.push_back(Vector3(-3.59966f, -2.6487f, -8.35688f));
  points.push_back(Vector3(9.90417f, 4.01166f, 8.13593f));
  points.push_back(Vector3(7.07511f, -5.64318f, -3.90118f));
  points.push_back(Vector3(2.4424f, -8.29768f, 0.0564592f));
  points.push_back(Vector3(-6.42689f, 6.34266f, -9.08261f));
  points.push_back(Vector3(-9.98169f, -0.184637f, 2.39723f));
  points.push_back(Vector3(8.92087f, 5.98315f, -3.43059f));
  points.push_back(Vector3(-5.51622f, -3.25358f, -3.1492f));
  points.push_back(Vector3(1.124f, 8.75668f, -8.12006f));
  points.push_back(Vector3(-7.67693f, 7.90399f, 1.36143f));
  points.push_back(Vector3(-2.39051f, -2.64687f, 7.60674f));
  points.push_back(Vector3(-6.46046f, 0.22187f, -6.95181f));
  points.push_back(Vector3(6.99637f, 4.73434f, -7.81854f));
  points.push_back(Vector3(-0.357372f, 2.49245f, 4.32905f));
  points.push_back(Vector3(-0.591754f, 7.15995f, -9.33103f));
  points.push_back(Vector3(-7.3516f, 0.779748f, 9.4055f));
  points.push_back(Vector3(8.79696f, -8.16034f, -2.00964f));
  points.push_back(Vector3(6.89322f, 8.54244f, -2.73782f));
  points.push_back(Vector3(3.88104f, -5.64745f, -4.03546f));
  points.push_back(Vector3(-9.99451f, 7.3748f, -1.57628f));
  points.push_back(Vector3(0.920133f, 1.17649f, 3.13578f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest13(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.16889f, 4.91012f, -7.63115f));
  points.push_back(Vector3(-7.33024f, 5.4387f, -9.00571f));
  points.push_back(Vector3(-1.87597f, 9.19919f, -2.98929f));
  points.push_back(Vector3(5.18296f, -8.30683f, -8.46492f));
  points.push_back(Vector3(6.5331f, -9.96643f, 7.8692f));
  points.push_back(Vector3(-2.10852f, 1.60192f, 6.04236f));
  points.push_back(Vector3(5.29527f, 1.95593f, 2.29957f));
  points.push_back(Vector3(-0.459914f, -4.74166f, 9.01547f));
  points.push_back(Vector3(5.30992f, -7.1746f, 3.80291f));
  points.push_back(Vector3(-7.87713f, 7.92901f, -5.35386f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest14(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.60958f, -4.91806f, 2.71218f));
  points.push_back(Vector3(6.82546f, -5.87085f, 1.32725f));
  points.push_back(Vector3(-1.70751f, 4.05255f, 9.80102f));
  points.push_back(Vector3(-5.51866f, -8.35627f, 5.59374f));
  points.push_back(Vector3(0.270699f, -1.86193f, -5.58031f));
  points.push_back(Vector3(-0.803552f, 4.185f, 0.705893f));
  points.push_back(Vector3(-1.64647f, 8.76705f, 2.48817f));
  points.push_back(Vector3(-8.64864f, 9.94385f, 2.83242f));
  points.push_back(Vector3(-4.45174f, 1.13254f, 9.54222f));
  points.push_back(Vector3(9.75646f, 0.000915555f, 4.95224f));
  points.push_back(Vector3(7.99249f, 0.339671f, 3.45317f));
  points.push_back(Vector3(9.96399f, 3.92438f, 8.43013f));
  points.push_back(Vector3(5.1561f, 6.03931f, -5.15793f));
  points.push_back(Vector3(-9.84191f, 0.784631f, 3.93658f));
  points.push_back(Vector3(5.12192f, -7.55791f, -0.558184f));
  points.push_back(Vector3(-3.21451f, 4.0556f, -8.63521f));
  points.push_back(Vector3(-8.98495f, -9.47874f, -2.95022f));
  points.push_back(Vector3(-8.93735f, -7.99249f, -1.11362f));
  points.push_back(Vector3(3.12418f, 3.75103f, 7.97357f));
  points.push_back(Vector3(8.62728f, 1.81066f, 1.5006f));
  points.push_back(Vector3(0.675985f, -9.48607f, 2.6072f));
  points.push_back(Vector3(0.401929f, -1.8955f, 1.80395f));
  points.push_back(Vector3(0.0820948f, 7.73614f, -4.54085f));
  points.push_back(Vector3(-4.22834f, 7.77581f, -7.22465f));
  points.push_back(Vector3(5.24277f, 3.94513f, -5.98987f));
  points.push_back(Vector3(-8.15241f, 4.57625f, 6.64663f));
  points.push_back(Vector3(-7.25272f, 8.27815f, -2.1305f));
  points.push_back(Vector3(-2.50771f, -7.40104f, -2.15979f));
  points.push_back(Vector3(2.96487f, -2.54067f, -2.86538f));
  points.push_back(Vector3(0.343333f, -1.11545f, 4.13862f));
  points.push_back(Vector3(-0.399487f, 7.97235f, 3.30302f));
  points.push_back(Vector3(-8.17743f, 5.17808f, -8.9874f));
  points.push_back(Vector3(-2.12989f, 8.0285f, 3.90545f));
  points.push_back(Vector3(-8.41487f, 9.51781f, 2.09265f));
  points.push_back(Vector3(7.39128f, 6.01062f, 5.8562f));
  points.push_back(Vector3(-8.53572f, -7.56462f, 6.43178f));
  points.push_back(Vector3(-7.19352f, 1.3187f, 4.70077f));
  points.push_back(Vector3(2.32337f, -7.4163f, 3.10892f));
  points.push_back(Vector3(5.5327f, -7.49748f, -9.85046f));
  points.push_back(Vector3(7.70074f, -4.9144f, 8.27876f));
  points.push_back(Vector3(6.27613f, -1.3126f, -5.15122f));
  points.push_back(Vector3(-1.64464f, 5.32762f, 1.53966f));
  points.push_back(Vector3(2.72011f, -3.8786f, -4.10077f));
  points.push_back(Vector3(-5.80981f, 3.73882f, -0.0570696f));
  points.push_back(Vector3(-7.56706f, -5.30686f, 9.6118f));
  points.push_back(Vector3(7.09464f, -4.07025f, -8.42158f));
  points.push_back(Vector3(-9.85168f, -8.05841f, 1.89306f));
  points.push_back(Vector3(-7.47429f, 9.74303f, 9.01425f));
  points.push_back(Vector3(-6.37989f, -3.01492f, -7.99188f));
  points.push_back(Vector3(-8.42219f, 8.97763f, 8.36482f));
  points.push_back(Vector3(5.71276f, 6.34999f, -1.23447f));
  points.push_back(Vector3(-8.58211f, -4.8796f, -5.04013f));
  points.push_back(Vector3(4.82101f, -9.55016f, 7.87652f));
  points.push_back(Vector3(2.80374f, -4.03424f, -6.03504f));
  points.push_back(Vector3(3.55205f, 5.90014f, 9.93347f));
  points.push_back(Vector3(1.39134f, -4.01532f, -3.61675f));
  points.push_back(Vector3(-0.604572f, -2.50587f, -7.47429f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest15(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.59777f, 1.16977f, -5.38682f));
  points.push_back(Vector3(2.03284f, -8.44722f, -7.42912f));
  points.push_back(Vector3(-3.95306f, -9.76134f, -8.82565f));
  points.push_back(Vector3(-4.28755f, -3.57952f, -7.74102f));
  points.push_back(Vector3(-1.92785f, 8.99655f, -3.91095f));
  points.push_back(Vector3(-9.63988f, 5.4564f, 2.75735f));
  points.push_back(Vector3(4.1319f, 7.04093f, 6.62282f));
  points.push_back(Vector3(4.73983f, 4.43892f, -0.727256f));
  points.push_back(Vector3(-5.2739f, -6.74123f, -1.28819f));
  points.push_back(Vector3(1.99988f, -5.21226f, -6.30848f));
  points.push_back(Vector3(-0.497147f, 1.52074f, 6.05091f));
  points.push_back(Vector3(3.90728f, -3.58013f, 9.37498f));
  points.push_back(Vector3(2.81045f, 4.2674f, 8.6169f));
  points.push_back(Vector3(-2.63466f, -8.14936f, -2.17139f));
  points.push_back(Vector3(6.70156f, 4.34309f, -5.39415f));
  points.push_back(Vector3(-3.64299f, -2.81716f, -4.63912f));
  points.push_back(Vector3(-7.83196f, -2.2074f, -7.42119f));
  points.push_back(Vector3(3.85418f, 1.28086f, -9.21751f));
  points.push_back(Vector3(0.315867f, -2.5663f, -0.572222f));
  points.push_back(Vector3(-8.08832f, -6.45802f, -2.04505f));
  points.push_back(Vector3(7.14835f, -8.75057f, -3.02103f));
  points.push_back(Vector3(-3.54228f, 5.70666f, -8.15363f));
  points.push_back(Vector3(-9.06247f, -6.38051f, -1.76061f));
  points.push_back(Vector3(-1.2009f, 6.62587f, 6.33778f));
  points.push_back(Vector3(-7.50175f, 3.5081f, -4.13739f));
  points.push_back(Vector3(-8.92514f, -6.6747f, -1.23875f));
  points.push_back(Vector3(8.34223f, 4.58235f, 2.97769f));
  points.push_back(Vector3(-9.74059f, -0.448927f, -7.36869f));
  points.push_back(Vector3(-2.57179f, 0.210883f, 2.48512f));
  points.push_back(Vector3(7.38456f, -3.23099f, 8.623f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest16(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.30723f, -1.02512f, 6.51357f));
  points.push_back(Vector3(6.34693f, -9.30174f, 2.48695f));
  points.push_back(Vector3(-6.59841f, 9.38597f, 2.54433f));
  points.push_back(Vector3(7.85028f, 3.24076f, -3.81573f));
  points.push_back(Vector3(-9.10337f, 3.4611f, -6.33778f));
  points.push_back(Vector3(-4.61959f, -4.75692f, 4.65377f));
  points.push_back(Vector3(7.26981f, 3.35551f, 3.87371f));
  points.push_back(Vector3(4.26679f, 2.43019f, 4.35286f));
  points.push_back(Vector3(-3.98358f, -1.27842f, -2.45521f));
  points.push_back(Vector3(-9.83032f, 5.2739f, -9.76806f));
  points.push_back(Vector3(6.92129f, 5.0444f, 7.4633f));
  points.push_back(Vector3(-4.22956f, -3.62957f, -8.64559f));
  points.push_back(Vector3(6.00085f, 3.41777f, -3.34147f));
  points.push_back(Vector3(1.77648f, -2.05176f, 6.72353f));
  points.push_back(Vector3(2.93008f, -6.49892f, -6.14856f));
  points.push_back(Vector3(-2.3075f, -1.76183f, -9.84741f));
  points.push_back(Vector3(-5.51012f, 9.03989f, 9.29869f));
  points.push_back(Vector3(7.02445f, -2.33558f, 6.31336f));
  points.push_back(Vector3(-7.40593f, 5.26109f, -1.84729f));
  points.push_back(Vector3(0.541704f, -1.04038f, -9.38902f));
  points.push_back(Vector3(-6.04785f, 2.0011f, -5.23545f));
  points.push_back(Vector3(2.37709f, 1.93701f, 5.74572f));
  points.push_back(Vector3(7.82342f, 8.17805f, -3.95001f));
  points.push_back(Vector3(9.52147f, -3.84259f, -9.83215f));
  points.push_back(Vector3(-8.83114f, -5.31541f, 7.73675f));
  points.push_back(Vector3(-1.68126f, 5.74999f, -9.2407f));
  points.push_back(Vector3(9.31639f, -3.60454f, 6.39393f));
  points.push_back(Vector3(-5.75671f, -7.49565f, -3.73882f));
  points.push_back(Vector3(7.4456f, 2.30384f, -4.81613f));
  points.push_back(Vector3(6.11805f, 8.76278f, -8.01996f));
  points.push_back(Vector3(6.40248f, 8.32209f, 4.76974f));
  points.push_back(Vector3(5.51805f, -7.12821f, -7.60552f));
  points.push_back(Vector3(7.92718f, -7.54082f, -4.80819f));
  points.push_back(Vector3(-1.14658f, -0.261544f, 9.12107f));
  points.push_back(Vector3(-8.07733f, -0.511795f, -7.57439f));
  points.push_back(Vector3(6.07654f, -0.362255f, 9.70458f));
  points.push_back(Vector3(-5.61144f, 4.26862f, 7.07694f));
  points.push_back(Vector3(-1.43223f, 2.57973f, -9.61242f));
  points.push_back(Vector3(-8.47774f, -7.83441f, -5.07981f));
  points.push_back(Vector3(-7.87408f, -4.46333f, -4.08673f));
  points.push_back(Vector3(5.87817f, 3.94086f, -7.83746f));
  points.push_back(Vector3(-8.56929f, -1.66417f, 3.95123f));
  points.push_back(Vector3(-3.26334f, -6.38295f, -5.12803f));
  points.push_back(Vector3(-7.4041f, -6.57643f, 3.54289f));
  points.push_back(Vector3(1.58238f, -6.33168f, -5.39659f));
  points.push_back(Vector3(2.78787f, 7.56462f, 8.36299f));
  points.push_back(Vector3(1.2363f, 4.85031f, -6.80898f));
  points.push_back(Vector3(2.95022f, 2.32521f, 9.2523f));
  points.push_back(Vector3(-9.70031f, 0.719932f, 1.61107f));
  points.push_back(Vector3(-6.03931f, 7.41874f, -1.20701f));
  points.push_back(Vector3(9.61486f, -8.23908f, 3.15714f));
  points.push_back(Vector3(0.450758f, 9.15586f, 6.19373f));
  points.push_back(Vector3(0.886563f, 3.596f, -7.52373f));
  points.push_back(Vector3(-7.3101f, 7.83685f, -4.03363f));
  points.push_back(Vector3(-1.91076f, 0.531327f, -8.27631f));
  points.push_back(Vector3(-2.26112f, 5.47472f, 1.24363f));
  points.push_back(Vector3(-1.94617f, 2.13477f, -4.24177f));
  points.push_back(Vector3(-0.925626f, 1.20518f, -5.33799f));
  points.push_back(Vector3(-3.5081f, 9.15708f, -7.57012f));
  points.push_back(Vector3(1.61168f, -1.34678f, -1.00436f));
  points.push_back(Vector3(-2.10547f, 8.44172f, 4.00372f));
  points.push_back(Vector3(-1.09897f, 9.88098f, -1.3358f));
  points.push_back(Vector3(-9.07895f, -3.01065f, 4.28205f));
  points.push_back(Vector3(-6.13025f, -3.16507f, 4.38459f));
  points.push_back(Vector3(7.50786f, 5.50401f, 5.3856f));
  points.push_back(Vector3(6.23035f, 5.92883f, -0.968352f));
  points.push_back(Vector3(-3.56548f, 4.15754f, 0.989105f));
  points.push_back(Vector3(1.10935f, 7.05863f, 5.81896f));
  points.push_back(Vector3(3.10343f, -9.61547f, 1.63427f));
  points.push_back(Vector3(7.11478f, 7.47124f, 2.5602f));
  points.push_back(Vector3(-0.842006f, 2.7427f, 4.9266f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest17(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.08994f, -5.95202f, -5.01328f));
  points.push_back(Vector3(7.23869f, -3.09061f, 3.72601f));
  points.push_back(Vector3(0.467849f, -5.36119f, 1.03305f));
  points.push_back(Vector3(-1.17038f, -6.59963f, -0.885342f));
  points.push_back(Vector3(3.75896f, 4.26069f, -9.93103f));
  points.push_back(Vector3(8.85495f, -0.600299f, -9.54772f));
  points.push_back(Vector3(9.06491f, 8.41243f, 3.32804f));
  points.push_back(Vector3(-5.81286f, 1.34129f, -8.97824f));
  points.push_back(Vector3(7.528f, -5.5565f, -4.83322f));
  points.push_back(Vector3(6.27003f, -9.9115f, 6.41652f));
  points.push_back(Vector3(6.56911f, -8.764f, -5.72863f));
  points.push_back(Vector3(6.81936f, -4.07697f, 3.24381f));
  points.push_back(Vector3(2.76589f, -6.39454f, 1.29307f));
  points.push_back(Vector3(2.32948f, 2.77444f, -6.77358f));
  points.push_back(Vector3(9.15586f, 1.5714f, 7.53594f));
  points.push_back(Vector3(-1.44688f, -6.86453f, -6.61306f));
  points.push_back(Vector3(9.92248f, -9.41343f, 1.36998f));
  points.push_back(Vector3(9.93957f, -6.26881f, 7.08609f));
  points.push_back(Vector3(3.13089f, 5.7622f, -1.70324f));
  points.push_back(Vector3(-8.76888f, -4.66659f, 0.745567f));
  points.push_back(Vector3(2.04627f, 3.45256f, -0.450148f));
  points.push_back(Vector3(-8.40938f, 0.628986f, 9.5465f));
  points.push_back(Vector3(-9.84497f, 9.86938f, 5.23789f));
  points.push_back(Vector3(8.211f, 4.23322f, -5.1915f));
  points.push_back(Vector3(-3.24809f, -8.88852f, -6.13819f));
  points.push_back(Vector3(-1.06784f, 1.32725f, -1.37852f));
  points.push_back(Vector3(-8.58699f, -5.3325f, 3.05338f));
  points.push_back(Vector3(4.34126f, 8.47713f, 0.0674459f));
  points.push_back(Vector3(-0.693075f, -8.46248f, -0.951262f));
  points.push_back(Vector3(-8.2519f, -5.57115f, -5.37645f));
  points.push_back(Vector3(7.5988f, 3.18461f, -2.65847f));
  points.push_back(Vector3(8.79574f, -7.35282f, -3.52153f));
  points.push_back(Vector3(-1.26194f, 0.9653f, 6.47755f));
  points.push_back(Vector3(5.7329f, -6.53066f, 5.10361f));
  points.push_back(Vector3(1.59703f, 0.148015f, 3.75164f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest18(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.61425f, 8.6877f, 7.38639f));
  points.push_back(Vector3(4.53658f, 1.1887f, -6.60268f));
  points.push_back(Vector3(0.84933f, 4.5323f, -9.44884f));
  points.push_back(Vector3(5.7329f, -2.85745f, -7.95587f));
  points.push_back(Vector3(9.97253f, 8.20368f, 7.72942f));
  points.push_back(Vector3(5.70177f, -5.4912f, -7.20939f));
  points.push_back(Vector3(-4.80697f, -7.82586f, -9.1174f));
  points.push_back(Vector3(9.14975f, -8.8757f, 5.02182f));
  points.push_back(Vector3(3.42265f, -0.738853f, -5.33372f));
  points.push_back(Vector3(1.55248f, 5.99414f, -5.8446f));
  points.push_back(Vector3(4.85031f, -1.68615f, -1.97241f));
  points.push_back(Vector3(-1.67455f, 9.84741f, -4.15876f));
  points.push_back(Vector3(-7.2277f, -2.53578f, 6.25843f));
  points.push_back(Vector3(-6.71194f, -4.09955f, -4.85092f));
  points.push_back(Vector3(-8.4344f, 3.56731f, 2.59255f));
  points.push_back(Vector3(-5.90808f, 2.87881f, 9.61974f));
  points.push_back(Vector3(-8.78109f, 7.58782f, 5.08774f));
  points.push_back(Vector3(-7.55303f, 1.75329f, -3.21879f));
  points.push_back(Vector3(1.56102f, -8.4753f, -2.96854f));
  points.push_back(Vector3(-0.615558f, -9.49461f, 8.22077f));
  points.push_back(Vector3(-5.00595f, 5.45518f, 0.113834f));
  points.push_back(Vector3(-7.15445f, -9.97742f, 5.88f));
  points.push_back(Vector3(5.62914f, 5.97278f, -8.49055f));
  points.push_back(Vector3(9.17051f, 1.44566f, -5.3795f));
  points.push_back(Vector3(-2.22327f, -7.78985f, -8.62362f));
  points.push_back(Vector3(-6.03442f, -6.53371f, 0.569781f));
  points.push_back(Vector3(-9.7943f, -4.83261f, 8.54427f));
  points.push_back(Vector3(4.0141f, -0.336619f, 9.96704f));
  points.push_back(Vector3(7.01651f, 2.83547f, -8.07428f));
  points.push_back(Vector3(-7.34123f, 3.50871f, -9.36949f));
  points.push_back(Vector3(3.79559f, -9.92431f, -4.185f));
  points.push_back(Vector3(9.14365f, -5.34227f, 0.202948f));
  points.push_back(Vector3(-8.44844f, 0.808435f, -8.64193f));
  points.push_back(Vector3(-9.94873f, -2.96426f, -5.38621f));
  points.push_back(Vector3(-6.88345f, -6.58193f, 6.51723f));
  points.push_back(Vector3(-9.09543f, -0.393384f, -0.856044f));
  points.push_back(Vector3(-0.115055f, 0.76632f, -4.67818f));
  points.push_back(Vector3(-9.48485f, 6.97867f, 5.59069f));
  points.push_back(Vector3(-6.64174f, 6.41835f, 6.61977f));
  points.push_back(Vector3(-7.52678f, -8.26472f, 4.87289f));
  points.push_back(Vector3(-1.49693f, -8.94833f, 5.38072f));
  points.push_back(Vector3(-0.415967f, -3.94024f, 7.41264f));
  points.push_back(Vector3(6.9042f, -9.88464f, -1.57994f));
  points.push_back(Vector3(0.694906f, -0.715049f, -3.67351f));
  points.push_back(Vector3(9.60875f, -1.98218f, -6.40004f));
  points.push_back(Vector3(-2.3075f, 3.0839f, -6.65273f));
  points.push_back(Vector3(-5.08591f, 8.13044f, -0.237129f));
  points.push_back(Vector3(5.93738f, 9.46104f, 6.9573f));
  points.push_back(Vector3(-2.36122f, 3.96344f, -3.76385f));
  points.push_back(Vector3(-3.39091f, 1.13254f, 8.9819f));
  points.push_back(Vector3(-3.86883f, 7.74224f, 8.28913f));
  points.push_back(Vector3(6.82546f, 1.73132f, 2.33619f));
  points.push_back(Vector3(3.9555f, 0.579547f, 0.901212f));
  points.push_back(Vector3(-4.55977f, -2.94046f, -8.75362f));
  points.push_back(Vector3(-2.71462f, 6.16871f, -9.88891f));
  points.push_back(Vector3(1.73193f, 0.84994f, -1.4182f));
  points.push_back(Vector3(-0.936003f, 9.77722f, -8.41914f));
  points.push_back(Vector3(3.07779f, -8.36055f, 5.4619f));
  points.push_back(Vector3(9.48424f, -1.0886f, 2.27027f));
  points.push_back(Vector3(-1.09775f, -6.0155f, 8.47652f));
  points.push_back(Vector3(-8.24702f, -6.23035f, 5.87939f));
  points.push_back(Vector3(3.9671f, 9.76623f, -7.74834f));
  points.push_back(Vector3(-5.05905f, -2.95145f, 8.35505f));
  points.push_back(Vector3(7.08792f, 6.3213f, -7.84051f));
  points.push_back(Vector3(4.52437f, 6.29688f, 8.86166f));
  points.push_back(Vector3(-5.92517f, 0.0546281f, 6.22913f));
  points.push_back(Vector3(-1.55492f, -9.65148f, -3.3311f));
  points.push_back(Vector3(-1.44261f, -0.48555f, -0.735801f));
  points.push_back(Vector3(-5.31907f, 6.845f, -2.12378f));
  points.push_back(Vector3(3.92193f, -6.76077f, -1.69652f));
  points.push_back(Vector3(7.91864f, 3.0784f, 0.301828f));
  points.push_back(Vector3(6.37562f, 7.37236f, -0.627155f));
  points.push_back(Vector3(-9.54161f, 9.7589f, 2.7311f));
  points.push_back(Vector3(-4.43892f, -1.26438f, 3.50383f));
  points.push_back(Vector3(-1.53722f, -0.621052f, 8.49666f));
  points.push_back(Vector3(7.80389f, -6.8627f, 7.66839f));
  points.push_back(Vector3(1.57018f, -9.89196f, -4.41023f));
  points.push_back(Vector3(-9.61974f, 8.73592f, 6.17908f));
  points.push_back(Vector3(4.24665f, 5.09445f, 8.67672f));
  points.push_back(Vector3(-4.28327f, 2.74758f, 2.65786f));
  points.push_back(Vector3(-6.46046f, -1.8131f, -5.02426f));
  points.push_back(Vector3(-5.40086f, 9.22483f, 4.45906f));
  points.push_back(Vector3(-7.37419f, 2.90933f, 8.51619f));
  points.push_back(Vector3(9.89807f, -1.55553f, 2.83975f));
  points.push_back(Vector3(5.20005f, 4.5201f, -1.75146f));
  points.push_back(Vector3(-0.669271f, 7.28019f, 5.85009f));
  points.push_back(Vector3(4.86618f, 7.69524f, -2.58217f));
  points.push_back(Vector3(-9.90722f, 7.11356f, -0.809046f));
  points.push_back(Vector3(-1.27293f, 7.25455f, 6.93472f));
  points.push_back(Vector3(2.0951f, -5.95874f, -4.16791f));
  points.push_back(Vector3(-2.1659f, -1.08615f, -3.20963f));
  points.push_back(Vector3(2.69814f, 7.71966f, -9.65087f));
  points.push_back(Vector3(1.59337f, 3.80718f, -0.71749f));
  points.push_back(Vector3(6.65273f, -7.28813f, -8.65474f));
  points.push_back(Vector3(-8.94772f, -3.02408f, -1.5244f));
  points.push_back(Vector3(2.9545f, -7.77398f, -2.62978f));
  points.push_back(Vector3(9.80773f, -1.35655f, -5.57787f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest19(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.20673f, 0.263985f, 5.20432f));
  points.push_back(Vector3(-6.38478f, 5.82385f, 5.45762f));
  points.push_back(Vector3(2.0304f, 3.14554f, 5.53148f));
  points.push_back(Vector3(-3.52031f, -6.59169f, -8.9758f));
  points.push_back(Vector3(9.79553f, -1.84912f, -9.48668f));
  points.push_back(Vector3(-3.17301f, -9.39818f, -7.62932f));
  points.push_back(Vector3(4.06476f, 9.14792f, 9.9176f));
  points.push_back(Vector3(0.0125126f, 1.13681f, 7.669f));
  points.push_back(Vector3(-4.03668f, 4.58052f, -3.30607f));
  points.push_back(Vector3(1.05991f, -7.95648f, -1.75268f));
  points.push_back(Vector3(-2.01819f, 6.31031f, 1.02451f));
  points.push_back(Vector3(0.89816f, 9.88403f, 5.14206f));
  points.push_back(Vector3(-1.3889f, -7.19108f, -0.606403f));
  points.push_back(Vector3(3.11014f, -1.46458f, -8.41487f));
  points.push_back(Vector3(7.30155f, 7.03177f, 2.78237f));
  points.push_back(Vector3(-6.02405f, 5.24155f, 6.34999f));
  points.push_back(Vector3(-0.0186163f, -6.79495f, 6.2096f));
  points.push_back(Vector3(-5.9209f, 5.08591f, -7.57195f));
  points.push_back(Vector3(6.68691f, -7.06351f, 3.46965f));
  points.push_back(Vector3(4.95102f, 8.48506f, 2.29957f));
  points.push_back(Vector3(-7.44377f, 1.82775f, -1.55187f));
  points.push_back(Vector3(-8.39473f, 4.12214f, -2.52846f));
  points.push_back(Vector3(-5.87146f, -4.17585f, 0.375683f));
  points.push_back(Vector3(-6.10584f, -6.43422f, -1.37669f));
  points.push_back(Vector3(6.96524f, -5.79638f, -2.71157f));
  points.push_back(Vector3(-1.14414f, -3.98724f, 5.98682f));
  points.push_back(Vector3(0.671102f, 5.99292f, 2.32093f));
  points.push_back(Vector3(5.19639f, 4.76791f, 0.122379f));
  points.push_back(Vector3(5.86535f, 1.1771f, 3.74615f));
  points.push_back(Vector3(2.15369f, 3.69793f, -6.55873f));
  points.push_back(Vector3(-2.95389f, 9.82788f, 4.39863f));
  points.push_back(Vector3(0.83346f, 4.39436f, 5.18662f));
  points.push_back(Vector3(8.1811f, -6.29994f, -8.20856f));
  points.push_back(Vector3(9.1052f, 5.79028f, 9.69359f));
  points.push_back(Vector3(6.60451f, 8.51802f, -0.679037f));
  points.push_back(Vector3(3.8316f, 9.87976f, -8.0285f));
  points.push_back(Vector3(-1.93518f, -6.55568f, 4.01471f));
  points.push_back(Vector3(-0.880459f, -7.47124f, 8.62239f));
  points.push_back(Vector3(3.90423f, -0.217597f, -0.260323f));
  points.push_back(Vector3(8.80306f, 9.68261f, 8.21528f));
  points.push_back(Vector3(2.96304f, -3.88775f, 9.1998f));
  points.push_back(Vector3(8.18049f, -1.03793f, 6.09058f));
  points.push_back(Vector3(8.34529f, -5.51927f, -4.07941f));
  points.push_back(Vector3(6.42445f, -2.65053f, 6.55141f));
  points.push_back(Vector3(-4.84787f, 4.31318f, -8.81283f));
  points.push_back(Vector3(-0.248726f, -0.270699f, -6.90847f));
  points.push_back(Vector3(-7.7929f, 9.97742f, 3.1431f));
  points.push_back(Vector3(-1.26194f, -6.89016f, -2.78054f));
  points.push_back(Vector3(1.13681f, -3.1138f, 8.40938f));
  points.push_back(Vector3(3.68877f, -0.179754f, 0.974456f));
  points.push_back(Vector3(-7.51091f, -7.85882f, 3.20231f));
  points.push_back(Vector3(-7.85211f, -7.60857f, 0.0192267f));
  points.push_back(Vector3(-6.73757f, -8.45149f, -6.5508f));
  points.push_back(Vector3(-4.96017f, 5.68651f, 5.61022f));
  points.push_back(Vector3(5.90503f, 7.85638f, -5.61449f));
  points.push_back(Vector3(4.98459f, -9.37742f, 7.40715f));
  points.push_back(Vector3(7.94122f, 7.73064f, -7.9693f));
  points.push_back(Vector3(-5.40452f, -8.92331f, 7.38029f));
  points.push_back(Vector3(-3.58257f, -0.0930815f, -5.6975f));
  points.push_back(Vector3(-3.48308f, 3.69793f, 0.596637f));
  points.push_back(Vector3(4.84237f, 6.4861f, -9.21506f));
  points.push_back(Vector3(3.0784f, 1.98035f, -6.14246f));
  points.push_back(Vector3(-5.30686f, 6.13025f, 9.94324f));
  points.push_back(Vector3(-5.71642f, -6.51784f, -9.45921f));
  points.push_back(Vector3(-8.55281f, -5.65172f, -6.81387f));
  points.push_back(Vector3(-9.16379f, -4.96323f, 2.06519f));
  points.push_back(Vector3(-1.16001f, -5.30686f, -0.66805f));
  points.push_back(Vector3(6.62038f, -2.26478f, 5.67675f));
  points.push_back(Vector3(7.32048f, 8.00836f, -6.97439f));
  points.push_back(Vector3(-5.0792f, -6.19251f, 7.16788f));
  points.push_back(Vector3(-4.19111f, -2.61513f, -0.83346f));
  points.push_back(Vector3(-2.74453f, -6.18763f, -1.70324f));
  points.push_back(Vector3(-7.51518f, 6.67715f, 4.80148f));
  points.push_back(Vector3(5.42406f, -2.7311f, -5.50462f));
  points.push_back(Vector3(-7.1569f, -7.21549f, 2.79885f));
  points.push_back(Vector3(8.85556f, -4.4554f, -8.56563f));
  points.push_back(Vector3(-5.72069f, 9.03561f, 0.394604f));
  points.push_back(Vector3(-7.0574f, 4.90341f, 1.75817f));
  points.push_back(Vector3(-1.67211f, 1.19297f, 2.95145f));
  points.push_back(Vector3(-7.61589f, -7.35466f, -1.87353f));
  points.push_back(Vector3(-2.93985f, 1.61596f, -8.59066f));
  points.push_back(Vector3(-0.940275f, -7.22282f, 8.3282f));
  points.push_back(Vector3(1.44017f, 3.19254f, 3.52947f));
  points.push_back(Vector3(9.1644f, -7.96319f, -5.06272f));
  points.push_back(Vector3(9.13205f, -4.49141f, 6.55629f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest20(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.17072f, -1.65075f, 1.4658f));
  points.push_back(Vector3(-2.01697f, -0.857265f, 8.59798f));
  points.push_back(Vector3(-3.77544f, -9.01486f, 6.9335f));
  points.push_back(Vector3(8.93551f, -8.2165f, -8.49178f));
  points.push_back(Vector3(-6.97989f, -0.0656148f, -5.67614f));
  points.push_back(Vector3(7.30949f, 5.23362f, -5.20371f));
  points.push_back(Vector3(4.17768f, 7.59758f, -4.66842f));
  points.push_back(Vector3(-9.90905f, 6.09424f, 4.73373f));
  points.push_back(Vector3(-3.60332f, 6.07593f, -9.20347f));
  points.push_back(Vector3(2.06702f, 1.82958f, 2.20435f));
  points.push_back(Vector3(-9.04904f, -1.47435f, -5.92517f));
  points.push_back(Vector3(3.45683f, 4.67269f, -9.40916f));
  points.push_back(Vector3(1.19602f, 3.11563f, 9.70031f));
  points.push_back(Vector3(2.28431f, 9.42442f, -2.38685f));
  points.push_back(Vector3(1.35716f, 3.77728f, 9.81323f));
  points.push_back(Vector3(-0.927458f, -2.57363f, 9.27f));
  points.push_back(Vector3(7.11722f, 1.16733f, 3.06558f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest21(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.68343f, -7.64946f, -0.714438f));
  points.push_back(Vector3(3.40312f, 1.19541f, -7.35038f));
  points.push_back(Vector3(8.0047f, -9.8413f, -3.08084f));
  points.push_back(Vector3(-6.67715f, -5.01572f, 4.59944f));
  points.push_back(Vector3(0.308542f, 4.47188f, -6.74612f));
  points.push_back(Vector3(7.65069f, -1.44627f, 4.60921f));
  points.push_back(Vector3(-2.9899f, -2.49062f, 4.69222f));
  points.push_back(Vector3(1.74596f, -9.13694f, 4.42183f));
  points.push_back(Vector3(5.76952f, -8.60836f, 8.33125f));
  points.push_back(Vector3(-2.31483f, -5.67003f, 4.59578f));
  points.push_back(Vector3(0.22187f, 3.00882f, 8.84884f));
  points.push_back(Vector3(9.14914f, 3.5258f, -1.66112f));
  points.push_back(Vector3(-1.26926f, -2.92337f, -8.56624f));
  points.push_back(Vector3(6.30116f, -0.48677f, 1.54515f));
  points.push_back(Vector3(-4.88144f, -8.64559f, -6.12049f));
  points.push_back(Vector3(-3.68999f, -2.10242f, -0.191961f));
  points.push_back(Vector3(4.1258f, 0.821863f, -7.59819f));
  points.push_back(Vector3(-9.19309f, -8.30866f, 4.12885f));
  points.push_back(Vector3(1.38218f, -3.57524f, 9.39268f));
  points.push_back(Vector3(-9.31333f, -7.2338f, -1.02206f));
  points.push_back(Vector3(1.96509f, 1.21433f, 9.60692f));
  points.push_back(Vector3(3.69671f, 0.567339f, -8.29402f));
  points.push_back(Vector3(5.52904f, -5.13169f, 6.83645f));
  points.push_back(Vector3(3.74004f, 6.31886f, -6.41469f));
  points.push_back(Vector3(-7.84539f, 9.19492f, 8.26167f));
  points.push_back(Vector3(5.21775f, 7.72881f, 2.50954f));
  points.push_back(Vector3(-6.12964f, -5.26414f, -8.88729f));
  points.push_back(Vector3(3.60637f, -4.38215f, -1.98401f));
  points.push_back(Vector3(4.81002f, 4.60005f, 8.30012f));
  points.push_back(Vector3(7.23991f, -7.44255f, 3.42509f));
  points.push_back(Vector3(0.662557f, -1.47679f, 8.94345f));
  points.push_back(Vector3(-2.50099f, 6.90542f, -0.0985748f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest22(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.64415f, -9.7174f, 3.83465f));
  points.push_back(Vector3(4.23017f, 6.75649f, -2.55287f));
  points.push_back(Vector3(-7.64641f, -8.66817f, -0.616169f));
  points.push_back(Vector3(2.02002f, -1.50304f, -8.35933f));
  points.push_back(Vector3(7.28507f, -3.28288f, 4.55367f));
  points.push_back(Vector3(6.96707f, 8.98312f, 4.1026f));
  points.push_back(Vector3(-1.56774f, -3.20048f, 6.37074f));
  points.push_back(Vector3(7.41752f, -6.34083f, 0.801111f));
  points.push_back(Vector3(9.72838f, -1.98523f, -0.41963f));
  points.push_back(Vector3(-9.28709f, -5.49425f, 7.52495f));
  points.push_back(Vector3(-2.62429f, 4.80148f, -9.51476f));
  points.push_back(Vector3(2.85989f, 7.52373f, 7.96686f));
  points.push_back(Vector3(-6.04907f, -7.79107f, 4.33638f));
  points.push_back(Vector3(-9.35728f, 3.49345f, 0.126041f));
  points.push_back(Vector3(3.18644f, 9.61242f, -9.93347f));
  points.push_back(Vector3(-0.154729f, -3.94208f, 3.85296f));
  points.push_back(Vector3(1.93945f, 0.952483f, 1.04099f));
  points.push_back(Vector3(8.56014f, -4.8619f, 0.528275f));
  points.push_back(Vector3(1.39561f, 0.447096f, -9.96094f));
  points.push_back(Vector3(-4.10504f, -0.188299f, -2.53212f));
  points.push_back(Vector3(4.70626f, 7.09037f, 3.49223f));
  points.push_back(Vector3(6.07349f, 5.61571f, 7.19169f));
  points.push_back(Vector3(5.67553f, -0.86581f, 6.39271f));
  points.push_back(Vector3(8.6169f, -0.76632f, -2.34779f));
  points.push_back(Vector3(-4.8265f, 3.52824f, 7.96503f));
  points.push_back(Vector3(-0.614338f, 1.23142f, 6.46046f));
  points.push_back(Vector3(-8.79818f, 7.51579f, 1.48106f));
  points.push_back(Vector3(-2.69692f, 7.37358f, 2.47108f));
  points.push_back(Vector3(-2.50587f, -7.24235f, -7.87225f));
  points.push_back(Vector3(-9.95117f, 3.64666f, 4.39558f));
  points.push_back(Vector3(-3.34147f, 8.94833f, -2.97891f));
  points.push_back(Vector3(-8.55586f, 1.84484f, -9.16684f));
  points.push_back(Vector3(9.69726f, 6.4275f, -6.15833f));
  points.push_back(Vector3(-3.92254f, -5.95508f, 1.77221f));
  points.push_back(Vector3(-3.26029f, -1.7185f, 1.65563f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest23(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.04172f, -8.50459f, -3.3311f));
  points.push_back(Vector3(-0.27131f, 8.00226f, 1.24607f));
  points.push_back(Vector3(6.06067f, -8.24152f, 2.902f));
  points.push_back(Vector3(8.7701f, -8.76644f, -0.240181f));
  points.push_back(Vector3(8.05902f, 6.63869f, -4.85031f));
  points.push_back(Vector3(2.83059f, -7.75933f, 0.35371f));
  points.push_back(Vector3(-4.11847f, -6.98843f, -9.45311f));
  points.push_back(Vector3(0.959197f, 1.28513f, -6.22547f));
  points.push_back(Vector3(1.43834f, -3.56243f, 7.304f));
  points.push_back(Vector3(7.61284f, -3.53008f, 5.02609f));
  points.push_back(Vector3(-9.47203f, 0.856655f, -1.66051f));
  points.push_back(Vector3(3.56426f, -4.35896f, 3.8432f));
  points.push_back(Vector3(-7.12088f, -5.98621f, 8.36848f));
  points.push_back(Vector3(-5.4387f, -9.37437f, 1.26438f));
  points.push_back(Vector3(-5.43687f, 3.89874f, 3.57646f));
  points.push_back(Vector3(5.34837f, -3.95123f, -9.38719f));
  points.push_back(Vector3(-7.23075f, 1.20273f, 3.84442f));
  points.push_back(Vector3(4.15876f, -7.68548f, 9.09116f));
  points.push_back(Vector3(-0.604572f, 3.48735f, 5.48448f));
  points.push_back(Vector3(8.81466f, 4.44319f, 9.94995f));
  points.push_back(Vector3(-1.49266f, 0.835902f, -9.85534f));
  points.push_back(Vector3(2.42653f, 7.68059f, 7.44804f));
  points.push_back(Vector3(6.08203f, -7.18986f, 5.42589f));
  points.push_back(Vector3(-2.90384f, -0.227363f, 9.95911f));
  points.push_back(Vector3(0.917081f, 5.00412f, 7.32109f));
  points.push_back(Vector3(-9.74059f, 0.903653f, -6.80349f));
  points.push_back(Vector3(5.82018f, 2.91116f, 6.35426f));
  points.push_back(Vector3(3.0784f, 8.14081f, 8.06146f));
  points.push_back(Vector3(-9.45738f, 3.66314f, -9.27488f));
  points.push_back(Vector3(-4.07636f, -5.79089f, 8.60103f));
  points.push_back(Vector3(-4.98215f, 4.98886f, 3.41227f));
  points.push_back(Vector3(5.11399f, -6.85171f, 7.46941f));
  points.push_back(Vector3(5.70544f, 7.97601f, -1.49693f));
  points.push_back(Vector3(0.0918607f, -9.74548f, 1.65014f));
  points.push_back(Vector3(-8.19941f, 8.36665f, 7.52983f));
  points.push_back(Vector3(3.72356f, 3.30119f, 2.46071f));
  points.push_back(Vector3(-5.81286f, -7.25272f, 1.77343f));
  points.push_back(Vector3(-7.20511f, -1.2186f, -6.37806f));
  points.push_back(Vector3(-9.15403f, 3.49406f, -6.09241f));
  points.push_back(Vector3(3.64422f, 3.36528f, -8.18781f));
  points.push_back(Vector3(-9.57091f, -7.65618f, -5.61632f));
  points.push_back(Vector3(-8.33796f, -0.607624f, -1.7655f));
  points.push_back(Vector3(3.41044f, 9.36888f, -2.73782f));
  points.push_back(Vector3(-4.39802f, 6.54347f, 9.77538f));
  points.push_back(Vector3(0.105899f, -5.54247f, 9.10703f));
  points.push_back(Vector3(0.824305f, 2.34352f, 6.78457f));
  points.push_back(Vector3(-0.577105f, -5.25498f, 5.69811f));
  points.push_back(Vector3(2.18909f, -5.65661f, -6.0387f));
  points.push_back(Vector3(-6.03809f, 6.10096f, -2.83792f));
  points.push_back(Vector3(-0.144353f, -0.788903f, 3.63018f));
  points.push_back(Vector3(-1.46825f, -7.49504f, -4.91195f));
  points.push_back(Vector3(2.21839f, 1.02206f, -0.475173f));
  points.push_back(Vector3(2.78176f, -3.79986f, -2.07129f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest24(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.29319f, 4.89669f, 2.83792f));
  points.push_back(Vector3(9.15647f, -5.23301f, -0.736412f));
  points.push_back(Vector3(6.69973f, -3.12113f, -6.91092f));
  points.push_back(Vector3(1.583f, 2.60842f, -3.62774f));
  points.push_back(Vector3(5.48448f, -5.84521f, 8.47774f));
  points.push_back(Vector3(9.45738f, 9.82238f, 3.37504f));
  points.push_back(Vector3(-4.9089f, 3.86395f, -7.35466f));
  points.push_back(Vector3(-9.59166f, 6.58071f, -5.67797f));
  points.push_back(Vector3(-1.59276f, 5.97034f, 8.58516f));
  points.push_back(Vector3(0.561846f, 7.96869f, -2.67373f));
  points.push_back(Vector3(-0.257271f, -4.65011f, 6.98355f));
  points.push_back(Vector3(5.65416f, -7.87835f, 5.69628f));
  points.push_back(Vector3(-5.21653f, 1.87048f, -3.77789f));
  points.push_back(Vector3(0.343944f, -5.59496f, -0.932341f));
  points.push_back(Vector3(-3.82611f, 6.6802f, -5.63646f));
  points.push_back(Vector3(9.67528f, -9.24558f, -9.8236f));
  points.push_back(Vector3(2.82083f, 5.46922f, 5.85376f));
  points.push_back(Vector3(-0.494705f, 4.75143f, 8.56502f));
  points.push_back(Vector3(-5.99536f, -9.56969f, 2.74941f));
  points.push_back(Vector3(-8.49666f, 6.61733f, -8.37092f));
  points.push_back(Vector3(-7.91314f, -5.42894f, -5.47838f));
  points.push_back(Vector3(5.53758f, -9.34019f, -1.53356f));
  points.push_back(Vector3(2.46864f, 7.3693f, -5.562f));
  points.push_back(Vector3(0.445875f, -6.81021f, -4.57991f));
  points.push_back(Vector3(-0.949431f, -7.93023f, 6.6625f));
  points.push_back(Vector3(-4.21125f, -1.87353f, 6.67776f));
  points.push_back(Vector3(-9.81567f, -5.36668f, -0.976897f));
  points.push_back(Vector3(-5.2916f, 4.90707f, 1.09348f));
  points.push_back(Vector3(6.55568f, -4.99313f, 4.42305f));
  points.push_back(Vector3(-5.9978f, -4.63485f, 0.223701f));
  points.push_back(Vector3(-8.93368f, -4.48531f, 1.54027f));
  points.push_back(Vector3(4.4438f, 5.51866f, 4.7673f));
  points.push_back(Vector3(-5.87451f, -8.82992f, -4.63363f));
  points.push_back(Vector3(-5.2916f, -2.86599f, 9.78088f));
  points.push_back(Vector3(-1.76794f, 5.21836f, 2.69448f));
  points.push_back(Vector3(-1.41636f, 5.09384f, -4.3614f));
  points.push_back(Vector3(5.95752f, 2.60964f, -0.571001f));
  points.push_back(Vector3(9.84313f, 2.38014f, 4.24238f));
  points.push_back(Vector3(-2.19703f, -3.02713f, -1.97485f));
  points.push_back(Vector3(-5.16221f, 7.528f, 0.961028f));
  points.push_back(Vector3(-6.51418f, 5.43565f, 7.01651f));
  points.push_back(Vector3(1.96936f, -7.92413f, 4.70321f));
  points.push_back(Vector3(4.45662f, 2.86721f, -7.10746f));
  points.push_back(Vector3(2.22816f, 0.430006f, 3.87066f));
  points.push_back(Vector3(-0.600299f, 5.28916f, -9.89624f));
  points.push_back(Vector3(-1.52623f, 4.1319f, 7.22709f));
  points.push_back(Vector3(-9.38597f, -6.20777f, 0.165105f));
  points.push_back(Vector3(-4.45845f, 9.27366f, 8.44783f));
  points.push_back(Vector3(-0.0332652f, -2.15491f, -1.78137f));
  points.push_back(Vector3(-8.88668f, -7.75018f, -6.2157f));
  points.push_back(Vector3(-8.8641f, -7.14713f, -2.5309f));
  points.push_back(Vector3(-8.93002f, 7.6751f, -3.6314f));
  points.push_back(Vector3(-7.43461f, -6.26759f, 1.18503f));
  points.push_back(Vector3(-4.70748f, 5.59923f, 0.726035f));
  points.push_back(Vector3(-4.60128f, 6.63869f, -9.11252f));
  points.push_back(Vector3(3.01187f, 5.68468f, 9.5465f));
  points.push_back(Vector3(5.28123f, -2.75796f, -9.50621f));
  points.push_back(Vector3(-6.5624f, -3.81451f, 4.17096f));
  points.push_back(Vector3(8.62911f, 8.71334f, 1.98279f));
  points.push_back(Vector3(9.91699f, 7.95648f, 3.11014f));
  points.push_back(Vector3(-4.55367f, -1.8009f, 1.19114f));
  points.push_back(Vector3(-3.14798f, -9.2053f, -8.31721f));
  points.push_back(Vector3(-5.62548f, -0.285958f, 5.00595f));
  points.push_back(Vector3(-9.4586f, 3.67718f, 3.12174f));
  points.push_back(Vector3(-5.99353f, 6.37684f, 6.13697f));
  points.push_back(Vector3(-9.58129f, -5.62243f, -0.386059f));
  points.push_back(Vector3(-0.0204474f, -1.57811f, -8.81466f));
  points.push_back(Vector3(-1.50182f, 0.128483f, -6.61061f));
  points.push_back(Vector3(2.57729f, 7.81854f, 4.5323f));
  points.push_back(Vector3(-5.468f, 1.75451f, 5.48082f));
  points.push_back(Vector3(-3.05826f, 8.18232f, 6.95486f));
  points.push_back(Vector3(-4.93942f, 1.75878f, 5.75671f));
  points.push_back(Vector3(0.0704978f, -7.54509f, -3.4257f));
  points.push_back(Vector3(8.63216f, 4.5201f, -5.23667f));
  points.push_back(Vector3(-1.96875f, -6.94082f, 3.00455f));
  points.push_back(Vector3(9.5172f, 6.6332f, -1.75634f));
  points.push_back(Vector3(5.77197f, -7.61528f, 6.11927f));
  points.push_back(Vector3(-9.29014f, -9.98535f, -8.51253f));
  points.push_back(Vector3(3.03873f, 8.08588f, 1.02512f));
  points.push_back(Vector3(6.42994f, 2.14393f, -4.5793f));
  points.push_back(Vector3(-4.26923f, 0.187078f, 3.22794f));
  points.push_back(Vector3(-2.82571f, -0.758385f, -8.02973f));
  points.push_back(Vector3(-4.9675f, -2.01209f, -4.97299f));
  points.push_back(Vector3(9.19248f, -8.14447f, -4.62813f));
  points.push_back(Vector3(-0.645466f, 6.65761f, 8.47163f));
  points.push_back(Vector3(-2.56569f, 0.603961f, -8.89218f));
  points.push_back(Vector3(-0.99826f, 8.77133f, -5.90136f));
  points.push_back(Vector3(-0.760216f, -4.64339f, -2.35267f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest25(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.26228f, -3.42448f, -0.0918607f));
  points.push_back(Vector3(2.37709f, 9.54955f, -1.64953f));
  points.push_back(Vector3(8.83908f, -6.82791f, 3.35124f));
  points.push_back(Vector3(1.54942f, -4.06354f, -9.72838f));
  points.push_back(Vector3(-8.55525f, -4.62325f, -8.74691f));
  points.push_back(Vector3(0.522172f, -7.71294f, -2.51381f));
  points.push_back(Vector3(-7.22221f, 7.11478f, -5.17197f));
  points.push_back(Vector3(-4.55489f, 4.53536f, 7.79107f));
  points.push_back(Vector3(6.40126f, -4.41267f, -7.46574f));
  points.push_back(Vector3(-0.506912f, 1.2656f, 9.86999f));
  points.push_back(Vector3(6.69607f, 5.08713f, 2.94534f));
  points.push_back(Vector3(1.36265f, 6.87979f, 7.77581f));
  points.push_back(Vector3(3.4788f, -1.00009f, 1.13865f));
  points.push_back(Vector3(8.83969f, -7.29179f, 2.20801f));
  points.push_back(Vector3(-5.67431f, -5.68407f, 0.735191f));
  points.push_back(Vector3(6.04907f, -4.82406f, 6.25355f));
  points.push_back(Vector3(6.65944f, 7.48711f, -0.0106815f));
  points.push_back(Vector3(4.15632f, -3.26151f, 3.42265f));
  points.push_back(Vector3(1.04404f, -7.74285f, 5.08408f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest26(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.61608f, 2.12745f, -3.51726f));
  points.push_back(Vector3(9.84924f, -5.10666f, -8.9996f));
  points.push_back(Vector3(-1.05014f, 6.31886f, 0.473952f));
  points.push_back(Vector3(9.48546f, -2.76711f, -7.98273f));
  points.push_back(Vector3(-3.54045f, -1.8955f, -5.81591f));
  points.push_back(Vector3(-4.88083f, -1.85949f, 1.54454f));
  points.push_back(Vector3(-5.92456f, -2.18421f, 3.91522f));
  points.push_back(Vector3(-0.299387f, 1.9602f, 0.740074f));
  points.push_back(Vector3(-5.49058f, -7.48894f, 1.66051f));
  points.push_back(Vector3(-8.50398f, -0.105289f, 1.71361f));
  points.push_back(Vector3(3.01859f, 5.41307f, 9.52513f));
  points.push_back(Vector3(2.62795f, -0.974456f, -3.35063f));
  points.push_back(Vector3(-8.48262f, 9.11435f, 3.46355f));
  points.push_back(Vector3(7.77886f, -3.59355f, 4.81491f));
  points.push_back(Vector3(9.67406f, -4.02997f, -8.90988f));
  points.push_back(Vector3(3.80902f, 1.09104f, 3.90179f));
  points.push_back(Vector3(-1.39988f, -6.18824f, -5.84887f));
  points.push_back(Vector3(-6.47877f, 9.31272f, 5.03098f));
  points.push_back(Vector3(4.21674f, -9.21384f, -0.76754f));
  points.push_back(Vector3(-2.18177f, -4.87411f, -0.496536f));
  points.push_back(Vector3(0.975066f, -7.7691f, 3.00577f));
  points.push_back(Vector3(-7.60552f, 3.06253f, -7.36625f));
  points.push_back(Vector3(-5.03464f, -2.48329f, 3.16874f));
  points.push_back(Vector3(-9.53368f, -6.70156f, 8.15668f));
  points.push_back(Vector3(-9.06369f, -1.70141f, 5.81591f));
  points.push_back(Vector3(-5.67309f, 5.98437f, -1.70446f));
  points.push_back(Vector3(-7.06107f, 3.99091f, 6.74001f));
  points.push_back(Vector3(-1.76672f, -7.82281f, -7.86615f));
  points.push_back(Vector3(-4.2851f, -1.8363f, -9.3939f));
  points.push_back(Vector3(5.81835f, -3.14859f, 0.88168f));
  points.push_back(Vector3(5.98682f, 3.33415f, -9.43785f));
  points.push_back(Vector3(9.29685f, 7.13675f, -4.42183f));
  points.push_back(Vector3(2.0951f, 3.84991f, -5.80981f));
  points.push_back(Vector3(7.7868f, 8.83663f, 3.09122f));
  points.push_back(Vector3(9.3585f, 9.74242f, 2.19275f));
  points.push_back(Vector3(0.547197f, -1.17283f, -7.41813f));
  points.push_back(Vector3(9.66124f, 1.00375f, -3.58562f));
  points.push_back(Vector3(0.333567f, -7.27897f, 9.32615f));
  points.push_back(Vector3(9.60448f, -5.6975f, 6.17603f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest27(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.11335f, 8.59859f, -2.33497f));
  points.push_back(Vector3(3.90851f, 1.713f, -1.89856f));
  points.push_back(Vector3(-8.68465f, -0.827967f, -0.808435f));
  points.push_back(Vector3(0.113224f, 9.16623f, -7.71233f));
  points.push_back(Vector3(4.88266f, -7.1923f, 7.13004f));
  points.push_back(Vector3(-5.80309f, -0.0827052f, 0.926237f));
  points.push_back(Vector3(-3.41838f, 3.98846f, -2.61147f));
  points.push_back(Vector3(4.10688f, -8.14081f, 8.89401f));
  points.push_back(Vector3(-5.12803f, 1.8186f, 7.96258f));
  points.push_back(Vector3(-6.31031f, -1.29307f, 3.02408f));
  points.push_back(Vector3(4.06842f, -7.35038f, 0.657063f));
  points.push_back(Vector3(-1.31016f, -1.50182f, 7.14896f));
  points.push_back(Vector3(-2.41676f, 5.27573f, -9.25108f));
  points.push_back(Vector3(2.06458f, -5.25498f, -2.67495f));
  points.push_back(Vector3(-3.77606f, 4.08979f, 3.36161f));
  points.push_back(Vector3(-2.71706f, 9.27976f, -4.91562f));
  points.push_back(Vector3(-6.94266f, 0.661336f, 0.22187f));
  points.push_back(Vector3(3.59294f, 9.81262f, 4.68856f));
  points.push_back(Vector3(1.87231f, 7.64824f, 0.0454726f));
  points.push_back(Vector3(-1.44932f, -8.6755f, -8.01019f));
  points.push_back(Vector3(-8.5406f, 3.37077f, 2.52968f));
  points.push_back(Vector3(-7.1746f, -8.73592f, 0.0277718f));
  points.push_back(Vector3(-4.68184f, -6.74978f, -7.58965f));
  points.push_back(Vector3(-7.03787f, -3.50261f, 2.45949f));
  points.push_back(Vector3(8.45515f, 8.07611f, -1.35472f));
  points.push_back(Vector3(1.87292f, 7.68364f, -7.13797f));
  points.push_back(Vector3(-7.78253f, -8.69747f, 7.11966f));
  points.push_back(Vector3(-3.11014f, -3.39091f, -1.72277f));
  points.push_back(Vector3(-2.96548f, 0.755333f, 5.77929f));
  points.push_back(Vector3(3.66375f, -3.40007f, -8.35444f));
  points.push_back(Vector3(-5.92456f, 6.69485f, -8.71273f));
  points.push_back(Vector3(-6.37745f, -2.125f, 2.54372f));
  points.push_back(Vector3(-7.34123f, -9.23826f, -1.3242f));
  points.push_back(Vector3(-4.44319f, -8.83969f, -8.73653f));
  points.push_back(Vector3(3.25297f, 1.27903f, 2.55287f));
  points.push_back(Vector3(-9.33042f, 6.51234f, 0.389721f));
  points.push_back(Vector3(-1.40477f, 2.30567f, -7.33268f));
  points.push_back(Vector3(-2.3191f, 2.61513f, -6.92679f));
  points.push_back(Vector3(0.357372f, 9.19919f, 0.584429f));
  points.push_back(Vector3(-7.27714f, 7.33634f, -9.32493f));
  points.push_back(Vector3(8.33064f, -5.27879f, 0.360424f));
  points.push_back(Vector3(-9.63317f, 5.50096f, -3.14798f));
  points.push_back(Vector3(5.8916f, -0.554521f, -3.08451f));
  points.push_back(Vector3(-0.332957f, 7.24906f, 3.03934f));
  points.push_back(Vector3(-8.07672f, -9.09299f, 3.8316f));
  points.push_back(Vector3(5.07248f, 2.3954f, -5.9624f));
  points.push_back(Vector3(-1.96753f, -9.98535f, 9.96948f));
  points.push_back(Vector3(8.99594f, 5.47777f, -5.32701f));
  points.push_back(Vector3(3.18278f, 3.29936f, -5.79455f));
  points.push_back(Vector3(-6.85965f, -4.8851f, 1.63121f));
  points.push_back(Vector3(8.4228f, 8.04376f, 2.15552f));
  points.push_back(Vector3(-7.97967f, 2.44972f, -8.80367f));
  points.push_back(Vector3(-5.46617f, -3.24503f, 0.488601f));
  points.push_back(Vector3(6.798f, -0.765099f, 6.14185f));
  points.push_back(Vector3(7.83868f, 0.291452f, 5.91662f));
  points.push_back(Vector3(3.24686f, 9.17722f, 6.01184f));
  points.push_back(Vector3(-3.53618f, -2.26417f, -0.459914f));
  points.push_back(Vector3(-3.24931f, 8.80184f, -3.05887f));
  points.push_back(Vector3(3.62163f, 8.35872f, -4.41511f));
  points.push_back(Vector3(-7.72149f, 9.01853f, 2.50832f));
  points.push_back(Vector3(8.4051f, 9.14548f, 9.04416f));
  points.push_back(Vector3(0.752892f, 8.11945f, -1.58727f));
  points.push_back(Vector3(0.739464f, -7.00491f, -8.05353f));
  points.push_back(Vector3(-2.34779f, -6.29566f, -6.50746f));
  points.push_back(Vector3(-2.05786f, 0.210273f, -4.62813f));
  points.push_back(Vector3(7.53349f, -2.52113f, 0.257881f));
  points.push_back(Vector3(8.35627f, 1.89489f, -3.63506f));
  points.push_back(Vector3(-8.05597f, 5.49242f, 2.22266f));
  points.push_back(Vector3(-4.785f, -9.22361f, -1.80151f));
  points.push_back(Vector3(-9.55931f, 9.71007f, -4.65072f));
  points.push_back(Vector3(3.78521f, 5.33494f, 1.35716f));
  points.push_back(Vector3(-2.44484f, 7.32963f, -0.58504f));
  points.push_back(Vector3(-0.610065f, -0.610675f, 3.74981f));
  points.push_back(Vector3(-4.79781f, 4.42305f, 4.4908f));
  points.push_back(Vector3(-4.30158f, -5.95447f, -5.51256f));
  points.push_back(Vector3(2.52358f, -7.09952f, 0.608844f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest28(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.91659f, 4.79476f, 3.58501f));
  points.push_back(Vector3(5.01511f, 4.61959f, -7.76299f));
  points.push_back(Vector3(5.74084f, -0.801111f, -2.19214f));
  points.push_back(Vector3(-7.63665f, 5.54674f, 1.4536f));
  points.push_back(Vector3(-0.654012f, 2.88003f, 8.48689f));
  points.push_back(Vector3(9.51781f, 3.45073f, 8.84335f));
  points.push_back(Vector3(6.27674f, -2.41432f, 9.49828f));
  points.push_back(Vector3(-3.76568f, -1.36265f, 3.50139f));
  points.push_back(Vector3(2.9545f, 1.6715f, 6.66311f));
  points.push_back(Vector3(1.13804f, 0.721152f, 8.8757f));
  points.push_back(Vector3(5.9209f, -6.39088f, -5.98254f));
  points.push_back(Vector3(-7.48161f, -2.59926f, -7.08365f));
  points.push_back(Vector3(-8.07245f, 0.085757f, 4.44136f));
  points.push_back(Vector3(1.67028f, -1.26377f, -7.63726f));
  points.push_back(Vector3(-6.24256f, 2.50832f, 8.18232f));
  points.push_back(Vector3(-6.8157f, 8.69625f, -9.16868f));
  points.push_back(Vector3(7.74468f, 9.0698f, -7.16056f));
  points.push_back(Vector3(-3.51421f, -3.90362f, 9.35423f));
  points.push_back(Vector3(-7.90948f, -9.98474f, 6.85232f));
  points.push_back(Vector3(7.47002f, -6.64357f, -0.890835f));
  points.push_back(Vector3(1.71789f, -6.03198f, 7.95709f));
  points.push_back(Vector3(-9.129f, 6.19129f, 1.93823f));
  points.push_back(Vector3(-2.11158f, 5.53087f, -9.08078f));
  points.push_back(Vector3(-4.57869f, -6.93655f, -2.772f));
  points.push_back(Vector3(-8.14997f, 1.47069f, -2.35023f));
  points.push_back(Vector3(7.49504f, -7.70745f, -3.54411f));
  points.push_back(Vector3(-6.36219f, 7.05008f, 0.019837f));
  points.push_back(Vector3(7.2631f, -0.242622f, -8.45454f));
  points.push_back(Vector3(2.53639f, -2.00903f, -6.12354f));
  points.push_back(Vector3(6.88467f, -6.36952f, 2.78909f));
  points.push_back(Vector3(-3.00699f, 9.72655f, -5.65172f));
  points.push_back(Vector3(-4.55123f, 6.96341f, -1.17954f));
  points.push_back(Vector3(1.4951f, -3.62224f, 0.0717185f));
  points.push_back(Vector3(2.78359f, 6.81509f, 7.58538f));
  points.push_back(Vector3(8.58516f, -0.0595111f, -0.0534074f));
  points.push_back(Vector3(-3.70647f, -7.59575f, -4.12824f));
  points.push_back(Vector3(-1.69713f, -2.1836f, -7.05435f));
  points.push_back(Vector3(-5.72924f, -3.01798f, -1.68798f));
  points.push_back(Vector3(7.36869f, 6.75466f, 1.84912f));
  points.push_back(Vector3(8.04804f, -8.71578f, -2.76223f));
  points.push_back(Vector3(-1.09897f, 5.79882f, 8.06757f));
  points.push_back(Vector3(6.50868f, 3.05094f, 5.00107f));
  points.push_back(Vector3(-7.11295f, -7.3809f, -0.55269f));
  points.push_back(Vector3(2.28858f, 9.60082f, -7.27348f));
  points.push_back(Vector3(0.458693f, -0.957976f, 8.60836f));
  points.push_back(Vector3(1.99927f, -8.55098f, -3.43669f));
  points.push_back(Vector3(3.82733f, -4.77889f, 8.46431f));
  points.push_back(Vector3(-4.48775f, -3.12113f, 6.71926f));
  points.push_back(Vector3(0.959807f, 0.228584f, 6.63381f));
  points.push_back(Vector3(-5.77319f, 2.69204f, -1.44688f));
  points.push_back(Vector3(-7.77093f, 2.33131f, 3.89752f));
  points.push_back(Vector3(-2.2074f, 7.69646f, -8.89767f));
  points.push_back(Vector3(7.88995f, 7.43461f, -3.69976f));
  points.push_back(Vector3(5.55406f, 5.18906f, 9.24619f));
  points.push_back(Vector3(2.7488f, -8.46248f, 8.32148f));
  points.push_back(Vector3(5.38438f, -8.64009f, -6.27857f));
  points.push_back(Vector3(0.404981f, 5.13657f, 8.34834f));
  points.push_back(Vector3(1.25217f, 0.652791f, 0.917081f));
  points.push_back(Vector3(-3.67901f, -3.25846f, -0.0936918f));
  points.push_back(Vector3(-5.84948f, -0.860317f, -5.79882f));
  points.push_back(Vector3(9.3469f, 1.66051f, 5.25193f));
  points.push_back(Vector3(1.54393f, -4.51888f, 3.1901f));
  points.push_back(Vector3(7.62322f, -6.7217f, 4.55306f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest29(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.16135f, -2.12317f, 2.46376f));
  points.push_back(Vector3(-1.49632f, -9.729f, -2.55532f));
  points.push_back(Vector3(-7.92108f, -1.04099f, -1.77099f));
  points.push_back(Vector3(-6.08142f, -3.35002f, -1.85278f));
  points.push_back(Vector3(-2.69143f, 0.693686f, 2.44911f));
  points.push_back(Vector3(7.89117f, -9.86328f, 5.60167f));
  points.push_back(Vector3(8.83908f, -8.4875f, -7.50175f));
  points.push_back(Vector3(-5.97034f, -8.57479f, -3.1077f));
  points.push_back(Vector3(6.66189f, -8.54732f, 6.96158f));
  points.push_back(Vector3(4.2552f, -9.48302f, -1.49754f));
  points.push_back(Vector3(0.630207f, 6.80593f, 8.17011f));
  points.push_back(Vector3(1.70202f, 6.34632f, -7.65557f));
  points.push_back(Vector3(-2.40455f, -7.00674f, 0.679647f));
  points.push_back(Vector3(3.98175f, 0.99704f, 1.17038f));
  points.push_back(Vector3(1.04465f, 8.08039f, -6.52516f));
  points.push_back(Vector3(8.36116f, 8.76583f, 7.54875f));
  points.push_back(Vector3(-4.34919f, -5.33738f, 7.65801f));
  points.push_back(Vector3(8.60958f, 5.8562f, 4.0788f));
  points.push_back(Vector3(-1.26682f, -0.825526f, -2.48451f));
  points.push_back(Vector3(-5.14328f, 1.66906f, 6.94021f));
  points.push_back(Vector3(-2.64504f, 7.37663f, 3.65764f));
  points.push_back(Vector3(-4.66353f, -9.94873f, -7.30583f));
  points.push_back(Vector3(6.26576f, 5.45762f, 4.9559f));
  points.push_back(Vector3(-5.11826f, -9.07651f, 2.0835f));
  points.push_back(Vector3(-9.49583f, -9.72655f, -6.32618f));
  points.push_back(Vector3(-8.05963f, -8.03827f, -3.24137f));
  points.push_back(Vector3(9.80346f, -7.69768f, -1.89856f));
  points.push_back(Vector3(-3.76446f, -1.0184f, -1.92358f));
  points.push_back(Vector3(-7.54631f, 3.35063f, -8.46675f));
  points.push_back(Vector3(5.48509f, -5.24094f, 3.65947f));
  points.push_back(Vector3(6.46962f, 0.477615f, 8.23542f));
  points.push_back(Vector3(-5.68163f, 1.89611f, 9.99268f));
  points.push_back(Vector3(-1.71361f, -9.55077f, 8.43806f));
  points.push_back(Vector3(4.19477f, -1.70751f, -9.71679f));
  points.push_back(Vector3(6.292f, 7.82037f, 8.08466f));
  points.push_back(Vector3(2.22877f, -3.46416f, 8.73592f));
  points.push_back(Vector3(0.744346f, 6.96768f, 7.32414f));
  points.push_back(Vector3(1.8656f, 3.35246f, -2.27332f));
  points.push_back(Vector3(5.58763f, -3.42082f, 7.29728f));
  points.push_back(Vector3(-8.16828f, -5.12864f, 5.69262f));
  points.push_back(Vector3(-6.21021f, -3.32682f, 9.92309f));
  points.push_back(Vector3(4.18928f, -9.8059f, 3.22001f));
  points.push_back(Vector3(8.67061f, -4.20331f, 2.80068f));
  points.push_back(Vector3(-9.81445f, -7.79656f, -4.46516f));
  points.push_back(Vector3(1.67455f, -8.00348f, -6.60939f));
  points.push_back(Vector3(6.37196f, 3.19498f, -6.33839f));
  points.push_back(Vector3(4.75204f, -1.89917f, 5.9209f));
  points.push_back(Vector3(5.69079f, 6.21509f, 6.57399f));
  points.push_back(Vector3(5.39293f, 2.16956f, 3.37992f));
  points.push_back(Vector3(1.40721f, 3.51543f, -4.86801f));
  points.push_back(Vector3(-3.08512f, 0.289621f, -1.87353f));
  points.push_back(Vector3(8.33857f, -6.2859f, -1.9779f));
  points.push_back(Vector3(8.39351f, 3.59661f, 0.431227f));
  points.push_back(Vector3(8.39961f, 1.64647f, 2.7488f));
  points.push_back(Vector3(-9.97131f, 7.07938f, -2.70669f));
  points.push_back(Vector3(-1.55675f, 1.95227f, -6.45619f));
  points.push_back(Vector3(-6.58071f, -3.17606f, 6.57033f));
  points.push_back(Vector3(0.293893f, -8.28669f, 5.25681f));
  points.push_back(Vector3(-5.51073f, 7.39006f, 6.33717f));
  points.push_back(Vector3(8.22077f, 1.38524f, -9.52513f));
  points.push_back(Vector3(-7.63604f, 4.48775f, 8.95871f));
  points.push_back(Vector3(0.395215f, -0.584429f, 8.71761f));
  points.push_back(Vector3(-7.34855f, 2.54616f, 6.11805f));
  points.push_back(Vector3(-9.40916f, -3.24564f, -5.92456f));
  points.push_back(Vector3(0.999481f, -5.39171f, 7.5042f));
  points.push_back(Vector3(7.05679f, 5.46678f, -6.32801f));
  points.push_back(Vector3(4.83261f, -4.232f, 4.46577f));
  points.push_back(Vector3(-0.408032f, 3.36161f, -3.80169f));
  points.push_back(Vector3(0.472732f, 3.62102f, 3.28532f));
  points.push_back(Vector3(-4.09955f, -3.57524f, -9.83825f));
  points.push_back(Vector3(1.75878f, 2.32398f, 3.22306f));
  points.push_back(Vector3(-3.24259f, 5.42039f, 7.75262f));
  points.push_back(Vector3(-2.57302f, 3.49895f, -5.32884f));
  points.push_back(Vector3(-1.04099f, 4.7795f, 4.96994f));
  points.push_back(Vector3(0.33845f, 9.7235f, -4.83749f));
  points.push_back(Vector3(7.85882f, 3.34513f, 4.31867f));
  points.push_back(Vector3(4.63729f, 7.35527f, -1.98706f));
  points.push_back(Vector3(-9.90051f, -9.83398f, 5.46556f));
  points.push_back(Vector3(9.62401f, 7.32414f, -7.32902f));
  points.push_back(Vector3(4.36201f, 6.86514f, -5.68285f));
  points.push_back(Vector3(-5.9801f, -2.09876f, -0.22187f));
  points.push_back(Vector3(-3.88165f, 3.59661f, -5.57176f));
  points.push_back(Vector3(3.84564f, -5.27146f, 0.0570696f));
  points.push_back(Vector3(-6.00391f, 0.83224f, 9.08139f));
  points.push_back(Vector3(3.91461f, -6.87613f, -2.9899f));
  points.push_back(Vector3(2.86843f, 6.56301f, 0.220038f));
  points.push_back(Vector3(9.39329f, 8.34284f, -8.62911f));
  points.push_back(Vector3(-5.2092f, 0.599689f, 4.21918f));
  points.push_back(Vector3(-7.52007f, -6.42872f, -7.02139f));
  points.push_back(Vector3(-4.19599f, 6.90847f, -3.31645f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest30(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.00632f, 9.58129f, -7.06961f));
  points.push_back(Vector3(4.09589f, 1.32176f, 4.38643f));
  points.push_back(Vector3(0.25483f, -0.401318f, 4.30342f));
  points.push_back(Vector3(1.22532f, 9.60936f, 0.243843f));
  points.push_back(Vector3(-8.71639f, 8.42219f, -1.03977f));
  points.push_back(Vector3(-6.68752f, 6.87246f, 2.77932f));
  points.push_back(Vector3(-4.00555f, -8.53877f, -4.03851f));
  points.push_back(Vector3(-8.96237f, 6.24317f, -9.16074f));
  points.push_back(Vector3(1.8717f, -2.06702f, 1.4066f));
  points.push_back(Vector3(8.62056f, 6.2566f, 8.98312f));
  points.push_back(Vector3(3.49773f, -6.92862f, -8.61019f));
  points.push_back(Vector3(6.12232f, -9.5703f, 9.29258f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest31(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.49178f, 2.14026f, 6.01489f));
  points.push_back(Vector3(-6.63747f, 5.56505f, 2.73171f));
  points.push_back(Vector3(-9.62584f, -1.36143f, 4.39558f));
  points.push_back(Vector3(-6.91519f, 6.31825f, 7.18009f));
  points.push_back(Vector3(-2.49184f, -6.01672f, -6.42445f));
  points.push_back(Vector3(3.55388f, 9.92065f, 4.21247f));
  points.push_back(Vector3(4.279f, -4.09223f, -6.43117f));
  points.push_back(Vector3(8.83236f, -9.36216f, -4.56709f));
  points.push_back(Vector3(1.41209f, -0.632649f, -3.12174f));
  points.push_back(Vector3(3.05765f, -0.144963f, -0.966521f));
  points.push_back(Vector3(-3.94147f, 1.48961f, 5.12009f));
  points.push_back(Vector3(-3.87249f, 2.39784f, 0.736412f));
  points.push_back(Vector3(-0.815149f, -1.29002f, -0.264595f));
  points.push_back(Vector3(-4.77157f, -9.08078f, -6.30482f));
  points.push_back(Vector3(-3.25175f, 0.664388f, -1.95898f));
  points.push_back(Vector3(3.48979f, 9.55077f, 8.71212f));
  points.push_back(Vector3(-4.48469f, 3.28532f, 2.29957f));
  points.push_back(Vector3(7.6867f, 6.02588f, -7.8515f));
  points.push_back(Vector3(6.44215f, 7.32536f, -1.85705f));
  points.push_back(Vector3(1.0184f, 9.20591f, -4.20698f));
  points.push_back(Vector3(7.80999f, -9.25108f, -8.01385f));
  points.push_back(Vector3(7.04093f, 8.77316f, 3.31095f));
  points.push_back(Vector3(9.2346f, 6.6332f, 7.58843f));
  points.push_back(Vector3(-0.71688f, 8.47713f, -5.81347f));
  points.push_back(Vector3(8.81527f, 4.76302f, 2.09693f));
  points.push_back(Vector3(-9.47203f, 6.03504f, 0.809656f));
  points.push_back(Vector3(-8.50276f, 7.70989f, 4.31806f));
  points.push_back(Vector3(-1.44566f, -5.72802f, 9.99207f));
  points.push_back(Vector3(9.7528f, -6.90054f, -4.99374f));
  points.push_back(Vector3(3.94147f, -8.32331f, -0.669271f));
  points.push_back(Vector3(-9.66063f, 5.74206f, -6.77358f));
  points.push_back(Vector3(2.77139f, 8.90927f, 3.86578f));
  points.push_back(Vector3(-4.16791f, 8.59615f, -3.19742f));
  points.push_back(Vector3(5.21714f, -6.71987f, 1.9364f));
  points.push_back(Vector3(9.14182f, 2.88125f, 0.976897f));
  points.push_back(Vector3(2.6017f, -1.57811f, -6.40553f));
  points.push_back(Vector3(-3.97443f, 7.33573f, 0.242622f));
  points.push_back(Vector3(3.07047f, -6.24439f, 2.73904f));
  points.push_back(Vector3(7.03787f, 7.30216f, -3.68267f));
  points.push_back(Vector3(1.98279f, -9.56175f, 7.96319f));
  points.push_back(Vector3(-1.02817f, 8.43013f, 2.902f));
  points.push_back(Vector3(-9.96338f, 9.7058f, -0.695517f));
  points.push_back(Vector3(-0.785241f, -0.199286f, 7.7868f));
  points.push_back(Vector3(-7.48405f, 8.50642f, -8.72127f));
  points.push_back(Vector3(-3.10953f, 9.78027f, -2.6017f));
  points.push_back(Vector3(-0.694296f, -1.57445f, -0.851161f));
  points.push_back(Vector3(-5.0914f, 7.30888f, 0.674154f));
  points.push_back(Vector3(-9.9176f, -0.263985f, 7.94549f));
  points.push_back(Vector3(9.38047f, 4.18378f, 0.561235f));
  points.push_back(Vector3(4.71969f, -4.58846f, -5.2794f));
  points.push_back(Vector3(9.96948f, -7.30522f, 5.11094f));
  points.push_back(Vector3(-1.93274f, 2.64016f, 6.43788f));
  points.push_back(Vector3(8.97031f, -9.8236f, -1.58483f));
  points.push_back(Vector3(-6.69179f, -5.74999f, -8.77255f));
  points.push_back(Vector3(0.873135f, 0.234077f, -2.82571f));
  points.push_back(Vector3(-8.45088f, -7.9577f, -7.92169f));
  points.push_back(Vector3(0.307321f, 1.96936f, -6.13391f));
  points.push_back(Vector3(9.74181f, -9.2346f, 1.69408f));
  points.push_back(Vector3(-2.94717f, 6.10767f, 4.86862f));
  points.push_back(Vector3(6.85904f, 7.93451f, 7.97174f));
  points.push_back(Vector3(-5.14634f, -7.13797f, -6.04419f));
  points.push_back(Vector3(2.06885f, 3.30241f, -6.38234f));
  points.push_back(Vector3(-1.57384f, -6.67287f, 0.867641f));
  points.push_back(Vector3(-9.15708f, 5.14817f, -6.52516f));
  points.push_back(Vector3(-7.03726f, -3.48613f, 3.55693f));
  points.push_back(Vector3(8.12128f, -8.98984f, 1.60558f));
  points.push_back(Vector3(-5.00778f, 0.442213f, -6.10828f));
  points.push_back(Vector3(-5.74938f, -9.27f, -0.409864f));
  points.push_back(Vector3(-4.78683f, 0.435499f, 2.39357f));
  points.push_back(Vector3(-8.04376f, 2.02124f, -9.64232f));
  points.push_back(Vector3(-4.62752f, 3.41105f, 0.586261f));
  points.push_back(Vector3(3.57891f, 5.87939f, -9.36094f));
  points.push_back(Vector3(-5.12131f, -3.91705f, -7.74285f));
  points.push_back(Vector3(9.71557f, -6.62709f, 2.38258f));
  points.push_back(Vector3(1.1771f, 0.013123f, 9.78881f));
  points.push_back(Vector3(-4.21857f, -0.664998f, -8.39351f));
  points.push_back(Vector3(-6.59536f, -0.0674459f, -8.70907f));
  points.push_back(Vector3(-5.73473f, -5.42528f, -5.19394f));
  points.push_back(Vector3(-5.94104f, -3.82427f, 1.05136f));
  points.push_back(Vector3(-9.80224f, 9.08261f, -9.48241f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest32(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.84313f, -5.74816f, -6.50807f));
  points.push_back(Vector3(-4.47798f, -2.7958f, -2.22144f));
  points.push_back(Vector3(2.38502f, 9.99939f, -8.40388f));
  points.push_back(Vector3(-2.73232f, 7.52434f, 8.95321f));
  points.push_back(Vector3(-3.96527f, 6.81021f, -9.94873f));
  points.push_back(Vector3(8.73409f, -7.8576f, -0.483718f));
  points.push_back(Vector3(6.69424f, 0.967742f, 9.62401f));
  points.push_back(Vector3(2.53578f, -2.77261f, -7.33634f));
  points.push_back(Vector3(-1.56652f, 3.04056f, -0.989715f));
  points.push_back(Vector3(5.11704f, 4.58419f, 3.31889f));
  points.push_back(Vector3(-5.78784f, -5.28367f, 0.202948f));
  points.push_back(Vector3(-6.9097f, 5.36546f, 8.80245f));
  points.push_back(Vector3(8.47896f, -2.82571f, 4.85519f));
  points.push_back(Vector3(-0.323191f, -5.88855f, 6.63686f));
  points.push_back(Vector3(-6.01184f, 9.91516f, -0.101627f));
  points.push_back(Vector3(-8.46736f, -2.74697f, -7.9223f));
  points.push_back(Vector3(0.0747703f, 3.38603f, 7.39799f));
  points.push_back(Vector3(-4.02264f, -8.95993f, 5.50768f));
  points.push_back(Vector3(6.95853f, 6.59291f, -9.90967f));
  points.push_back(Vector3(-0.70101f, 1.85461f, 5.78539f));
  points.push_back(Vector3(2.78481f, 4.65804f, -7.32048f));
  points.push_back(Vector3(0.923185f, 9.56786f, 2.60353f));
  points.push_back(Vector3(-0.68453f, -6.45375f, -7.72454f));
  points.push_back(Vector3(-1.74047f, 4.48592f, -8.80734f));
  points.push_back(Vector3(-8.84762f, -7.68914f, -8.11396f));
  points.push_back(Vector3(-4.47981f, -7.00491f, -0.936003f));
  points.push_back(Vector3(4.50728f, 9.8352f, 1.0593f));
  points.push_back(Vector3(-0.768151f, -1.22471f, -0.837123f));
  points.push_back(Vector3(7.34611f, 5.57054f, 0.142521f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest33(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.43013f, 5.50951f, 4.02081f));
  points.push_back(Vector3(8.66268f, 0.726035f, -2.97159f));
  points.push_back(Vector3(9.26511f, 3.25236f, -3.19071f));
  points.push_back(Vector3(-3.24259f, 3.5197f, 8.01385f));
  points.push_back(Vector3(-3.60454f, 7.05496f, -6.52882f));
  points.push_back(Vector3(-8.39412f, -2.65908f, -7.16605f));
  points.push_back(Vector3(-1.08188f, 1.01596f, 9.56114f));
  points.push_back(Vector3(1.74535f, -5.2678f, 8.15607f));
  points.push_back(Vector3(-2.28675f, 8.60958f, 0.0552385f));
  points.push_back(Vector3(-5.20798f, 8.93124f, 4.73739f));
  points.push_back(Vector3(-7.16117f, 1.41575f, 8.70785f));
  points.push_back(Vector3(2.75613f, -2.13294f, -4.32234f));
  points.push_back(Vector3(-1.9187f, -2.42958f, 6.37501f));
  points.push_back(Vector3(6.02832f, -4.77218f, -5.92334f));
  points.push_back(Vector3(-4.60005f, -3.82977f, -5.40635f));
  points.push_back(Vector3(2.26661f, 4.97971f, 5.9624f));
  points.push_back(Vector3(6.69362f, -9.66918f, 1.32908f));
  points.push_back(Vector3(-5.61327f, -8.30439f, -3.59539f));
  points.push_back(Vector3(4.11725f, -9.78027f, 9.92737f));
  points.push_back(Vector3(9.56359f, 5.97278f, 6.01489f));
  points.push_back(Vector3(2.40516f, 0.703452f, 2.33863f));
  points.push_back(Vector3(1.03732f, 4.54817f, -6.06739f));
  points.push_back(Vector3(-0.193793f, 8.76583f, 6.16504f));
  points.push_back(Vector3(-0.906095f, 1.04831f, -5.41124f));
  points.push_back(Vector3(0.861538f, -3.95978f, -5.51927f));
  points.push_back(Vector3(-0.673544f, -2.01148f, -8.69747f));
  points.push_back(Vector3(6.77297f, -5.80981f, 0.248726f));
  points.push_back(Vector3(-2.24342f, 6.33778f, 2.81777f));
  points.push_back(Vector3(0.0985748f, -2.07251f, -4.07819f));
  points.push_back(Vector3(-3.99884f, -1.94128f, 1.55065f));
  points.push_back(Vector3(2.42286f, -5.26109f, -3.9317f));
  points.push_back(Vector3(-1.98462f, 2.05664f, 7.22892f));
  points.push_back(Vector3(8.99899f, -5.68224f, 9.00327f));
  points.push_back(Vector3(-4.56954f, 7.46086f, -0.857875f));
  points.push_back(Vector3(5.65416f, -3.16935f, -4.97665f));
  points.push_back(Vector3(3.70769f, 2.584f, -2.98135f));
  points.push_back(Vector3(-7.02933f, -0.0112918f, 6.37562f));
  points.push_back(Vector3(-1.28269f, -4.27229f, 6.95181f));
  points.push_back(Vector3(3.42143f, 2.87515f, -9.93408f));
  points.push_back(Vector3(5.41917f, -2.17322f, 7.45842f));
  points.push_back(Vector3(1.23569f, -7.80694f, -8.46065f));
  points.push_back(Vector3(-0.435499f, -0.874966f, -5.93799f));
  points.push_back(Vector3(4.83016f, 6.48f, 7.59209f));
  points.push_back(Vector3(-7.68609f, 5.24888f, 1.30345f));
  points.push_back(Vector3(-9.92004f, -1.61473f, 3.18522f));
  points.push_back(Vector3(8.77316f, -5.34776f, -8.73775f));
  points.push_back(Vector3(2.15491f, 6.90786f, -8.44172f));
  points.push_back(Vector3(-2.72622f, 1.9364f, -9.90478f));
  points.push_back(Vector3(6.4745f, 2.88186f, 2.68227f));
  points.push_back(Vector3(9.25169f, 2.52113f, 1.11179f));
  points.push_back(Vector3(8.13837f, -5.32701f, -5.79272f));
  points.push_back(Vector3(2.23853f, -3.91705f, -2.78603f));
  points.push_back(Vector3(6.40431f, 9.35606f, -5.87817f));
  points.push_back(Vector3(-6.59658f, 1.48473f, 9.45067f));
  points.push_back(Vector3(8.95749f, -9.86267f, 7.75872f));
  points.push_back(Vector3(0.616169f, 7.25944f, -5.43809f));
  points.push_back(Vector3(-7.68853f, 6.0155f, -3.73455f));
  points.push_back(Vector3(4.78011f, -8.60714f, -4.76608f));
  points.push_back(Vector3(2.22999f, 7.00125f, 1.45909f));
  points.push_back(Vector3(3.63811f, -5.15244f, -5.23606f));
  points.push_back(Vector3(4.01227f, -9.63927f, -4.2143f));
  points.push_back(Vector3(-4.14594f, 7.3516f, 5.55834f));
  points.push_back(Vector3(-0.564898f, 2.53639f, -1.64037f));
  points.push_back(Vector3(7.53349f, 4.01776f, -9.25901f));
  points.push_back(Vector3(7.45964f, 0.379955f, 1.16855f));
  points.push_back(Vector3(3.81512f, -0.144353f, -7.24601f));
  points.push_back(Vector3(2.12012f, 6.46901f, -3.81024f));
  points.push_back(Vector3(8.40083f, 8.61263f, 4.54634f));
  points.push_back(Vector3(-4.26008f, 9.07041f, 6.65639f));
  points.push_back(Vector3(-3.76446f, 5.27573f, 0.435499f));
  points.push_back(Vector3(-8.7286f, -9.64415f, 6.71194f));
  points.push_back(Vector3(1.64892f, 0.326243f, -2.66579f));
  points.push_back(Vector3(6.66799f, 9.14914f, 5.60656f));
  points.push_back(Vector3(8.5052f, 1.07089f, -4.64217f));
  points.push_back(Vector3(-0.769372f, 9.35545f, -2.07678f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest34(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.90439f, 4.15693f, 9.00571f));
  points.push_back(Vector3(-6.86331f, 2.39296f, 6.61794f));
  points.push_back(Vector3(-2.86111f, 8.47896f, -1.7246f));
  points.push_back(Vector3(9.84924f, 5.00534f, 1.61534f));
  points.push_back(Vector3(0.42085f, 3.47453f, 9.75707f));
  points.push_back(Vector3(-6.98843f, 1.66112f, -3.68206f));
  points.push_back(Vector3(-7.01895f, 3.73577f, -8.69747f));
  points.push_back(Vector3(-7.07327f, -6.37684f, 9.18943f));
  points.push_back(Vector3(-3.56792f, 2.17017f, 4.69771f));
  points.push_back(Vector3(1.47435f, -2.68349f, 3.52763f));
  points.push_back(Vector3(-3.08939f, -8.98557f, 5.03464f));
  points.push_back(Vector3(6.70522f, 2.3307f, 8.06696f));
  points.push_back(Vector3(-0.544145f, -9.81262f, 1.21006f));
  points.push_back(Vector3(-5.27207f, -4.30097f, -5.62792f));
  points.push_back(Vector3(5.10971f, 8.09015f, -2.8074f));
  points.push_back(Vector3(-5.11643f, -0.575884f, 5.13779f));
  points.push_back(Vector3(3.45622f, -8.27693f, -1.5421f));
  points.push_back(Vector3(-9.95972f, -9.25779f, -0.144353f));
  points.push_back(Vector3(-3.8432f, -5.55345f, -6.35121f));
  points.push_back(Vector3(-3.13456f, 5.63402f, -8.59004f));
  points.push_back(Vector3(5.833f, -6.68569f, -9.39512f));
  points.push_back(Vector3(-6.42018f, 7.95404f, 1.41331f));
  points.push_back(Vector3(1.86987f, -3.73455f, 0.966521f));
  points.push_back(Vector3(7.64336f, 1.94861f, -3.98419f));
  points.push_back(Vector3(-7.10868f, 4.94369f, -8.98557f));
  points.push_back(Vector3(5.32701f, -2.8135f, -9.90051f));
  points.push_back(Vector3(-2.7604f, -5.88977f, -9.15525f));
  points.push_back(Vector3(1.94739f, 4.67391f, -1.45604f));
  points.push_back(Vector3(-9.65514f, 6.02222f, 1.7954f));
  points.push_back(Vector3(7.9284f, -6.42445f, 1.2833f));
  points.push_back(Vector3(3.84808f, -9.82299f, 5.86596f));
  points.push_back(Vector3(-5.47227f, -7.91192f, 6.5685f));
  points.push_back(Vector3(-1.76305f, -1.86926f, 3.0784f));
  points.push_back(Vector3(-3.62712f, -3.98907f, -3.2786f));
  points.push_back(Vector3(-8.8641f, 1.99499f, 5.8916f));
  points.push_back(Vector3(-1.55675f, -2.9191f, -4.75631f));
  points.push_back(Vector3(-0.353099f, -3.60576f, 6.39088f));
  points.push_back(Vector3(-4.63607f, 2.5248f, -4.09894f));
  points.push_back(Vector3(9.89441f, -0.553911f, 4.51033f));
  points.push_back(Vector3(-6.77114f, -9.86694f, -4.15021f));
  points.push_back(Vector3(2.56508f, 1.3657f, 6.51357f));
  points.push_back(Vector3(1.25584f, -8.02911f, 8.50276f));
  points.push_back(Vector3(2.36183f, -8.02362f, -5.10666f));
  points.push_back(Vector3(4.83077f, 7.03421f, -9.84924f));
  points.push_back(Vector3(4.30219f, 3.28837f, -3.82061f));
  points.push_back(Vector3(-4.5555f, -8.63643f, 9.87609f));
  points.push_back(Vector3(3.29447f, 2.88614f, -5.55834f));
  points.push_back(Vector3(9.16257f, 5.69201f, -2.5425f));
  points.push_back(Vector3(-2.1836f, 0.621662f, -1.98828f));
  points.push_back(Vector3(6.07166f, -1.73864f, -8.59737f));
  points.push_back(Vector3(-3.60881f, -2.44728f, 7.59392f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest35(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.77355f, 3.86334f, -4.88815f));
  points.push_back(Vector3(9.5703f, -2.45277f, 1.66234f));
  points.push_back(Vector3(8.87448f, 7.46574f, 4.32173f));
  points.push_back(Vector3(5.93127f, 4.36506f, 9.8938f));
  points.push_back(Vector3(8.97275f, 0.277413f, 4.12763f));
  points.push_back(Vector3(-0.884732f, 5.03708f, -6.87857f));
  points.push_back(Vector3(5.80248f, 3.50871f, -6.5154f));
  points.push_back(Vector3(-6.75588f, -2.02124f, 2.51198f));
  points.push_back(Vector3(-9.61364f, -0.718711f, -5.79028f));
  points.push_back(Vector3(-2.92459f, -1.94372f, -1.20884f));
  points.push_back(Vector3(-1.68065f, 6.24683f, -2.19825f));
  points.push_back(Vector3(2.51015f, 4.12091f, 0.509964f));
  points.push_back(Vector3(-7.60613f, 9.43724f, 2.67373f));
  points.push_back(Vector3(-7.48527f, -3.60515f, 8.3581f));
  points.push_back(Vector3(0.207831f, -4.19111f, 2.45766f));
  points.push_back(Vector3(-8.5577f, -0.165105f, -7.80084f));
  points.push_back(Vector3(1.72765f, 5.53453f, -9.82726f));
  points.push_back(Vector3(-1.61901f, 6.47511f, -3.23527f));
  points.push_back(Vector3(-5.98865f, -7.55852f, -6.9274f));
  points.push_back(Vector3(-5.89282f, 0.13947f, -9.12595f));
  points.push_back(Vector3(-6.54286f, 7.50969f, -8.53572f));
  points.push_back(Vector3(-3.27433f, -6.8157f, 6.2096f));
  points.push_back(Vector3(-7.45903f, 9.50255f, 4.21674f));
  points.push_back(Vector3(-7.116f, 9.64782f, -2.54677f));
  points.push_back(Vector3(-9.44029f, -0.763268f, 6.51418f));
  points.push_back(Vector3(2.87332f, -5.12253f, -1.34739f));
  points.push_back(Vector3(8.85067f, 1.02329f, 4.20698f));
  points.push_back(Vector3(1.55675f, 0.784631f, 3.32072f));
  points.push_back(Vector3(2.89773f, 9.08628f, 6.33778f));
  points.push_back(Vector3(5.40757f, -9.09055f, -9.29136f));
  points.push_back(Vector3(-0.935392f, -9.27305f, -4.42122f));
  points.push_back(Vector3(1.41636f, -7.01224f, -9.76745f));
  points.push_back(Vector3(-5.00717f, 4.10688f, -2.06214f));
  points.push_back(Vector3(8.85617f, 1.08615f, -7.20878f));
  points.push_back(Vector3(-7.56157f, -0.644246f, 0.590533f));
  points.push_back(Vector3(2.24525f, -2.74697f, -5.82263f));
  points.push_back(Vector3(1.96081f, -0.273751f, 2.72195f));
  points.push_back(Vector3(-4.05744f, 6.40614f, 4.39741f));
  points.push_back(Vector3(-6.98721f, -2.8019f, -8.86166f));
  points.push_back(Vector3(-9.94324f, 0.409864f, -9.95361f));
  points.push_back(Vector3(2.98379f, -3.17606f, -7.23319f));
  points.push_back(Vector3(-3.71319f, -9.53856f, 7.3925f));
  points.push_back(Vector3(7.25089f, -1.31443f, -7.52861f));
  points.push_back(Vector3(-6.52699f, -6.50136f, 4.00677f));
  points.push_back(Vector3(-8.30073f, 8.07001f, -0.687582f));
  points.push_back(Vector3(-1.5775f, -9.11435f, 9.18394f));
  points.push_back(Vector3(2.02002f, 5.93799f, 0.0595111f));
  points.push_back(Vector3(-9.39451f, -1.3773f, -9.55992f));
  points.push_back(Vector3(-7.12027f, 5.38865f, -2.14087f));
  points.push_back(Vector3(-7.98883f, 0.204779f, -2.34962f));
  points.push_back(Vector3(7.30888f, -1.87841f, -0.992767f));
  points.push_back(Vector3(8.31843f, -1.34678f, 0.332957f));
  points.push_back(Vector3(4.77096f, -9.5587f, 4.23872f));
  points.push_back(Vector3(-2.87088f, 5.48692f, -0.295724f));
  points.push_back(Vector3(8.03705f, -6.48732f, 5.37828f));
  points.push_back(Vector3(-4.24604f, 4.16181f, -2.02185f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest36(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.04965f, 5.25437f, -6.94449f));
  points.push_back(Vector3(0.98056f, 2.82022f, -8.34101f));
  points.push_back(Vector3(-1.53844f, -1.0947f, 2.59011f));
  points.push_back(Vector3(3.78033f, -8.4051f, -0.347606f));
  points.push_back(Vector3(-5.99109f, 6.24195f, 0.970183f));
  points.push_back(Vector3(0.501419f, 6.76748f, -4.62996f));
  points.push_back(Vector3(-8.58821f, -4.42183f, 2.67739f));
  points.push_back(Vector3(3.16385f, 4.62813f, -3.35063f));
  points.push_back(Vector3(5.78661f, 9.43907f, -4.71908f));
  points.push_back(Vector3(7.38945f, -7.92657f, -4.74288f));
  points.push_back(Vector3(3.2017f, 9.25352f, 4.32844f));
  points.push_back(Vector3(0.773034f, -7.64519f, 7.07694f));
  points.push_back(Vector3(7.86065f, 0.612507f, -2.81106f));
  points.push_back(Vector3(-7.47734f, -7.34977f, -0.0753807f));
  points.push_back(Vector3(6.99515f, -6.48915f, -2.4308f));
  points.push_back(Vector3(4.21552f, 8.89706f, 7.74224f));
  points.push_back(Vector3(2.2953f, 6.10034f, 0.0985748f));
  points.push_back(Vector3(8.45576f, 2.55104f, 2.09021f));
  points.push_back(Vector3(-9.9823f, 0.533158f, -5.71337f));
  points.push_back(Vector3(2.55043f, 2.9252f, -4.91806f));
  points.push_back(Vector3(2.4308f, 7.93878f, 1.71239f));
  points.push_back(Vector3(0.620441f, -0.161443f, -5.53636f));
  points.push_back(Vector3(3.42753f, -1.01352f, -7.93939f));
  points.push_back(Vector3(2.28187f, 7.18253f, 4.10077f));
  points.push_back(Vector3(-6.44398f, 9.35545f, 5.07797f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest37(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.93857f, -7.36869f, 3.64727f));
  points.push_back(Vector3(3.45683f, -4.63118f, 5.8739f));
  points.push_back(Vector3(4.8442f, -1.1478f, 6.95181f));
  points.push_back(Vector3(-6.35914f, 6.53981f, 1.15818f));
  points.push_back(Vector3(-9.29136f, -8.20978f, -0.508744f));
  points.push_back(Vector3(-6.88833f, 3.39824f, 5.1384f));
  points.push_back(Vector3(-6.01489f, -0.355541f, -7.14469f));
  points.push_back(Vector3(-7.70257f, -2.17017f, -3.59416f));
  points.push_back(Vector3(4.91195f, 7.42485f, 3.60027f));
  points.push_back(Vector3(-9.47752f, -6.37013f, -7.98761f));
  points.push_back(Vector3(5.77319f, -8.30012f, 0.48677f));
  points.push_back(Vector3(-0.15595f, -1.63671f, 1.80883f));
  points.push_back(Vector3(-1.87475f, 8.23237f, -6.30177f));
  points.push_back(Vector3(1.06418f, 4.30464f, -1.32115f));
  points.push_back(Vector3(-7.05435f, -1.05869f, 1.66356f));
  points.push_back(Vector3(0.0704978f, 9.02768f, 7.93634f));
  points.push_back(Vector3(8.93918f, -2.46315f, -7.46147f));
  points.push_back(Vector3(8.30195f, -0.754112f, 0.101627f));
  points.push_back(Vector3(1.30284f, 1.89123f, -8.94223f));
  points.push_back(Vector3(-9.75646f, 4.18134f, 3.22428f));
  points.push_back(Vector3(7.50664f, 8.50093f, -0.232856f));
  points.push_back(Vector3(5.90503f, 9.62584f, -3.7669f));
  points.push_back(Vector3(0.588702f, -7.48405f, -0.83346f));
  points.push_back(Vector3(9.68261f, 3.44157f, 6.11805f));
  points.push_back(Vector3(-3.39213f, 8.43684f, -3.51848f));
  points.push_back(Vector3(-8.53084f, 9.98657f, -8.5577f));
  points.push_back(Vector3(3.70159f, 4.10504f, 0.17365f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest38(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.59737f, -5.5565f, 8.13349f));
  points.push_back(Vector3(-5.05234f, -8.09809f, -4.29304f));
  points.push_back(Vector3(9.69115f, -6.66799f, -9.73266f));
  points.push_back(Vector3(-8.034f, -8.89767f, 5.75549f));
  points.push_back(Vector3(1.34556f, -1.26804f, -4.31013f));
  points.push_back(Vector3(2.69082f, 2.3954f, 8.18171f));
  points.push_back(Vector3(5.05783f, -5.08347f, 4.29304f));
  points.push_back(Vector3(8.04498f, 4.92904f, 8.52046f));
  points.push_back(Vector3(9.02646f, 1.6306f, 7.57622f));
  points.push_back(Vector3(-9.90844f, -3.40373f, -0.395825f));
  points.push_back(Vector3(-1.01779f, -2.25501f, -5.53026f));
  points.push_back(Vector3(4.15021f, 8.85433f, 3.57952f));
  points.push_back(Vector3(-7.3162f, -3.85846f, -8.38923f));
  points.push_back(Vector3(3.21635f, -2.25257f, 5.94592f));
  points.push_back(Vector3(-3.52641f, -1.97546f, 8.4521f));
  points.push_back(Vector3(-1.51585f, -5.21653f, 5.67125f));
  points.push_back(Vector3(6.72719f, -6.82485f, 2.66884f));
  points.push_back(Vector3(4.61776f, 6.65395f, 9.3878f));
  points.push_back(Vector3(7.19047f, 8.18232f, -5.22996f));
  points.push_back(Vector3(-1.97729f, -5.91174f, -6.19861f));
  points.push_back(Vector3(4.79171f, 9.86023f, 5.2562f));
  points.push_back(Vector3(3.11136f, -0.132145f, 1.27903f));
  points.push_back(Vector3(4.06415f, -1.52867f, 5.50645f));
  points.push_back(Vector3(7.99371f, -3.33964f, -8.43684f));
  points.push_back(Vector3(6.28407f, 7.41813f, 7.37541f));
  points.push_back(Vector3(9.68017f, 9.4702f, 0.290231f));
  points.push_back(Vector3(-3.65093f, -4.6617f, 8.69503f));
  points.push_back(Vector3(-7.82342f, -2.48512f, 4.83871f));
  points.push_back(Vector3(-9.22666f, 5.49058f, 5.05417f));
  points.push_back(Vector3(1.38707f, -1.17038f, 2.63283f));
  points.push_back(Vector3(6.45558f, 8.42341f, -5.17991f));
  points.push_back(Vector3(-9.09787f, -9.69726f, -1.23936f));
  points.push_back(Vector3(-5.38804f, 9.78149f, 6.91214f));
  points.push_back(Vector3(5.17502f, -1.28636f, -8.77133f));
  points.push_back(Vector3(9.94201f, 8.06513f, -8.20002f));
  points.push_back(Vector3(-6.386f, -2.88797f, 5.80432f));
  points.push_back(Vector3(-5.84948f, -0.103458f, -1.85461f));
  points.push_back(Vector3(3.41655f, -1.87353f, 0.698569f));
  points.push_back(Vector3(8.05902f, 5.19394f, -7.18925f));
  points.push_back(Vector3(-7.11844f, -6.06494f, 6.89077f));
  points.push_back(Vector3(9.94018f, -5.74572f, -6.70522f));
  points.push_back(Vector3(-6.89749f, -5.75304f, 5.04135f));
  points.push_back(Vector3(-7.80633f, -4.52132f, -8.65474f));
  points.push_back(Vector3(-3.26823f, 1.17283f, -2.63283f));
  points.push_back(Vector3(-3.72417f, -1.06052f, -2.81716f));
  points.push_back(Vector3(0.539262f, -4.15571f, 4.89059f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest39(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.73104f, -5.0969f, -2.39662f));
  points.push_back(Vector3(-9.08689f, -9.89746f, -4.87106f));
  points.push_back(Vector3(2.41188f, -6.96158f, -4.9498f));
  points.push_back(Vector3(3.38298f, -2.8489f, 3.95428f));
  points.push_back(Vector3(-3.99152f, 2.09449f, 8.17377f));
  points.push_back(Vector3(-6.32557f, 5.71215f, -5.2916f));
  points.push_back(Vector3(-9.80712f, -7.09037f, -2.52724f));
  points.push_back(Vector3(-5.02609f, -9.08078f, 1.66845f));
  points.push_back(Vector3(-8.14203f, 9.39818f, -3.80657f));
  points.push_back(Vector3(-3.65764f, 7.94916f, 5.98682f));
  points.push_back(Vector3(-3.7376f, -6.61184f, 4.78072f));
  points.push_back(Vector3(-7.59575f, 3.80779f, -2.26051f));
  points.push_back(Vector3(8.61751f, -3.33171f, 4.35896f));
  points.push_back(Vector3(-5.93127f, -8.33857f, -6.4922f));
  points.push_back(Vector3(9.71191f, 9.02707f, -2.16102f));
  points.push_back(Vector3(9.51537f, -5.01572f, 2.58217f));
  points.push_back(Vector3(1.27781f, -9.7943f, 9.92798f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest40(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.5876f, 7.2454f, 2.64992f));
  points.push_back(Vector3(8.38313f, 3.37992f, 7.69097f));
  points.push_back(Vector3(-0.810877f, 4.39924f, 0.657063f));
  points.push_back(Vector3(-6.79617f, -9.34873f, 5.88977f));
  points.push_back(Vector3(8.90866f, 9.22788f, 3.41472f));
  points.push_back(Vector3(-4.39802f, 4.23749f, 4.41084f));
  points.push_back(Vector3(-9.35545f, 6.70888f, -0.869472f));
  points.push_back(Vector3(-4.71114f, -9.24924f, 9.92737f));
  points.push_back(Vector3(-6.4098f, -4.62081f, -7.39555f));
  points.push_back(Vector3(0.37141f, 7.09281f, 1.81494f));
  points.push_back(Vector3(8.1402f, 2.24891f, -3.01614f));
  points.push_back(Vector3(2.63833f, 2.96182f, -0.462355f));
  points.push_back(Vector3(-1.04221f, -2.10669f, 5.58519f));
  points.push_back(Vector3(-9.23582f, -4.78378f, -2.37953f));
  points.push_back(Vector3(5.93371f, -3.99091f, 5.96057f));
  points.push_back(Vector3(9.8999f, 3.72417f, -5.74023f));
  points.push_back(Vector3(9.82055f, 2.05359f, -2.64931f));
  points.push_back(Vector3(-0.753502f, 8.85861f, 8.13898f));
  points.push_back(Vector3(-6.08814f, -8.12555f, 3.76751f));
  points.push_back(Vector3(5.85315f, -9.01425f, -2.61452f));
  points.push_back(Vector3(-5.11277f, -4.01837f, -9.20347f));
  points.push_back(Vector3(5.36912f, -5.33006f, 7.50847f));
  points.push_back(Vector3(-2.61818f, 0.751061f, 7.21244f));
  points.push_back(Vector3(1.51158f, -2.60231f, 3.88653f));
  points.push_back(Vector3(0.484939f, -3.02103f, -4.82101f));
  points.push_back(Vector3(7.87347f, 6.88223f, -8.3404f));
  points.push_back(Vector3(2.6841f, -8.77743f, -2.28431f));
  points.push_back(Vector3(1.08066f, -5.05539f, -5.99597f));
  points.push_back(Vector3(7.28141f, 8.85006f, -8.34712f));
  points.push_back(Vector3(-4.40962f, -7.88324f, -8.62239f));
  points.push_back(Vector3(-4.49934f, 2.13294f, 1.08493f));
  points.push_back(Vector3(-9.86511f, 7.90765f, 1.8833f));
  points.push_back(Vector3(1.89734f, -5.42528f, -7.24967f));
  points.push_back(Vector3(-3.50017f, -0.28901f, 8.84335f));
  points.push_back(Vector3(8.7347f, 6.44398f, -6.57949f));
  points.push_back(Vector3(5.40574f, 1.00925f, -1.38524f));
  points.push_back(Vector3(5.27146f, -1.2888f, -7.31742f));
  points.push_back(Vector3(-5.67309f, 9.41282f, 2.02307f));
  points.push_back(Vector3(6.83035f, 5.77074f, -4.97177f));
  points.push_back(Vector3(0.532548f, -0.356761f, -0.932951f));
  points.push_back(Vector3(9.66002f, 3.89386f, -4.66659f));
  points.push_back(Vector3(-7.94183f, -1.65319f, -8.70785f));
  points.push_back(Vector3(3.42265f, 4.94308f, 4.21735f));
  points.push_back(Vector3(-7.81732f, 9.035f, -8.11335f));
  points.push_back(Vector3(6.14551f, -4.18928f, -3.17423f));
  points.push_back(Vector3(-8.25617f, -0.893277f, -7.34916f));
  points.push_back(Vector3(-0.827967f, 5.99353f, -7.14835f));
  points.push_back(Vector3(0.884121f, 9.23338f, 2.03528f));
  points.push_back(Vector3(-5.47533f, 1.03916f, 9.53551f));
  points.push_back(Vector3(9.96094f, -9.14487f, -8.07794f));
  points.push_back(Vector3(-3.32438f, -9.07712f, -4.45845f));
  points.push_back(Vector3(-9.03745f, -7.20634f, 5.23545f));
  points.push_back(Vector3(-2.54128f, -7.90643f, 4.41755f));
  points.push_back(Vector3(-1.67882f, -4.69344f, 4.30219f));
  points.push_back(Vector3(-0.675985f, -7.36015f, -5.66637f));
  points.push_back(Vector3(3.96344f, 2.02979f, 3.71685f));
  points.push_back(Vector3(-9.24863f, 4.09162f, -1.46153f));
  points.push_back(Vector3(8.39229f, -0.527055f, -6.36891f));
  points.push_back(Vector3(-9.02768f, 3.43364f, -9.20774f));
  points.push_back(Vector3(9.91089f, -7.28751f, 2.61513f));
  points.push_back(Vector3(-8.35933f, -2.62001f, 4.67086f));
  points.push_back(Vector3(-9.59899f, -2.96731f, -4.22529f));
  points.push_back(Vector3(3.31584f, 0.358593f, 7.33207f));
  points.push_back(Vector3(-9.19309f, 1.09165f, -3.58196f));
  points.push_back(Vector3(-3.03201f, -9.47264f, 9.8352f));
  points.push_back(Vector3(5.11216f, -9.78149f, 0.472121f));
  points.push_back(Vector3(7.82647f, -3.08267f, 9.6881f));
  points.push_back(Vector3(0.727866f, 1.1063f, 4.8204f));
  points.push_back(Vector3(-6.89261f, -1.96692f, -0.336619f));
  points.push_back(Vector3(-1.7655f, 4.07941f, -3.95611f));
  points.push_back(Vector3(-0.857875f, 0.398267f, -7.60918f));
  points.push_back(Vector3(-3.11014f, 8.67122f, 7.36991f));
  points.push_back(Vector3(9.52879f, -2.85745f, -4.54085f));
  points.push_back(Vector3(-3.24992f, -4.99741f, -8.67672f));
  points.push_back(Vector3(6.77175f, 4.25764f, -0.872524f));
  points.push_back(Vector3(6.07837f, -0.0918607f, -3.72051f));
  points.push_back(Vector3(-2.13355f, -1.86438f, 0.822474f));
  points.push_back(Vector3(-3.4727f, 5.374f, -0.813929f));
  points.push_back(Vector3(1.99683f, -5.08896f, -0.145573f));
  points.push_back(Vector3(0.793176f, 0.194403f, -3.2255f));
  points.push_back(Vector3(8.37458f, 2.47291f, 4.72579f));
  points.push_back(Vector3(0.600909f, 6.23585f, -3.93658f));
  points.push_back(Vector3(-3.15409f, 2.32276f, -3.45012f));
  points.push_back(Vector3(9.50438f, -9.09116f, -5.6444f));
  points.push_back(Vector3(5.63219f, 3.15897f, -2.09387f));
  points.push_back(Vector3(-2.51137f, -0.162664f, 1.79907f));
  points.push_back(Vector3(2.00903f, -6.25416f, -0.529496f));
  points.push_back(Vector3(-4.62264f, -9.25047f, -1.64769f));
  points.push_back(Vector3(-4.6086f, -8.28242f, 9.4586f));
  points.push_back(Vector3(-1.07578f, 3.9378f, -5.75976f));
  points.push_back(Vector3(0.577105f, 0.0161748f, 5.79211f));
  points.push_back(Vector3(7.85394f, -1.50792f, 1.13804f));
  points.push_back(Vector3(4.42854f, 6.13514f, 0.489822f));
  points.push_back(Vector3(6.37745f, 9.74242f, 2.92398f));
  points.push_back(Vector3(4.47493f, -6.25294f, 2.50587f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest41(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.75951f, 9.78515f, -8.5638f));
  points.push_back(Vector3(-7.62078f, 1.61596f, -1.56102f));
  points.push_back(Vector3(2.172f, -5.04135f, -5.13352f));
  points.push_back(Vector3(-0.336009f, 3.73272f, -9.91821f));
  points.push_back(Vector3(3.55998f, -9.02951f, -1.05747f));
  points.push_back(Vector3(-6.80837f, -0.384228f, -8.1579f));
  points.push_back(Vector3(-6.37623f, 4.01715f, 2.25745f));
  points.push_back(Vector3(-0.614338f, 2.12867f, -7.51885f));
  points.push_back(Vector3(-7.22282f, 6.53005f, 5.2501f));
  points.push_back(Vector3(7.46757f, 0.751061f, 5.88549f));
  points.push_back(Vector3(-8.85922f, -3.44768f, -2.67861f));
  points.push_back(Vector3(-7.60674f, -0.128483f, -5.14878f));
  points.push_back(Vector3(1.1771f, 7.88934f, 2.23731f));
  points.push_back(Vector3(-8.9172f, -7.14835f, 0.702231f));
  points.push_back(Vector3(-6.54897f, 8.98801f, 2.96915f));
  points.push_back(Vector3(3.42448f, -7.64885f, -7.77642f));
  points.push_back(Vector3(-9.94263f, 1.96387f, 6.72842f));
  points.push_back(Vector3(-9.13816f, -6.43849f, -0.984222f));
  points.push_back(Vector3(-4.57808f, -2.38868f, -2.3307f));
  points.push_back(Vector3(5.06943f, 7.79717f, -8.10785f));
  points.push_back(Vector3(-8.40815f, 0.0796533f, -8.77926f));
  points.push_back(Vector3(-0.113834f, 1.90771f, -1.06967f));
  points.push_back(Vector3(7.1868f, 8.6932f, 2.60475f));
  points.push_back(Vector3(3.80963f, 6.6802f, 2.70608f));
  points.push_back(Vector3(-1.55858f, -3.37809f, 5.43931f));
  points.push_back(Vector3(0.343944f, 7.25455f, -5.42955f));
  points.push_back(Vector3(9.71923f, -0.739464f, -3.16385f));
  points.push_back(Vector3(2.02185f, -6.81387f, 8.15241f));
  points.push_back(Vector3(2.00842f, 1.7893f, -4.42366f));
  points.push_back(Vector3(-6.70827f, -2.48817f, -1.04831f));
  points.push_back(Vector3(3.72845f, -2.07984f, -7.65069f));
  points.push_back(Vector3(0.342723f, 5.63402f, 2.60537f));
  points.push_back(Vector3(1.19236f, 2.81838f, -1.88757f));
  points.push_back(Vector3(4.71053f, -1.5183f, -6.54897f));
  points.push_back(Vector3(-1.25217f, 5.08652f, -9.14121f));
  points.push_back(Vector3(-5.24766f, 2.70913f, 0.112003f));
  points.push_back(Vector3(-6.47084f, -1.93274f, -4.92538f));
  points.push_back(Vector3(7.21793f, 6.20594f, -1.74841f));
  points.push_back(Vector3(-0.706503f, 2.00476f, -5.75732f));
  points.push_back(Vector3(-7.23197f, -7.59941f, -4.90646f));
  points.push_back(Vector3(-9.40855f, -1.68065f, 7.62078f));
  points.push_back(Vector3(6.82607f, 4.20209f, 8.14447f));
  points.push_back(Vector3(-5.02976f, 7.93634f, -9.50865f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest42(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.69686f, 6.42872f, 2.96182f));
  points.push_back(Vector3(0.593585f, -2.87332f, -4.12763f));
  points.push_back(Vector3(-5.29344f, 2.66579f, 6.3744f));
  points.push_back(Vector3(-0.409253f, -4.38398f, 4.41084f));
  points.push_back(Vector3(5.7213f, -6.22181f, -1.56163f));
  points.push_back(Vector3(-6.42628f, 3.97504f, 5.88855f));
  points.push_back(Vector3(9.18882f, -2.99905f, -4.08063f));
  points.push_back(Vector3(-4.39619f, 6.71316f, -5.54796f));
  points.push_back(Vector3(3.3787f, 4.1435f, -2.70913f));
  points.push_back(Vector3(7.29423f, -8.36482f, -2.49855f));
  points.push_back(Vector3(7.40043f, -7.29789f, 9.3292f));
  points.push_back(Vector3(-0.735191f, 7.7752f, 3.99762f));
  points.push_back(Vector3(9.94812f, -1.37608f, -8.12983f));
  points.push_back(Vector3(7.7337f, 3.05643f, 9.20164f));
  points.push_back(Vector3(1.87536f, -1.8247f, -6.63259f));
  points.push_back(Vector3(4.32844f, 5.38133f, -0.216376f));
  points.push_back(Vector3(-4.20515f, 4.39253f, -4.15326f));
  points.push_back(Vector3(-1.67333f, 4.60494f, 1.87719f));
  points.push_back(Vector3(-0.0283822f, -8.74508f, 4.79598f));
  points.push_back(Vector3(-0.274972f, 5.10971f, -2.03955f));
  points.push_back(Vector3(3.83099f, 8.64437f, 9.85046f));
  points.push_back(Vector3(0.53621f, -8.15668f, -1.01535f));
  points.push_back(Vector3(-9.11618f, -4.32295f, 8.44844f));
  points.push_back(Vector3(-7.18558f, 9.28648f, 8.33369f));
  points.push_back(Vector3(4.27351f, -8.19086f, 9.33653f));
  points.push_back(Vector3(7.74712f, -4.64827f, 6.5923f));
  points.push_back(Vector3(-6.9982f, -3.502f, -1.51646f));
  points.push_back(Vector3(3.14127f, 3.21574f, -6.8157f));
  points.push_back(Vector3(5.69994f, -8.10358f, -0.939055f));
  points.push_back(Vector3(-0.644856f, 5.95508f, -4.81857f));
  points.push_back(Vector3(-4.00189f, -8.67f, -7.82769f));
  points.push_back(Vector3(-1.42674f, -5.74084f, 7.52922f));
  points.push_back(Vector3(1.76305f, 1.8424f, 8.52473f));
  points.push_back(Vector3(-8.07245f, 8.74569f, -4.90951f));
  points.push_back(Vector3(2.01819f, 4.27656f, -4.40413f));
  points.push_back(Vector3(-4.29853f, -1.85888f, -2.29957f));
  points.push_back(Vector3(2.94839f, -8.25373f, -7.22953f));
  points.push_back(Vector3(-5.69201f, 5.26902f, 7.45293f));
  points.push_back(Vector3(0.342723f, -0.56856f, -9.36521f));
  points.push_back(Vector3(-3.62896f, -3.1431f, 5.12436f));
  points.push_back(Vector3(-7.26005f, -2.13843f, -7.08853f));
  points.push_back(Vector3(3.54228f, -6.75222f, 2.52846f));
  points.push_back(Vector3(-0.0894192f, 0.835292f, 2.62734f));
  points.push_back(Vector3(2.21839f, 2.55654f, -7.83319f));
  points.push_back(Vector3(-2.41676f, -9.77905f, 0.753502f));
  points.push_back(Vector3(8.49605f, 3.22123f, 7.28874f));
  points.push_back(Vector3(-5.94348f, -4.26435f, -1.94433f));
  points.push_back(Vector3(-0.906705f, -8.21833f, -3.07047f));
  points.push_back(Vector3(-9.99695f, 0.768761f, 1.90161f));
  points.push_back(Vector3(-1.95105f, 1.46764f, -5.86718f));
  points.push_back(Vector3(1.86071f, 8.05902f, -8.33979f));
  points.push_back(Vector3(-6.76077f, 4.42793f, -6.14246f));
  points.push_back(Vector3(-5.73107f, 3.87432f, 1.71178f));
  points.push_back(Vector3(0.732139f, -1.39927f, -7.38334f));
  points.push_back(Vector3(0.465407f, -1.06052f, -7.67083f));
  points.push_back(Vector3(-8.89706f, -8.19391f, 7.05191f));
  points.push_back(Vector3(-6.03076f, -8.89401f, 8.4753f));
  points.push_back(Vector3(-7.3217f, -6.80105f, -3.94024f));
  points.push_back(Vector3(-7.24479f, 1.20273f, 7.16422f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest43(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.47407f, 1.18259f, 4.14533f));
  points.push_back(Vector3(5.54674f, 2.22449f, 4.30158f));
  points.push_back(Vector3(7.47185f, 2.55898f, -4.90402f));
  points.push_back(Vector3(-0.687582f, 5.50584f, 7.42241f));
  points.push_back(Vector3(-0.879238f, 4.87533f, -4.51888f));
  points.push_back(Vector3(-1.20518f, -2.76406f, 5.42528f));
  points.push_back(Vector3(-5.66454f, 5.13291f, -3.72356f));
  points.push_back(Vector3(-6.12903f, -6.88284f, -6.03504f));
  points.push_back(Vector3(1.62877f, 0.115055f, -6.07044f));
  points.push_back(Vector3(-6.4391f, -5.25193f, -8.98862f));
  points.push_back(Vector3(-7.4572f, -2.40272f, 1.64525f));
  points.push_back(Vector3(-2.59316f, -0.207831f, -6.53859f));
  points.push_back(Vector3(-9.52269f, -6.13697f, 4.88937f));
  points.push_back(Vector3(4.81552f, 6.36403f, 6.70949f));
  points.push_back(Vector3(-6.22364f, 9.03684f, 1.55675f));
  points.push_back(Vector3(-3.96222f, 5.64318f, 0.171819f));
  points.push_back(Vector3(9.08322f, 7.26676f, 0.727866f));
  points.push_back(Vector3(-1.98096f, -2.00537f, -2.09937f));
  points.push_back(Vector3(2.54128f, -6.02832f, -1.66173f));
  points.push_back(Vector3(-4.88815f, 7.622f, -5.75549f));
  points.push_back(Vector3(-6.01794f, 9.76867f, 5.95996f));
  points.push_back(Vector3(-8.89584f, -8.58272f, 2.52358f));
  points.push_back(Vector3(5.20676f, 2.73598f, 2.65908f));
  points.push_back(Vector3(7.61528f, 1.80395f, -7.63237f));
  points.push_back(Vector3(-9.6234f, 9.97314f, -7.85638f));
  points.push_back(Vector3(7.27653f, -6.62404f, 1.27537f));
  points.push_back(Vector3(6.90054f, 8.30073f, 0.555742f));
  points.push_back(Vector3(-9.41954f, 1.64586f, -9.51048f));
  points.push_back(Vector3(-8.5345f, -4.85397f, 6.88528f));
  points.push_back(Vector3(5.50706f, -8.40632f, 7.07266f));
  points.push_back(Vector3(-9.37864f, 6.41896f, 0.50325f));
  points.push_back(Vector3(1.39073f, -3.40312f, 5.48692f));
  points.push_back(Vector3(0.945158f, 1.22471f, -8.6877f));
  points.push_back(Vector3(5.60167f, 7.07511f, 5.64135f));
  points.push_back(Vector3(2.96793f, -4.03668f, -0.10651f));
  points.push_back(Vector3(-4.17463f, 5.43687f, -7.34733f));
  points.push_back(Vector3(8.04254f, 5.20249f, -9.58983f));
  points.push_back(Vector3(-5.29038f, 2.07007f, 9.12351f));
  points.push_back(Vector3(0.826136f, -3.6607f, 0.308542f));
  points.push_back(Vector3(-0.245674f, 8.71273f, 5.88122f));
  points.push_back(Vector3(-5.5327f, 1.78076f, -9.4293f));
  points.push_back(Vector3(-7.84234f, -6.91458f, -5.44359f));
  points.push_back(Vector3(3.4257f, 8.83663f, -9.04416f));
  points.push_back(Vector3(-3.67168f, -5.34288f, -2.58522f));
  points.push_back(Vector3(2.65542f, -3.85113f, 8.75607f));
  points.push_back(Vector3(-0.526444f, 8.29829f, 9.11802f));
  points.push_back(Vector3(4.10932f, -1.1948f, 9.64049f));
  points.push_back(Vector3(0.557573f, 2.95572f, 4.05316f));
  points.push_back(Vector3(4.66598f, -5.22629f, 7.62871f));
  points.push_back(Vector3(-7.51335f, -1.23386f, -6.00452f));
  points.push_back(Vector3(6.21204f, 5.52721f, 0.655232f));
  points.push_back(Vector3(3.1492f, 0.736412f, -3.3372f));
  points.push_back(Vector3(1.12827f, 6.06739f, 1.03977f));
  points.push_back(Vector3(2.36854f, 2.80251f, 8.77682f));
  points.push_back(Vector3(-2.58644f, -3.34269f, -1.04343f));
  points.push_back(Vector3(-4.52803f, -4.83016f, -0.103458f));
  points.push_back(Vector3(9.59899f, -7.17887f, 4.24055f));
  points.push_back(Vector3(2.49489f, -7.11661f, 8.20612f));
  points.push_back(Vector3(6.94327f, -5.8916f, 0.00762963f));
  points.push_back(Vector3(-2.46376f, -2.96182f, -1.0239f));
  points.push_back(Vector3(-8.29402f, 8.26533f, -6.80349f));
  points.push_back(Vector3(8.00653f, 4.47798f, -6.78701f));
  points.push_back(Vector3(0.00946074f, 8.25922f, 4.6556f));
  points.push_back(Vector3(0.84994f, -0.341502f, 0.423292f));
  points.push_back(Vector3(-1.53783f, -2.36366f, 7.37968f));
  points.push_back(Vector3(4.93576f, -3.84075f, 8.06818f));
  points.push_back(Vector3(-6.16443f, 7.35343f, -1.57018f));
  points.push_back(Vector3(8.03644f, 7.53471f, 3.61003f));
  points.push_back(Vector3(3.10831f, -2.86477f, 0.404981f));
  points.push_back(Vector3(-4.2204f, 0.385449f, 5.54186f));
  points.push_back(Vector3(9.66613f, -1.02451f, -5.37767f));
  points.push_back(Vector3(1.0831f, -0.893887f, -9.99756f));
  points.push_back(Vector3(0.88229f, -7.86615f, -7.09281f));
  points.push_back(Vector3(-1.60375f, -5.68224f, -8.04437f));
  points.push_back(Vector3(5.12803f, -9.53307f, 0.537431f));
  points.push_back(Vector3(0.100406f, -2.02246f, 6.9805f));
  points.push_back(Vector3(5.06882f, 6.51967f, -7.99615f));
  points.push_back(Vector3(5.0914f, -9.94995f, -6.01489f));
  points.push_back(Vector3(1.32054f, 5.16282f, -3.72417f));
  points.push_back(Vector3(4.46211f, -3.00089f, -6.90603f));
  points.push_back(Vector3(-1.28513f, 5.0444f, -8.25373f));
  points.push_back(Vector3(-1.21982f, -6.36769f, -0.904874f));
  points.push_back(Vector3(9.00266f, 1.32542f, 5.43931f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest44(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.65535f, 4.19477f, -8.06635f));
  points.push_back(Vector3(9.0228f, 9.33287f, 6.2035f));
  points.push_back(Vector3(-5.40025f, 5.14573f, -1.99072f));
  points.push_back(Vector3(0.788293f, -6.27979f, 4.97543f));
  points.push_back(Vector3(9.48363f, 5.85925f, 2.8843f));
  points.push_back(Vector3(-4.19721f, 7.71172f, 2.05115f));
  points.push_back(Vector3(-7.34672f, -1.47435f, 2.2367f));
  points.push_back(Vector3(-5.97095f, -0.836512f, 4.36079f));
  points.push_back(Vector3(-9.45006f, 5.88855f, -9.58983f));
  points.push_back(Vector3(-1.53111f, -0.281075f, -1.21555f));
  points.push_back(Vector3(5.86474f, 3.62041f, 7.88812f));
  points.push_back(Vector3(8.9172f, -4.97177f, 7.022f));
  points.push_back(Vector3(-3.70281f, -6.01856f, -9.43907f));
  points.push_back(Vector3(3.43608f, -7.57378f, 6.23402f));
  points.push_back(Vector3(1.6068f, -2.28797f, -5.0969f));
  points.push_back(Vector3(0.273751f, 2.93008f, -0.143742f));
  points.push_back(Vector3(0.786462f, -6.31886f, 5.51256f));
  points.push_back(Vector3(-4.23139f, 5.86535f, 8.63155f));
  points.push_back(Vector3(4.20331f, 6.76443f, -1.41514f));
  points.push_back(Vector3(-7.39006f, 8.081f, 1.01352f));
  points.push_back(Vector3(-1.76611f, 6.35487f, 9.12107f));
  points.push_back(Vector3(-9.98291f, -1.98645f, -2.85195f));
  points.push_back(Vector3(-5.18052f, -6.74917f, 3.61248f));
  points.push_back(Vector3(5.59008f, 0.383618f, 4.0904f));
  points.push_back(Vector3(7.91803f, 3.96527f, 6.11255f));
  points.push_back(Vector3(0.159001f, -7.51885f, -5.65539f));
  points.push_back(Vector3(-4.39253f, -8.78903f, -3.62774f));
  points.push_back(Vector3(4.53658f, 0.421461f, 7.67937f));
  points.push_back(Vector3(3.03079f, -9.99451f, 6.77786f));
  points.push_back(Vector3(3.00882f, 5.76281f, -0.0888089f));
  points.push_back(Vector3(9.99023f, -7.09098f, 2.48512f));
  points.push_back(Vector3(-4.64888f, -7.80267f, 4.64644f));
  points.push_back(Vector3(0.359813f, -2.02307f, 9.04721f));
  points.push_back(Vector3(-0.508744f, 0.932341f, -2.9313f));
  points.push_back(Vector3(0.945769f, 1.46764f, 6.40187f));
  points.push_back(Vector3(-6.77541f, -5.4912f, -4.49629f));
  points.push_back(Vector3(-2.34657f, 6.76992f, 9.82849f));
  points.push_back(Vector3(8.1341f, 4.66964f, 9.01608f));
  points.push_back(Vector3(-0.81637f, -6.14856f, -0.0509659f));
  points.push_back(Vector3(4.50545f, -7.17032f, 0.265816f));
  points.push_back(Vector3(-4.43587f, 2.34657f, -2.52724f));
  points.push_back(Vector3(-4.84298f, -5.5327f, 4.78378f));
  points.push_back(Vector3(3.06986f, 8.58577f, -3.31095f));
  points.push_back(Vector3(-8.88607f, 3.57524f, -6.84927f));
  points.push_back(Vector3(-8.96603f, 5.08286f, 7.25394f));
  points.push_back(Vector3(-4.44624f, -7.07755f, 3.88165f));
  points.push_back(Vector3(2.19153f, 2.56142f, -1.02206f));
  points.push_back(Vector3(-3.13211f, -7.37358f, -5.48509f));
  points.push_back(Vector3(-0.99765f, -7.85577f, -8.27509f));
  points.push_back(Vector3(9.50682f, -4.03912f, -0.893277f));
  points.push_back(Vector3(6.42628f, -8.66573f, -5.4033f));
  points.push_back(Vector3(5.09751f, -0.0143437f, 4.38398f));
  points.push_back(Vector3(9.3054f, -5.71459f, 7.83563f));
  points.push_back(Vector3(8.53877f, -8.11151f, 6.89688f));
  points.push_back(Vector3(-7.60674f, -2.73843f, 9.82238f));
  points.push_back(Vector3(6.92251f, -7.56279f, -8.0401f));
  points.push_back(Vector3(-4.3498f, -3.57219f, -7.31925f));
  points.push_back(Vector3(-4.23078f, -1.8601f, 4.58724f));
  points.push_back(Vector3(9.16562f, -0.127262f, -4.17829f));
  points.push_back(Vector3(9.57213f, -3.9024f, 5.48753f));
  points.push_back(Vector3(3.53191f, 1.41331f, 9.76012f));
  points.push_back(Vector3(-5.36363f, -7.40837f, 3.96954f));
  points.push_back(Vector3(-4.88754f, -7.16117f, -4.7557f));
  points.push_back(Vector3(4.11542f, -9.28159f, -3.16446f));
  points.push_back(Vector3(-6.02832f, 6.28712f, -2.38502f));
  points.push_back(Vector3(-9.51964f, 6.32435f, 0.50264f));
  points.push_back(Vector3(7.75079f, 1.92053f, 5.87695f));
  points.push_back(Vector3(1.98279f, -2.3777f, 5.1915f));
  points.push_back(Vector3(9.94934f, -9.50194f, 2.73049f));
  points.push_back(Vector3(-0.652181f, -5.2971f, 7.57195f));
  points.push_back(Vector3(-1.52135f, 8.26472f, 8.25373f));
  points.push_back(Vector3(-0.347606f, 3.14859f, -5.77929f));
  points.push_back(Vector3(2.40577f, 5.39293f, 8.56136f));
  points.push_back(Vector3(8.39961f, -6.34327f, -4.84359f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest45(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.45433f, -6.48793f, -0.339671f));
  points.push_back(Vector3(-0.497147f, 4.83016f, 5.1323f));
  points.push_back(Vector3(-7.17582f, 1.59886f, -3.21818f));
  points.push_back(Vector3(5.53392f, 9.92126f, -5.80493f));
  points.push_back(Vector3(-9.02829f, -3.87066f, -8.66939f));
  points.push_back(Vector3(-7.71172f, 3.98175f, -7.54021f));
  points.push_back(Vector3(4.58357f, 0.839564f, 8.28059f));
  points.push_back(Vector3(5.05478f, 4.27045f, 7.53166f));
  points.push_back(Vector3(-3.54167f, -0.759606f, -4.87777f));
  points.push_back(Vector3(6.02954f, -6.06861f, 9.52025f));
  points.push_back(Vector3(-8.61995f, -9.61852f, -1.74596f));
  points.push_back(Vector3(-5.85925f, -4.4261f, -8.82748f));
  points.push_back(Vector3(-6.84988f, 5.49242f, 9.84313f));
  points.push_back(Vector3(-5.93921f, -4.59456f, 1.94128f));
  points.push_back(Vector3(2.92398f, -8.6755f, 2.72744f));
  points.push_back(Vector3(-3.25846f, 5.92273f, 7.0397f));
  points.push_back(Vector3(0.710166f, 9.64049f, 0.0021363f));
  points.push_back(Vector3(6.51357f, -2.96854f, -3.20231f));
  points.push_back(Vector3(9.1113f, -9.39146f, 0.990936f));
  points.push_back(Vector3(4.66109f, 0.871303f, 5.56688f));
  points.push_back(Vector3(-3.46904f, 3.40129f, 8.764f));
  points.push_back(Vector3(8.96603f, 6.86148f, 5.5504f));
  points.push_back(Vector3(-1.2833f, 2.44301f, -1.19663f));
  points.push_back(Vector3(5.4564f, -6.75588f, -8.21161f));
  points.push_back(Vector3(4.99374f, 5.18418f, -3.76141f));
  points.push_back(Vector3(5.05844f, -7.94488f, 2.48695f));
  points.push_back(Vector3(-8.43806f, 9.31211f, -7.11844f));
  points.push_back(Vector3(6.47084f, -1.45787f, -3.38664f));
  points.push_back(Vector3(-8.86471f, -3.41472f, -2.48573f));
  points.push_back(Vector3(-0.0894192f, -3.89203f, -9.44761f));
  points.push_back(Vector3(8.52657f, 9.42442f, -3.94879f));
  points.push_back(Vector3(-3.12967f, -3.67229f, -9.82788f));
  points.push_back(Vector3(8.11029f, -2.49001f, 4.77828f));
  points.push_back(Vector3(-8.7524f, -7.01468f, -3.56426f));
  points.push_back(Vector3(-6.20472f, 7.48039f, -7.55669f));
  points.push_back(Vector3(-0.434889f, 1.96081f, 4.11054f));
  points.push_back(Vector3(-2.19092f, 1.80639f, 7.92169f));
  points.push_back(Vector3(5.08835f, 7.55058f, 6.78457f));
  points.push_back(Vector3(-6.29688f, -4.36262f, 2.10059f));
  points.push_back(Vector3(-5.10971f, 3.0607f, -0.300607f));
  points.push_back(Vector3(-5.97766f, 5.28001f, -2.00537f));
  points.push_back(Vector3(2.88125f, 1.65807f, 7.43278f));
  points.push_back(Vector3(6.55751f, 1.54515f, 4.36933f));
  points.push_back(Vector3(7.91681f, 5.07126f, 8.64681f));
  points.push_back(Vector3(7.51701f, 7.96686f, 7.88812f));
  points.push_back(Vector3(-3.03751f, -4.71847f, -2.48878f));
  points.push_back(Vector3(7.80877f, -9.67772f, -0.534379f));
  points.push_back(Vector3(1.26865f, 0.299387f, 3.47392f));
  points.push_back(Vector3(2.39845f, 2.53822f, -5.38743f));
  points.push_back(Vector3(1.20762f, 2.0603f, 0.312204f));
  points.push_back(Vector3(4.95346f, -2.63771f, -2.42897f));
  points.push_back(Vector3(5.3325f, 4.8088f, 4.34004f));
  points.push_back(Vector3(3.14066f, -9.2822f, -2.43629f));
  points.push_back(Vector3(-6.24805f, 8.63216f, 2.78909f));
  points.push_back(Vector3(6.53432f, -1.17588f, -5.15488f));
  points.push_back(Vector3(7.70989f, -2.46193f, -0.814539f));
  points.push_back(Vector3(1.65624f, -0.426954f, -2.8721f));
  points.push_back(Vector3(-1.33946f, -2.87149f, 5.56566f));
  points.push_back(Vector3(-0.381787f, -3.29875f, 5.72985f));
  points.push_back(Vector3(-6.18397f, 6.02039f, 4.07086f));
  points.push_back(Vector3(3.77483f, -0.426344f, 8.02179f));
  points.push_back(Vector3(3.4135f, 0.215155f, -4.67696f));
  points.push_back(Vector3(0.125431f, 5.33006f, -9.08567f));
  points.push_back(Vector3(0.481277f, -6.91824f, 0.588092f));
  points.push_back(Vector3(4.51582f, -3.72539f, -8.26899f));
  points.push_back(Vector3(-0.909146f, 8.04132f, 1.45116f));
  points.push_back(Vector3(-9.61242f, -3.77667f, -9.6588f));
  points.push_back(Vector3(-5.57176f, 8.88852f, -2.78542f));
  points.push_back(Vector3(-8.47652f, -2.48512f, 2.42592f));
  points.push_back(Vector3(0.126041f, -3.52336f, 8.82687f));
  points.push_back(Vector3(8.30317f, 8.09931f, 0.625935f));
  points.push_back(Vector3(-2.47658f, 2.7195f, -8.51131f));
  points.push_back(Vector3(6.04236f, 7.9931f, -9.27305f));
  points.push_back(Vector3(-9.49706f, -3.98053f, 8.60225f));
  points.push_back(Vector3(2.4723f, -1.02817f, 6.26453f));
  points.push_back(Vector3(-9.35789f, -1.15024f, -0.119938f));
  points.push_back(Vector3(0.800501f, -6.89749f, -0.296335f));
  points.push_back(Vector3(-6.72292f, -9.26267f, -1.12094f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest46(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.79553f, -8.30073f, -4.82589f));
  points.push_back(Vector3(8.01202f, 8.29707f, -4.70138f));
  points.push_back(Vector3(7.97784f, 7.11905f, -6.53493f));
  points.push_back(Vector3(7.20878f, 5.35813f, 9.59838f));
  points.push_back(Vector3(0.334788f, 9.18821f, -4.86801f));
  points.push_back(Vector3(2.70974f, 4.98459f, 9.4171f));
  points.push_back(Vector3(-6.48915f, 5.56749f, -3.15714f));
  points.push_back(Vector3(9.30723f, -2.82937f, -4.58296f));
  points.push_back(Vector3(-7.65618f, 5.03464f, -8.85311f));
  points.push_back(Vector3(6.46046f, -9.035f, 1.92846f));
  points.push_back(Vector3(-1.82836f, 4.33699f, 4.27045f));
  points.push_back(Vector3(9.8352f, 5.08347f, 9.40184f));
  points.push_back(Vector3(-1.40782f, -2.41737f, -8.07001f));
  points.push_back(Vector3(-8.09137f, 1.96326f, -5.3264f));
  points.push_back(Vector3(-0.603961f, -7.75811f, -4.0611f));
  points.push_back(Vector3(-1.67211f, 0.166326f, 9.30418f));
  points.push_back(Vector3(2.92215f, -5.99841f, 9.87243f));
  points.push_back(Vector3(-9.80285f, 9.62401f, 7.51274f));
  points.push_back(Vector3(3.22367f, 4.31806f, -2.72134f));
  points.push_back(Vector3(-3.11808f, -9.03561f, -5.01083f));
  points.push_back(Vector3(-0.754112f, 2.04199f, 3.27494f));
  points.push_back(Vector3(-8.24091f, -3.38115f, 0.504471f));
  points.push_back(Vector3(-4.75814f, -3.51299f, -7.53655f));
  points.push_back(Vector3(7.1453f, 0.0253304f, 6.34327f));
  points.push_back(Vector3(-4.68245f, 6.20289f, 5.34532f));
  points.push_back(Vector3(6.84805f, -7.42851f, -6.36097f));
  points.push_back(Vector3(-1.08615f, -1.92175f, 4.36079f));
  points.push_back(Vector3(-2.03101f, -1.56102f, 7.1569f));
  points.push_back(Vector3(-1.41881f, -2.30445f, -8.1811f));
  points.push_back(Vector3(-9.84008f, -2.32276f, 3.46965f));
  points.push_back(Vector3(3.16446f, -3.43364f, -2.20313f));
  points.push_back(Vector3(3.10404f, -9.74181f, -0.638142f));
  points.push_back(Vector3(-9.03378f, -2.43934f, 9.09299f));
  points.push_back(Vector3(3.94147f, -9.10703f, 6.04114f));
  points.push_back(Vector3(-8.905f, -1.07761f, -6.97501f));
  points.push_back(Vector3(8.30439f, 8.67977f, 1.99499f));
  points.push_back(Vector3(9.49644f, 2.33375f, -5.26048f));
  points.push_back(Vector3(3.93902f, 9.57762f, 5.48326f));
  points.push_back(Vector3(-8.28486f, 3.93048f, 6.25965f));
  points.push_back(Vector3(-2.77566f, -4.14716f, -0.741905f));
  points.push_back(Vector3(-0.400098f, -8.38252f, -7.71783f));
  points.push_back(Vector3(2.584f, -2.55776f, -2.36061f));
  points.push_back(Vector3(6.54836f, 9.8645f, 4.15326f));
  points.push_back(Vector3(-4.51949f, 8.20307f, -7.93756f));
  points.push_back(Vector3(-2.0127f, 6.95181f, -7.90216f));
  points.push_back(Vector3(-6.2273f, 7.70928f, 8.11151f));
  points.push_back(Vector3(-7.00308f, -8.11396f, 9.10092f));
  points.push_back(Vector3(2.24769f, -0.867641f, -2.58095f));
  points.push_back(Vector3(-8.02423f, 1.33457f, 0.332957f));
  points.push_back(Vector3(-6.37135f, -1.67272f, -5.90747f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest47(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.19553f, 6.35182f, -2.89468f));
  points.push_back(Vector3(8.82382f, 3.24747f, -3.29875f));
  points.push_back(Vector3(-0.215766f, 9.33226f, 6.90542f));
  points.push_back(Vector3(-2.28919f, -1.81494f, -2.30995f));
  points.push_back(Vector3(7.59697f, 9.00998f, -7.81671f));
  points.push_back(Vector3(7.99127f, -8.12616f, -5.57787f));
  points.push_back(Vector3(9.84375f, 7.42119f, -5.94836f));
  points.push_back(Vector3(-6.59963f, -4.36811f, 4.10932f));
  points.push_back(Vector3(-4.85885f, -3.29264f, 5.86474f));
  points.push_back(Vector3(-6.69607f, 6.83035f, 6.98782f));
  points.push_back(Vector3(9.49278f, 7.49138f, 3.62163f));
  points.push_back(Vector3(-5.15854f, 2.37953f, 6.08692f));
  points.push_back(Vector3(-3.73455f, -8.96298f, -6.83218f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest48(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.29035f, 4.73128f, 7.26066f));
  points.push_back(Vector3(-3.24198f, 1.41209f, 4.79659f));
  points.push_back(Vector3(2.24342f, -1.81433f, 2.26051f));
  points.push_back(Vector3(-5.91601f, -2.80007f, 9.89563f));
  points.push_back(Vector3(2.27027f, -6.01001f, 1.62328f));
  points.push_back(Vector3(-7.63054f, 3.12967f, 0.0442518f));
  points.push_back(Vector3(-2.86538f, 6.09851f, -2.71645f));
  points.push_back(Vector3(3.16202f, -3.76507f, 7.8515f));
  points.push_back(Vector3(1.62023f, 1.09104f, -9.54589f));
  points.push_back(Vector3(-1.29063f, -4.12397f, -4.31928f));
  points.push_back(Vector3(1.05319f, 4.47493f, 3.90545f));
  points.push_back(Vector3(1.5952f, -4.62264f, -0.907315f));
  points.push_back(Vector3(5.91235f, 2.0951f, 2.01148f));
  points.push_back(Vector3(-8.29585f, -0.204779f, -2.48024f));
  points.push_back(Vector3(7.83868f, 7.95892f, -0.2884f));
  points.push_back(Vector3(2.08533f, -9.85717f, 6.20472f));
  points.push_back(Vector3(9.99878f, -5.37278f, 6.87979f));
  points.push_back(Vector3(-0.805383f, 2.56508f, -1.08066f));
  points.push_back(Vector3(-1.77709f, 1.91809f, -4.10932f));
  points.push_back(Vector3(-0.819422f, 2.5425f, -3.80718f));
  points.push_back(Vector3(3.74981f, 6.40614f, -0.0930815f));
  points.push_back(Vector3(-7.35771f, -8.21833f, 1.14475f));
  points.push_back(Vector3(6.25782f, 0.677206f, -9.95361f));
  points.push_back(Vector3(8.34407f, -8.6285f, 7.11051f));
  points.push_back(Vector3(-0.323801f, 9.89257f, 3.73577f));
  points.push_back(Vector3(-5.96728f, 1.75329f, -9.52025f));
  points.push_back(Vector3(-4.54085f, -3.43303f, 6.54408f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest49(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.89319f, -9.75585f, 0.906705f));
  points.push_back(Vector3(8.34529f, -0.183416f, -2.13904f));
  points.push_back(Vector3(-5.10727f, -5.33433f, -0.350658f));
  points.push_back(Vector3(-8.92026f, 9.78149f, 8.28059f));
  points.push_back(Vector3(-1.7777f, -5.66698f, -8.57417f));
  points.push_back(Vector3(4.17585f, 2.93252f, -1.6306f));
  points.push_back(Vector3(-1.24058f, 2.00964f, -4.56343f));
  points.push_back(Vector3(6.3152f, 8.11945f, 5.62975f));
  points.push_back(Vector3(-4.3907f, -5.70299f, -6.13269f));
  points.push_back(Vector3(-6.28224f, -7.89727f, -7.73247f));
  points.push_back(Vector3(8.42219f, -7.8045f, 7.63237f));
  points.push_back(Vector3(0.647908f, -5.17441f, 9.0112f));
  points.push_back(Vector3(-2.8898f, 8.41609f, -5.01511f));
  points.push_back(Vector3(1.93579f, 6.76626f, 8.26411f));
  points.push_back(Vector3(6.68935f, -0.00946074f, -7.64397f));
  points.push_back(Vector3(-5.54491f, -7.44804f, 9.13449f));
  points.push_back(Vector3(4.60921f, -1.00558f, -6.01306f));
  points.push_back(Vector3(2.83181f, 0.0155644f, -8.24824f));
  points.push_back(Vector3(-6.6509f, 8.12922f, 5.10361f));
  points.push_back(Vector3(0.150456f, -2.63466f, 7.86493f));
  points.push_back(Vector3(-7.69524f, -5.95019f, 4.97726f));
  points.push_back(Vector3(9.63622f, -4.44441f, -8.54366f));
  points.push_back(Vector3(-7.2747f, 2.14942f, 3.74615f));
  points.push_back(Vector3(-9.33042f, 0.798669f, 9.57823f));
  points.push_back(Vector3(0.147404f, 4.50667f, -7.13309f));
  points.push_back(Vector3(4.55428f, 5.93616f, 2.21534f));
  points.push_back(Vector3(-7.16666f, -9.58556f, -4.04645f));
  points.push_back(Vector3(-5.28611f, -8.37458f, -6.66494f));
  points.push_back(Vector3(4.8088f, 8.77377f, 7.14591f));
  points.push_back(Vector3(-5.03159f, -8.53999f, 5.76769f));
  points.push_back(Vector3(-9.48363f, 6.2157f, 0.401929f));
  points.push_back(Vector3(-9.37925f, 1.73559f, -7.24479f));
  points.push_back(Vector3(7.57439f, 6.58132f, 7.87286f));
  points.push_back(Vector3(-7.04093f, 9.12412f, 1.42491f));
  points.push_back(Vector3(6.92984f, -1.19053f, 1.14536f));
  points.push_back(Vector3(0.74984f, -9.51231f, 0.4532f));
  points.push_back(Vector3(8.51802f, -6.05396f, 8.27265f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest50(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.52452f, 3.90118f, -1.95959f));
  points.push_back(Vector3(5.45518f, 4.48714f, 1.24851f));
  points.push_back(Vector3(6.33534f, 4.13251f, 4.05621f));
  points.push_back(Vector3(-3.12906f, -6.92007f, -6.74612f));
  points.push_back(Vector3(-1.9657f, 2.66213f, -2.74514f));
  points.push_back(Vector3(1.90649f, -8.91293f, -1.14536f));
  points.push_back(Vector3(5.47533f, -1.70141f, 4.41939f));
  points.push_back(Vector3(-5.65416f, 3.51909f, -2.31666f));
  points.push_back(Vector3(4.50545f, 2.99966f, -0.0772118f));
  points.push_back(Vector3(-5.92944f, 0.459304f, -5.95202f));
  points.push_back(Vector3(7.27348f, -1.1478f, 0.655232f));
  points.push_back(Vector3(4.72152f, -3.18155f, -0.534989f));
  points.push_back(Vector3(9.23521f, -6.76992f, -7.97601f));
  points.push_back(Vector3(1.22288f, -6.87796f, 0.219428f));
  points.push_back(Vector3(-3.29569f, 5.43077f, 0.168157f));
  points.push_back(Vector3(-3.16752f, 3.34086f, 6.91824f));
  points.push_back(Vector3(-0.942106f, 7.4926f, -2.77261f));
  points.push_back(Vector3(4.10932f, 1.59764f, 5.54064f));
  points.push_back(Vector3(2.05786f, 4.75997f, -1.99133f));
  points.push_back(Vector3(9.8529f, 2.58644f, 0.477615f));
  points.push_back(Vector3(5.85864f, 0.549638f, 9.97986f));
  points.push_back(Vector3(-6.83645f, 3.24442f, 1.94433f));
  points.push_back(Vector3(5.4912f, 6.48732f, 6.8627f));
  points.push_back(Vector3(-9.16929f, 8.08283f, 5.52782f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest51(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.39595f, -2.96548f, 9.37925f));
  points.push_back(Vector3(-1.65746f, 7.74957f, -2.22755f));
  points.push_back(Vector3(1.5598f, -7.12149f, 8.13349f));
  points.push_back(Vector3(-7.03482f, 1.98523f, 8.47041f));
  points.push_back(Vector3(6.10828f, -1.26133f, 3.73699f));
  points.push_back(Vector3(-8.49422f, -4.39619f, 4.01349f));
  points.push_back(Vector3(-2.08655f, 5.10727f, 8.00775f));
  points.push_back(Vector3(2.37526f, -9.47447f, 0.939055f));
  points.push_back(Vector3(9.23399f, 3.3549f, 1.15207f));
  points.push_back(Vector3(5.74389f, -7.38273f, -3.74798f));
  points.push_back(Vector3(3.97687f, 0.730308f, -6.74429f));
  points.push_back(Vector3(9.6173f, 1.83386f, 1.93579f));
  points.push_back(Vector3(-0.588092f, -0.473342f, -6.11377f));
  points.push_back(Vector3(-0.307932f, 6.62282f, 9.7705f));
  points.push_back(Vector3(7.56401f, 5.31907f, -9.87793f));
  points.push_back(Vector3(-2.92032f, -4.62325f, 3.16385f));
  points.push_back(Vector3(1.21006f, 4.51765f, 7.24845f));
  points.push_back(Vector3(-3.87432f, 3.19315f, -3.84136f));
  points.push_back(Vector3(-1.02878f, 2.77505f, -7.48222f));
  points.push_back(Vector3(-3.81573f, 7.42546f, -5.79943f));
  points.push_back(Vector3(0.731529f, 5.51683f, -6.82363f));
  points.push_back(Vector3(8.71273f, 2.87637f, -0.887173f));
  points.push_back(Vector3(1.08737f, -7.48466f, 7.96503f));
  points.push_back(Vector3(-2.94534f, -0.444655f, 4.48714f));
  points.push_back(Vector3(-2.85501f, -7.45293f, 9.01425f));
  points.push_back(Vector3(-6.81631f, 5.18845f, 9.96033f));
  points.push_back(Vector3(0.310984f, 4.19599f, -9.07956f));
  points.push_back(Vector3(-3.97137f, -6.40065f, 5.9801f));
  points.push_back(Vector3(-7.77642f, -2.65053f, -1.64037f));
  points.push_back(Vector3(-7.70806f, -8.764f, 7.28446f));
  points.push_back(Vector3(5.17808f, 9.35118f, 5.36851f));
  points.push_back(Vector3(-4.59273f, 9.9115f, 5.84765f));
  points.push_back(Vector3(9.76745f, 2.61696f, 0.854823f));
  points.push_back(Vector3(-6.06555f, 6.85049f, -4.97055f));
  points.push_back(Vector3(9.54894f, -0.681478f, 8.53328f));
  points.push_back(Vector3(-0.202338f, -4.16608f, 8.57479f));
  points.push_back(Vector3(6.7803f, -4.04096f, 7.80267f));
  points.push_back(Vector3(-8.18598f, -1.901f, 3.45561f));
  points.push_back(Vector3(7.24479f, 8.83419f, -2.39418f));
  points.push_back(Vector3(3.43303f, 1.23386f, -3.14127f));
  points.push_back(Vector3(8.28364f, -7.0336f, -9.53001f));
  points.push_back(Vector3(8.01508f, 1.06479f, 7.31681f));
  points.push_back(Vector3(-4.99374f, -5.34165f, -8.64437f));
  points.push_back(Vector3(-7.1514f, 7.97845f, -9.3292f));
  points.push_back(Vector3(7.63604f, 3.7492f, -2.02918f));
  points.push_back(Vector3(6.86819f, -2.25562f, 5.64745f));
  points.push_back(Vector3(-9.35545f, 8.62423f, 8.49605f));
  points.push_back(Vector3(-0.718101f, -9.76134f, -6.1449f));
  points.push_back(Vector3(4.23566f, 7.32902f, -8.41304f));
  points.push_back(Vector3(-0.521561f, -0.0314341f, -2.48085f));
  points.push_back(Vector3(3.26273f, -5.5327f, -5.32029f));
  points.push_back(Vector3(5.17136f, -7.51335f, 7.6397f));
  points.push_back(Vector3(0.480667f, 8.25983f, -7.58782f));
  points.push_back(Vector3(8.29524f, -6.80654f, -1.84667f));
  points.push_back(Vector3(2.42225f, 7.82769f, 0.0143437f));
  points.push_back(Vector3(-0.863979f, 2.05542f, 0.440382f));
  points.push_back(Vector3(9.86267f, -0.152898f, 9.19492f));
  points.push_back(Vector3(-8.90927f, 2.05908f, 9.75646f));
  points.push_back(Vector3(3.13334f, 8.7817f, -1.05564f));
  points.push_back(Vector3(3.80718f, 3.15531f, -6.67226f));
  points.push_back(Vector3(-1.93335f, 8.34407f, 3.24137f));
  points.push_back(Vector3(-6.26392f, 9.57213f, -8.53938f));
  points.push_back(Vector3(-6.4629f, 6.29627f, -5.59679f));
  points.push_back(Vector3(-9.12107f, 9.20469f, -9.46837f));
  points.push_back(Vector3(8.9581f, 2.50038f, -2.72195f));
  points.push_back(Vector3(-8.86959f, -8.19758f, 2.73904f));
  points.push_back(Vector3(2.15796f, 3.9671f, -1.90466f));
  points.push_back(Vector3(7.77337f, 0.35432f, -5.63952f));
  points.push_back(Vector3(-2.68105f, 2.83731f, 5.12314f));
  points.push_back(Vector3(5.67919f, -0.036317f, 4.67147f));
  points.push_back(Vector3(-8.39717f, 6.42323f, 8.78109f));
  points.push_back(Vector3(-9.73266f, 3.08756f, -6.09119f));
  points.push_back(Vector3(0.229194f, -4.97665f, 9.05576f));
  points.push_back(Vector3(2.68044f, -8.25678f, -6.55873f));
  points.push_back(Vector3(-4.41755f, -4.23139f, 0.449538f));
  points.push_back(Vector3(5.48448f, -1.23814f, 6.93411f));
  points.push_back(Vector3(8.94345f, 1.72948f, 1.75939f));
  points.push_back(Vector3(-7.99676f, 3.77606f, -9.57396f));
  points.push_back(Vector3(6.12171f, -2.55959f, 2.24891f));
  points.push_back(Vector3(-0.396435f, -2.02918f, 4.26069f));
  points.push_back(Vector3(-6.84133f, -2.67006f, -0.292062f));
  points.push_back(Vector3(-4.57137f, 7.11539f, 3.27494f));
  points.push_back(Vector3(7.84661f, 4.85397f, 2.04749f));
  points.push_back(Vector3(-5.3264f, 7.60186f, -3.88592f));
  points.push_back(Vector3(-0.462355f, -0.162664f, 4.87167f));
  points.push_back(Vector3(9.02951f, -2.40455f, 2.32582f));
  TestSphereCentroid(points, file);
}

void SphereCentroidTest52(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.41465f, 4.71847f, -2.27149f));
  points.push_back(Vector3(-6.75588f, -9.25962f, -6.93411f));
  points.push_back(Vector3(-9.1821f, 5.86596f, -1.66112f));
  points.push_back(Vector3(-9.51598f, 8.11579f, -5.26719f));
  points.push_back(Vector3(1.22166f, -1.88879f, 2.23121f));
  points.push_back(Vector3(3.93475f, -8.65047f, -2.62307f));
  points.push_back(Vector3(6.93106f, 8.00653f, 7.62993f));
  points.push_back(Vector3(-5.96973f, 7.55669f, -6.84133f));
  points.push_back(Vector3(-5.28306f, -5.76464f, -4.76363f));
  points.push_back(Vector3(7.14835f, -4.08429f, -1.63915f));
  points.push_back(Vector3(8.01324f, 8.39839f, 8.31111f));
  points.push_back(Vector3(8.09503f, -7.99493f, -4.99435f));
  points.push_back(Vector3(-1.75512f, -7.50114f, 5.73901f));
  points.push_back(Vector3(4.25459f, 5.28245f, 8.63948f));
  points.push_back(Vector3(0.763268f, 3.26456f, -7.2393f));
  points.push_back(Vector3(2.40455f, 1.68371f, 1.39439f));
  points.push_back(Vector3(-6.91702f, 5.15366f, -1.26926f));
  points.push_back(Vector3(5.02976f, 5.85131f, -8.19819f));
  points.push_back(Vector3(-4.00189f, 5.3795f, -3.01981f));
  points.push_back(Vector3(-4.0202f, 8.46309f, -0.0967437f));
  points.push_back(Vector3(-3.08512f, 7.88751f, -9.07407f));
  points.push_back(Vector3(-2.00415f, 6.07105f, -9.53246f));
  points.push_back(Vector3(-8.01141f, -8.43989f, 5.62731f));
  points.push_back(Vector3(-0.472121f, -3.80657f, 1.08005f));
  points.push_back(Vector3(1.79785f, 3.42753f, 7.45476f));
  points.push_back(Vector3(-2.16895f, 1.70263f, 7.96625f));
  points.push_back(Vector3(-3.09915f, -7.15201f, 8.96603f));
  points.push_back(Vector3(2.08533f, 8.26167f, -6.72475f));
  points.push_back(Vector3(-2.83486f, -9.97742f, 3.91217f));
  points.push_back(Vector3(-3.27677f, 9.2584f, 5.53331f));
  points.push_back(Vector3(4.70931f, 4.26191f, 1.11057f));
  points.push_back(Vector3(-6.198f, 6.74551f, 2.66518f));
  points.push_back(Vector3(-2.75002f, -3.31462f, 8.13349f));
  points.push_back(Vector3(-3.45378f, -3.02774f, 6.89138f));
  points.push_back(Vector3(8.96542f, 0.995819f, -1.07456f));
  points.push_back(Vector3(6.73086f, -2.45094f, -4.64827f));
  points.push_back(Vector3(2.29041f, -2.93374f, 6.07166f));
  points.push_back(Vector3(8.73165f, -7.30644f, -7.91803f));
  points.push_back(Vector3(8.79025f, -2.05725f, -9.02951f));
  points.push_back(Vector3(5.49486f, 5.89221f, 8.40571f));
  points.push_back(Vector3(-7.09769f, 3.83709f, 6.14856f));
  points.push_back(Vector3(-1.2949f, -1.9425f, -7.56279f));
  points.push_back(Vector3(-8.52962f, -0.597858f, -4.1435f));
  points.push_back(Vector3(9.72228f, -3.48247f, 6.72658f));
  points.push_back(Vector3(6.99454f, -4.54695f, 6.45985f));
  points.push_back(Vector3(1.78014f, 8.33125f, 8.5522f));
  points.push_back(Vector3(6.03259f, -4.12946f, -0.608234f));
  points.push_back(Vector3(0.101627f, 3.00943f, -7.39677f));
  points.push_back(Vector3(-1.41209f, -2.81777f, -0.793176f));
  points.push_back(Vector3(7.35771f, 7.2924f, 3.14493f));
  points.push_back(Vector3(-7.84112f, -5.2324f, 9.89196f));
  points.push_back(Vector3(9.95911f, 0.578326f, 4.84115f));
  points.push_back(Vector3(7.93695f, 8.25251f, -3.27067f));
  points.push_back(Vector3(-1.67028f, -3.47514f, -9.32554f));
  points.push_back(Vector3(-1.15329f, 1.98828f, 1.02878f));
  points.push_back(Vector3(-5.79638f, 6.7101f, -5.66393f));
  points.push_back(Vector3(2.30445f, -2.97769f, -6.48549f));
  points.push_back(Vector3(2.55593f, 8.50093f, -4.4084f));
  points.push_back(Vector3(-2.84829f, 1.14841f, 1.59459f));
  points.push_back(Vector3(-2.45521f, 4.02936f, -7.03116f));
  points.push_back(Vector3(-3.22001f, -3.97565f, 8.5577f));
  points.push_back(Vector3(3.27494f, 2.82754f, 1.09104f));
  points.push_back(Vector3(1.42186f, 7.40043f, 1.55431f));
  points.push_back(Vector3(-6.17115f, 9.77233f, 2.69509f));
  points.push_back(Vector3(-5.48692f, -1.23142f, 2.4485f));
  points.push_back(Vector3(5.34471f, -4.96262f, 0.256661f));
  points.push_back(Vector3(3.37321f, 2.69204f, -6.24012f));
  points.push_back(Vector3(-1.60375f, 6.23157f, 1.70263f));
  points.push_back(Vector3(-4.26557f, -9.81811f, -6.43727f));
  points.push_back(Vector3(4.17707f, -2.71401f, -8.54305f));
  points.push_back(Vector3(-6.60146f, 9.35423f, 0.707114f));
  points.push_back(Vector3(5.31053f, -3.4434f, -5.48204f));
  points.push_back(Vector3(-5.06211f, -7.44865f, 7.72698f));
  points.push_back(Vector3(-5.76159f, 0.340892f, 9.87671f));
  points.push_back(Vector3(-6.52577f, 8.8702f, 5.70605f));
  points.push_back(Vector3(-8.64803f, 0.277413f, 2.93252f));
  points.push_back(Vector3(-4.39192f, -1.14841f, 5.73229f));
  points.push_back(Vector3(4.00189f, -3.76202f, -2.94595f));
  points.push_back(Vector3(-3.95733f, 2.72866f, -2.16285f));
  points.push_back(Vector3(-1.35594f, -7.06839f, 4.62264f));
  points.push_back(Vector3(1.85766f, -4.67025f, 3.08267f));
  points.push_back(Vector3(-5.78906f, -9.02585f, 0.30427f));
  points.push_back(Vector3(-6.74856f, 2.2129f, -9.92431f));
  points.push_back(Vector3(-2.21778f, 4.16608f, -3.66192f));
  points.push_back(Vector3(-3.64849f, 5.22691f, 6.33778f));
  points.push_back(Vector3(6.35182f, 6.61184f, 3.89874f));
  points.push_back(Vector3(-9.08689f, 4.01593f, -0.0473037f));
  points.push_back(Vector3(3.35185f, -1.30711f, 8.54305f));
  TestSphereCentroid(points, file);
}

void SphereRitterTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.97681f, -5.28855f, 2.96304f));
  points.push_back(Vector3(-8.51253f, -4.59517f, -2.79946f));
  points.push_back(Vector3(-4.89425f, 9.7058f, -3.62163f));
  points.push_back(Vector3(8.68465f, -6.4275f, 7.1514f));
  TestSphereRitter(points, file);
}

void SphereRitterTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.96704f, 7.51335f, -2.51991f));
  points.push_back(Vector3(4.92294f, 6.88284f, 9.18394f));
  points.push_back(Vector3(4.60433f, 0.772423f, 6.76809f));
  points.push_back(Vector3(9.92248f, -6.87857f, 7.28629f));
  points.push_back(Vector3(-1.73986f, 0.666829f, -9.73998f));
  points.push_back(Vector3(-7.37114f, -2.69814f, 2.27271f));
  points.push_back(Vector3(-2.584f, -9.24863f, -2.36f));
  points.push_back(Vector3(-3.29081f, 9.03928f, 7.21915f));
  TestSphereRitter(points, file);
}

void SphereRitterTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.62767f, 2.76528f, -8.93796f));
  points.push_back(Vector3(1.72704f, -2.88003f, -3.37931f));
  points.push_back(Vector3(7.55181f, -2.96121f, 0.00640889f));
  points.push_back(Vector3(-8.00043f, -2.2251f, -8.14386f));
  points.push_back(Vector3(-4.61531f, -2.49001f, -7.08609f));
  points.push_back(Vector3(-8.37458f, -0.0698874f, -5.93066f));
  points.push_back(Vector3(7.37114f, -8.3343f, 2.11035f));
  points.push_back(Vector3(3.0076f, 6.97439f, -4.94797f));
  points.push_back(Vector3(1.03183f, -7.98761f, 3.62651f));
  points.push_back(Vector3(-8.83969f, 3.29936f, 7.06107f));
  points.push_back(Vector3(-7.97174f, 8.00836f, -1.49205f));
  points.push_back(Vector3(8.44172f, -5.90381f, 1.49998f));
  points.push_back(Vector3(3.98907f, -0.987884f, 6.69485f));
  points.push_back(Vector3(-5.2794f, -0.556352f, 2.80496f));
  points.push_back(Vector3(-1.67821f, -9.61242f, 2.08045f));
  points.push_back(Vector3(2.11035f, -9.63805f, 9.59532f));
  points.push_back(Vector3(2.88858f, -8.84274f, 8.53267f));
  points.push_back(Vector3(-0.0332652f, -5.33372f, -5.47044f));
  points.push_back(Vector3(0.150456f, 6.35548f, -7.56462f));
  points.push_back(Vector3(8.4228f, 2.8489f, 7.20267f));
  points.push_back(Vector3(-3.14066f, -7.11539f, 0.357372f));
  points.push_back(Vector3(9.68566f, 1.29917f, -6.84133f));
  points.push_back(Vector3(-9.01608f, 6.78152f, -6.87857f));
  points.push_back(Vector3(-1.75451f, 4.41389f, 9.36888f));
  points.push_back(Vector3(9.89563f, -5.17502f, -7.54936f));
  points.push_back(Vector3(-3.50505f, 1.08982f, 4.65194f));
  points.push_back(Vector3(9.33775f, -3.07047f, -4.08551f));
  points.push_back(Vector3(3.549f, 7.26188f, 5.13535f));
  points.push_back(Vector3(7.90643f, -9.86755f, 2.68715f));
  points.push_back(Vector3(4.77462f, -3.09366f, 2.38746f));
  points.push_back(Vector3(-0.868252f, 2.88308f, -0.955535f));
  points.push_back(Vector3(-9.78332f, 2.01148f, 7.83074f));
  points.push_back(Vector3(5.35325f, 2.09754f, -8.81649f));
  points.push_back(Vector3(-5.80309f, -0.359813f, -6.04602f));
  points.push_back(Vector3(6.80776f, 7.68792f, -3.75164f));
  points.push_back(Vector3(-1.60253f, -5.84948f, -6.79067f));
  points.push_back(Vector3(8.31721f, 2.42531f, 2.96976f));
  points.push_back(Vector3(-0.759606f, 7.17826f, -8.26411f));
  points.push_back(Vector3(7.07816f, 1.61107f, 3.51482f));
  points.push_back(Vector3(9.76257f, -0.25544f, -0.174261f));
  points.push_back(Vector3(-9.1052f, 9.55748f, -9.47325f));
  points.push_back(Vector3(9.04599f, 2.32032f, 6.66066f));
  points.push_back(Vector3(-0.81576f, 0.8652f, 0.400098f));
  points.push_back(Vector3(-8.93735f, -7.72149f, -4.00189f));
  points.push_back(Vector3(-8.20917f, 6.3976f, -1.90039f));
  points.push_back(Vector3(2.00659f, 6.51662f, -5.51683f));
  points.push_back(Vector3(5.53636f, -0.811487f, -7.21122f));
  points.push_back(Vector3(-6.65456f, 2.51259f, 7.76177f));
  points.push_back(Vector3(7.97296f, 6.83828f, -0.372021f));
  points.push_back(Vector3(-0.542924f, -3.69854f, -6.01001f));
  TestSphereRitter(points, file);
}

void SphereRitterTest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.24458f, -4.38215f, -1.96081f));
  points.push_back(Vector3(-5.43931f, 6.20899f, -0.0796533f));
  points.push_back(Vector3(5.93616f, -2.90811f, -5.94836f));
  points.push_back(Vector3(7.77703f, -4.87594f, -9.48668f));
  points.push_back(Vector3(-6.94266f, 6.26881f, -6.84194f));
  points.push_back(Vector3(-4.23688f, -0.397046f, -1.301f));
  points.push_back(Vector3(2.83486f, -3.6607f, -2.46437f));
  points.push_back(Vector3(0.484939f, 7.01468f, 6.32313f));
  points.push_back(Vector3(6.61794f, -3.66497f, 9.58617f));
  points.push_back(Vector3(9.99695f, -3.84136f, 1.84851f));
  points.push_back(Vector3(3.18094f, 1.19419f, -0.529496f));
  points.push_back(Vector3(2.64199f, 4.27412f, 0.500809f));
  points.push_back(Vector3(-5.22874f, -5.84765f, 6.292f));
  points.push_back(Vector3(-1.57323f, 8.15302f, -4.77767f));
  points.push_back(Vector3(-8.64681f, 2.68899f, 4.25031f));
  points.push_back(Vector3(-1.40294f, -8.73165f, -2.28736f));
  points.push_back(Vector3(0.226753f, -8.53267f, -1.58238f));
  points.push_back(Vector3(-5.51134f, 8.70785f, 9.17478f));
  points.push_back(Vector3(-2.85623f, -1.09592f, 5.2794f));
  points.push_back(Vector3(-4.8027f, -3.72723f, -3.32072f));
  points.push_back(Vector3(6.1919f, -9.4348f, -6.60634f));
  points.push_back(Vector3(3.02713f, -8.12738f, 5.80004f));
  points.push_back(Vector3(-8.47957f, -4.8381f, 1.89367f));
  points.push_back(Vector3(-1.47374f, -1.23569f, -4.20392f));
  points.push_back(Vector3(-2.99905f, 9.87243f, -8.36665f));
  points.push_back(Vector3(5.72192f, -6.15223f, 2.78115f));
  points.push_back(Vector3(-7.40104f, -6.36708f, 8.04132f));
  points.push_back(Vector3(-4.63729f, 2.53395f, 1.29429f));
  points.push_back(Vector3(-8.86349f, -7.58843f, -1.33152f));
  points.push_back(Vector3(-7.81915f, -2.79458f, 8.21039f));
  points.push_back(Vector3(-1.32786f, 1.73193f, 4.59273f));
  points.push_back(Vector3(3.74859f, 1.49754f, -2.68166f));
  points.push_back(Vector3(8.49849f, -8.5168f, 5.60472f));
  points.push_back(Vector3(6.07105f, -9.99817f, -9.24009f));
  points.push_back(Vector3(-4.80697f, -1.32237f, -2.8367f));
  points.push_back(Vector3(7.02506f, -4.93027f, 7.2924f));
  points.push_back(Vector3(3.80779f, -2.05237f, 4.77279f));
  points.push_back(Vector3(5.65844f, 1.64281f, -0.411084f));
  points.push_back(Vector3(-7.4279f, 9.59288f, -8.6877f));
  points.push_back(Vector3(-4.27107f, -0.00701926f, 5.94348f));
  points.push_back(Vector3(8.02728f, 3.48308f, -2.54616f));
  points.push_back(Vector3(8.14753f, 7.38273f, -1.66417f));
  points.push_back(Vector3(1.67699f, 6.51662f, 7.00797f));
  points.push_back(Vector3(-8.29096f, -4.52498f, -8.62484f));
  points.push_back(Vector3(9.64965f, 4.20026f, 0.544145f));
  points.push_back(Vector3(-2.82571f, 3.33232f, 7.60308f));
  points.push_back(Vector3(3.89508f, 5.70666f, 4.21369f));
  points.push_back(Vector3(-1.15329f, 8.53572f, -3.45378f));
  points.push_back(Vector3(-2.24342f, -1.02512f, 9.04477f));
  points.push_back(Vector3(2.84707f, 3.84991f, 0.283517f));
  points.push_back(Vector3(2.64443f, 0.606403f, 1.49815f));
  points.push_back(Vector3(-5.24766f, -3.58928f, 9.54344f));
  points.push_back(Vector3(-1.29368f, 6.89138f, 1.24241f));
  points.push_back(Vector3(-6.30909f, 3.18766f, 4.11908f));
  points.push_back(Vector3(-6.79189f, -0.149846f, -0.488601f));
  points.push_back(Vector3(7.81549f, -7.09098f, 2.01392f));
  points.push_back(Vector3(8.32575f, -1.84606f, 3.46416f));
  points.push_back(Vector3(9.89502f, -6.72658f, -4.14472f));
  points.push_back(Vector3(-2.23914f, 9.682f, -8.76949f));
  points.push_back(Vector3(-6.02527f, -4.41084f, -4.85763f));
  points.push_back(Vector3(-8.51314f, 2.85745f, 1.27659f));
  points.push_back(Vector3(-2.7897f, -0.501419f, 1.37852f));
  points.push_back(Vector3(2.46254f, -9.83703f, -9.16501f));
  points.push_back(Vector3(-2.39723f, 0.627155f, 2.53883f));
  points.push_back(Vector3(-9.05087f, -8.02118f, -5.99536f));
  points.push_back(Vector3(-9.1052f, 6.39027f, 6.19983f));
  points.push_back(Vector3(3.50322f, 4.54817f, 3.08512f));
  points.push_back(Vector3(-9.14914f, 2.25929f, -0.586871f));
  points.push_back(Vector3(-2.68044f, -5.02609f, -0.555132f));
  points.push_back(Vector3(9.07285f, -4.96078f, -9.33226f));
  points.push_back(Vector3(-1.03183f, -8.80734f, 5.08957f));
  points.push_back(Vector3(-4.14228f, 3.66802f, -2.58034f));
  points.push_back(Vector3(2.03345f, 8.34651f, 5.65233f));
  points.push_back(Vector3(4.87533f, 4.16364f, -5.71581f));
  points.push_back(Vector3(-6.60939f, -2.61818f, 2.32887f));
  points.push_back(Vector3(4.18134f, -3.81207f, -5.46556f));
  points.push_back(Vector3(5.21226f, -0.425733f, -3.33232f));
  points.push_back(Vector3(-3.24503f, -3.32194f, 3.49162f));
  points.push_back(Vector3(-8.11396f, 4.44258f, -9.18943f));
  points.push_back(Vector3(-2.172f, -6.28956f, -0.646687f));
  points.push_back(Vector3(0.279855f, 0.758995f, 9.0698f));
  points.push_back(Vector3(6.33412f, 3.64483f, 7.31803f));
  points.push_back(Vector3(-9.27915f, 3.52458f, 7.23319f));
  points.push_back(Vector3(6.26637f, -0.84994f, -0.827357f));
  points.push_back(Vector3(7.21305f, -3.62529f, 6.21937f));
  points.push_back(Vector3(3.16507f, 7.48772f, -4.75814f));
  points.push_back(Vector3(1.21006f, -8.58272f, -0.970183f));
  points.push_back(Vector3(3.78338f, 9.86816f, -8.76339f));
  points.push_back(Vector3(-3.70281f, -0.500809f, 7.07816f));
  points.push_back(Vector3(5.78784f, -3.67046f, 1.66967f));
  points.push_back(Vector3(-6.19617f, 5.78295f, -3.82305f));
  points.push_back(Vector3(1.57567f, -1.0947f, 6.5276f));
  points.push_back(Vector3(-5.73168f, 0.893277f, -3.53435f));
  points.push_back(Vector3(-1.5598f, -8.64864f, -8.62667f));
  points.push_back(Vector3(-0.751061f, 9.17356f, -3.37138f));
  points.push_back(Vector3(-1.06357f, -1.07944f, 5.46129f));
  TestSphereRitter(points, file);
}

void SphereRitterTest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.8114f, -0.7828f, 7.94733f));
  points.push_back(Vector3(-9.48485f, -2.06763f, -3.87494f));
  points.push_back(Vector3(-7.21976f, 1.41209f, -7.15812f));
  points.push_back(Vector3(-2.772f, 6.0802f, 9.38292f));
  points.push_back(Vector3(-7.76544f, 8.39534f, 6.77236f));
  points.push_back(Vector3(-1.94922f, -5.96301f, -0.550249f));
  points.push_back(Vector3(4.57198f, -9.29991f, 1.10324f));
  points.push_back(Vector3(-6.28346f, 3.85662f, 1.16611f));
  points.push_back(Vector3(1.04038f, -8.96359f, 7.10135f));
  points.push_back(Vector3(6.01245f, 2.17139f, 2.39174f));
  points.push_back(Vector3(3.51848f, 1.1301f, -3.75225f));
  points.push_back(Vector3(4.25397f, -1.48961f, -4.1319f));
  points.push_back(Vector3(8.55464f, -9.21995f, 9.57213f));
  points.push_back(Vector3(7.83196f, 6.01245f, -8.00531f));
  points.push_back(Vector3(4.26008f, -8.53389f, 3.9256f));
  points.push_back(Vector3(-3.93719f, 5.8623f, 3.56243f));
  points.push_back(Vector3(1.97302f, 3.79681f, 2.38075f));
  points.push_back(Vector3(-1.20945f, -9.90417f, -6.48976f));
  points.push_back(Vector3(4.46883f, -1.59032f, -5.11765f));
  TestSphereRitter(points, file);
}

void SphereRitterTest6(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.94507f, -0.323191f, -2.58217f));
  points.push_back(Vector3(6.48122f, -3.867f, -4.45235f));
  points.push_back(Vector3(5.50096f, 1.11911f, -2.37587f));
  points.push_back(Vector3(8.64498f, -7.87164f, 7.58171f));
  points.push_back(Vector3(6.89749f, -8.24335f, -0.744346f));
  points.push_back(Vector3(9.035f, -2.64626f, 5.97705f));
  points.push_back(Vector3(9.70763f, 8.6932f, -5.71764f));
  points.push_back(Vector3(0.646077f, 9.8468f, -5.6859f));
  points.push_back(Vector3(3.8731f, -1.19663f, -4.28083f));
  points.push_back(Vector3(-7.73736f, -6.47694f, 8.77438f));
  points.push_back(Vector3(0.79928f, -3.22611f, 6.55873f));
  points.push_back(Vector3(-7.49199f, -6.53554f, -9.97192f));
  points.push_back(Vector3(4.48714f, -8.6932f, 2.31971f));
  points.push_back(Vector3(-1.31565f, -0.0735496f, -0.443434f));
  points.push_back(Vector3(-2.50221f, 2.46925f, -6.68752f));
  points.push_back(Vector3(7.09403f, 6.06311f, 0.472732f));
  points.push_back(Vector3(-3.47636f, 0.827357f, 9.63988f));
  points.push_back(Vector3(-9.24009f, -3.45012f, 6.24683f));
  points.push_back(Vector3(2.39601f, 8.92758f, 2.31727f));
  points.push_back(Vector3(-0.564898f, -2.50404f, 1.22715f));
  points.push_back(Vector3(7.80572f, -9.78271f, 0.165716f));
  points.push_back(Vector3(-2.10303f, -5.41734f, 7.06351f));
  points.push_back(Vector3(-4.52803f, 2.29652f, 6.87613f));
  points.push_back(Vector3(4.37727f, 8.96481f, 1.49876f));
  points.push_back(Vector3(2.30201f, 2.79031f, 8.28669f));
  points.push_back(Vector3(-6.05152f, -8.6053f, 3.09244f));
  points.push_back(Vector3(3.89325f, -0.182196f, 9.04477f));
  points.push_back(Vector3(4.41572f, -3.01004f, 9.67589f));
  points.push_back(Vector3(-9.03012f, 7.30522f, -7.17093f));
  points.push_back(Vector3(-2.88797f, -1.63488f, -7.70745f));
  points.push_back(Vector3(7.47917f, -9.07285f, 3.8255f));
  points.push_back(Vector3(-5.39048f, 6.19312f, -7.48527f));
  points.push_back(Vector3(1.69286f, 5.65294f, 1.51097f));
  points.push_back(Vector3(-5.92944f, -4.05988f, 1.83325f));
  points.push_back(Vector3(9.20957f, 3.23893f, 8.71944f));
  points.push_back(Vector3(-8.56502f, -9.77783f, 9.83886f));
  points.push_back(Vector3(2.69265f, 0.108341f, -3.32255f));
  points.push_back(Vector3(0.277413f, 0.290841f, 5.61449f));
  points.push_back(Vector3(-9.85839f, -4.71358f, -7.00369f));
  points.push_back(Vector3(2.45888f, -9.76501f, -3.39152f));
  points.push_back(Vector3(3.80047f, 7.02933f, 1.7069f));
  points.push_back(Vector3(-1.75695f, -4.05621f, 3.87066f));
  points.push_back(Vector3(-1.87658f, 7.89911f, -8.92392f));
  points.push_back(Vector3(3.71075f, -9.72167f, -5.73779f));
  points.push_back(Vector3(9.94812f, -6.12537f, -2.54677f));
  points.push_back(Vector3(5.70727f, -1.22654f, -8.29218f));
  points.push_back(Vector3(9.6588f, -3.91888f, -5.6212f));
  points.push_back(Vector3(1.6245f, -1.02878f, 3.18461f));
  points.push_back(Vector3(-8.73592f, 6.42079f, 8.1048f));
  points.push_back(Vector3(-4.4322f, 3.70769f, -6.53005f));
  points.push_back(Vector3(-5.67614f, -6.71987f, 6.02954f));
  points.push_back(Vector3(6.42384f, -3.15531f, -1.82104f));
  points.push_back(Vector3(4.14716f, 3.043f, 5.82629f));
  points.push_back(Vector3(-0.555742f, 1.54637f, 9.79614f));
  points.push_back(Vector3(1.0947f, 9.90844f, -7.21061f));
  points.push_back(Vector3(-6.17176f, -1.27842f, -1.17038f));
  points.push_back(Vector3(7.68487f, 2.94961f, -6.42872f));
  points.push_back(Vector3(-3.25663f, -0.749229f, -5.75427f));
  points.push_back(Vector3(-4.04462f, -2.00293f, -1.40904f));
  points.push_back(Vector3(1.95654f, -9.48851f, -3.38176f));
  points.push_back(Vector3(9.80895f, 5.22813f, -4.56587f));
  points.push_back(Vector3(1.11667f, 8.08405f, 6.37867f));
  points.push_back(Vector3(-9.81689f, 3.86517f, -5.9563f));
  points.push_back(Vector3(0.296335f, 9.79369f, -9.32981f));
  points.push_back(Vector3(7.54265f, 5.59374f, -6.09363f));
  points.push_back(Vector3(6.1681f, -6.01794f, -1.85705f));
  points.push_back(Vector3(8.6639f, 0.658895f, 6.29749f));
  points.push_back(Vector3(-2.37526f, 9.56481f, -5.98254f));
  points.push_back(Vector3(-4.26862f, 7.70501f, 3.43608f));
  points.push_back(Vector3(2.29896f, -5.47777f, 0.468459f));
  points.push_back(Vector3(-2.37831f, 2.6603f, 3.62835f));
  points.push_back(Vector3(5.74389f, -5.47349f, 2.23182f));
  points.push_back(Vector3(8.62239f, -4.07758f, -0.362255f));
  points.push_back(Vector3(6.5569f, -3.12906f, 6.92496f));
  points.push_back(Vector3(1.14414f, -6.77602f, -0.872524f));
  points.push_back(Vector3(5.91357f, 9.28587f, 6.32984f));
  points.push_back(Vector3(8.66695f, 6.39454f, -6.44703f));
  points.push_back(Vector3(-2.62978f, 1.08188f, 1.32542f));
  points.push_back(Vector3(5.86535f, 8.22138f, 7.86981f));
  points.push_back(Vector3(-5.14328f, 7.84295f, 1.79724f));
  points.push_back(Vector3(6.9335f, 3.32987f, -9.682f));
  points.push_back(Vector3(-3.95672f, 3.12052f, 6.15589f));
  points.push_back(Vector3(3.18827f, 6.86575f, 1.92602f));
  points.push_back(Vector3(-2.79092f, 3.74737f, -4.3675f));
  points.push_back(Vector3(9.4879f, -2.65297f, 1.62084f));
  points.push_back(Vector3(6.87551f, 1.99011f, -1.31016f));
  points.push_back(Vector3(8.42769f, -8.19758f, -2.38929f));
  points.push_back(Vector3(1.28269f, -9.71007f, 3.26701f));
  points.push_back(Vector3(-5.8684f, -7.23258f, -8.67489f));
  points.push_back(Vector3(-2.20374f, 5.33738f, -8.31538f));
  points.push_back(Vector3(6.23218f, -9.67528f, -0.674764f));
  points.push_back(Vector3(5.03647f, -9.88952f, -2.75918f));
  points.push_back(Vector3(-8.13654f, 0.726646f, 3.63201f));
  points.push_back(Vector3(-6.61855f, -2.09754f, 5.51622f));
  TestSphereRitter(points, file);
}

void SphereRitterTest7(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.36421f, 1.99988f, 3.83404f));
  points.push_back(Vector3(-6.66433f, 8.47835f, -3.88104f));
  points.push_back(Vector3(-8.0456f, 4.29243f, 9.37986f));
  points.push_back(Vector3(-7.0745f, 0.540483f, 8.90072f));
  points.push_back(Vector3(2.30812f, 0.324412f, 0.457472f));
  points.push_back(Vector3(0.823084f, -2.5016f, 3.94757f));
  points.push_back(Vector3(-4.2082f, -5.15976f, -0.513016f));
  points.push_back(Vector3(-6.44398f, -2.84524f, 9.4409f));
  points.push_back(Vector3(-8.15912f, -8.64925f, 9.24375f));
  points.push_back(Vector3(6.6393f, -9.79492f, -4.67513f));
  points.push_back(Vector3(-6.71743f, 7.14408f, 9.30113f));
  points.push_back(Vector3(0.780358f, -5.02121f, 9.00204f));
  points.push_back(Vector3(-0.512406f, -6.86819f, -1.39683f));
  points.push_back(Vector3(7.84722f, -1.47618f, -4.87167f));
  points.push_back(Vector3(-2.16468f, 6.87063f, -5.8507f));
  points.push_back(Vector3(1.60985f, 3.98541f, -5.35203f));
  points.push_back(Vector3(3.10831f, 4.92782f, 2.23182f));
  points.push_back(Vector3(-1.06113f, 2.2483f, 4.16181f));
  points.push_back(Vector3(-3.51848f, -5.40819f, -2.69021f));
  points.push_back(Vector3(1.23997f, -6.50197f, -6.32984f));
  points.push_back(Vector3(5.03891f, -2.89407f, 6.90664f));
  points.push_back(Vector3(-4.06354f, -5.7561f, -8.95321f));
  points.push_back(Vector3(-8.29524f, 7.80938f, 1.42308f));
  points.push_back(Vector3(-3.68816f, 9.91577f, 7.92047f));
  points.push_back(Vector3(6.58864f, -4.85824f, -2.01331f));
  points.push_back(Vector3(7.40287f, 4.90646f, 6.34388f));
  points.push_back(Vector3(-3.41777f, 3.0253f, -0.212104f));
  points.push_back(Vector3(8.52046f, -6.62526f, -8.69137f));
  points.push_back(Vector3(-6.95242f, -7.90094f, -0.522782f));
  points.push_back(Vector3(1.7423f, -2.24403f, 3.26884f));
  points.push_back(Vector3(-9.87609f, -2.77932f, 9.41588f));
  points.push_back(Vector3(-7.04703f, -9.75524f, -0.158391f));
  points.push_back(Vector3(1.07883f, -6.04297f, -4.46089f));
  points.push_back(Vector3(-9.82665f, -1.9602f, -0.606403f));
  points.push_back(Vector3(9.68444f, -1.86865f, -2.28187f));
  points.push_back(Vector3(5.52965f, 8.305f, -6.43239f));
  points.push_back(Vector3(-9.63561f, -7.83258f, -9.67772f));
  points.push_back(Vector3(-5.27146f, 6.21387f, 3.69427f));
  points.push_back(Vector3(7.31376f, 2.678f, 4.70199f));
  points.push_back(Vector3(3.91644f, -8.50154f, -0.176092f));
  points.push_back(Vector3(-8.61324f, 7.81243f, -7.00736f));
  points.push_back(Vector3(0.674764f, -1.81616f, 3.32072f));
  points.push_back(Vector3(6.93716f, -7.05618f, -7.45415f));
  points.push_back(Vector3(6.29322f, 1.13559f, -2.86477f));
  points.push_back(Vector3(-8.78292f, 1.73864f, 4.82894f));
  points.push_back(Vector3(2.72195f, 4.18378f, -5.51988f));
  points.push_back(Vector3(9.22422f, 9.06247f, 4.43648f));
  points.push_back(Vector3(2.3484f, 0.406812f, 9.15891f));
  points.push_back(Vector3(9.1876f, -4.95651f, -4.738f));
  points.push_back(Vector3(4.39802f, 8.15424f, -8.21467f));
  points.push_back(Vector3(1.02756f, 8.39167f, 4.53658f));
  points.push_back(Vector3(0.872524f, 9.10276f, 8.04071f));
  points.push_back(Vector3(4.31806f, -5.71276f, 3.74493f));
  points.push_back(Vector3(-0.0424207f, -0.491653f, 0.461745f));
  points.push_back(Vector3(-3.72784f, -9.64171f, 0.961028f));
  points.push_back(Vector3(8.33186f, 5.39354f, -3.43913f));
  points.push_back(Vector3(6.38112f, 5.80676f, -5.69628f));
  points.push_back(Vector3(-1.79235f, -0.843226f, 5.77746f));
  points.push_back(Vector3(5.16037f, -3.6607f, 3.63628f));
  points.push_back(Vector3(2.7897f, 1.56285f, 8.44722f));
  points.push_back(Vector3(-7.52922f, -6.49525f, -0.330515f));
  points.push_back(Vector3(-2.37465f, -8.33857f, 4.07514f));
  points.push_back(Vector3(-1.42613f, 3.95245f, -1.08493f));
  points.push_back(Vector3(-2.4424f, -9.44395f, -3.78216f));
  points.push_back(Vector3(0.956145f, 4.49629f, 1.85217f));
  points.push_back(Vector3(-7.86676f, 5.40025f, 9.78332f));
  points.push_back(Vector3(4.54634f, 5.14206f, -7.17032f));
  points.push_back(Vector3(-1.05258f, -9.77172f, 5.9508f));
  points.push_back(Vector3(4.68795f, -3.02896f, 6.0332f));
  TestSphereRitter(points, file);
}

void SphereRitterTest8(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.16135f, -2.12317f, 2.46376f));
  points.push_back(Vector3(-1.49632f, -9.729f, -2.55532f));
  points.push_back(Vector3(-7.92108f, -1.04099f, -1.77099f));
  points.push_back(Vector3(-6.08142f, -3.35002f, -1.85278f));
  points.push_back(Vector3(-2.69143f, 0.693686f, 2.44911f));
  points.push_back(Vector3(7.89117f, -9.86328f, 5.60167f));
  points.push_back(Vector3(8.83908f, -8.4875f, -7.50175f));
  points.push_back(Vector3(-5.97034f, -8.57479f, -3.1077f));
  points.push_back(Vector3(6.66189f, -8.54732f, 6.96158f));
  points.push_back(Vector3(4.2552f, -9.48302f, -1.49754f));
  points.push_back(Vector3(0.630207f, 6.80593f, 8.17011f));
  points.push_back(Vector3(1.70202f, 6.34632f, -7.65557f));
  points.push_back(Vector3(-2.40455f, -7.00674f, 0.679647f));
  points.push_back(Vector3(3.98175f, 0.99704f, 1.17038f));
  points.push_back(Vector3(1.04465f, 8.08039f, -6.52516f));
  points.push_back(Vector3(8.36116f, 8.76583f, 7.54875f));
  points.push_back(Vector3(-4.34919f, -5.33738f, 7.65801f));
  points.push_back(Vector3(8.60958f, 5.8562f, 4.0788f));
  points.push_back(Vector3(-1.26682f, -0.825526f, -2.48451f));
  points.push_back(Vector3(-5.14328f, 1.66906f, 6.94021f));
  points.push_back(Vector3(-2.64504f, 7.37663f, 3.65764f));
  points.push_back(Vector3(-4.66353f, -9.94873f, -7.30583f));
  points.push_back(Vector3(6.26576f, 5.45762f, 4.9559f));
  points.push_back(Vector3(-5.11826f, -9.07651f, 2.0835f));
  points.push_back(Vector3(-9.49583f, -9.72655f, -6.32618f));
  points.push_back(Vector3(-8.05963f, -8.03827f, -3.24137f));
  points.push_back(Vector3(9.80346f, -7.69768f, -1.89856f));
  points.push_back(Vector3(-3.76446f, -1.0184f, -1.92358f));
  points.push_back(Vector3(-7.54631f, 3.35063f, -8.46675f));
  points.push_back(Vector3(5.48509f, -5.24094f, 3.65947f));
  points.push_back(Vector3(6.46962f, 0.477615f, 8.23542f));
  points.push_back(Vector3(-5.68163f, 1.89611f, 9.99268f));
  points.push_back(Vector3(-1.71361f, -9.55077f, 8.43806f));
  points.push_back(Vector3(4.19477f, -1.70751f, -9.71679f));
  points.push_back(Vector3(6.292f, 7.82037f, 8.08466f));
  points.push_back(Vector3(2.22877f, -3.46416f, 8.73592f));
  points.push_back(Vector3(0.744346f, 6.96768f, 7.32414f));
  points.push_back(Vector3(1.8656f, 3.35246f, -2.27332f));
  points.push_back(Vector3(5.58763f, -3.42082f, 7.29728f));
  points.push_back(Vector3(-8.16828f, -5.12864f, 5.69262f));
  points.push_back(Vector3(-6.21021f, -3.32682f, 9.92309f));
  points.push_back(Vector3(4.18928f, -9.8059f, 3.22001f));
  points.push_back(Vector3(8.67061f, -4.20331f, 2.80068f));
  points.push_back(Vector3(-9.81445f, -7.79656f, -4.46516f));
  points.push_back(Vector3(1.67455f, -8.00348f, -6.60939f));
  points.push_back(Vector3(6.37196f, 3.19498f, -6.33839f));
  points.push_back(Vector3(4.75204f, -1.89917f, 5.9209f));
  points.push_back(Vector3(5.69079f, 6.21509f, 6.57399f));
  points.push_back(Vector3(5.39293f, 2.16956f, 3.37992f));
  points.push_back(Vector3(1.40721f, 3.51543f, -4.86801f));
  points.push_back(Vector3(-3.08512f, 0.289621f, -1.87353f));
  points.push_back(Vector3(8.33857f, -6.2859f, -1.9779f));
  points.push_back(Vector3(8.39351f, 3.59661f, 0.431227f));
  points.push_back(Vector3(8.39961f, 1.64647f, 2.7488f));
  points.push_back(Vector3(-9.97131f, 7.07938f, -2.70669f));
  points.push_back(Vector3(-1.55675f, 1.95227f, -6.45619f));
  points.push_back(Vector3(-6.58071f, -3.17606f, 6.57033f));
  points.push_back(Vector3(0.293893f, -8.28669f, 5.25681f));
  points.push_back(Vector3(-5.51073f, 7.39006f, 6.33717f));
  points.push_back(Vector3(8.22077f, 1.38524f, -9.52513f));
  points.push_back(Vector3(-7.63604f, 4.48775f, 8.95871f));
  points.push_back(Vector3(0.395215f, -0.584429f, 8.71761f));
  points.push_back(Vector3(-7.34855f, 2.54616f, 6.11805f));
  points.push_back(Vector3(-9.40916f, -3.24564f, -5.92456f));
  points.push_back(Vector3(0.999481f, -5.39171f, 7.5042f));
  points.push_back(Vector3(7.05679f, 5.46678f, -6.32801f));
  points.push_back(Vector3(4.83261f, -4.232f, 4.46577f));
  points.push_back(Vector3(-0.408032f, 3.36161f, -3.80169f));
  points.push_back(Vector3(0.472732f, 3.62102f, 3.28532f));
  points.push_back(Vector3(-4.09955f, -3.57524f, -9.83825f));
  points.push_back(Vector3(1.75878f, 2.32398f, 3.22306f));
  points.push_back(Vector3(-3.24259f, 5.42039f, 7.75262f));
  points.push_back(Vector3(-2.57302f, 3.49895f, -5.32884f));
  points.push_back(Vector3(-1.04099f, 4.7795f, 4.96994f));
  points.push_back(Vector3(0.33845f, 9.7235f, -4.83749f));
  points.push_back(Vector3(7.85882f, 3.34513f, 4.31867f));
  points.push_back(Vector3(4.63729f, 7.35527f, -1.98706f));
  points.push_back(Vector3(-9.90051f, -9.83398f, 5.46556f));
  points.push_back(Vector3(9.62401f, 7.32414f, -7.32902f));
  points.push_back(Vector3(4.36201f, 6.86514f, -5.68285f));
  TestSphereRitter(points, file);
}

void SphereRitterTest9(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.03806f, 4.61592f, -1.52379f));
  points.push_back(Vector3(9.10276f, 0.592975f, 6.03992f));
  points.push_back(Vector3(9.86023f, 8.18598f, 3.05765f));
  points.push_back(Vector3(1.26499f, -8.94711f, -0.186468f));
  points.push_back(Vector3(-4.91623f, 6.83645f, 2.24036f));
  points.push_back(Vector3(3.99579f, 4.97787f, 2.84524f));
  points.push_back(Vector3(-1.88391f, 1.72826f, 4.48225f));
  points.push_back(Vector3(-0.143132f, -0.386059f, 2.33741f));
  points.push_back(Vector3(-0.735801f, 9.93774f, -6.68508f));
  points.push_back(Vector3(7.72515f, 8.66878f, 9.91028f));
  points.push_back(Vector3(-5.80859f, 6.65822f, -4.65499f));
  points.push_back(Vector3(-5.04074f, -2.71584f, 2.22633f));
  points.push_back(Vector3(-4.61104f, -9.28526f, -6.04236f));
  points.push_back(Vector3(5.58092f, 9.61364f, 1.93396f));
  points.push_back(Vector3(-1.65319f, -0.907315f, 6.57949f));
  points.push_back(Vector3(5.91479f, -0.375072f, 2.04871f));
  points.push_back(Vector3(-1.99316f, 8.75423f, 5.71703f));
  points.push_back(Vector3(2.01086f, -2.80313f, -7.40898f));
  points.push_back(Vector3(-5.91601f, 4.96445f, 1.08371f));
  points.push_back(Vector3(-8.05414f, -4.79781f, 7.38334f));
  points.push_back(Vector3(6.54592f, 7.28507f, 4.3614f));
  points.push_back(Vector3(3.32987f, 1.60131f, -6.06067f));
  points.push_back(Vector3(7.40898f, 9.72228f, 2.10791f));
  points.push_back(Vector3(-5.49669f, -3.93292f, 2.88858f));
  points.push_back(Vector3(-5.40269f, -7.17215f, -1.55797f));
  points.push_back(Vector3(9.53734f, -4.13129f, -2.25562f));
  points.push_back(Vector3(0.35432f, 5.26475f, 9.96277f));
  points.push_back(Vector3(-5.36058f, 3.11258f, 3.72784f));
  points.push_back(Vector3(-6.85476f, -6.99332f, -6.63503f));
  points.push_back(Vector3(9.60509f, 7.52434f, 8.0987f));
  points.push_back(Vector3(-9.3646f, -1.52745f, -6.08203f));
  points.push_back(Vector3(4.80697f, 8.19025f, -3.28166f));
  points.push_back(Vector3(4.61959f, 1.89306f, -7.16178f));
  points.push_back(Vector3(4.62203f, 6.65334f, 4.69588f));
  points.push_back(Vector3(-0.682089f, -4.28205f, -3.82244f));
  points.push_back(Vector3(4.44014f, 4.86007f, -4.41511f));
  points.push_back(Vector3(-5.36424f, -7.72698f, -0.411695f));
  points.push_back(Vector3(-6.84072f, 7.29606f, 6.15223f));
  points.push_back(Vector3(-1.64464f, 7.72454f, -5.20554f));
  points.push_back(Vector3(-1.29551f, 9.64904f, 4.68307f));
  points.push_back(Vector3(-1.68249f, 4.20026f, 7.19901f));
  points.push_back(Vector3(3.24442f, 9.03317f, -7.26493f));
  points.push_back(Vector3(-0.0979644f, 9.15464f, 2.41127f));
  points.push_back(Vector3(9.78271f, 5.68834f, -4.41755f));
  points.push_back(Vector3(8.05353f, 9.20713f, 4.96384f));
  points.push_back(Vector3(5.30625f, -4.35163f, -2.11158f));
  points.push_back(Vector3(-0.754723f, -2.69997f, 7.69097f));
  points.push_back(Vector3(0.0723289f, -9.38536f, -9.12595f));
  points.push_back(Vector3(-0.419019f, -0.434889f, 7.62139f));
  points.push_back(Vector3(-9.53001f, -2.266f, 7.91375f));
  points.push_back(Vector3(-6.74795f, 4.24543f, -3.67962f));
  points.push_back(Vector3(-3.31889f, 0.599078f, -0.425123f));
  points.push_back(Vector3(3.26151f, 1.9541f, -8.15485f));
  points.push_back(Vector3(8.59127f, -3.88531f, -0.805383f));
  points.push_back(Vector3(6.19678f, 6.88772f, -1.53844f));
  points.push_back(Vector3(-3.42387f, -7.61467f, -1.48839f));
  points.push_back(Vector3(-2.57179f, 4.91684f, -8.63155f));
  points.push_back(Vector3(-9.63012f, -7.03299f, -7.66289f));
  points.push_back(Vector3(4.84359f, 9.17722f, -0.481277f));
  points.push_back(Vector3(1.77892f, -4.78744f, 4.0611f));
  points.push_back(Vector3(-9.31944f, -0.514847f, -7.38151f));
  points.push_back(Vector3(7.96625f, 7.51396f, -7.40226f));
  points.push_back(Vector3(-5.33006f, 0.96408f, 1.10141f));
  points.push_back(Vector3(3.97137f, -5.50645f, 8.60775f));
  points.push_back(Vector3(9.99329f, 2.34107f, 2.72805f));
  points.push_back(Vector3(-1.55675f, 3.15653f, -4.03058f));
  points.push_back(Vector3(-0.912198f, 7.82159f, 9.06247f));
  points.push_back(Vector3(7.89239f, -0.873745f, 6.11011f));
  points.push_back(Vector3(1.52623f, 0.890225f, -8.18903f));
  points.push_back(Vector3(4.45845f, 2.93374f, -9.68322f));
  points.push_back(Vector3(-6.44337f, -3.78521f, -4.52559f));
  points.push_back(Vector3(-7.10318f, -5.68529f, 1.14231f));
  points.push_back(Vector3(1.00497f, 9.63073f, 1.36876f));
  points.push_back(Vector3(-3.4611f, 0.174871f, -9.07956f));
  points.push_back(Vector3(-3.55449f, 8.40815f, -8.56746f));
  points.push_back(Vector3(2.05847f, -8.22871f, 5.78234f));
  points.push_back(Vector3(0.540483f, -2.82388f, 0.70101f));
  points.push_back(Vector3(-8.65535f, 1.21799f, -0.191961f));
  points.push_back(Vector3(8.53755f, -8.54305f, -2.44911f));
  points.push_back(Vector3(-1.82287f, -0.821253f, -1.26499f));
  points.push_back(Vector3(8.77743f, -6.67043f, 3.20414f));
  points.push_back(Vector3(-9.72228f, 7.08121f, 8.25251f));
  points.push_back(Vector3(3.03323f, -5.30381f, 9.02463f));
  points.push_back(Vector3(-3.91522f, 0.779138f, -8.95077f));
  points.push_back(Vector3(-8.77133f, -4.4377f, 4.42549f));
  points.push_back(Vector3(-7.17887f, -9.05209f, -8.19025f));
  points.push_back(Vector3(-2.05786f, 0.0613422f, 2.1427f));
  points.push_back(Vector3(-9.38841f, -9.02097f, -7.18314f));
  points.push_back(Vector3(7.69036f, 4.28327f, -6.25111f));
  TestSphereRitter(points, file);
}

void SphereRitterTest10(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.30723f, -1.02512f, 6.51357f));
  points.push_back(Vector3(6.34693f, -9.30174f, 2.48695f));
  points.push_back(Vector3(-6.59841f, 9.38597f, 2.54433f));
  points.push_back(Vector3(7.85028f, 3.24076f, -3.81573f));
  points.push_back(Vector3(-9.10337f, 3.4611f, -6.33778f));
  points.push_back(Vector3(-4.61959f, -4.75692f, 4.65377f));
  points.push_back(Vector3(7.26981f, 3.35551f, 3.87371f));
  points.push_back(Vector3(4.26679f, 2.43019f, 4.35286f));
  points.push_back(Vector3(-3.98358f, -1.27842f, -2.45521f));
  points.push_back(Vector3(-9.83032f, 5.2739f, -9.76806f));
  points.push_back(Vector3(6.92129f, 5.0444f, 7.4633f));
  points.push_back(Vector3(-4.22956f, -3.62957f, -8.64559f));
  points.push_back(Vector3(6.00085f, 3.41777f, -3.34147f));
  points.push_back(Vector3(1.77648f, -2.05176f, 6.72353f));
  points.push_back(Vector3(2.93008f, -6.49892f, -6.14856f));
  TestSphereRitter(points, file);
}

void SphereRitterTest11(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.60204f, 8.04926f, -7.19352f));
  points.push_back(Vector3(-7.34123f, -1.03793f, 7.77764f));
  points.push_back(Vector3(-7.75262f, -6.18763f, -8.98129f));
  points.push_back(Vector3(3.21757f, -3.39885f, -7.79473f));
  points.push_back(Vector3(-8.95321f, 8.79818f, 8.9996f));
  points.push_back(Vector3(9.19614f, -7.2808f, 0.265816f));
  points.push_back(Vector3(1.89734f, -1.67577f, -7.31254f));
  points.push_back(Vector3(5.84216f, 6.11072f, -9.29075f));
  points.push_back(Vector3(-3.09976f, -0.240181f, -7.29972f));
  points.push_back(Vector3(1.88818f, 2.5895f, 8.80795f));
  points.push_back(Vector3(-4.15998f, -4.28144f, 9.04538f));
  points.push_back(Vector3(-7.48894f, -5.22324f, -9.00937f));
  points.push_back(Vector3(0.300607f, 7.56706f, 3.02713f));
  points.push_back(Vector3(6.34632f, -7.13675f, -2.84158f));
  points.push_back(Vector3(2.91787f, 9.14914f, -8.39778f));
  points.push_back(Vector3(-4.20942f, -6.39332f, 3.9256f));
  points.push_back(Vector3(6.93106f, -9.7589f, -9.2938f));
  points.push_back(Vector3(6.00269f, -3.60088f, 7.28263f));
  points.push_back(Vector3(5.62731f, -4.0434f, 3.82855f));
  points.push_back(Vector3(8.78048f, 2.78298f, 0.521561f));
  points.push_back(Vector3(-0.890835f, 4.80148f, 2.76284f));
  points.push_back(Vector3(-4.44502f, -8.21467f, 5.35508f));
  points.push_back(Vector3(9.61119f, -3.29264f, 1.55736f));
  points.push_back(Vector3(1.39195f, -9.66979f, -6.59169f));
  points.push_back(Vector3(-1.18198f, -4.31684f, 4.74105f));
  points.push_back(Vector3(-8.20246f, -1.63915f, -5.78661f));
  points.push_back(Vector3(-6.19251f, 2.22816f, -0.630818f));
  points.push_back(Vector3(-1.30161f, 4.5793f, -3.03446f));
  points.push_back(Vector3(-5.17441f, -9.13327f, -0.154729f));
  points.push_back(Vector3(-6.29749f, 3.45378f, 9.12534f));
  points.push_back(Vector3(-9.34996f, -9.47325f, 7.33329f));
  points.push_back(Vector3(8.22321f, -0.216987f, 7.95038f));
  points.push_back(Vector3(8.29402f, 2.56142f, -5.63524f));
  points.push_back(Vector3(3.64177f, 6.23218f, 3.75042f));
  points.push_back(Vector3(-4.33271f, -4.52742f, -7.53899f));
  points.push_back(Vector3(-6.94571f, 4.28327f, -1.4835f));
  points.push_back(Vector3(1.22959f, -0.655843f, 8.76705f));
  points.push_back(Vector3(-8.39167f, -7.47917f, 3.18033f));
  points.push_back(Vector3(-4.11603f, -0.890835f, 9.28098f));
  points.push_back(Vector3(-2.34535f, -9.41527f, 3.48491f));
  points.push_back(Vector3(2.16712f, 6.61916f, 3.82672f));
  points.push_back(Vector3(-5.66881f, 4.97971f, -9.08628f));
  TestSphereRitter(points, file);
}

void SphereRitterTest12(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.27732f, -2.62062f, -9.9353f));
  points.push_back(Vector3(6.65334f, 5.13108f, -1.56285f));
  points.push_back(Vector3(1.89673f, 2.58583f, -6.28773f));
  points.push_back(Vector3(-8.43745f, 1.88635f, -3.41227f));
  points.push_back(Vector3(-6.41591f, -5.05295f, -3.16263f));
  points.push_back(Vector3(-5.88427f, 0.769372f, -6.65883f));
  points.push_back(Vector3(4.03058f, -1.26988f, 8.38557f));
  points.push_back(Vector3(5.99902f, -0.105289f, 8.57356f));
  points.push_back(Vector3(9.71068f, -0.0320444f, -7.36991f));
  points.push_back(Vector3(1.00986f, -3.23771f, -3.137f));
  points.push_back(Vector3(-5.60411f, -1.44322f, -4.99435f));
  points.push_back(Vector3(-8.76461f, -1.30528f, -0.771203f));
  points.push_back(Vector3(4.82162f, 8.67367f, -1.41942f));
  points.push_back(Vector3(4.42122f, -9.64476f, 1.74657f));
  points.push_back(Vector3(-8.69015f, 7.45598f, 6.37745f));
  points.push_back(Vector3(-8.06085f, 5.05905f, -4.08124f));
  points.push_back(Vector3(3.76995f, -4.326f, -6.65517f));
  points.push_back(Vector3(-9.08872f, 4.279f, 2.5663f));
  points.push_back(Vector3(-7.24052f, -3.66131f, 5.14512f));
  points.push_back(Vector3(4.03119f, 9.65392f, 1.36387f));
  points.push_back(Vector3(4.24055f, 0.365917f, -8.61385f));
  points.push_back(Vector3(9.14975f, 6.34388f, 4.43403f));
  points.push_back(Vector3(7.77764f, -4.98398f, 1.16794f));
  points.push_back(Vector3(-9.92554f, -1.62999f, 7.13736f));
  points.push_back(Vector3(-6.22791f, 3.36772f, -8.85189f));
  points.push_back(Vector3(-7.10196f, -2.01453f, 4.86923f));
  points.push_back(Vector3(8.32087f, 4.04767f, -6.54347f));
  points.push_back(Vector3(0.954314f, 4.79476f, 3.75774f));
  points.push_back(Vector3(-3.03262f, -7.61834f, -5.01816f));
  points.push_back(Vector3(8.72799f, 8.62545f, -1.78442f));
  points.push_back(Vector3(-6.46046f, 9.45006f, 3.56426f));
  points.push_back(Vector3(3.21635f, 5.68529f, 1.76427f));
  points.push_back(Vector3(9.7821f, 6.84072f, -7.29179f));
  points.push_back(Vector3(-7.17215f, 2.72927f, 1.96265f));
  points.push_back(Vector3(8.30012f, -5.37523f, -2.71279f));
  points.push_back(Vector3(1.44993f, -8.67122f, 8.13532f));
  points.push_back(Vector3(7.74957f, 0.713218f, -9.3115f));
  points.push_back(Vector3(-8.69991f, -3.56304f, -5.63829f));
  points.push_back(Vector3(7.83746f, -6.10523f, 1.57323f));
  points.push_back(Vector3(-4.9205f, -7.34001f, -7.55669f));
  points.push_back(Vector3(5.0383f, -7.14225f, -1.72216f));
  points.push_back(Vector3(8.29951f, -9.3646f, 2.70486f));
  points.push_back(Vector3(-9.57823f, 2.01025f, -6.51234f));
  points.push_back(Vector3(-1.04953f, -2.99173f, 7.10318f));
  points.push_back(Vector3(-8.80978f, 4.28388f, -6.46779f));
  points.push_back(Vector3(-3.59966f, -2.6487f, -8.35688f));
  points.push_back(Vector3(9.90417f, 4.01166f, 8.13593f));
  points.push_back(Vector3(7.07511f, -5.64318f, -3.90118f));
  points.push_back(Vector3(2.4424f, -8.29768f, 0.0564592f));
  points.push_back(Vector3(-6.42689f, 6.34266f, -9.08261f));
  points.push_back(Vector3(-9.98169f, -0.184637f, 2.39723f));
  points.push_back(Vector3(8.92087f, 5.98315f, -3.43059f));
  points.push_back(Vector3(-5.51622f, -3.25358f, -3.1492f));
  points.push_back(Vector3(1.124f, 8.75668f, -8.12006f));
  points.push_back(Vector3(-7.67693f, 7.90399f, 1.36143f));
  points.push_back(Vector3(-2.39051f, -2.64687f, 7.60674f));
  points.push_back(Vector3(-6.46046f, 0.22187f, -6.95181f));
  points.push_back(Vector3(6.99637f, 4.73434f, -7.81854f));
  points.push_back(Vector3(-0.357372f, 2.49245f, 4.32905f));
  points.push_back(Vector3(-0.591754f, 7.15995f, -9.33103f));
  points.push_back(Vector3(-7.3516f, 0.779748f, 9.4055f));
  points.push_back(Vector3(8.79696f, -8.16034f, -2.00964f));
  points.push_back(Vector3(6.89322f, 8.54244f, -2.73782f));
  points.push_back(Vector3(3.88104f, -5.64745f, -4.03546f));
  points.push_back(Vector3(-9.99451f, 7.3748f, -1.57628f));
  points.push_back(Vector3(0.920133f, 1.17649f, 3.13578f));
  TestSphereRitter(points, file);
}

void SphereRitterTest13(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.16889f, 4.91012f, -7.63115f));
  points.push_back(Vector3(-7.33024f, 5.4387f, -9.00571f));
  points.push_back(Vector3(-1.87597f, 9.19919f, -2.98929f));
  points.push_back(Vector3(5.18296f, -8.30683f, -8.46492f));
  points.push_back(Vector3(6.5331f, -9.96643f, 7.8692f));
  points.push_back(Vector3(-2.10852f, 1.60192f, 6.04236f));
  points.push_back(Vector3(5.29527f, 1.95593f, 2.29957f));
  points.push_back(Vector3(-0.459914f, -4.74166f, 9.01547f));
  points.push_back(Vector3(5.30992f, -7.1746f, 3.80291f));
  points.push_back(Vector3(-7.87713f, 7.92901f, -5.35386f));
  TestSphereRitter(points, file);
}

void SphereRitterTest14(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.60958f, -4.91806f, 2.71218f));
  points.push_back(Vector3(6.82546f, -5.87085f, 1.32725f));
  points.push_back(Vector3(-1.70751f, 4.05255f, 9.80102f));
  points.push_back(Vector3(-5.51866f, -8.35627f, 5.59374f));
  points.push_back(Vector3(0.270699f, -1.86193f, -5.58031f));
  points.push_back(Vector3(-0.803552f, 4.185f, 0.705893f));
  points.push_back(Vector3(-1.64647f, 8.76705f, 2.48817f));
  points.push_back(Vector3(-8.64864f, 9.94385f, 2.83242f));
  points.push_back(Vector3(-4.45174f, 1.13254f, 9.54222f));
  points.push_back(Vector3(9.75646f, 0.000915555f, 4.95224f));
  points.push_back(Vector3(7.99249f, 0.339671f, 3.45317f));
  points.push_back(Vector3(9.96399f, 3.92438f, 8.43013f));
  points.push_back(Vector3(5.1561f, 6.03931f, -5.15793f));
  points.push_back(Vector3(-9.84191f, 0.784631f, 3.93658f));
  points.push_back(Vector3(5.12192f, -7.55791f, -0.558184f));
  points.push_back(Vector3(-3.21451f, 4.0556f, -8.63521f));
  points.push_back(Vector3(-8.98495f, -9.47874f, -2.95022f));
  points.push_back(Vector3(-8.93735f, -7.99249f, -1.11362f));
  points.push_back(Vector3(3.12418f, 3.75103f, 7.97357f));
  points.push_back(Vector3(8.62728f, 1.81066f, 1.5006f));
  points.push_back(Vector3(0.675985f, -9.48607f, 2.6072f));
  points.push_back(Vector3(0.401929f, -1.8955f, 1.80395f));
  points.push_back(Vector3(0.0820948f, 7.73614f, -4.54085f));
  points.push_back(Vector3(-4.22834f, 7.77581f, -7.22465f));
  points.push_back(Vector3(5.24277f, 3.94513f, -5.98987f));
  points.push_back(Vector3(-8.15241f, 4.57625f, 6.64663f));
  points.push_back(Vector3(-7.25272f, 8.27815f, -2.1305f));
  points.push_back(Vector3(-2.50771f, -7.40104f, -2.15979f));
  points.push_back(Vector3(2.96487f, -2.54067f, -2.86538f));
  points.push_back(Vector3(0.343333f, -1.11545f, 4.13862f));
  points.push_back(Vector3(-0.399487f, 7.97235f, 3.30302f));
  points.push_back(Vector3(-8.17743f, 5.17808f, -8.9874f));
  points.push_back(Vector3(-2.12989f, 8.0285f, 3.90545f));
  points.push_back(Vector3(-8.41487f, 9.51781f, 2.09265f));
  points.push_back(Vector3(7.39128f, 6.01062f, 5.8562f));
  points.push_back(Vector3(-8.53572f, -7.56462f, 6.43178f));
  points.push_back(Vector3(-7.19352f, 1.3187f, 4.70077f));
  points.push_back(Vector3(2.32337f, -7.4163f, 3.10892f));
  points.push_back(Vector3(5.5327f, -7.49748f, -9.85046f));
  points.push_back(Vector3(7.70074f, -4.9144f, 8.27876f));
  points.push_back(Vector3(6.27613f, -1.3126f, -5.15122f));
  points.push_back(Vector3(-1.64464f, 5.32762f, 1.53966f));
  points.push_back(Vector3(2.72011f, -3.8786f, -4.10077f));
  points.push_back(Vector3(-5.80981f, 3.73882f, -0.0570696f));
  points.push_back(Vector3(-7.56706f, -5.30686f, 9.6118f));
  points.push_back(Vector3(7.09464f, -4.07025f, -8.42158f));
  points.push_back(Vector3(-9.85168f, -8.05841f, 1.89306f));
  points.push_back(Vector3(-7.47429f, 9.74303f, 9.01425f));
  points.push_back(Vector3(-6.37989f, -3.01492f, -7.99188f));
  points.push_back(Vector3(-8.42219f, 8.97763f, 8.36482f));
  points.push_back(Vector3(5.71276f, 6.34999f, -1.23447f));
  points.push_back(Vector3(-8.58211f, -4.8796f, -5.04013f));
  points.push_back(Vector3(4.82101f, -9.55016f, 7.87652f));
  points.push_back(Vector3(2.80374f, -4.03424f, -6.03504f));
  points.push_back(Vector3(3.55205f, 5.90014f, 9.93347f));
  points.push_back(Vector3(1.39134f, -4.01532f, -3.61675f));
  points.push_back(Vector3(-0.604572f, -2.50587f, -7.47429f));
  TestSphereRitter(points, file);
}

void SphereRitterTest15(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.59777f, 1.16977f, -5.38682f));
  points.push_back(Vector3(2.03284f, -8.44722f, -7.42912f));
  points.push_back(Vector3(-3.95306f, -9.76134f, -8.82565f));
  points.push_back(Vector3(-4.28755f, -3.57952f, -7.74102f));
  points.push_back(Vector3(-1.92785f, 8.99655f, -3.91095f));
  points.push_back(Vector3(-9.63988f, 5.4564f, 2.75735f));
  points.push_back(Vector3(4.1319f, 7.04093f, 6.62282f));
  points.push_back(Vector3(4.73983f, 4.43892f, -0.727256f));
  points.push_back(Vector3(-5.2739f, -6.74123f, -1.28819f));
  points.push_back(Vector3(1.99988f, -5.21226f, -6.30848f));
  points.push_back(Vector3(-0.497147f, 1.52074f, 6.05091f));
  points.push_back(Vector3(3.90728f, -3.58013f, 9.37498f));
  points.push_back(Vector3(2.81045f, 4.2674f, 8.6169f));
  points.push_back(Vector3(-2.63466f, -8.14936f, -2.17139f));
  points.push_back(Vector3(6.70156f, 4.34309f, -5.39415f));
  points.push_back(Vector3(-3.64299f, -2.81716f, -4.63912f));
  points.push_back(Vector3(-7.83196f, -2.2074f, -7.42119f));
  points.push_back(Vector3(3.85418f, 1.28086f, -9.21751f));
  points.push_back(Vector3(0.315867f, -2.5663f, -0.572222f));
  points.push_back(Vector3(-8.08832f, -6.45802f, -2.04505f));
  points.push_back(Vector3(7.14835f, -8.75057f, -3.02103f));
  points.push_back(Vector3(-3.54228f, 5.70666f, -8.15363f));
  points.push_back(Vector3(-9.06247f, -6.38051f, -1.76061f));
  points.push_back(Vector3(-1.2009f, 6.62587f, 6.33778f));
  points.push_back(Vector3(-7.50175f, 3.5081f, -4.13739f));
  points.push_back(Vector3(-8.92514f, -6.6747f, -1.23875f));
  points.push_back(Vector3(8.34223f, 4.58235f, 2.97769f));
  points.push_back(Vector3(-9.74059f, -0.448927f, -7.36869f));
  points.push_back(Vector3(-2.57179f, 0.210883f, 2.48512f));
  points.push_back(Vector3(7.38456f, -3.23099f, 8.623f));
  TestSphereRitter(points, file);
}

void SphereRitterTest16(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.30723f, -1.02512f, 6.51357f));
  points.push_back(Vector3(6.34693f, -9.30174f, 2.48695f));
  points.push_back(Vector3(-6.59841f, 9.38597f, 2.54433f));
  points.push_back(Vector3(7.85028f, 3.24076f, -3.81573f));
  points.push_back(Vector3(-9.10337f, 3.4611f, -6.33778f));
  points.push_back(Vector3(-4.61959f, -4.75692f, 4.65377f));
  points.push_back(Vector3(7.26981f, 3.35551f, 3.87371f));
  points.push_back(Vector3(4.26679f, 2.43019f, 4.35286f));
  points.push_back(Vector3(-3.98358f, -1.27842f, -2.45521f));
  points.push_back(Vector3(-9.83032f, 5.2739f, -9.76806f));
  points.push_back(Vector3(6.92129f, 5.0444f, 7.4633f));
  points.push_back(Vector3(-4.22956f, -3.62957f, -8.64559f));
  points.push_back(Vector3(6.00085f, 3.41777f, -3.34147f));
  points.push_back(Vector3(1.77648f, -2.05176f, 6.72353f));
  points.push_back(Vector3(2.93008f, -6.49892f, -6.14856f));
  points.push_back(Vector3(-2.3075f, -1.76183f, -9.84741f));
  points.push_back(Vector3(-5.51012f, 9.03989f, 9.29869f));
  points.push_back(Vector3(7.02445f, -2.33558f, 6.31336f));
  points.push_back(Vector3(-7.40593f, 5.26109f, -1.84729f));
  points.push_back(Vector3(0.541704f, -1.04038f, -9.38902f));
  points.push_back(Vector3(-6.04785f, 2.0011f, -5.23545f));
  points.push_back(Vector3(2.37709f, 1.93701f, 5.74572f));
  points.push_back(Vector3(7.82342f, 8.17805f, -3.95001f));
  points.push_back(Vector3(9.52147f, -3.84259f, -9.83215f));
  points.push_back(Vector3(-8.83114f, -5.31541f, 7.73675f));
  points.push_back(Vector3(-1.68126f, 5.74999f, -9.2407f));
  points.push_back(Vector3(9.31639f, -3.60454f, 6.39393f));
  points.push_back(Vector3(-5.75671f, -7.49565f, -3.73882f));
  points.push_back(Vector3(7.4456f, 2.30384f, -4.81613f));
  points.push_back(Vector3(6.11805f, 8.76278f, -8.01996f));
  points.push_back(Vector3(6.40248f, 8.32209f, 4.76974f));
  points.push_back(Vector3(5.51805f, -7.12821f, -7.60552f));
  points.push_back(Vector3(7.92718f, -7.54082f, -4.80819f));
  points.push_back(Vector3(-1.14658f, -0.261544f, 9.12107f));
  points.push_back(Vector3(-8.07733f, -0.511795f, -7.57439f));
  points.push_back(Vector3(6.07654f, -0.362255f, 9.70458f));
  points.push_back(Vector3(-5.61144f, 4.26862f, 7.07694f));
  points.push_back(Vector3(-1.43223f, 2.57973f, -9.61242f));
  points.push_back(Vector3(-8.47774f, -7.83441f, -5.07981f));
  points.push_back(Vector3(-7.87408f, -4.46333f, -4.08673f));
  points.push_back(Vector3(5.87817f, 3.94086f, -7.83746f));
  points.push_back(Vector3(-8.56929f, -1.66417f, 3.95123f));
  points.push_back(Vector3(-3.26334f, -6.38295f, -5.12803f));
  points.push_back(Vector3(-7.4041f, -6.57643f, 3.54289f));
  points.push_back(Vector3(1.58238f, -6.33168f, -5.39659f));
  points.push_back(Vector3(2.78787f, 7.56462f, 8.36299f));
  points.push_back(Vector3(1.2363f, 4.85031f, -6.80898f));
  points.push_back(Vector3(2.95022f, 2.32521f, 9.2523f));
  points.push_back(Vector3(-9.70031f, 0.719932f, 1.61107f));
  points.push_back(Vector3(-6.03931f, 7.41874f, -1.20701f));
  points.push_back(Vector3(9.61486f, -8.23908f, 3.15714f));
  points.push_back(Vector3(0.450758f, 9.15586f, 6.19373f));
  points.push_back(Vector3(0.886563f, 3.596f, -7.52373f));
  points.push_back(Vector3(-7.3101f, 7.83685f, -4.03363f));
  points.push_back(Vector3(-1.91076f, 0.531327f, -8.27631f));
  points.push_back(Vector3(-2.26112f, 5.47472f, 1.24363f));
  points.push_back(Vector3(-1.94617f, 2.13477f, -4.24177f));
  points.push_back(Vector3(-0.925626f, 1.20518f, -5.33799f));
  points.push_back(Vector3(-3.5081f, 9.15708f, -7.57012f));
  points.push_back(Vector3(1.61168f, -1.34678f, -1.00436f));
  points.push_back(Vector3(-2.10547f, 8.44172f, 4.00372f));
  points.push_back(Vector3(-1.09897f, 9.88098f, -1.3358f));
  points.push_back(Vector3(-9.07895f, -3.01065f, 4.28205f));
  points.push_back(Vector3(-6.13025f, -3.16507f, 4.38459f));
  points.push_back(Vector3(7.50786f, 5.50401f, 5.3856f));
  points.push_back(Vector3(6.23035f, 5.92883f, -0.968352f));
  points.push_back(Vector3(-3.56548f, 4.15754f, 0.989105f));
  points.push_back(Vector3(1.10935f, 7.05863f, 5.81896f));
  points.push_back(Vector3(3.10343f, -9.61547f, 1.63427f));
  points.push_back(Vector3(7.11478f, 7.47124f, 2.5602f));
  points.push_back(Vector3(-0.842006f, 2.7427f, 4.9266f));
  TestSphereRitter(points, file);
}

void SphereRitterTest17(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.08994f, -5.95202f, -5.01328f));
  points.push_back(Vector3(7.23869f, -3.09061f, 3.72601f));
  points.push_back(Vector3(0.467849f, -5.36119f, 1.03305f));
  points.push_back(Vector3(-1.17038f, -6.59963f, -0.885342f));
  points.push_back(Vector3(3.75896f, 4.26069f, -9.93103f));
  points.push_back(Vector3(8.85495f, -0.600299f, -9.54772f));
  points.push_back(Vector3(9.06491f, 8.41243f, 3.32804f));
  points.push_back(Vector3(-5.81286f, 1.34129f, -8.97824f));
  points.push_back(Vector3(7.528f, -5.5565f, -4.83322f));
  points.push_back(Vector3(6.27003f, -9.9115f, 6.41652f));
  points.push_back(Vector3(6.56911f, -8.764f, -5.72863f));
  points.push_back(Vector3(6.81936f, -4.07697f, 3.24381f));
  points.push_back(Vector3(2.76589f, -6.39454f, 1.29307f));
  points.push_back(Vector3(2.32948f, 2.77444f, -6.77358f));
  points.push_back(Vector3(9.15586f, 1.5714f, 7.53594f));
  points.push_back(Vector3(-1.44688f, -6.86453f, -6.61306f));
  points.push_back(Vector3(9.92248f, -9.41343f, 1.36998f));
  points.push_back(Vector3(9.93957f, -6.26881f, 7.08609f));
  points.push_back(Vector3(3.13089f, 5.7622f, -1.70324f));
  points.push_back(Vector3(-8.76888f, -4.66659f, 0.745567f));
  points.push_back(Vector3(2.04627f, 3.45256f, -0.450148f));
  points.push_back(Vector3(-8.40938f, 0.628986f, 9.5465f));
  points.push_back(Vector3(-9.84497f, 9.86938f, 5.23789f));
  points.push_back(Vector3(8.211f, 4.23322f, -5.1915f));
  points.push_back(Vector3(-3.24809f, -8.88852f, -6.13819f));
  points.push_back(Vector3(-1.06784f, 1.32725f, -1.37852f));
  points.push_back(Vector3(-8.58699f, -5.3325f, 3.05338f));
  points.push_back(Vector3(4.34126f, 8.47713f, 0.0674459f));
  points.push_back(Vector3(-0.693075f, -8.46248f, -0.951262f));
  points.push_back(Vector3(-8.2519f, -5.57115f, -5.37645f));
  points.push_back(Vector3(7.5988f, 3.18461f, -2.65847f));
  points.push_back(Vector3(8.79574f, -7.35282f, -3.52153f));
  points.push_back(Vector3(-1.26194f, 0.9653f, 6.47755f));
  points.push_back(Vector3(5.7329f, -6.53066f, 5.10361f));
  points.push_back(Vector3(1.59703f, 0.148015f, 3.75164f));
  TestSphereRitter(points, file);
}

void SphereRitterTest18(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.61425f, 8.6877f, 7.38639f));
  points.push_back(Vector3(4.53658f, 1.1887f, -6.60268f));
  points.push_back(Vector3(0.84933f, 4.5323f, -9.44884f));
  points.push_back(Vector3(5.7329f, -2.85745f, -7.95587f));
  points.push_back(Vector3(9.97253f, 8.20368f, 7.72942f));
  points.push_back(Vector3(5.70177f, -5.4912f, -7.20939f));
  points.push_back(Vector3(-4.80697f, -7.82586f, -9.1174f));
  points.push_back(Vector3(9.14975f, -8.8757f, 5.02182f));
  points.push_back(Vector3(3.42265f, -0.738853f, -5.33372f));
  points.push_back(Vector3(1.55248f, 5.99414f, -5.8446f));
  points.push_back(Vector3(4.85031f, -1.68615f, -1.97241f));
  points.push_back(Vector3(-1.67455f, 9.84741f, -4.15876f));
  points.push_back(Vector3(-7.2277f, -2.53578f, 6.25843f));
  points.push_back(Vector3(-6.71194f, -4.09955f, -4.85092f));
  points.push_back(Vector3(-8.4344f, 3.56731f, 2.59255f));
  points.push_back(Vector3(-5.90808f, 2.87881f, 9.61974f));
  points.push_back(Vector3(-8.78109f, 7.58782f, 5.08774f));
  points.push_back(Vector3(-7.55303f, 1.75329f, -3.21879f));
  points.push_back(Vector3(1.56102f, -8.4753f, -2.96854f));
  points.push_back(Vector3(-0.615558f, -9.49461f, 8.22077f));
  points.push_back(Vector3(-5.00595f, 5.45518f, 0.113834f));
  points.push_back(Vector3(-7.15445f, -9.97742f, 5.88f));
  points.push_back(Vector3(5.62914f, 5.97278f, -8.49055f));
  points.push_back(Vector3(9.17051f, 1.44566f, -5.3795f));
  points.push_back(Vector3(-2.22327f, -7.78985f, -8.62362f));
  points.push_back(Vector3(-6.03442f, -6.53371f, 0.569781f));
  points.push_back(Vector3(-9.7943f, -4.83261f, 8.54427f));
  points.push_back(Vector3(4.0141f, -0.336619f, 9.96704f));
  points.push_back(Vector3(7.01651f, 2.83547f, -8.07428f));
  points.push_back(Vector3(-7.34123f, 3.50871f, -9.36949f));
  points.push_back(Vector3(3.79559f, -9.92431f, -4.185f));
  points.push_back(Vector3(9.14365f, -5.34227f, 0.202948f));
  points.push_back(Vector3(-8.44844f, 0.808435f, -8.64193f));
  points.push_back(Vector3(-9.94873f, -2.96426f, -5.38621f));
  points.push_back(Vector3(-6.88345f, -6.58193f, 6.51723f));
  points.push_back(Vector3(-9.09543f, -0.393384f, -0.856044f));
  points.push_back(Vector3(-0.115055f, 0.76632f, -4.67818f));
  points.push_back(Vector3(-9.48485f, 6.97867f, 5.59069f));
  points.push_back(Vector3(-6.64174f, 6.41835f, 6.61977f));
  points.push_back(Vector3(-7.52678f, -8.26472f, 4.87289f));
  points.push_back(Vector3(-1.49693f, -8.94833f, 5.38072f));
  points.push_back(Vector3(-0.415967f, -3.94024f, 7.41264f));
  points.push_back(Vector3(6.9042f, -9.88464f, -1.57994f));
  points.push_back(Vector3(0.694906f, -0.715049f, -3.67351f));
  points.push_back(Vector3(9.60875f, -1.98218f, -6.40004f));
  points.push_back(Vector3(-2.3075f, 3.0839f, -6.65273f));
  points.push_back(Vector3(-5.08591f, 8.13044f, -0.237129f));
  points.push_back(Vector3(5.93738f, 9.46104f, 6.9573f));
  points.push_back(Vector3(-2.36122f, 3.96344f, -3.76385f));
  points.push_back(Vector3(-3.39091f, 1.13254f, 8.9819f));
  points.push_back(Vector3(-3.86883f, 7.74224f, 8.28913f));
  points.push_back(Vector3(6.82546f, 1.73132f, 2.33619f));
  points.push_back(Vector3(3.9555f, 0.579547f, 0.901212f));
  points.push_back(Vector3(-4.55977f, -2.94046f, -8.75362f));
  points.push_back(Vector3(-2.71462f, 6.16871f, -9.88891f));
  points.push_back(Vector3(1.73193f, 0.84994f, -1.4182f));
  points.push_back(Vector3(-0.936003f, 9.77722f, -8.41914f));
  points.push_back(Vector3(3.07779f, -8.36055f, 5.4619f));
  points.push_back(Vector3(9.48424f, -1.0886f, 2.27027f));
  points.push_back(Vector3(-1.09775f, -6.0155f, 8.47652f));
  points.push_back(Vector3(-8.24702f, -6.23035f, 5.87939f));
  points.push_back(Vector3(3.9671f, 9.76623f, -7.74834f));
  points.push_back(Vector3(-5.05905f, -2.95145f, 8.35505f));
  points.push_back(Vector3(7.08792f, 6.3213f, -7.84051f));
  points.push_back(Vector3(4.52437f, 6.29688f, 8.86166f));
  points.push_back(Vector3(-5.92517f, 0.0546281f, 6.22913f));
  points.push_back(Vector3(-1.55492f, -9.65148f, -3.3311f));
  points.push_back(Vector3(-1.44261f, -0.48555f, -0.735801f));
  points.push_back(Vector3(-5.31907f, 6.845f, -2.12378f));
  points.push_back(Vector3(3.92193f, -6.76077f, -1.69652f));
  points.push_back(Vector3(7.91864f, 3.0784f, 0.301828f));
  points.push_back(Vector3(6.37562f, 7.37236f, -0.627155f));
  points.push_back(Vector3(-9.54161f, 9.7589f, 2.7311f));
  points.push_back(Vector3(-4.43892f, -1.26438f, 3.50383f));
  points.push_back(Vector3(-1.53722f, -0.621052f, 8.49666f));
  points.push_back(Vector3(7.80389f, -6.8627f, 7.66839f));
  points.push_back(Vector3(1.57018f, -9.89196f, -4.41023f));
  points.push_back(Vector3(-9.61974f, 8.73592f, 6.17908f));
  points.push_back(Vector3(4.24665f, 5.09445f, 8.67672f));
  points.push_back(Vector3(-4.28327f, 2.74758f, 2.65786f));
  points.push_back(Vector3(-6.46046f, -1.8131f, -5.02426f));
  points.push_back(Vector3(-5.40086f, 9.22483f, 4.45906f));
  points.push_back(Vector3(-7.37419f, 2.90933f, 8.51619f));
  points.push_back(Vector3(9.89807f, -1.55553f, 2.83975f));
  points.push_back(Vector3(5.20005f, 4.5201f, -1.75146f));
  points.push_back(Vector3(-0.669271f, 7.28019f, 5.85009f));
  points.push_back(Vector3(4.86618f, 7.69524f, -2.58217f));
  points.push_back(Vector3(-9.90722f, 7.11356f, -0.809046f));
  points.push_back(Vector3(-1.27293f, 7.25455f, 6.93472f));
  points.push_back(Vector3(2.0951f, -5.95874f, -4.16791f));
  points.push_back(Vector3(-2.1659f, -1.08615f, -3.20963f));
  points.push_back(Vector3(2.69814f, 7.71966f, -9.65087f));
  points.push_back(Vector3(1.59337f, 3.80718f, -0.71749f));
  points.push_back(Vector3(6.65273f, -7.28813f, -8.65474f));
  points.push_back(Vector3(-8.94772f, -3.02408f, -1.5244f));
  points.push_back(Vector3(2.9545f, -7.77398f, -2.62978f));
  points.push_back(Vector3(9.80773f, -1.35655f, -5.57787f));
  TestSphereRitter(points, file);
}

void SphereRitterTest19(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.20673f, 0.263985f, 5.20432f));
  points.push_back(Vector3(-6.38478f, 5.82385f, 5.45762f));
  points.push_back(Vector3(2.0304f, 3.14554f, 5.53148f));
  points.push_back(Vector3(-3.52031f, -6.59169f, -8.9758f));
  points.push_back(Vector3(9.79553f, -1.84912f, -9.48668f));
  points.push_back(Vector3(-3.17301f, -9.39818f, -7.62932f));
  points.push_back(Vector3(4.06476f, 9.14792f, 9.9176f));
  points.push_back(Vector3(0.0125126f, 1.13681f, 7.669f));
  points.push_back(Vector3(-4.03668f, 4.58052f, -3.30607f));
  points.push_back(Vector3(1.05991f, -7.95648f, -1.75268f));
  points.push_back(Vector3(-2.01819f, 6.31031f, 1.02451f));
  points.push_back(Vector3(0.89816f, 9.88403f, 5.14206f));
  points.push_back(Vector3(-1.3889f, -7.19108f, -0.606403f));
  points.push_back(Vector3(3.11014f, -1.46458f, -8.41487f));
  points.push_back(Vector3(7.30155f, 7.03177f, 2.78237f));
  points.push_back(Vector3(-6.02405f, 5.24155f, 6.34999f));
  points.push_back(Vector3(-0.0186163f, -6.79495f, 6.2096f));
  points.push_back(Vector3(-5.9209f, 5.08591f, -7.57195f));
  points.push_back(Vector3(6.68691f, -7.06351f, 3.46965f));
  points.push_back(Vector3(4.95102f, 8.48506f, 2.29957f));
  points.push_back(Vector3(-7.44377f, 1.82775f, -1.55187f));
  points.push_back(Vector3(-8.39473f, 4.12214f, -2.52846f));
  points.push_back(Vector3(-5.87146f, -4.17585f, 0.375683f));
  points.push_back(Vector3(-6.10584f, -6.43422f, -1.37669f));
  points.push_back(Vector3(6.96524f, -5.79638f, -2.71157f));
  points.push_back(Vector3(-1.14414f, -3.98724f, 5.98682f));
  points.push_back(Vector3(0.671102f, 5.99292f, 2.32093f));
  points.push_back(Vector3(5.19639f, 4.76791f, 0.122379f));
  points.push_back(Vector3(5.86535f, 1.1771f, 3.74615f));
  points.push_back(Vector3(2.15369f, 3.69793f, -6.55873f));
  points.push_back(Vector3(-2.95389f, 9.82788f, 4.39863f));
  points.push_back(Vector3(0.83346f, 4.39436f, 5.18662f));
  points.push_back(Vector3(8.1811f, -6.29994f, -8.20856f));
  points.push_back(Vector3(9.1052f, 5.79028f, 9.69359f));
  points.push_back(Vector3(6.60451f, 8.51802f, -0.679037f));
  points.push_back(Vector3(3.8316f, 9.87976f, -8.0285f));
  points.push_back(Vector3(-1.93518f, -6.55568f, 4.01471f));
  points.push_back(Vector3(-0.880459f, -7.47124f, 8.62239f));
  points.push_back(Vector3(3.90423f, -0.217597f, -0.260323f));
  points.push_back(Vector3(8.80306f, 9.68261f, 8.21528f));
  points.push_back(Vector3(2.96304f, -3.88775f, 9.1998f));
  points.push_back(Vector3(8.18049f, -1.03793f, 6.09058f));
  points.push_back(Vector3(8.34529f, -5.51927f, -4.07941f));
  points.push_back(Vector3(6.42445f, -2.65053f, 6.55141f));
  points.push_back(Vector3(-4.84787f, 4.31318f, -8.81283f));
  points.push_back(Vector3(-0.248726f, -0.270699f, -6.90847f));
  points.push_back(Vector3(-7.7929f, 9.97742f, 3.1431f));
  points.push_back(Vector3(-1.26194f, -6.89016f, -2.78054f));
  points.push_back(Vector3(1.13681f, -3.1138f, 8.40938f));
  points.push_back(Vector3(3.68877f, -0.179754f, 0.974456f));
  points.push_back(Vector3(-7.51091f, -7.85882f, 3.20231f));
  points.push_back(Vector3(-7.85211f, -7.60857f, 0.0192267f));
  points.push_back(Vector3(-6.73757f, -8.45149f, -6.5508f));
  points.push_back(Vector3(-4.96017f, 5.68651f, 5.61022f));
  points.push_back(Vector3(5.90503f, 7.85638f, -5.61449f));
  points.push_back(Vector3(4.98459f, -9.37742f, 7.40715f));
  points.push_back(Vector3(7.94122f, 7.73064f, -7.9693f));
  points.push_back(Vector3(-5.40452f, -8.92331f, 7.38029f));
  points.push_back(Vector3(-3.58257f, -0.0930815f, -5.6975f));
  points.push_back(Vector3(-3.48308f, 3.69793f, 0.596637f));
  points.push_back(Vector3(4.84237f, 6.4861f, -9.21506f));
  points.push_back(Vector3(3.0784f, 1.98035f, -6.14246f));
  points.push_back(Vector3(-5.30686f, 6.13025f, 9.94324f));
  points.push_back(Vector3(-5.71642f, -6.51784f, -9.45921f));
  points.push_back(Vector3(-8.55281f, -5.65172f, -6.81387f));
  points.push_back(Vector3(-9.16379f, -4.96323f, 2.06519f));
  points.push_back(Vector3(-1.16001f, -5.30686f, -0.66805f));
  points.push_back(Vector3(6.62038f, -2.26478f, 5.67675f));
  points.push_back(Vector3(7.32048f, 8.00836f, -6.97439f));
  points.push_back(Vector3(-5.0792f, -6.19251f, 7.16788f));
  points.push_back(Vector3(-4.19111f, -2.61513f, -0.83346f));
  points.push_back(Vector3(-2.74453f, -6.18763f, -1.70324f));
  points.push_back(Vector3(-7.51518f, 6.67715f, 4.80148f));
  points.push_back(Vector3(5.42406f, -2.7311f, -5.50462f));
  points.push_back(Vector3(-7.1569f, -7.21549f, 2.79885f));
  points.push_back(Vector3(8.85556f, -4.4554f, -8.56563f));
  points.push_back(Vector3(-5.72069f, 9.03561f, 0.394604f));
  points.push_back(Vector3(-7.0574f, 4.90341f, 1.75817f));
  points.push_back(Vector3(-1.67211f, 1.19297f, 2.95145f));
  points.push_back(Vector3(-7.61589f, -7.35466f, -1.87353f));
  points.push_back(Vector3(-2.93985f, 1.61596f, -8.59066f));
  points.push_back(Vector3(-0.940275f, -7.22282f, 8.3282f));
  points.push_back(Vector3(1.44017f, 3.19254f, 3.52947f));
  points.push_back(Vector3(9.1644f, -7.96319f, -5.06272f));
  points.push_back(Vector3(9.13205f, -4.49141f, 6.55629f));
  TestSphereRitter(points, file);
}

void SphereRitterTest20(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.17072f, -1.65075f, 1.4658f));
  points.push_back(Vector3(-2.01697f, -0.857265f, 8.59798f));
  points.push_back(Vector3(-3.77544f, -9.01486f, 6.9335f));
  points.push_back(Vector3(8.93551f, -8.2165f, -8.49178f));
  points.push_back(Vector3(-6.97989f, -0.0656148f, -5.67614f));
  points.push_back(Vector3(7.30949f, 5.23362f, -5.20371f));
  points.push_back(Vector3(4.17768f, 7.59758f, -4.66842f));
  points.push_back(Vector3(-9.90905f, 6.09424f, 4.73373f));
  points.push_back(Vector3(-3.60332f, 6.07593f, -9.20347f));
  points.push_back(Vector3(2.06702f, 1.82958f, 2.20435f));
  points.push_back(Vector3(-9.04904f, -1.47435f, -5.92517f));
  points.push_back(Vector3(3.45683f, 4.67269f, -9.40916f));
  points.push_back(Vector3(1.19602f, 3.11563f, 9.70031f));
  points.push_back(Vector3(2.28431f, 9.42442f, -2.38685f));
  points.push_back(Vector3(1.35716f, 3.77728f, 9.81323f));
  points.push_back(Vector3(-0.927458f, -2.57363f, 9.27f));
  points.push_back(Vector3(7.11722f, 1.16733f, 3.06558f));
  TestSphereRitter(points, file);
}

void SphereRitterTest21(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.68343f, -7.64946f, -0.714438f));
  points.push_back(Vector3(3.40312f, 1.19541f, -7.35038f));
  points.push_back(Vector3(8.0047f, -9.8413f, -3.08084f));
  points.push_back(Vector3(-6.67715f, -5.01572f, 4.59944f));
  points.push_back(Vector3(0.308542f, 4.47188f, -6.74612f));
  points.push_back(Vector3(7.65069f, -1.44627f, 4.60921f));
  points.push_back(Vector3(-2.9899f, -2.49062f, 4.69222f));
  points.push_back(Vector3(1.74596f, -9.13694f, 4.42183f));
  points.push_back(Vector3(5.76952f, -8.60836f, 8.33125f));
  points.push_back(Vector3(-2.31483f, -5.67003f, 4.59578f));
  points.push_back(Vector3(0.22187f, 3.00882f, 8.84884f));
  points.push_back(Vector3(9.14914f, 3.5258f, -1.66112f));
  points.push_back(Vector3(-1.26926f, -2.92337f, -8.56624f));
  points.push_back(Vector3(6.30116f, -0.48677f, 1.54515f));
  points.push_back(Vector3(-4.88144f, -8.64559f, -6.12049f));
  points.push_back(Vector3(-3.68999f, -2.10242f, -0.191961f));
  points.push_back(Vector3(4.1258f, 0.821863f, -7.59819f));
  points.push_back(Vector3(-9.19309f, -8.30866f, 4.12885f));
  points.push_back(Vector3(1.38218f, -3.57524f, 9.39268f));
  points.push_back(Vector3(-9.31333f, -7.2338f, -1.02206f));
  points.push_back(Vector3(1.96509f, 1.21433f, 9.60692f));
  points.push_back(Vector3(3.69671f, 0.567339f, -8.29402f));
  points.push_back(Vector3(5.52904f, -5.13169f, 6.83645f));
  points.push_back(Vector3(3.74004f, 6.31886f, -6.41469f));
  points.push_back(Vector3(-7.84539f, 9.19492f, 8.26167f));
  points.push_back(Vector3(5.21775f, 7.72881f, 2.50954f));
  points.push_back(Vector3(-6.12964f, -5.26414f, -8.88729f));
  points.push_back(Vector3(3.60637f, -4.38215f, -1.98401f));
  points.push_back(Vector3(4.81002f, 4.60005f, 8.30012f));
  points.push_back(Vector3(7.23991f, -7.44255f, 3.42509f));
  points.push_back(Vector3(0.662557f, -1.47679f, 8.94345f));
  points.push_back(Vector3(-2.50099f, 6.90542f, -0.0985748f));
  TestSphereRitter(points, file);
}

void SphereRitterTest22(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.64415f, -9.7174f, 3.83465f));
  points.push_back(Vector3(4.23017f, 6.75649f, -2.55287f));
  points.push_back(Vector3(-7.64641f, -8.66817f, -0.616169f));
  points.push_back(Vector3(2.02002f, -1.50304f, -8.35933f));
  points.push_back(Vector3(7.28507f, -3.28288f, 4.55367f));
  points.push_back(Vector3(6.96707f, 8.98312f, 4.1026f));
  points.push_back(Vector3(-1.56774f, -3.20048f, 6.37074f));
  points.push_back(Vector3(7.41752f, -6.34083f, 0.801111f));
  points.push_back(Vector3(9.72838f, -1.98523f, -0.41963f));
  points.push_back(Vector3(-9.28709f, -5.49425f, 7.52495f));
  points.push_back(Vector3(-2.62429f, 4.80148f, -9.51476f));
  points.push_back(Vector3(2.85989f, 7.52373f, 7.96686f));
  points.push_back(Vector3(-6.04907f, -7.79107f, 4.33638f));
  points.push_back(Vector3(-9.35728f, 3.49345f, 0.126041f));
  points.push_back(Vector3(3.18644f, 9.61242f, -9.93347f));
  points.push_back(Vector3(-0.154729f, -3.94208f, 3.85296f));
  points.push_back(Vector3(1.93945f, 0.952483f, 1.04099f));
  points.push_back(Vector3(8.56014f, -4.8619f, 0.528275f));
  points.push_back(Vector3(1.39561f, 0.447096f, -9.96094f));
  points.push_back(Vector3(-4.10504f, -0.188299f, -2.53212f));
  points.push_back(Vector3(4.70626f, 7.09037f, 3.49223f));
  points.push_back(Vector3(6.07349f, 5.61571f, 7.19169f));
  points.push_back(Vector3(5.67553f, -0.86581f, 6.39271f));
  points.push_back(Vector3(8.6169f, -0.76632f, -2.34779f));
  points.push_back(Vector3(-4.8265f, 3.52824f, 7.96503f));
  points.push_back(Vector3(-0.614338f, 1.23142f, 6.46046f));
  points.push_back(Vector3(-8.79818f, 7.51579f, 1.48106f));
  points.push_back(Vector3(-2.69692f, 7.37358f, 2.47108f));
  points.push_back(Vector3(-2.50587f, -7.24235f, -7.87225f));
  points.push_back(Vector3(-9.95117f, 3.64666f, 4.39558f));
  points.push_back(Vector3(-3.34147f, 8.94833f, -2.97891f));
  points.push_back(Vector3(-8.55586f, 1.84484f, -9.16684f));
  points.push_back(Vector3(9.69726f, 6.4275f, -6.15833f));
  points.push_back(Vector3(-3.92254f, -5.95508f, 1.77221f));
  points.push_back(Vector3(-3.26029f, -1.7185f, 1.65563f));
  TestSphereRitter(points, file);
}

void SphereRitterTest23(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.04172f, -8.50459f, -3.3311f));
  points.push_back(Vector3(-0.27131f, 8.00226f, 1.24607f));
  points.push_back(Vector3(6.06067f, -8.24152f, 2.902f));
  points.push_back(Vector3(8.7701f, -8.76644f, -0.240181f));
  points.push_back(Vector3(8.05902f, 6.63869f, -4.85031f));
  points.push_back(Vector3(2.83059f, -7.75933f, 0.35371f));
  points.push_back(Vector3(-4.11847f, -6.98843f, -9.45311f));
  points.push_back(Vector3(0.959197f, 1.28513f, -6.22547f));
  points.push_back(Vector3(1.43834f, -3.56243f, 7.304f));
  points.push_back(Vector3(7.61284f, -3.53008f, 5.02609f));
  points.push_back(Vector3(-9.47203f, 0.856655f, -1.66051f));
  points.push_back(Vector3(3.56426f, -4.35896f, 3.8432f));
  points.push_back(Vector3(-7.12088f, -5.98621f, 8.36848f));
  points.push_back(Vector3(-5.4387f, -9.37437f, 1.26438f));
  points.push_back(Vector3(-5.43687f, 3.89874f, 3.57646f));
  points.push_back(Vector3(5.34837f, -3.95123f, -9.38719f));
  points.push_back(Vector3(-7.23075f, 1.20273f, 3.84442f));
  points.push_back(Vector3(4.15876f, -7.68548f, 9.09116f));
  points.push_back(Vector3(-0.604572f, 3.48735f, 5.48448f));
  points.push_back(Vector3(8.81466f, 4.44319f, 9.94995f));
  points.push_back(Vector3(-1.49266f, 0.835902f, -9.85534f));
  points.push_back(Vector3(2.42653f, 7.68059f, 7.44804f));
  points.push_back(Vector3(6.08203f, -7.18986f, 5.42589f));
  points.push_back(Vector3(-2.90384f, -0.227363f, 9.95911f));
  points.push_back(Vector3(0.917081f, 5.00412f, 7.32109f));
  points.push_back(Vector3(-9.74059f, 0.903653f, -6.80349f));
  points.push_back(Vector3(5.82018f, 2.91116f, 6.35426f));
  points.push_back(Vector3(3.0784f, 8.14081f, 8.06146f));
  points.push_back(Vector3(-9.45738f, 3.66314f, -9.27488f));
  points.push_back(Vector3(-4.07636f, -5.79089f, 8.60103f));
  points.push_back(Vector3(-4.98215f, 4.98886f, 3.41227f));
  points.push_back(Vector3(5.11399f, -6.85171f, 7.46941f));
  points.push_back(Vector3(5.70544f, 7.97601f, -1.49693f));
  points.push_back(Vector3(0.0918607f, -9.74548f, 1.65014f));
  points.push_back(Vector3(-8.19941f, 8.36665f, 7.52983f));
  points.push_back(Vector3(3.72356f, 3.30119f, 2.46071f));
  points.push_back(Vector3(-5.81286f, -7.25272f, 1.77343f));
  points.push_back(Vector3(-7.20511f, -1.2186f, -6.37806f));
  points.push_back(Vector3(-9.15403f, 3.49406f, -6.09241f));
  points.push_back(Vector3(3.64422f, 3.36528f, -8.18781f));
  points.push_back(Vector3(-9.57091f, -7.65618f, -5.61632f));
  points.push_back(Vector3(-8.33796f, -0.607624f, -1.7655f));
  points.push_back(Vector3(3.41044f, 9.36888f, -2.73782f));
  points.push_back(Vector3(-4.39802f, 6.54347f, 9.77538f));
  points.push_back(Vector3(0.105899f, -5.54247f, 9.10703f));
  points.push_back(Vector3(0.824305f, 2.34352f, 6.78457f));
  points.push_back(Vector3(-0.577105f, -5.25498f, 5.69811f));
  points.push_back(Vector3(2.18909f, -5.65661f, -6.0387f));
  points.push_back(Vector3(-6.03809f, 6.10096f, -2.83792f));
  points.push_back(Vector3(-0.144353f, -0.788903f, 3.63018f));
  points.push_back(Vector3(-1.46825f, -7.49504f, -4.91195f));
  points.push_back(Vector3(2.21839f, 1.02206f, -0.475173f));
  points.push_back(Vector3(2.78176f, -3.79986f, -2.07129f));
  TestSphereRitter(points, file);
}

void SphereRitterTest24(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.29319f, 4.89669f, 2.83792f));
  points.push_back(Vector3(9.15647f, -5.23301f, -0.736412f));
  points.push_back(Vector3(6.69973f, -3.12113f, -6.91092f));
  points.push_back(Vector3(1.583f, 2.60842f, -3.62774f));
  points.push_back(Vector3(5.48448f, -5.84521f, 8.47774f));
  points.push_back(Vector3(9.45738f, 9.82238f, 3.37504f));
  points.push_back(Vector3(-4.9089f, 3.86395f, -7.35466f));
  points.push_back(Vector3(-9.59166f, 6.58071f, -5.67797f));
  points.push_back(Vector3(-1.59276f, 5.97034f, 8.58516f));
  points.push_back(Vector3(0.561846f, 7.96869f, -2.67373f));
  points.push_back(Vector3(-0.257271f, -4.65011f, 6.98355f));
  points.push_back(Vector3(5.65416f, -7.87835f, 5.69628f));
  points.push_back(Vector3(-5.21653f, 1.87048f, -3.77789f));
  points.push_back(Vector3(0.343944f, -5.59496f, -0.932341f));
  points.push_back(Vector3(-3.82611f, 6.6802f, -5.63646f));
  points.push_back(Vector3(9.67528f, -9.24558f, -9.8236f));
  points.push_back(Vector3(2.82083f, 5.46922f, 5.85376f));
  points.push_back(Vector3(-0.494705f, 4.75143f, 8.56502f));
  points.push_back(Vector3(-5.99536f, -9.56969f, 2.74941f));
  points.push_back(Vector3(-8.49666f, 6.61733f, -8.37092f));
  points.push_back(Vector3(-7.91314f, -5.42894f, -5.47838f));
  points.push_back(Vector3(5.53758f, -9.34019f, -1.53356f));
  points.push_back(Vector3(2.46864f, 7.3693f, -5.562f));
  points.push_back(Vector3(0.445875f, -6.81021f, -4.57991f));
  points.push_back(Vector3(-0.949431f, -7.93023f, 6.6625f));
  points.push_back(Vector3(-4.21125f, -1.87353f, 6.67776f));
  points.push_back(Vector3(-9.81567f, -5.36668f, -0.976897f));
  points.push_back(Vector3(-5.2916f, 4.90707f, 1.09348f));
  points.push_back(Vector3(6.55568f, -4.99313f, 4.42305f));
  points.push_back(Vector3(-5.9978f, -4.63485f, 0.223701f));
  points.push_back(Vector3(-8.93368f, -4.48531f, 1.54027f));
  points.push_back(Vector3(4.4438f, 5.51866f, 4.7673f));
  points.push_back(Vector3(-5.87451f, -8.82992f, -4.63363f));
  points.push_back(Vector3(-5.2916f, -2.86599f, 9.78088f));
  points.push_back(Vector3(-1.76794f, 5.21836f, 2.69448f));
  points.push_back(Vector3(-1.41636f, 5.09384f, -4.3614f));
  points.push_back(Vector3(5.95752f, 2.60964f, -0.571001f));
  points.push_back(Vector3(9.84313f, 2.38014f, 4.24238f));
  points.push_back(Vector3(-2.19703f, -3.02713f, -1.97485f));
  points.push_back(Vector3(-5.16221f, 7.528f, 0.961028f));
  points.push_back(Vector3(-6.51418f, 5.43565f, 7.01651f));
  points.push_back(Vector3(1.96936f, -7.92413f, 4.70321f));
  points.push_back(Vector3(4.45662f, 2.86721f, -7.10746f));
  points.push_back(Vector3(2.22816f, 0.430006f, 3.87066f));
  points.push_back(Vector3(-0.600299f, 5.28916f, -9.89624f));
  points.push_back(Vector3(-1.52623f, 4.1319f, 7.22709f));
  points.push_back(Vector3(-9.38597f, -6.20777f, 0.165105f));
  points.push_back(Vector3(-4.45845f, 9.27366f, 8.44783f));
  points.push_back(Vector3(-0.0332652f, -2.15491f, -1.78137f));
  points.push_back(Vector3(-8.88668f, -7.75018f, -6.2157f));
  points.push_back(Vector3(-8.8641f, -7.14713f, -2.5309f));
  points.push_back(Vector3(-8.93002f, 7.6751f, -3.6314f));
  points.push_back(Vector3(-7.43461f, -6.26759f, 1.18503f));
  points.push_back(Vector3(-4.70748f, 5.59923f, 0.726035f));
  points.push_back(Vector3(-4.60128f, 6.63869f, -9.11252f));
  points.push_back(Vector3(3.01187f, 5.68468f, 9.5465f));
  points.push_back(Vector3(5.28123f, -2.75796f, -9.50621f));
  points.push_back(Vector3(-6.5624f, -3.81451f, 4.17096f));
  points.push_back(Vector3(8.62911f, 8.71334f, 1.98279f));
  points.push_back(Vector3(9.91699f, 7.95648f, 3.11014f));
  points.push_back(Vector3(-4.55367f, -1.8009f, 1.19114f));
  points.push_back(Vector3(-3.14798f, -9.2053f, -8.31721f));
  points.push_back(Vector3(-5.62548f, -0.285958f, 5.00595f));
  points.push_back(Vector3(-9.4586f, 3.67718f, 3.12174f));
  points.push_back(Vector3(-5.99353f, 6.37684f, 6.13697f));
  points.push_back(Vector3(-9.58129f, -5.62243f, -0.386059f));
  points.push_back(Vector3(-0.0204474f, -1.57811f, -8.81466f));
  points.push_back(Vector3(-1.50182f, 0.128483f, -6.61061f));
  points.push_back(Vector3(2.57729f, 7.81854f, 4.5323f));
  points.push_back(Vector3(-5.468f, 1.75451f, 5.48082f));
  points.push_back(Vector3(-3.05826f, 8.18232f, 6.95486f));
  points.push_back(Vector3(-4.93942f, 1.75878f, 5.75671f));
  points.push_back(Vector3(0.0704978f, -7.54509f, -3.4257f));
  points.push_back(Vector3(8.63216f, 4.5201f, -5.23667f));
  points.push_back(Vector3(-1.96875f, -6.94082f, 3.00455f));
  points.push_back(Vector3(9.5172f, 6.6332f, -1.75634f));
  points.push_back(Vector3(5.77197f, -7.61528f, 6.11927f));
  points.push_back(Vector3(-9.29014f, -9.98535f, -8.51253f));
  points.push_back(Vector3(3.03873f, 8.08588f, 1.02512f));
  points.push_back(Vector3(6.42994f, 2.14393f, -4.5793f));
  points.push_back(Vector3(-4.26923f, 0.187078f, 3.22794f));
  points.push_back(Vector3(-2.82571f, -0.758385f, -8.02973f));
  points.push_back(Vector3(-4.9675f, -2.01209f, -4.97299f));
  points.push_back(Vector3(9.19248f, -8.14447f, -4.62813f));
  points.push_back(Vector3(-0.645466f, 6.65761f, 8.47163f));
  points.push_back(Vector3(-2.56569f, 0.603961f, -8.89218f));
  points.push_back(Vector3(-0.99826f, 8.77133f, -5.90136f));
  points.push_back(Vector3(-0.760216f, -4.64339f, -2.35267f));
  TestSphereRitter(points, file);
}

void SphereRitterTest25(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.26228f, -3.42448f, -0.0918607f));
  points.push_back(Vector3(2.37709f, 9.54955f, -1.64953f));
  points.push_back(Vector3(8.83908f, -6.82791f, 3.35124f));
  points.push_back(Vector3(1.54942f, -4.06354f, -9.72838f));
  points.push_back(Vector3(-8.55525f, -4.62325f, -8.74691f));
  points.push_back(Vector3(0.522172f, -7.71294f, -2.51381f));
  points.push_back(Vector3(-7.22221f, 7.11478f, -5.17197f));
  points.push_back(Vector3(-4.55489f, 4.53536f, 7.79107f));
  points.push_back(Vector3(6.40126f, -4.41267f, -7.46574f));
  points.push_back(Vector3(-0.506912f, 1.2656f, 9.86999f));
  points.push_back(Vector3(6.69607f, 5.08713f, 2.94534f));
  points.push_back(Vector3(1.36265f, 6.87979f, 7.77581f));
  points.push_back(Vector3(3.4788f, -1.00009f, 1.13865f));
  points.push_back(Vector3(8.83969f, -7.29179f, 2.20801f));
  points.push_back(Vector3(-5.67431f, -5.68407f, 0.735191f));
  points.push_back(Vector3(6.04907f, -4.82406f, 6.25355f));
  points.push_back(Vector3(6.65944f, 7.48711f, -0.0106815f));
  points.push_back(Vector3(4.15632f, -3.26151f, 3.42265f));
  points.push_back(Vector3(1.04404f, -7.74285f, 5.08408f));
  TestSphereRitter(points, file);
}

void SphereRitterTest26(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.61608f, 2.12745f, -3.51726f));
  points.push_back(Vector3(9.84924f, -5.10666f, -8.9996f));
  points.push_back(Vector3(-1.05014f, 6.31886f, 0.473952f));
  points.push_back(Vector3(9.48546f, -2.76711f, -7.98273f));
  points.push_back(Vector3(-3.54045f, -1.8955f, -5.81591f));
  points.push_back(Vector3(-4.88083f, -1.85949f, 1.54454f));
  points.push_back(Vector3(-5.92456f, -2.18421f, 3.91522f));
  points.push_back(Vector3(-0.299387f, 1.9602f, 0.740074f));
  points.push_back(Vector3(-5.49058f, -7.48894f, 1.66051f));
  points.push_back(Vector3(-8.50398f, -0.105289f, 1.71361f));
  points.push_back(Vector3(3.01859f, 5.41307f, 9.52513f));
  points.push_back(Vector3(2.62795f, -0.974456f, -3.35063f));
  points.push_back(Vector3(-8.48262f, 9.11435f, 3.46355f));
  points.push_back(Vector3(7.77886f, -3.59355f, 4.81491f));
  points.push_back(Vector3(9.67406f, -4.02997f, -8.90988f));
  points.push_back(Vector3(3.80902f, 1.09104f, 3.90179f));
  points.push_back(Vector3(-1.39988f, -6.18824f, -5.84887f));
  points.push_back(Vector3(-6.47877f, 9.31272f, 5.03098f));
  points.push_back(Vector3(4.21674f, -9.21384f, -0.76754f));
  points.push_back(Vector3(-2.18177f, -4.87411f, -0.496536f));
  points.push_back(Vector3(0.975066f, -7.7691f, 3.00577f));
  points.push_back(Vector3(-7.60552f, 3.06253f, -7.36625f));
  points.push_back(Vector3(-5.03464f, -2.48329f, 3.16874f));
  points.push_back(Vector3(-9.53368f, -6.70156f, 8.15668f));
  points.push_back(Vector3(-9.06369f, -1.70141f, 5.81591f));
  points.push_back(Vector3(-5.67309f, 5.98437f, -1.70446f));
  points.push_back(Vector3(-7.06107f, 3.99091f, 6.74001f));
  points.push_back(Vector3(-1.76672f, -7.82281f, -7.86615f));
  points.push_back(Vector3(-4.2851f, -1.8363f, -9.3939f));
  points.push_back(Vector3(5.81835f, -3.14859f, 0.88168f));
  points.push_back(Vector3(5.98682f, 3.33415f, -9.43785f));
  points.push_back(Vector3(9.29685f, 7.13675f, -4.42183f));
  points.push_back(Vector3(2.0951f, 3.84991f, -5.80981f));
  points.push_back(Vector3(7.7868f, 8.83663f, 3.09122f));
  points.push_back(Vector3(9.3585f, 9.74242f, 2.19275f));
  points.push_back(Vector3(0.547197f, -1.17283f, -7.41813f));
  points.push_back(Vector3(9.66124f, 1.00375f, -3.58562f));
  points.push_back(Vector3(0.333567f, -7.27897f, 9.32615f));
  points.push_back(Vector3(9.60448f, -5.6975f, 6.17603f));
  TestSphereRitter(points, file);
}

void SphereRitterTest27(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.11335f, 8.59859f, -2.33497f));
  points.push_back(Vector3(3.90851f, 1.713f, -1.89856f));
  points.push_back(Vector3(-8.68465f, -0.827967f, -0.808435f));
  points.push_back(Vector3(0.113224f, 9.16623f, -7.71233f));
  points.push_back(Vector3(4.88266f, -7.1923f, 7.13004f));
  points.push_back(Vector3(-5.80309f, -0.0827052f, 0.926237f));
  points.push_back(Vector3(-3.41838f, 3.98846f, -2.61147f));
  points.push_back(Vector3(4.10688f, -8.14081f, 8.89401f));
  points.push_back(Vector3(-5.12803f, 1.8186f, 7.96258f));
  points.push_back(Vector3(-6.31031f, -1.29307f, 3.02408f));
  points.push_back(Vector3(4.06842f, -7.35038f, 0.657063f));
  points.push_back(Vector3(-1.31016f, -1.50182f, 7.14896f));
  points.push_back(Vector3(-2.41676f, 5.27573f, -9.25108f));
  points.push_back(Vector3(2.06458f, -5.25498f, -2.67495f));
  points.push_back(Vector3(-3.77606f, 4.08979f, 3.36161f));
  points.push_back(Vector3(-2.71706f, 9.27976f, -4.91562f));
  points.push_back(Vector3(-6.94266f, 0.661336f, 0.22187f));
  points.push_back(Vector3(3.59294f, 9.81262f, 4.68856f));
  points.push_back(Vector3(1.87231f, 7.64824f, 0.0454726f));
  points.push_back(Vector3(-1.44932f, -8.6755f, -8.01019f));
  points.push_back(Vector3(-8.5406f, 3.37077f, 2.52968f));
  points.push_back(Vector3(-7.1746f, -8.73592f, 0.0277718f));
  points.push_back(Vector3(-4.68184f, -6.74978f, -7.58965f));
  points.push_back(Vector3(-7.03787f, -3.50261f, 2.45949f));
  points.push_back(Vector3(8.45515f, 8.07611f, -1.35472f));
  points.push_back(Vector3(1.87292f, 7.68364f, -7.13797f));
  points.push_back(Vector3(-7.78253f, -8.69747f, 7.11966f));
  points.push_back(Vector3(-3.11014f, -3.39091f, -1.72277f));
  points.push_back(Vector3(-2.96548f, 0.755333f, 5.77929f));
  points.push_back(Vector3(3.66375f, -3.40007f, -8.35444f));
  points.push_back(Vector3(-5.92456f, 6.69485f, -8.71273f));
  points.push_back(Vector3(-6.37745f, -2.125f, 2.54372f));
  points.push_back(Vector3(-7.34123f, -9.23826f, -1.3242f));
  points.push_back(Vector3(-4.44319f, -8.83969f, -8.73653f));
  points.push_back(Vector3(3.25297f, 1.27903f, 2.55287f));
  points.push_back(Vector3(-9.33042f, 6.51234f, 0.389721f));
  points.push_back(Vector3(-1.40477f, 2.30567f, -7.33268f));
  points.push_back(Vector3(-2.3191f, 2.61513f, -6.92679f));
  points.push_back(Vector3(0.357372f, 9.19919f, 0.584429f));
  points.push_back(Vector3(-7.27714f, 7.33634f, -9.32493f));
  points.push_back(Vector3(8.33064f, -5.27879f, 0.360424f));
  points.push_back(Vector3(-9.63317f, 5.50096f, -3.14798f));
  points.push_back(Vector3(5.8916f, -0.554521f, -3.08451f));
  points.push_back(Vector3(-0.332957f, 7.24906f, 3.03934f));
  points.push_back(Vector3(-8.07672f, -9.09299f, 3.8316f));
  points.push_back(Vector3(5.07248f, 2.3954f, -5.9624f));
  points.push_back(Vector3(-1.96753f, -9.98535f, 9.96948f));
  points.push_back(Vector3(8.99594f, 5.47777f, -5.32701f));
  points.push_back(Vector3(3.18278f, 3.29936f, -5.79455f));
  points.push_back(Vector3(-6.85965f, -4.8851f, 1.63121f));
  points.push_back(Vector3(8.4228f, 8.04376f, 2.15552f));
  points.push_back(Vector3(-7.97967f, 2.44972f, -8.80367f));
  points.push_back(Vector3(-5.46617f, -3.24503f, 0.488601f));
  points.push_back(Vector3(6.798f, -0.765099f, 6.14185f));
  points.push_back(Vector3(7.83868f, 0.291452f, 5.91662f));
  points.push_back(Vector3(3.24686f, 9.17722f, 6.01184f));
  points.push_back(Vector3(-3.53618f, -2.26417f, -0.459914f));
  points.push_back(Vector3(-3.24931f, 8.80184f, -3.05887f));
  points.push_back(Vector3(3.62163f, 8.35872f, -4.41511f));
  points.push_back(Vector3(-7.72149f, 9.01853f, 2.50832f));
  points.push_back(Vector3(8.4051f, 9.14548f, 9.04416f));
  points.push_back(Vector3(0.752892f, 8.11945f, -1.58727f));
  points.push_back(Vector3(0.739464f, -7.00491f, -8.05353f));
  points.push_back(Vector3(-2.34779f, -6.29566f, -6.50746f));
  points.push_back(Vector3(-2.05786f, 0.210273f, -4.62813f));
  points.push_back(Vector3(7.53349f, -2.52113f, 0.257881f));
  points.push_back(Vector3(8.35627f, 1.89489f, -3.63506f));
  points.push_back(Vector3(-8.05597f, 5.49242f, 2.22266f));
  points.push_back(Vector3(-4.785f, -9.22361f, -1.80151f));
  points.push_back(Vector3(-9.55931f, 9.71007f, -4.65072f));
  points.push_back(Vector3(3.78521f, 5.33494f, 1.35716f));
  points.push_back(Vector3(-2.44484f, 7.32963f, -0.58504f));
  points.push_back(Vector3(-0.610065f, -0.610675f, 3.74981f));
  points.push_back(Vector3(-4.79781f, 4.42305f, 4.4908f));
  points.push_back(Vector3(-4.30158f, -5.95447f, -5.51256f));
  points.push_back(Vector3(2.52358f, -7.09952f, 0.608844f));
  TestSphereRitter(points, file);
}

void SphereRitterTest28(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.91659f, 4.79476f, 3.58501f));
  points.push_back(Vector3(5.01511f, 4.61959f, -7.76299f));
  points.push_back(Vector3(5.74084f, -0.801111f, -2.19214f));
  points.push_back(Vector3(-7.63665f, 5.54674f, 1.4536f));
  points.push_back(Vector3(-0.654012f, 2.88003f, 8.48689f));
  points.push_back(Vector3(9.51781f, 3.45073f, 8.84335f));
  points.push_back(Vector3(6.27674f, -2.41432f, 9.49828f));
  points.push_back(Vector3(-3.76568f, -1.36265f, 3.50139f));
  points.push_back(Vector3(2.9545f, 1.6715f, 6.66311f));
  points.push_back(Vector3(1.13804f, 0.721152f, 8.8757f));
  points.push_back(Vector3(5.9209f, -6.39088f, -5.98254f));
  points.push_back(Vector3(-7.48161f, -2.59926f, -7.08365f));
  points.push_back(Vector3(-8.07245f, 0.085757f, 4.44136f));
  points.push_back(Vector3(1.67028f, -1.26377f, -7.63726f));
  points.push_back(Vector3(-6.24256f, 2.50832f, 8.18232f));
  points.push_back(Vector3(-6.8157f, 8.69625f, -9.16868f));
  points.push_back(Vector3(7.74468f, 9.0698f, -7.16056f));
  points.push_back(Vector3(-3.51421f, -3.90362f, 9.35423f));
  points.push_back(Vector3(-7.90948f, -9.98474f, 6.85232f));
  points.push_back(Vector3(7.47002f, -6.64357f, -0.890835f));
  points.push_back(Vector3(1.71789f, -6.03198f, 7.95709f));
  points.push_back(Vector3(-9.129f, 6.19129f, 1.93823f));
  points.push_back(Vector3(-2.11158f, 5.53087f, -9.08078f));
  points.push_back(Vector3(-4.57869f, -6.93655f, -2.772f));
  points.push_back(Vector3(-8.14997f, 1.47069f, -2.35023f));
  points.push_back(Vector3(7.49504f, -7.70745f, -3.54411f));
  points.push_back(Vector3(-6.36219f, 7.05008f, 0.019837f));
  points.push_back(Vector3(7.2631f, -0.242622f, -8.45454f));
  points.push_back(Vector3(2.53639f, -2.00903f, -6.12354f));
  points.push_back(Vector3(6.88467f, -6.36952f, 2.78909f));
  points.push_back(Vector3(-3.00699f, 9.72655f, -5.65172f));
  points.push_back(Vector3(-4.55123f, 6.96341f, -1.17954f));
  points.push_back(Vector3(1.4951f, -3.62224f, 0.0717185f));
  points.push_back(Vector3(2.78359f, 6.81509f, 7.58538f));
  points.push_back(Vector3(8.58516f, -0.0595111f, -0.0534074f));
  points.push_back(Vector3(-3.70647f, -7.59575f, -4.12824f));
  points.push_back(Vector3(-1.69713f, -2.1836f, -7.05435f));
  points.push_back(Vector3(-5.72924f, -3.01798f, -1.68798f));
  points.push_back(Vector3(7.36869f, 6.75466f, 1.84912f));
  points.push_back(Vector3(8.04804f, -8.71578f, -2.76223f));
  points.push_back(Vector3(-1.09897f, 5.79882f, 8.06757f));
  points.push_back(Vector3(6.50868f, 3.05094f, 5.00107f));
  points.push_back(Vector3(-7.11295f, -7.3809f, -0.55269f));
  points.push_back(Vector3(2.28858f, 9.60082f, -7.27348f));
  points.push_back(Vector3(0.458693f, -0.957976f, 8.60836f));
  points.push_back(Vector3(1.99927f, -8.55098f, -3.43669f));
  points.push_back(Vector3(3.82733f, -4.77889f, 8.46431f));
  points.push_back(Vector3(-4.48775f, -3.12113f, 6.71926f));
  points.push_back(Vector3(0.959807f, 0.228584f, 6.63381f));
  points.push_back(Vector3(-5.77319f, 2.69204f, -1.44688f));
  points.push_back(Vector3(-7.77093f, 2.33131f, 3.89752f));
  points.push_back(Vector3(-2.2074f, 7.69646f, -8.89767f));
  points.push_back(Vector3(7.88995f, 7.43461f, -3.69976f));
  points.push_back(Vector3(5.55406f, 5.18906f, 9.24619f));
  points.push_back(Vector3(2.7488f, -8.46248f, 8.32148f));
  points.push_back(Vector3(5.38438f, -8.64009f, -6.27857f));
  points.push_back(Vector3(0.404981f, 5.13657f, 8.34834f));
  points.push_back(Vector3(1.25217f, 0.652791f, 0.917081f));
  points.push_back(Vector3(-3.67901f, -3.25846f, -0.0936918f));
  points.push_back(Vector3(-5.84948f, -0.860317f, -5.79882f));
  points.push_back(Vector3(9.3469f, 1.66051f, 5.25193f));
  points.push_back(Vector3(1.54393f, -4.51888f, 3.1901f));
  points.push_back(Vector3(7.62322f, -6.7217f, 4.55306f));
  TestSphereRitter(points, file);
}

void SphereRitterTest29(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.16135f, -2.12317f, 2.46376f));
  points.push_back(Vector3(-1.49632f, -9.729f, -2.55532f));
  points.push_back(Vector3(-7.92108f, -1.04099f, -1.77099f));
  points.push_back(Vector3(-6.08142f, -3.35002f, -1.85278f));
  points.push_back(Vector3(-2.69143f, 0.693686f, 2.44911f));
  points.push_back(Vector3(7.89117f, -9.86328f, 5.60167f));
  points.push_back(Vector3(8.83908f, -8.4875f, -7.50175f));
  points.push_back(Vector3(-5.97034f, -8.57479f, -3.1077f));
  points.push_back(Vector3(6.66189f, -8.54732f, 6.96158f));
  points.push_back(Vector3(4.2552f, -9.48302f, -1.49754f));
  points.push_back(Vector3(0.630207f, 6.80593f, 8.17011f));
  points.push_back(Vector3(1.70202f, 6.34632f, -7.65557f));
  points.push_back(Vector3(-2.40455f, -7.00674f, 0.679647f));
  points.push_back(Vector3(3.98175f, 0.99704f, 1.17038f));
  points.push_back(Vector3(1.04465f, 8.08039f, -6.52516f));
  points.push_back(Vector3(8.36116f, 8.76583f, 7.54875f));
  points.push_back(Vector3(-4.34919f, -5.33738f, 7.65801f));
  points.push_back(Vector3(8.60958f, 5.8562f, 4.0788f));
  points.push_back(Vector3(-1.26682f, -0.825526f, -2.48451f));
  points.push_back(Vector3(-5.14328f, 1.66906f, 6.94021f));
  points.push_back(Vector3(-2.64504f, 7.37663f, 3.65764f));
  points.push_back(Vector3(-4.66353f, -9.94873f, -7.30583f));
  points.push_back(Vector3(6.26576f, 5.45762f, 4.9559f));
  points.push_back(Vector3(-5.11826f, -9.07651f, 2.0835f));
  points.push_back(Vector3(-9.49583f, -9.72655f, -6.32618f));
  points.push_back(Vector3(-8.05963f, -8.03827f, -3.24137f));
  points.push_back(Vector3(9.80346f, -7.69768f, -1.89856f));
  points.push_back(Vector3(-3.76446f, -1.0184f, -1.92358f));
  points.push_back(Vector3(-7.54631f, 3.35063f, -8.46675f));
  points.push_back(Vector3(5.48509f, -5.24094f, 3.65947f));
  points.push_back(Vector3(6.46962f, 0.477615f, 8.23542f));
  points.push_back(Vector3(-5.68163f, 1.89611f, 9.99268f));
  points.push_back(Vector3(-1.71361f, -9.55077f, 8.43806f));
  points.push_back(Vector3(4.19477f, -1.70751f, -9.71679f));
  points.push_back(Vector3(6.292f, 7.82037f, 8.08466f));
  points.push_back(Vector3(2.22877f, -3.46416f, 8.73592f));
  points.push_back(Vector3(0.744346f, 6.96768f, 7.32414f));
  points.push_back(Vector3(1.8656f, 3.35246f, -2.27332f));
  points.push_back(Vector3(5.58763f, -3.42082f, 7.29728f));
  points.push_back(Vector3(-8.16828f, -5.12864f, 5.69262f));
  points.push_back(Vector3(-6.21021f, -3.32682f, 9.92309f));
  points.push_back(Vector3(4.18928f, -9.8059f, 3.22001f));
  points.push_back(Vector3(8.67061f, -4.20331f, 2.80068f));
  points.push_back(Vector3(-9.81445f, -7.79656f, -4.46516f));
  points.push_back(Vector3(1.67455f, -8.00348f, -6.60939f));
  points.push_back(Vector3(6.37196f, 3.19498f, -6.33839f));
  points.push_back(Vector3(4.75204f, -1.89917f, 5.9209f));
  points.push_back(Vector3(5.69079f, 6.21509f, 6.57399f));
  points.push_back(Vector3(5.39293f, 2.16956f, 3.37992f));
  points.push_back(Vector3(1.40721f, 3.51543f, -4.86801f));
  points.push_back(Vector3(-3.08512f, 0.289621f, -1.87353f));
  points.push_back(Vector3(8.33857f, -6.2859f, -1.9779f));
  points.push_back(Vector3(8.39351f, 3.59661f, 0.431227f));
  points.push_back(Vector3(8.39961f, 1.64647f, 2.7488f));
  points.push_back(Vector3(-9.97131f, 7.07938f, -2.70669f));
  points.push_back(Vector3(-1.55675f, 1.95227f, -6.45619f));
  points.push_back(Vector3(-6.58071f, -3.17606f, 6.57033f));
  points.push_back(Vector3(0.293893f, -8.28669f, 5.25681f));
  points.push_back(Vector3(-5.51073f, 7.39006f, 6.33717f));
  points.push_back(Vector3(8.22077f, 1.38524f, -9.52513f));
  points.push_back(Vector3(-7.63604f, 4.48775f, 8.95871f));
  points.push_back(Vector3(0.395215f, -0.584429f, 8.71761f));
  points.push_back(Vector3(-7.34855f, 2.54616f, 6.11805f));
  points.push_back(Vector3(-9.40916f, -3.24564f, -5.92456f));
  points.push_back(Vector3(0.999481f, -5.39171f, 7.5042f));
  points.push_back(Vector3(7.05679f, 5.46678f, -6.32801f));
  points.push_back(Vector3(4.83261f, -4.232f, 4.46577f));
  points.push_back(Vector3(-0.408032f, 3.36161f, -3.80169f));
  points.push_back(Vector3(0.472732f, 3.62102f, 3.28532f));
  points.push_back(Vector3(-4.09955f, -3.57524f, -9.83825f));
  points.push_back(Vector3(1.75878f, 2.32398f, 3.22306f));
  points.push_back(Vector3(-3.24259f, 5.42039f, 7.75262f));
  points.push_back(Vector3(-2.57302f, 3.49895f, -5.32884f));
  points.push_back(Vector3(-1.04099f, 4.7795f, 4.96994f));
  points.push_back(Vector3(0.33845f, 9.7235f, -4.83749f));
  points.push_back(Vector3(7.85882f, 3.34513f, 4.31867f));
  points.push_back(Vector3(4.63729f, 7.35527f, -1.98706f));
  points.push_back(Vector3(-9.90051f, -9.83398f, 5.46556f));
  points.push_back(Vector3(9.62401f, 7.32414f, -7.32902f));
  points.push_back(Vector3(4.36201f, 6.86514f, -5.68285f));
  points.push_back(Vector3(-5.9801f, -2.09876f, -0.22187f));
  points.push_back(Vector3(-3.88165f, 3.59661f, -5.57176f));
  points.push_back(Vector3(3.84564f, -5.27146f, 0.0570696f));
  points.push_back(Vector3(-6.00391f, 0.83224f, 9.08139f));
  points.push_back(Vector3(3.91461f, -6.87613f, -2.9899f));
  points.push_back(Vector3(2.86843f, 6.56301f, 0.220038f));
  points.push_back(Vector3(9.39329f, 8.34284f, -8.62911f));
  points.push_back(Vector3(-5.2092f, 0.599689f, 4.21918f));
  points.push_back(Vector3(-7.52007f, -6.42872f, -7.02139f));
  points.push_back(Vector3(-4.19599f, 6.90847f, -3.31645f));
  TestSphereRitter(points, file);
}

void SphereRitterTest30(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.00632f, 9.58129f, -7.06961f));
  points.push_back(Vector3(4.09589f, 1.32176f, 4.38643f));
  points.push_back(Vector3(0.25483f, -0.401318f, 4.30342f));
  points.push_back(Vector3(1.22532f, 9.60936f, 0.243843f));
  points.push_back(Vector3(-8.71639f, 8.42219f, -1.03977f));
  points.push_back(Vector3(-6.68752f, 6.87246f, 2.77932f));
  points.push_back(Vector3(-4.00555f, -8.53877f, -4.03851f));
  points.push_back(Vector3(-8.96237f, 6.24317f, -9.16074f));
  points.push_back(Vector3(1.8717f, -2.06702f, 1.4066f));
  points.push_back(Vector3(8.62056f, 6.2566f, 8.98312f));
  points.push_back(Vector3(3.49773f, -6.92862f, -8.61019f));
  points.push_back(Vector3(6.12232f, -9.5703f, 9.29258f));
  TestSphereRitter(points, file);
}

void SphereRitterTest31(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.49178f, 2.14026f, 6.01489f));
  points.push_back(Vector3(-6.63747f, 5.56505f, 2.73171f));
  points.push_back(Vector3(-9.62584f, -1.36143f, 4.39558f));
  points.push_back(Vector3(-6.91519f, 6.31825f, 7.18009f));
  points.push_back(Vector3(-2.49184f, -6.01672f, -6.42445f));
  points.push_back(Vector3(3.55388f, 9.92065f, 4.21247f));
  points.push_back(Vector3(4.279f, -4.09223f, -6.43117f));
  points.push_back(Vector3(8.83236f, -9.36216f, -4.56709f));
  points.push_back(Vector3(1.41209f, -0.632649f, -3.12174f));
  points.push_back(Vector3(3.05765f, -0.144963f, -0.966521f));
  points.push_back(Vector3(-3.94147f, 1.48961f, 5.12009f));
  points.push_back(Vector3(-3.87249f, 2.39784f, 0.736412f));
  points.push_back(Vector3(-0.815149f, -1.29002f, -0.264595f));
  points.push_back(Vector3(-4.77157f, -9.08078f, -6.30482f));
  points.push_back(Vector3(-3.25175f, 0.664388f, -1.95898f));
  points.push_back(Vector3(3.48979f, 9.55077f, 8.71212f));
  points.push_back(Vector3(-4.48469f, 3.28532f, 2.29957f));
  points.push_back(Vector3(7.6867f, 6.02588f, -7.8515f));
  points.push_back(Vector3(6.44215f, 7.32536f, -1.85705f));
  points.push_back(Vector3(1.0184f, 9.20591f, -4.20698f));
  points.push_back(Vector3(7.80999f, -9.25108f, -8.01385f));
  points.push_back(Vector3(7.04093f, 8.77316f, 3.31095f));
  points.push_back(Vector3(9.2346f, 6.6332f, 7.58843f));
  points.push_back(Vector3(-0.71688f, 8.47713f, -5.81347f));
  points.push_back(Vector3(8.81527f, 4.76302f, 2.09693f));
  points.push_back(Vector3(-9.47203f, 6.03504f, 0.809656f));
  points.push_back(Vector3(-8.50276f, 7.70989f, 4.31806f));
  points.push_back(Vector3(-1.44566f, -5.72802f, 9.99207f));
  points.push_back(Vector3(9.7528f, -6.90054f, -4.99374f));
  points.push_back(Vector3(3.94147f, -8.32331f, -0.669271f));
  points.push_back(Vector3(-9.66063f, 5.74206f, -6.77358f));
  points.push_back(Vector3(2.77139f, 8.90927f, 3.86578f));
  points.push_back(Vector3(-4.16791f, 8.59615f, -3.19742f));
  points.push_back(Vector3(5.21714f, -6.71987f, 1.9364f));
  points.push_back(Vector3(9.14182f, 2.88125f, 0.976897f));
  points.push_back(Vector3(2.6017f, -1.57811f, -6.40553f));
  points.push_back(Vector3(-3.97443f, 7.33573f, 0.242622f));
  points.push_back(Vector3(3.07047f, -6.24439f, 2.73904f));
  points.push_back(Vector3(7.03787f, 7.30216f, -3.68267f));
  points.push_back(Vector3(1.98279f, -9.56175f, 7.96319f));
  points.push_back(Vector3(-1.02817f, 8.43013f, 2.902f));
  points.push_back(Vector3(-9.96338f, 9.7058f, -0.695517f));
  points.push_back(Vector3(-0.785241f, -0.199286f, 7.7868f));
  points.push_back(Vector3(-7.48405f, 8.50642f, -8.72127f));
  points.push_back(Vector3(-3.10953f, 9.78027f, -2.6017f));
  points.push_back(Vector3(-0.694296f, -1.57445f, -0.851161f));
  points.push_back(Vector3(-5.0914f, 7.30888f, 0.674154f));
  points.push_back(Vector3(-9.9176f, -0.263985f, 7.94549f));
  points.push_back(Vector3(9.38047f, 4.18378f, 0.561235f));
  points.push_back(Vector3(4.71969f, -4.58846f, -5.2794f));
  points.push_back(Vector3(9.96948f, -7.30522f, 5.11094f));
  points.push_back(Vector3(-1.93274f, 2.64016f, 6.43788f));
  points.push_back(Vector3(8.97031f, -9.8236f, -1.58483f));
  points.push_back(Vector3(-6.69179f, -5.74999f, -8.77255f));
  points.push_back(Vector3(0.873135f, 0.234077f, -2.82571f));
  points.push_back(Vector3(-8.45088f, -7.9577f, -7.92169f));
  points.push_back(Vector3(0.307321f, 1.96936f, -6.13391f));
  points.push_back(Vector3(9.74181f, -9.2346f, 1.69408f));
  points.push_back(Vector3(-2.94717f, 6.10767f, 4.86862f));
  points.push_back(Vector3(6.85904f, 7.93451f, 7.97174f));
  points.push_back(Vector3(-5.14634f, -7.13797f, -6.04419f));
  points.push_back(Vector3(2.06885f, 3.30241f, -6.38234f));
  points.push_back(Vector3(-1.57384f, -6.67287f, 0.867641f));
  points.push_back(Vector3(-9.15708f, 5.14817f, -6.52516f));
  points.push_back(Vector3(-7.03726f, -3.48613f, 3.55693f));
  points.push_back(Vector3(8.12128f, -8.98984f, 1.60558f));
  points.push_back(Vector3(-5.00778f, 0.442213f, -6.10828f));
  points.push_back(Vector3(-5.74938f, -9.27f, -0.409864f));
  points.push_back(Vector3(-4.78683f, 0.435499f, 2.39357f));
  points.push_back(Vector3(-8.04376f, 2.02124f, -9.64232f));
  points.push_back(Vector3(-4.62752f, 3.41105f, 0.586261f));
  points.push_back(Vector3(3.57891f, 5.87939f, -9.36094f));
  points.push_back(Vector3(-5.12131f, -3.91705f, -7.74285f));
  points.push_back(Vector3(9.71557f, -6.62709f, 2.38258f));
  points.push_back(Vector3(1.1771f, 0.013123f, 9.78881f));
  points.push_back(Vector3(-4.21857f, -0.664998f, -8.39351f));
  points.push_back(Vector3(-6.59536f, -0.0674459f, -8.70907f));
  points.push_back(Vector3(-5.73473f, -5.42528f, -5.19394f));
  points.push_back(Vector3(-5.94104f, -3.82427f, 1.05136f));
  points.push_back(Vector3(-9.80224f, 9.08261f, -9.48241f));
  TestSphereRitter(points, file);
}

void SphereRitterTest32(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.84313f, -5.74816f, -6.50807f));
  points.push_back(Vector3(-4.47798f, -2.7958f, -2.22144f));
  points.push_back(Vector3(2.38502f, 9.99939f, -8.40388f));
  points.push_back(Vector3(-2.73232f, 7.52434f, 8.95321f));
  points.push_back(Vector3(-3.96527f, 6.81021f, -9.94873f));
  points.push_back(Vector3(8.73409f, -7.8576f, -0.483718f));
  points.push_back(Vector3(6.69424f, 0.967742f, 9.62401f));
  points.push_back(Vector3(2.53578f, -2.77261f, -7.33634f));
  points.push_back(Vector3(-1.56652f, 3.04056f, -0.989715f));
  points.push_back(Vector3(5.11704f, 4.58419f, 3.31889f));
  points.push_back(Vector3(-5.78784f, -5.28367f, 0.202948f));
  points.push_back(Vector3(-6.9097f, 5.36546f, 8.80245f));
  points.push_back(Vector3(8.47896f, -2.82571f, 4.85519f));
  points.push_back(Vector3(-0.323191f, -5.88855f, 6.63686f));
  points.push_back(Vector3(-6.01184f, 9.91516f, -0.101627f));
  points.push_back(Vector3(-8.46736f, -2.74697f, -7.9223f));
  points.push_back(Vector3(0.0747703f, 3.38603f, 7.39799f));
  points.push_back(Vector3(-4.02264f, -8.95993f, 5.50768f));
  points.push_back(Vector3(6.95853f, 6.59291f, -9.90967f));
  points.push_back(Vector3(-0.70101f, 1.85461f, 5.78539f));
  points.push_back(Vector3(2.78481f, 4.65804f, -7.32048f));
  points.push_back(Vector3(0.923185f, 9.56786f, 2.60353f));
  points.push_back(Vector3(-0.68453f, -6.45375f, -7.72454f));
  points.push_back(Vector3(-1.74047f, 4.48592f, -8.80734f));
  points.push_back(Vector3(-8.84762f, -7.68914f, -8.11396f));
  points.push_back(Vector3(-4.47981f, -7.00491f, -0.936003f));
  points.push_back(Vector3(4.50728f, 9.8352f, 1.0593f));
  points.push_back(Vector3(-0.768151f, -1.22471f, -0.837123f));
  points.push_back(Vector3(7.34611f, 5.57054f, 0.142521f));
  TestSphereRitter(points, file);
}

void SphereRitterTest33(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.43013f, 5.50951f, 4.02081f));
  points.push_back(Vector3(8.66268f, 0.726035f, -2.97159f));
  points.push_back(Vector3(9.26511f, 3.25236f, -3.19071f));
  points.push_back(Vector3(-3.24259f, 3.5197f, 8.01385f));
  points.push_back(Vector3(-3.60454f, 7.05496f, -6.52882f));
  points.push_back(Vector3(-8.39412f, -2.65908f, -7.16605f));
  points.push_back(Vector3(-1.08188f, 1.01596f, 9.56114f));
  points.push_back(Vector3(1.74535f, -5.2678f, 8.15607f));
  points.push_back(Vector3(-2.28675f, 8.60958f, 0.0552385f));
  points.push_back(Vector3(-5.20798f, 8.93124f, 4.73739f));
  points.push_back(Vector3(-7.16117f, 1.41575f, 8.70785f));
  points.push_back(Vector3(2.75613f, -2.13294f, -4.32234f));
  points.push_back(Vector3(-1.9187f, -2.42958f, 6.37501f));
  points.push_back(Vector3(6.02832f, -4.77218f, -5.92334f));
  points.push_back(Vector3(-4.60005f, -3.82977f, -5.40635f));
  points.push_back(Vector3(2.26661f, 4.97971f, 5.9624f));
  points.push_back(Vector3(6.69362f, -9.66918f, 1.32908f));
  points.push_back(Vector3(-5.61327f, -8.30439f, -3.59539f));
  points.push_back(Vector3(4.11725f, -9.78027f, 9.92737f));
  points.push_back(Vector3(9.56359f, 5.97278f, 6.01489f));
  points.push_back(Vector3(2.40516f, 0.703452f, 2.33863f));
  points.push_back(Vector3(1.03732f, 4.54817f, -6.06739f));
  points.push_back(Vector3(-0.193793f, 8.76583f, 6.16504f));
  points.push_back(Vector3(-0.906095f, 1.04831f, -5.41124f));
  points.push_back(Vector3(0.861538f, -3.95978f, -5.51927f));
  points.push_back(Vector3(-0.673544f, -2.01148f, -8.69747f));
  points.push_back(Vector3(6.77297f, -5.80981f, 0.248726f));
  points.push_back(Vector3(-2.24342f, 6.33778f, 2.81777f));
  points.push_back(Vector3(0.0985748f, -2.07251f, -4.07819f));
  points.push_back(Vector3(-3.99884f, -1.94128f, 1.55065f));
  points.push_back(Vector3(2.42286f, -5.26109f, -3.9317f));
  points.push_back(Vector3(-1.98462f, 2.05664f, 7.22892f));
  points.push_back(Vector3(8.99899f, -5.68224f, 9.00327f));
  points.push_back(Vector3(-4.56954f, 7.46086f, -0.857875f));
  points.push_back(Vector3(5.65416f, -3.16935f, -4.97665f));
  points.push_back(Vector3(3.70769f, 2.584f, -2.98135f));
  points.push_back(Vector3(-7.02933f, -0.0112918f, 6.37562f));
  points.push_back(Vector3(-1.28269f, -4.27229f, 6.95181f));
  points.push_back(Vector3(3.42143f, 2.87515f, -9.93408f));
  points.push_back(Vector3(5.41917f, -2.17322f, 7.45842f));
  points.push_back(Vector3(1.23569f, -7.80694f, -8.46065f));
  points.push_back(Vector3(-0.435499f, -0.874966f, -5.93799f));
  points.push_back(Vector3(4.83016f, 6.48f, 7.59209f));
  points.push_back(Vector3(-7.68609f, 5.24888f, 1.30345f));
  points.push_back(Vector3(-9.92004f, -1.61473f, 3.18522f));
  points.push_back(Vector3(8.77316f, -5.34776f, -8.73775f));
  points.push_back(Vector3(2.15491f, 6.90786f, -8.44172f));
  points.push_back(Vector3(-2.72622f, 1.9364f, -9.90478f));
  points.push_back(Vector3(6.4745f, 2.88186f, 2.68227f));
  points.push_back(Vector3(9.25169f, 2.52113f, 1.11179f));
  points.push_back(Vector3(8.13837f, -5.32701f, -5.79272f));
  points.push_back(Vector3(2.23853f, -3.91705f, -2.78603f));
  points.push_back(Vector3(6.40431f, 9.35606f, -5.87817f));
  points.push_back(Vector3(-6.59658f, 1.48473f, 9.45067f));
  points.push_back(Vector3(8.95749f, -9.86267f, 7.75872f));
  points.push_back(Vector3(0.616169f, 7.25944f, -5.43809f));
  points.push_back(Vector3(-7.68853f, 6.0155f, -3.73455f));
  points.push_back(Vector3(4.78011f, -8.60714f, -4.76608f));
  points.push_back(Vector3(2.22999f, 7.00125f, 1.45909f));
  points.push_back(Vector3(3.63811f, -5.15244f, -5.23606f));
  points.push_back(Vector3(4.01227f, -9.63927f, -4.2143f));
  points.push_back(Vector3(-4.14594f, 7.3516f, 5.55834f));
  points.push_back(Vector3(-0.564898f, 2.53639f, -1.64037f));
  points.push_back(Vector3(7.53349f, 4.01776f, -9.25901f));
  points.push_back(Vector3(7.45964f, 0.379955f, 1.16855f));
  points.push_back(Vector3(3.81512f, -0.144353f, -7.24601f));
  points.push_back(Vector3(2.12012f, 6.46901f, -3.81024f));
  points.push_back(Vector3(8.40083f, 8.61263f, 4.54634f));
  points.push_back(Vector3(-4.26008f, 9.07041f, 6.65639f));
  points.push_back(Vector3(-3.76446f, 5.27573f, 0.435499f));
  points.push_back(Vector3(-8.7286f, -9.64415f, 6.71194f));
  points.push_back(Vector3(1.64892f, 0.326243f, -2.66579f));
  points.push_back(Vector3(6.66799f, 9.14914f, 5.60656f));
  points.push_back(Vector3(8.5052f, 1.07089f, -4.64217f));
  points.push_back(Vector3(-0.769372f, 9.35545f, -2.07678f));
  TestSphereRitter(points, file);
}

void SphereRitterTest34(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.90439f, 4.15693f, 9.00571f));
  points.push_back(Vector3(-6.86331f, 2.39296f, 6.61794f));
  points.push_back(Vector3(-2.86111f, 8.47896f, -1.7246f));
  points.push_back(Vector3(9.84924f, 5.00534f, 1.61534f));
  points.push_back(Vector3(0.42085f, 3.47453f, 9.75707f));
  points.push_back(Vector3(-6.98843f, 1.66112f, -3.68206f));
  points.push_back(Vector3(-7.01895f, 3.73577f, -8.69747f));
  points.push_back(Vector3(-7.07327f, -6.37684f, 9.18943f));
  points.push_back(Vector3(-3.56792f, 2.17017f, 4.69771f));
  points.push_back(Vector3(1.47435f, -2.68349f, 3.52763f));
  points.push_back(Vector3(-3.08939f, -8.98557f, 5.03464f));
  points.push_back(Vector3(6.70522f, 2.3307f, 8.06696f));
  points.push_back(Vector3(-0.544145f, -9.81262f, 1.21006f));
  points.push_back(Vector3(-5.27207f, -4.30097f, -5.62792f));
  points.push_back(Vector3(5.10971f, 8.09015f, -2.8074f));
  points.push_back(Vector3(-5.11643f, -0.575884f, 5.13779f));
  points.push_back(Vector3(3.45622f, -8.27693f, -1.5421f));
  points.push_back(Vector3(-9.95972f, -9.25779f, -0.144353f));
  points.push_back(Vector3(-3.8432f, -5.55345f, -6.35121f));
  points.push_back(Vector3(-3.13456f, 5.63402f, -8.59004f));
  points.push_back(Vector3(5.833f, -6.68569f, -9.39512f));
  points.push_back(Vector3(-6.42018f, 7.95404f, 1.41331f));
  points.push_back(Vector3(1.86987f, -3.73455f, 0.966521f));
  points.push_back(Vector3(7.64336f, 1.94861f, -3.98419f));
  points.push_back(Vector3(-7.10868f, 4.94369f, -8.98557f));
  points.push_back(Vector3(5.32701f, -2.8135f, -9.90051f));
  points.push_back(Vector3(-2.7604f, -5.88977f, -9.15525f));
  points.push_back(Vector3(1.94739f, 4.67391f, -1.45604f));
  points.push_back(Vector3(-9.65514f, 6.02222f, 1.7954f));
  points.push_back(Vector3(7.9284f, -6.42445f, 1.2833f));
  points.push_back(Vector3(3.84808f, -9.82299f, 5.86596f));
  points.push_back(Vector3(-5.47227f, -7.91192f, 6.5685f));
  points.push_back(Vector3(-1.76305f, -1.86926f, 3.0784f));
  points.push_back(Vector3(-3.62712f, -3.98907f, -3.2786f));
  points.push_back(Vector3(-8.8641f, 1.99499f, 5.8916f));
  points.push_back(Vector3(-1.55675f, -2.9191f, -4.75631f));
  points.push_back(Vector3(-0.353099f, -3.60576f, 6.39088f));
  points.push_back(Vector3(-4.63607f, 2.5248f, -4.09894f));
  points.push_back(Vector3(9.89441f, -0.553911f, 4.51033f));
  points.push_back(Vector3(-6.77114f, -9.86694f, -4.15021f));
  points.push_back(Vector3(2.56508f, 1.3657f, 6.51357f));
  points.push_back(Vector3(1.25584f, -8.02911f, 8.50276f));
  points.push_back(Vector3(2.36183f, -8.02362f, -5.10666f));
  points.push_back(Vector3(4.83077f, 7.03421f, -9.84924f));
  points.push_back(Vector3(4.30219f, 3.28837f, -3.82061f));
  points.push_back(Vector3(-4.5555f, -8.63643f, 9.87609f));
  points.push_back(Vector3(3.29447f, 2.88614f, -5.55834f));
  points.push_back(Vector3(9.16257f, 5.69201f, -2.5425f));
  points.push_back(Vector3(-2.1836f, 0.621662f, -1.98828f));
  points.push_back(Vector3(6.07166f, -1.73864f, -8.59737f));
  points.push_back(Vector3(-3.60881f, -2.44728f, 7.59392f));
  TestSphereRitter(points, file);
}

void SphereRitterTest35(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.77355f, 3.86334f, -4.88815f));
  points.push_back(Vector3(9.5703f, -2.45277f, 1.66234f));
  points.push_back(Vector3(8.87448f, 7.46574f, 4.32173f));
  points.push_back(Vector3(5.93127f, 4.36506f, 9.8938f));
  points.push_back(Vector3(8.97275f, 0.277413f, 4.12763f));
  points.push_back(Vector3(-0.884732f, 5.03708f, -6.87857f));
  points.push_back(Vector3(5.80248f, 3.50871f, -6.5154f));
  points.push_back(Vector3(-6.75588f, -2.02124f, 2.51198f));
  points.push_back(Vector3(-9.61364f, -0.718711f, -5.79028f));
  points.push_back(Vector3(-2.92459f, -1.94372f, -1.20884f));
  points.push_back(Vector3(-1.68065f, 6.24683f, -2.19825f));
  points.push_back(Vector3(2.51015f, 4.12091f, 0.509964f));
  points.push_back(Vector3(-7.60613f, 9.43724f, 2.67373f));
  points.push_back(Vector3(-7.48527f, -3.60515f, 8.3581f));
  points.push_back(Vector3(0.207831f, -4.19111f, 2.45766f));
  points.push_back(Vector3(-8.5577f, -0.165105f, -7.80084f));
  points.push_back(Vector3(1.72765f, 5.53453f, -9.82726f));
  points.push_back(Vector3(-1.61901f, 6.47511f, -3.23527f));
  points.push_back(Vector3(-5.98865f, -7.55852f, -6.9274f));
  points.push_back(Vector3(-5.89282f, 0.13947f, -9.12595f));
  points.push_back(Vector3(-6.54286f, 7.50969f, -8.53572f));
  points.push_back(Vector3(-3.27433f, -6.8157f, 6.2096f));
  points.push_back(Vector3(-7.45903f, 9.50255f, 4.21674f));
  points.push_back(Vector3(-7.116f, 9.64782f, -2.54677f));
  points.push_back(Vector3(-9.44029f, -0.763268f, 6.51418f));
  points.push_back(Vector3(2.87332f, -5.12253f, -1.34739f));
  points.push_back(Vector3(8.85067f, 1.02329f, 4.20698f));
  points.push_back(Vector3(1.55675f, 0.784631f, 3.32072f));
  points.push_back(Vector3(2.89773f, 9.08628f, 6.33778f));
  points.push_back(Vector3(5.40757f, -9.09055f, -9.29136f));
  points.push_back(Vector3(-0.935392f, -9.27305f, -4.42122f));
  points.push_back(Vector3(1.41636f, -7.01224f, -9.76745f));
  points.push_back(Vector3(-5.00717f, 4.10688f, -2.06214f));
  points.push_back(Vector3(8.85617f, 1.08615f, -7.20878f));
  points.push_back(Vector3(-7.56157f, -0.644246f, 0.590533f));
  points.push_back(Vector3(2.24525f, -2.74697f, -5.82263f));
  points.push_back(Vector3(1.96081f, -0.273751f, 2.72195f));
  points.push_back(Vector3(-4.05744f, 6.40614f, 4.39741f));
  points.push_back(Vector3(-6.98721f, -2.8019f, -8.86166f));
  points.push_back(Vector3(-9.94324f, 0.409864f, -9.95361f));
  points.push_back(Vector3(2.98379f, -3.17606f, -7.23319f));
  points.push_back(Vector3(-3.71319f, -9.53856f, 7.3925f));
  points.push_back(Vector3(7.25089f, -1.31443f, -7.52861f));
  points.push_back(Vector3(-6.52699f, -6.50136f, 4.00677f));
  points.push_back(Vector3(-8.30073f, 8.07001f, -0.687582f));
  points.push_back(Vector3(-1.5775f, -9.11435f, 9.18394f));
  points.push_back(Vector3(2.02002f, 5.93799f, 0.0595111f));
  points.push_back(Vector3(-9.39451f, -1.3773f, -9.55992f));
  points.push_back(Vector3(-7.12027f, 5.38865f, -2.14087f));
  points.push_back(Vector3(-7.98883f, 0.204779f, -2.34962f));
  points.push_back(Vector3(7.30888f, -1.87841f, -0.992767f));
  points.push_back(Vector3(8.31843f, -1.34678f, 0.332957f));
  points.push_back(Vector3(4.77096f, -9.5587f, 4.23872f));
  points.push_back(Vector3(-2.87088f, 5.48692f, -0.295724f));
  points.push_back(Vector3(8.03705f, -6.48732f, 5.37828f));
  points.push_back(Vector3(-4.24604f, 4.16181f, -2.02185f));
  TestSphereRitter(points, file);
}

void SphereRitterTest36(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.04965f, 5.25437f, -6.94449f));
  points.push_back(Vector3(0.98056f, 2.82022f, -8.34101f));
  points.push_back(Vector3(-1.53844f, -1.0947f, 2.59011f));
  points.push_back(Vector3(3.78033f, -8.4051f, -0.347606f));
  points.push_back(Vector3(-5.99109f, 6.24195f, 0.970183f));
  points.push_back(Vector3(0.501419f, 6.76748f, -4.62996f));
  points.push_back(Vector3(-8.58821f, -4.42183f, 2.67739f));
  points.push_back(Vector3(3.16385f, 4.62813f, -3.35063f));
  points.push_back(Vector3(5.78661f, 9.43907f, -4.71908f));
  points.push_back(Vector3(7.38945f, -7.92657f, -4.74288f));
  points.push_back(Vector3(3.2017f, 9.25352f, 4.32844f));
  points.push_back(Vector3(0.773034f, -7.64519f, 7.07694f));
  points.push_back(Vector3(7.86065f, 0.612507f, -2.81106f));
  points.push_back(Vector3(-7.47734f, -7.34977f, -0.0753807f));
  points.push_back(Vector3(6.99515f, -6.48915f, -2.4308f));
  points.push_back(Vector3(4.21552f, 8.89706f, 7.74224f));
  points.push_back(Vector3(2.2953f, 6.10034f, 0.0985748f));
  points.push_back(Vector3(8.45576f, 2.55104f, 2.09021f));
  points.push_back(Vector3(-9.9823f, 0.533158f, -5.71337f));
  points.push_back(Vector3(2.55043f, 2.9252f, -4.91806f));
  points.push_back(Vector3(2.4308f, 7.93878f, 1.71239f));
  points.push_back(Vector3(0.620441f, -0.161443f, -5.53636f));
  points.push_back(Vector3(3.42753f, -1.01352f, -7.93939f));
  points.push_back(Vector3(2.28187f, 7.18253f, 4.10077f));
  points.push_back(Vector3(-6.44398f, 9.35545f, 5.07797f));
  TestSphereRitter(points, file);
}

void SphereRitterTest37(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.93857f, -7.36869f, 3.64727f));
  points.push_back(Vector3(3.45683f, -4.63118f, 5.8739f));
  points.push_back(Vector3(4.8442f, -1.1478f, 6.95181f));
  points.push_back(Vector3(-6.35914f, 6.53981f, 1.15818f));
  points.push_back(Vector3(-9.29136f, -8.20978f, -0.508744f));
  points.push_back(Vector3(-6.88833f, 3.39824f, 5.1384f));
  points.push_back(Vector3(-6.01489f, -0.355541f, -7.14469f));
  points.push_back(Vector3(-7.70257f, -2.17017f, -3.59416f));
  points.push_back(Vector3(4.91195f, 7.42485f, 3.60027f));
  points.push_back(Vector3(-9.47752f, -6.37013f, -7.98761f));
  points.push_back(Vector3(5.77319f, -8.30012f, 0.48677f));
  points.push_back(Vector3(-0.15595f, -1.63671f, 1.80883f));
  points.push_back(Vector3(-1.87475f, 8.23237f, -6.30177f));
  points.push_back(Vector3(1.06418f, 4.30464f, -1.32115f));
  points.push_back(Vector3(-7.05435f, -1.05869f, 1.66356f));
  points.push_back(Vector3(0.0704978f, 9.02768f, 7.93634f));
  points.push_back(Vector3(8.93918f, -2.46315f, -7.46147f));
  points.push_back(Vector3(8.30195f, -0.754112f, 0.101627f));
  points.push_back(Vector3(1.30284f, 1.89123f, -8.94223f));
  points.push_back(Vector3(-9.75646f, 4.18134f, 3.22428f));
  points.push_back(Vector3(7.50664f, 8.50093f, -0.232856f));
  points.push_back(Vector3(5.90503f, 9.62584f, -3.7669f));
  points.push_back(Vector3(0.588702f, -7.48405f, -0.83346f));
  points.push_back(Vector3(9.68261f, 3.44157f, 6.11805f));
  points.push_back(Vector3(-3.39213f, 8.43684f, -3.51848f));
  points.push_back(Vector3(-8.53084f, 9.98657f, -8.5577f));
  points.push_back(Vector3(3.70159f, 4.10504f, 0.17365f));
  TestSphereRitter(points, file);
}

void SphereRitterTest38(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.59737f, -5.5565f, 8.13349f));
  points.push_back(Vector3(-5.05234f, -8.09809f, -4.29304f));
  points.push_back(Vector3(9.69115f, -6.66799f, -9.73266f));
  points.push_back(Vector3(-8.034f, -8.89767f, 5.75549f));
  points.push_back(Vector3(1.34556f, -1.26804f, -4.31013f));
  points.push_back(Vector3(2.69082f, 2.3954f, 8.18171f));
  points.push_back(Vector3(5.05783f, -5.08347f, 4.29304f));
  points.push_back(Vector3(8.04498f, 4.92904f, 8.52046f));
  points.push_back(Vector3(9.02646f, 1.6306f, 7.57622f));
  points.push_back(Vector3(-9.90844f, -3.40373f, -0.395825f));
  points.push_back(Vector3(-1.01779f, -2.25501f, -5.53026f));
  points.push_back(Vector3(4.15021f, 8.85433f, 3.57952f));
  points.push_back(Vector3(-7.3162f, -3.85846f, -8.38923f));
  points.push_back(Vector3(3.21635f, -2.25257f, 5.94592f));
  points.push_back(Vector3(-3.52641f, -1.97546f, 8.4521f));
  points.push_back(Vector3(-1.51585f, -5.21653f, 5.67125f));
  points.push_back(Vector3(6.72719f, -6.82485f, 2.66884f));
  points.push_back(Vector3(4.61776f, 6.65395f, 9.3878f));
  points.push_back(Vector3(7.19047f, 8.18232f, -5.22996f));
  points.push_back(Vector3(-1.97729f, -5.91174f, -6.19861f));
  points.push_back(Vector3(4.79171f, 9.86023f, 5.2562f));
  points.push_back(Vector3(3.11136f, -0.132145f, 1.27903f));
  points.push_back(Vector3(4.06415f, -1.52867f, 5.50645f));
  points.push_back(Vector3(7.99371f, -3.33964f, -8.43684f));
  points.push_back(Vector3(6.28407f, 7.41813f, 7.37541f));
  points.push_back(Vector3(9.68017f, 9.4702f, 0.290231f));
  points.push_back(Vector3(-3.65093f, -4.6617f, 8.69503f));
  points.push_back(Vector3(-7.82342f, -2.48512f, 4.83871f));
  points.push_back(Vector3(-9.22666f, 5.49058f, 5.05417f));
  points.push_back(Vector3(1.38707f, -1.17038f, 2.63283f));
  points.push_back(Vector3(6.45558f, 8.42341f, -5.17991f));
  points.push_back(Vector3(-9.09787f, -9.69726f, -1.23936f));
  points.push_back(Vector3(-5.38804f, 9.78149f, 6.91214f));
  points.push_back(Vector3(5.17502f, -1.28636f, -8.77133f));
  points.push_back(Vector3(9.94201f, 8.06513f, -8.20002f));
  points.push_back(Vector3(-6.386f, -2.88797f, 5.80432f));
  points.push_back(Vector3(-5.84948f, -0.103458f, -1.85461f));
  points.push_back(Vector3(3.41655f, -1.87353f, 0.698569f));
  points.push_back(Vector3(8.05902f, 5.19394f, -7.18925f));
  points.push_back(Vector3(-7.11844f, -6.06494f, 6.89077f));
  points.push_back(Vector3(9.94018f, -5.74572f, -6.70522f));
  points.push_back(Vector3(-6.89749f, -5.75304f, 5.04135f));
  points.push_back(Vector3(-7.80633f, -4.52132f, -8.65474f));
  points.push_back(Vector3(-3.26823f, 1.17283f, -2.63283f));
  points.push_back(Vector3(-3.72417f, -1.06052f, -2.81716f));
  points.push_back(Vector3(0.539262f, -4.15571f, 4.89059f));
  TestSphereRitter(points, file);
}

void SphereRitterTest39(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.73104f, -5.0969f, -2.39662f));
  points.push_back(Vector3(-9.08689f, -9.89746f, -4.87106f));
  points.push_back(Vector3(2.41188f, -6.96158f, -4.9498f));
  points.push_back(Vector3(3.38298f, -2.8489f, 3.95428f));
  points.push_back(Vector3(-3.99152f, 2.09449f, 8.17377f));
  points.push_back(Vector3(-6.32557f, 5.71215f, -5.2916f));
  points.push_back(Vector3(-9.80712f, -7.09037f, -2.52724f));
  points.push_back(Vector3(-5.02609f, -9.08078f, 1.66845f));
  points.push_back(Vector3(-8.14203f, 9.39818f, -3.80657f));
  points.push_back(Vector3(-3.65764f, 7.94916f, 5.98682f));
  points.push_back(Vector3(-3.7376f, -6.61184f, 4.78072f));
  points.push_back(Vector3(-7.59575f, 3.80779f, -2.26051f));
  points.push_back(Vector3(8.61751f, -3.33171f, 4.35896f));
  points.push_back(Vector3(-5.93127f, -8.33857f, -6.4922f));
  points.push_back(Vector3(9.71191f, 9.02707f, -2.16102f));
  points.push_back(Vector3(9.51537f, -5.01572f, 2.58217f));
  points.push_back(Vector3(1.27781f, -9.7943f, 9.92798f));
  TestSphereRitter(points, file);
}

void SphereRitterTest40(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.5876f, 7.2454f, 2.64992f));
  points.push_back(Vector3(8.38313f, 3.37992f, 7.69097f));
  points.push_back(Vector3(-0.810877f, 4.39924f, 0.657063f));
  points.push_back(Vector3(-6.79617f, -9.34873f, 5.88977f));
  points.push_back(Vector3(8.90866f, 9.22788f, 3.41472f));
  points.push_back(Vector3(-4.39802f, 4.23749f, 4.41084f));
  points.push_back(Vector3(-9.35545f, 6.70888f, -0.869472f));
  points.push_back(Vector3(-4.71114f, -9.24924f, 9.92737f));
  points.push_back(Vector3(-6.4098f, -4.62081f, -7.39555f));
  points.push_back(Vector3(0.37141f, 7.09281f, 1.81494f));
  points.push_back(Vector3(8.1402f, 2.24891f, -3.01614f));
  points.push_back(Vector3(2.63833f, 2.96182f, -0.462355f));
  points.push_back(Vector3(-1.04221f, -2.10669f, 5.58519f));
  points.push_back(Vector3(-9.23582f, -4.78378f, -2.37953f));
  points.push_back(Vector3(5.93371f, -3.99091f, 5.96057f));
  points.push_back(Vector3(9.8999f, 3.72417f, -5.74023f));
  points.push_back(Vector3(9.82055f, 2.05359f, -2.64931f));
  points.push_back(Vector3(-0.753502f, 8.85861f, 8.13898f));
  points.push_back(Vector3(-6.08814f, -8.12555f, 3.76751f));
  points.push_back(Vector3(5.85315f, -9.01425f, -2.61452f));
  points.push_back(Vector3(-5.11277f, -4.01837f, -9.20347f));
  points.push_back(Vector3(5.36912f, -5.33006f, 7.50847f));
  points.push_back(Vector3(-2.61818f, 0.751061f, 7.21244f));
  points.push_back(Vector3(1.51158f, -2.60231f, 3.88653f));
  points.push_back(Vector3(0.484939f, -3.02103f, -4.82101f));
  points.push_back(Vector3(7.87347f, 6.88223f, -8.3404f));
  points.push_back(Vector3(2.6841f, -8.77743f, -2.28431f));
  points.push_back(Vector3(1.08066f, -5.05539f, -5.99597f));
  points.push_back(Vector3(7.28141f, 8.85006f, -8.34712f));
  points.push_back(Vector3(-4.40962f, -7.88324f, -8.62239f));
  points.push_back(Vector3(-4.49934f, 2.13294f, 1.08493f));
  points.push_back(Vector3(-9.86511f, 7.90765f, 1.8833f));
  points.push_back(Vector3(1.89734f, -5.42528f, -7.24967f));
  points.push_back(Vector3(-3.50017f, -0.28901f, 8.84335f));
  points.push_back(Vector3(8.7347f, 6.44398f, -6.57949f));
  points.push_back(Vector3(5.40574f, 1.00925f, -1.38524f));
  points.push_back(Vector3(5.27146f, -1.2888f, -7.31742f));
  points.push_back(Vector3(-5.67309f, 9.41282f, 2.02307f));
  points.push_back(Vector3(6.83035f, 5.77074f, -4.97177f));
  points.push_back(Vector3(0.532548f, -0.356761f, -0.932951f));
  points.push_back(Vector3(9.66002f, 3.89386f, -4.66659f));
  points.push_back(Vector3(-7.94183f, -1.65319f, -8.70785f));
  points.push_back(Vector3(3.42265f, 4.94308f, 4.21735f));
  points.push_back(Vector3(-7.81732f, 9.035f, -8.11335f));
  points.push_back(Vector3(6.14551f, -4.18928f, -3.17423f));
  points.push_back(Vector3(-8.25617f, -0.893277f, -7.34916f));
  points.push_back(Vector3(-0.827967f, 5.99353f, -7.14835f));
  points.push_back(Vector3(0.884121f, 9.23338f, 2.03528f));
  points.push_back(Vector3(-5.47533f, 1.03916f, 9.53551f));
  points.push_back(Vector3(9.96094f, -9.14487f, -8.07794f));
  points.push_back(Vector3(-3.32438f, -9.07712f, -4.45845f));
  points.push_back(Vector3(-9.03745f, -7.20634f, 5.23545f));
  points.push_back(Vector3(-2.54128f, -7.90643f, 4.41755f));
  points.push_back(Vector3(-1.67882f, -4.69344f, 4.30219f));
  points.push_back(Vector3(-0.675985f, -7.36015f, -5.66637f));
  points.push_back(Vector3(3.96344f, 2.02979f, 3.71685f));
  points.push_back(Vector3(-9.24863f, 4.09162f, -1.46153f));
  points.push_back(Vector3(8.39229f, -0.527055f, -6.36891f));
  points.push_back(Vector3(-9.02768f, 3.43364f, -9.20774f));
  points.push_back(Vector3(9.91089f, -7.28751f, 2.61513f));
  points.push_back(Vector3(-8.35933f, -2.62001f, 4.67086f));
  points.push_back(Vector3(-9.59899f, -2.96731f, -4.22529f));
  points.push_back(Vector3(3.31584f, 0.358593f, 7.33207f));
  points.push_back(Vector3(-9.19309f, 1.09165f, -3.58196f));
  points.push_back(Vector3(-3.03201f, -9.47264f, 9.8352f));
  points.push_back(Vector3(5.11216f, -9.78149f, 0.472121f));
  points.push_back(Vector3(7.82647f, -3.08267f, 9.6881f));
  points.push_back(Vector3(0.727866f, 1.1063f, 4.8204f));
  points.push_back(Vector3(-6.89261f, -1.96692f, -0.336619f));
  points.push_back(Vector3(-1.7655f, 4.07941f, -3.95611f));
  points.push_back(Vector3(-0.857875f, 0.398267f, -7.60918f));
  points.push_back(Vector3(-3.11014f, 8.67122f, 7.36991f));
  points.push_back(Vector3(9.52879f, -2.85745f, -4.54085f));
  points.push_back(Vector3(-3.24992f, -4.99741f, -8.67672f));
  points.push_back(Vector3(6.77175f, 4.25764f, -0.872524f));
  points.push_back(Vector3(6.07837f, -0.0918607f, -3.72051f));
  points.push_back(Vector3(-2.13355f, -1.86438f, 0.822474f));
  points.push_back(Vector3(-3.4727f, 5.374f, -0.813929f));
  points.push_back(Vector3(1.99683f, -5.08896f, -0.145573f));
  points.push_back(Vector3(0.793176f, 0.194403f, -3.2255f));
  points.push_back(Vector3(8.37458f, 2.47291f, 4.72579f));
  points.push_back(Vector3(0.600909f, 6.23585f, -3.93658f));
  points.push_back(Vector3(-3.15409f, 2.32276f, -3.45012f));
  points.push_back(Vector3(9.50438f, -9.09116f, -5.6444f));
  points.push_back(Vector3(5.63219f, 3.15897f, -2.09387f));
  points.push_back(Vector3(-2.51137f, -0.162664f, 1.79907f));
  points.push_back(Vector3(2.00903f, -6.25416f, -0.529496f));
  points.push_back(Vector3(-4.62264f, -9.25047f, -1.64769f));
  points.push_back(Vector3(-4.6086f, -8.28242f, 9.4586f));
  points.push_back(Vector3(-1.07578f, 3.9378f, -5.75976f));
  points.push_back(Vector3(0.577105f, 0.0161748f, 5.79211f));
  points.push_back(Vector3(7.85394f, -1.50792f, 1.13804f));
  points.push_back(Vector3(4.42854f, 6.13514f, 0.489822f));
  points.push_back(Vector3(6.37745f, 9.74242f, 2.92398f));
  points.push_back(Vector3(4.47493f, -6.25294f, 2.50587f));
  TestSphereRitter(points, file);
}

void SphereRitterTest41(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.75951f, 9.78515f, -8.5638f));
  points.push_back(Vector3(-7.62078f, 1.61596f, -1.56102f));
  points.push_back(Vector3(2.172f, -5.04135f, -5.13352f));
  points.push_back(Vector3(-0.336009f, 3.73272f, -9.91821f));
  points.push_back(Vector3(3.55998f, -9.02951f, -1.05747f));
  points.push_back(Vector3(-6.80837f, -0.384228f, -8.1579f));
  points.push_back(Vector3(-6.37623f, 4.01715f, 2.25745f));
  points.push_back(Vector3(-0.614338f, 2.12867f, -7.51885f));
  points.push_back(Vector3(-7.22282f, 6.53005f, 5.2501f));
  points.push_back(Vector3(7.46757f, 0.751061f, 5.88549f));
  points.push_back(Vector3(-8.85922f, -3.44768f, -2.67861f));
  points.push_back(Vector3(-7.60674f, -0.128483f, -5.14878f));
  points.push_back(Vector3(1.1771f, 7.88934f, 2.23731f));
  points.push_back(Vector3(-8.9172f, -7.14835f, 0.702231f));
  points.push_back(Vector3(-6.54897f, 8.98801f, 2.96915f));
  points.push_back(Vector3(3.42448f, -7.64885f, -7.77642f));
  points.push_back(Vector3(-9.94263f, 1.96387f, 6.72842f));
  points.push_back(Vector3(-9.13816f, -6.43849f, -0.984222f));
  points.push_back(Vector3(-4.57808f, -2.38868f, -2.3307f));
  points.push_back(Vector3(5.06943f, 7.79717f, -8.10785f));
  points.push_back(Vector3(-8.40815f, 0.0796533f, -8.77926f));
  points.push_back(Vector3(-0.113834f, 1.90771f, -1.06967f));
  points.push_back(Vector3(7.1868f, 8.6932f, 2.60475f));
  points.push_back(Vector3(3.80963f, 6.6802f, 2.70608f));
  points.push_back(Vector3(-1.55858f, -3.37809f, 5.43931f));
  points.push_back(Vector3(0.343944f, 7.25455f, -5.42955f));
  points.push_back(Vector3(9.71923f, -0.739464f, -3.16385f));
  points.push_back(Vector3(2.02185f, -6.81387f, 8.15241f));
  points.push_back(Vector3(2.00842f, 1.7893f, -4.42366f));
  points.push_back(Vector3(-6.70827f, -2.48817f, -1.04831f));
  points.push_back(Vector3(3.72845f, -2.07984f, -7.65069f));
  points.push_back(Vector3(0.342723f, 5.63402f, 2.60537f));
  points.push_back(Vector3(1.19236f, 2.81838f, -1.88757f));
  points.push_back(Vector3(4.71053f, -1.5183f, -6.54897f));
  points.push_back(Vector3(-1.25217f, 5.08652f, -9.14121f));
  points.push_back(Vector3(-5.24766f, 2.70913f, 0.112003f));
  points.push_back(Vector3(-6.47084f, -1.93274f, -4.92538f));
  points.push_back(Vector3(7.21793f, 6.20594f, -1.74841f));
  points.push_back(Vector3(-0.706503f, 2.00476f, -5.75732f));
  points.push_back(Vector3(-7.23197f, -7.59941f, -4.90646f));
  points.push_back(Vector3(-9.40855f, -1.68065f, 7.62078f));
  points.push_back(Vector3(6.82607f, 4.20209f, 8.14447f));
  points.push_back(Vector3(-5.02976f, 7.93634f, -9.50865f));
  TestSphereRitter(points, file);
}

void SphereRitterTest42(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.69686f, 6.42872f, 2.96182f));
  points.push_back(Vector3(0.593585f, -2.87332f, -4.12763f));
  points.push_back(Vector3(-5.29344f, 2.66579f, 6.3744f));
  points.push_back(Vector3(-0.409253f, -4.38398f, 4.41084f));
  points.push_back(Vector3(5.7213f, -6.22181f, -1.56163f));
  points.push_back(Vector3(-6.42628f, 3.97504f, 5.88855f));
  points.push_back(Vector3(9.18882f, -2.99905f, -4.08063f));
  points.push_back(Vector3(-4.39619f, 6.71316f, -5.54796f));
  points.push_back(Vector3(3.3787f, 4.1435f, -2.70913f));
  points.push_back(Vector3(7.29423f, -8.36482f, -2.49855f));
  points.push_back(Vector3(7.40043f, -7.29789f, 9.3292f));
  points.push_back(Vector3(-0.735191f, 7.7752f, 3.99762f));
  points.push_back(Vector3(9.94812f, -1.37608f, -8.12983f));
  points.push_back(Vector3(7.7337f, 3.05643f, 9.20164f));
  points.push_back(Vector3(1.87536f, -1.8247f, -6.63259f));
  points.push_back(Vector3(4.32844f, 5.38133f, -0.216376f));
  points.push_back(Vector3(-4.20515f, 4.39253f, -4.15326f));
  points.push_back(Vector3(-1.67333f, 4.60494f, 1.87719f));
  points.push_back(Vector3(-0.0283822f, -8.74508f, 4.79598f));
  points.push_back(Vector3(-0.274972f, 5.10971f, -2.03955f));
  points.push_back(Vector3(3.83099f, 8.64437f, 9.85046f));
  points.push_back(Vector3(0.53621f, -8.15668f, -1.01535f));
  points.push_back(Vector3(-9.11618f, -4.32295f, 8.44844f));
  points.push_back(Vector3(-7.18558f, 9.28648f, 8.33369f));
  points.push_back(Vector3(4.27351f, -8.19086f, 9.33653f));
  points.push_back(Vector3(7.74712f, -4.64827f, 6.5923f));
  points.push_back(Vector3(-6.9982f, -3.502f, -1.51646f));
  points.push_back(Vector3(3.14127f, 3.21574f, -6.8157f));
  points.push_back(Vector3(5.69994f, -8.10358f, -0.939055f));
  points.push_back(Vector3(-0.644856f, 5.95508f, -4.81857f));
  points.push_back(Vector3(-4.00189f, -8.67f, -7.82769f));
  points.push_back(Vector3(-1.42674f, -5.74084f, 7.52922f));
  points.push_back(Vector3(1.76305f, 1.8424f, 8.52473f));
  points.push_back(Vector3(-8.07245f, 8.74569f, -4.90951f));
  points.push_back(Vector3(2.01819f, 4.27656f, -4.40413f));
  points.push_back(Vector3(-4.29853f, -1.85888f, -2.29957f));
  points.push_back(Vector3(2.94839f, -8.25373f, -7.22953f));
  points.push_back(Vector3(-5.69201f, 5.26902f, 7.45293f));
  points.push_back(Vector3(0.342723f, -0.56856f, -9.36521f));
  points.push_back(Vector3(-3.62896f, -3.1431f, 5.12436f));
  points.push_back(Vector3(-7.26005f, -2.13843f, -7.08853f));
  points.push_back(Vector3(3.54228f, -6.75222f, 2.52846f));
  points.push_back(Vector3(-0.0894192f, 0.835292f, 2.62734f));
  points.push_back(Vector3(2.21839f, 2.55654f, -7.83319f));
  points.push_back(Vector3(-2.41676f, -9.77905f, 0.753502f));
  points.push_back(Vector3(8.49605f, 3.22123f, 7.28874f));
  points.push_back(Vector3(-5.94348f, -4.26435f, -1.94433f));
  points.push_back(Vector3(-0.906705f, -8.21833f, -3.07047f));
  points.push_back(Vector3(-9.99695f, 0.768761f, 1.90161f));
  points.push_back(Vector3(-1.95105f, 1.46764f, -5.86718f));
  points.push_back(Vector3(1.86071f, 8.05902f, -8.33979f));
  points.push_back(Vector3(-6.76077f, 4.42793f, -6.14246f));
  points.push_back(Vector3(-5.73107f, 3.87432f, 1.71178f));
  points.push_back(Vector3(0.732139f, -1.39927f, -7.38334f));
  points.push_back(Vector3(0.465407f, -1.06052f, -7.67083f));
  points.push_back(Vector3(-8.89706f, -8.19391f, 7.05191f));
  points.push_back(Vector3(-6.03076f, -8.89401f, 8.4753f));
  points.push_back(Vector3(-7.3217f, -6.80105f, -3.94024f));
  points.push_back(Vector3(-7.24479f, 1.20273f, 7.16422f));
  TestSphereRitter(points, file);
}

void SphereRitterTest43(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.47407f, 1.18259f, 4.14533f));
  points.push_back(Vector3(5.54674f, 2.22449f, 4.30158f));
  points.push_back(Vector3(7.47185f, 2.55898f, -4.90402f));
  points.push_back(Vector3(-0.687582f, 5.50584f, 7.42241f));
  points.push_back(Vector3(-0.879238f, 4.87533f, -4.51888f));
  points.push_back(Vector3(-1.20518f, -2.76406f, 5.42528f));
  points.push_back(Vector3(-5.66454f, 5.13291f, -3.72356f));
  points.push_back(Vector3(-6.12903f, -6.88284f, -6.03504f));
  points.push_back(Vector3(1.62877f, 0.115055f, -6.07044f));
  points.push_back(Vector3(-6.4391f, -5.25193f, -8.98862f));
  points.push_back(Vector3(-7.4572f, -2.40272f, 1.64525f));
  points.push_back(Vector3(-2.59316f, -0.207831f, -6.53859f));
  points.push_back(Vector3(-9.52269f, -6.13697f, 4.88937f));
  points.push_back(Vector3(4.81552f, 6.36403f, 6.70949f));
  points.push_back(Vector3(-6.22364f, 9.03684f, 1.55675f));
  points.push_back(Vector3(-3.96222f, 5.64318f, 0.171819f));
  points.push_back(Vector3(9.08322f, 7.26676f, 0.727866f));
  points.push_back(Vector3(-1.98096f, -2.00537f, -2.09937f));
  points.push_back(Vector3(2.54128f, -6.02832f, -1.66173f));
  points.push_back(Vector3(-4.88815f, 7.622f, -5.75549f));
  points.push_back(Vector3(-6.01794f, 9.76867f, 5.95996f));
  points.push_back(Vector3(-8.89584f, -8.58272f, 2.52358f));
  points.push_back(Vector3(5.20676f, 2.73598f, 2.65908f));
  points.push_back(Vector3(7.61528f, 1.80395f, -7.63237f));
  points.push_back(Vector3(-9.6234f, 9.97314f, -7.85638f));
  points.push_back(Vector3(7.27653f, -6.62404f, 1.27537f));
  points.push_back(Vector3(6.90054f, 8.30073f, 0.555742f));
  points.push_back(Vector3(-9.41954f, 1.64586f, -9.51048f));
  points.push_back(Vector3(-8.5345f, -4.85397f, 6.88528f));
  points.push_back(Vector3(5.50706f, -8.40632f, 7.07266f));
  points.push_back(Vector3(-9.37864f, 6.41896f, 0.50325f));
  points.push_back(Vector3(1.39073f, -3.40312f, 5.48692f));
  points.push_back(Vector3(0.945158f, 1.22471f, -8.6877f));
  points.push_back(Vector3(5.60167f, 7.07511f, 5.64135f));
  points.push_back(Vector3(2.96793f, -4.03668f, -0.10651f));
  points.push_back(Vector3(-4.17463f, 5.43687f, -7.34733f));
  points.push_back(Vector3(8.04254f, 5.20249f, -9.58983f));
  points.push_back(Vector3(-5.29038f, 2.07007f, 9.12351f));
  points.push_back(Vector3(0.826136f, -3.6607f, 0.308542f));
  points.push_back(Vector3(-0.245674f, 8.71273f, 5.88122f));
  points.push_back(Vector3(-5.5327f, 1.78076f, -9.4293f));
  points.push_back(Vector3(-7.84234f, -6.91458f, -5.44359f));
  points.push_back(Vector3(3.4257f, 8.83663f, -9.04416f));
  points.push_back(Vector3(-3.67168f, -5.34288f, -2.58522f));
  points.push_back(Vector3(2.65542f, -3.85113f, 8.75607f));
  points.push_back(Vector3(-0.526444f, 8.29829f, 9.11802f));
  points.push_back(Vector3(4.10932f, -1.1948f, 9.64049f));
  points.push_back(Vector3(0.557573f, 2.95572f, 4.05316f));
  points.push_back(Vector3(4.66598f, -5.22629f, 7.62871f));
  points.push_back(Vector3(-7.51335f, -1.23386f, -6.00452f));
  points.push_back(Vector3(6.21204f, 5.52721f, 0.655232f));
  points.push_back(Vector3(3.1492f, 0.736412f, -3.3372f));
  points.push_back(Vector3(1.12827f, 6.06739f, 1.03977f));
  points.push_back(Vector3(2.36854f, 2.80251f, 8.77682f));
  points.push_back(Vector3(-2.58644f, -3.34269f, -1.04343f));
  points.push_back(Vector3(-4.52803f, -4.83016f, -0.103458f));
  points.push_back(Vector3(9.59899f, -7.17887f, 4.24055f));
  points.push_back(Vector3(2.49489f, -7.11661f, 8.20612f));
  points.push_back(Vector3(6.94327f, -5.8916f, 0.00762963f));
  points.push_back(Vector3(-2.46376f, -2.96182f, -1.0239f));
  points.push_back(Vector3(-8.29402f, 8.26533f, -6.80349f));
  points.push_back(Vector3(8.00653f, 4.47798f, -6.78701f));
  points.push_back(Vector3(0.00946074f, 8.25922f, 4.6556f));
  points.push_back(Vector3(0.84994f, -0.341502f, 0.423292f));
  points.push_back(Vector3(-1.53783f, -2.36366f, 7.37968f));
  points.push_back(Vector3(4.93576f, -3.84075f, 8.06818f));
  points.push_back(Vector3(-6.16443f, 7.35343f, -1.57018f));
  points.push_back(Vector3(8.03644f, 7.53471f, 3.61003f));
  points.push_back(Vector3(3.10831f, -2.86477f, 0.404981f));
  points.push_back(Vector3(-4.2204f, 0.385449f, 5.54186f));
  points.push_back(Vector3(9.66613f, -1.02451f, -5.37767f));
  points.push_back(Vector3(1.0831f, -0.893887f, -9.99756f));
  points.push_back(Vector3(0.88229f, -7.86615f, -7.09281f));
  points.push_back(Vector3(-1.60375f, -5.68224f, -8.04437f));
  points.push_back(Vector3(5.12803f, -9.53307f, 0.537431f));
  points.push_back(Vector3(0.100406f, -2.02246f, 6.9805f));
  points.push_back(Vector3(5.06882f, 6.51967f, -7.99615f));
  points.push_back(Vector3(5.0914f, -9.94995f, -6.01489f));
  points.push_back(Vector3(1.32054f, 5.16282f, -3.72417f));
  points.push_back(Vector3(4.46211f, -3.00089f, -6.90603f));
  points.push_back(Vector3(-1.28513f, 5.0444f, -8.25373f));
  points.push_back(Vector3(-1.21982f, -6.36769f, -0.904874f));
  points.push_back(Vector3(9.00266f, 1.32542f, 5.43931f));
  TestSphereRitter(points, file);
}

void SphereRitterTest44(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.65535f, 4.19477f, -8.06635f));
  points.push_back(Vector3(9.0228f, 9.33287f, 6.2035f));
  points.push_back(Vector3(-5.40025f, 5.14573f, -1.99072f));
  points.push_back(Vector3(0.788293f, -6.27979f, 4.97543f));
  points.push_back(Vector3(9.48363f, 5.85925f, 2.8843f));
  points.push_back(Vector3(-4.19721f, 7.71172f, 2.05115f));
  points.push_back(Vector3(-7.34672f, -1.47435f, 2.2367f));
  points.push_back(Vector3(-5.97095f, -0.836512f, 4.36079f));
  points.push_back(Vector3(-9.45006f, 5.88855f, -9.58983f));
  points.push_back(Vector3(-1.53111f, -0.281075f, -1.21555f));
  points.push_back(Vector3(5.86474f, 3.62041f, 7.88812f));
  points.push_back(Vector3(8.9172f, -4.97177f, 7.022f));
  points.push_back(Vector3(-3.70281f, -6.01856f, -9.43907f));
  points.push_back(Vector3(3.43608f, -7.57378f, 6.23402f));
  points.push_back(Vector3(1.6068f, -2.28797f, -5.0969f));
  points.push_back(Vector3(0.273751f, 2.93008f, -0.143742f));
  points.push_back(Vector3(0.786462f, -6.31886f, 5.51256f));
  points.push_back(Vector3(-4.23139f, 5.86535f, 8.63155f));
  points.push_back(Vector3(4.20331f, 6.76443f, -1.41514f));
  points.push_back(Vector3(-7.39006f, 8.081f, 1.01352f));
  points.push_back(Vector3(-1.76611f, 6.35487f, 9.12107f));
  points.push_back(Vector3(-9.98291f, -1.98645f, -2.85195f));
  points.push_back(Vector3(-5.18052f, -6.74917f, 3.61248f));
  points.push_back(Vector3(5.59008f, 0.383618f, 4.0904f));
  points.push_back(Vector3(7.91803f, 3.96527f, 6.11255f));
  points.push_back(Vector3(0.159001f, -7.51885f, -5.65539f));
  points.push_back(Vector3(-4.39253f, -8.78903f, -3.62774f));
  points.push_back(Vector3(4.53658f, 0.421461f, 7.67937f));
  points.push_back(Vector3(3.03079f, -9.99451f, 6.77786f));
  points.push_back(Vector3(3.00882f, 5.76281f, -0.0888089f));
  points.push_back(Vector3(9.99023f, -7.09098f, 2.48512f));
  points.push_back(Vector3(-4.64888f, -7.80267f, 4.64644f));
  points.push_back(Vector3(0.359813f, -2.02307f, 9.04721f));
  points.push_back(Vector3(-0.508744f, 0.932341f, -2.9313f));
  points.push_back(Vector3(0.945769f, 1.46764f, 6.40187f));
  points.push_back(Vector3(-6.77541f, -5.4912f, -4.49629f));
  points.push_back(Vector3(-2.34657f, 6.76992f, 9.82849f));
  points.push_back(Vector3(8.1341f, 4.66964f, 9.01608f));
  points.push_back(Vector3(-0.81637f, -6.14856f, -0.0509659f));
  points.push_back(Vector3(4.50545f, -7.17032f, 0.265816f));
  points.push_back(Vector3(-4.43587f, 2.34657f, -2.52724f));
  points.push_back(Vector3(-4.84298f, -5.5327f, 4.78378f));
  points.push_back(Vector3(3.06986f, 8.58577f, -3.31095f));
  points.push_back(Vector3(-8.88607f, 3.57524f, -6.84927f));
  points.push_back(Vector3(-8.96603f, 5.08286f, 7.25394f));
  points.push_back(Vector3(-4.44624f, -7.07755f, 3.88165f));
  points.push_back(Vector3(2.19153f, 2.56142f, -1.02206f));
  points.push_back(Vector3(-3.13211f, -7.37358f, -5.48509f));
  points.push_back(Vector3(-0.99765f, -7.85577f, -8.27509f));
  points.push_back(Vector3(9.50682f, -4.03912f, -0.893277f));
  points.push_back(Vector3(6.42628f, -8.66573f, -5.4033f));
  points.push_back(Vector3(5.09751f, -0.0143437f, 4.38398f));
  points.push_back(Vector3(9.3054f, -5.71459f, 7.83563f));
  points.push_back(Vector3(8.53877f, -8.11151f, 6.89688f));
  points.push_back(Vector3(-7.60674f, -2.73843f, 9.82238f));
  points.push_back(Vector3(6.92251f, -7.56279f, -8.0401f));
  points.push_back(Vector3(-4.3498f, -3.57219f, -7.31925f));
  points.push_back(Vector3(-4.23078f, -1.8601f, 4.58724f));
  points.push_back(Vector3(9.16562f, -0.127262f, -4.17829f));
  points.push_back(Vector3(9.57213f, -3.9024f, 5.48753f));
  points.push_back(Vector3(3.53191f, 1.41331f, 9.76012f));
  points.push_back(Vector3(-5.36363f, -7.40837f, 3.96954f));
  points.push_back(Vector3(-4.88754f, -7.16117f, -4.7557f));
  points.push_back(Vector3(4.11542f, -9.28159f, -3.16446f));
  points.push_back(Vector3(-6.02832f, 6.28712f, -2.38502f));
  points.push_back(Vector3(-9.51964f, 6.32435f, 0.50264f));
  points.push_back(Vector3(7.75079f, 1.92053f, 5.87695f));
  points.push_back(Vector3(1.98279f, -2.3777f, 5.1915f));
  points.push_back(Vector3(9.94934f, -9.50194f, 2.73049f));
  points.push_back(Vector3(-0.652181f, -5.2971f, 7.57195f));
  points.push_back(Vector3(-1.52135f, 8.26472f, 8.25373f));
  points.push_back(Vector3(-0.347606f, 3.14859f, -5.77929f));
  points.push_back(Vector3(2.40577f, 5.39293f, 8.56136f));
  points.push_back(Vector3(8.39961f, -6.34327f, -4.84359f));
  TestSphereRitter(points, file);
}

void SphereRitterTest45(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.45433f, -6.48793f, -0.339671f));
  points.push_back(Vector3(-0.497147f, 4.83016f, 5.1323f));
  points.push_back(Vector3(-7.17582f, 1.59886f, -3.21818f));
  points.push_back(Vector3(5.53392f, 9.92126f, -5.80493f));
  points.push_back(Vector3(-9.02829f, -3.87066f, -8.66939f));
  points.push_back(Vector3(-7.71172f, 3.98175f, -7.54021f));
  points.push_back(Vector3(4.58357f, 0.839564f, 8.28059f));
  points.push_back(Vector3(5.05478f, 4.27045f, 7.53166f));
  points.push_back(Vector3(-3.54167f, -0.759606f, -4.87777f));
  points.push_back(Vector3(6.02954f, -6.06861f, 9.52025f));
  points.push_back(Vector3(-8.61995f, -9.61852f, -1.74596f));
  points.push_back(Vector3(-5.85925f, -4.4261f, -8.82748f));
  points.push_back(Vector3(-6.84988f, 5.49242f, 9.84313f));
  points.push_back(Vector3(-5.93921f, -4.59456f, 1.94128f));
  points.push_back(Vector3(2.92398f, -8.6755f, 2.72744f));
  points.push_back(Vector3(-3.25846f, 5.92273f, 7.0397f));
  points.push_back(Vector3(0.710166f, 9.64049f, 0.0021363f));
  points.push_back(Vector3(6.51357f, -2.96854f, -3.20231f));
  points.push_back(Vector3(9.1113f, -9.39146f, 0.990936f));
  points.push_back(Vector3(4.66109f, 0.871303f, 5.56688f));
  points.push_back(Vector3(-3.46904f, 3.40129f, 8.764f));
  points.push_back(Vector3(8.96603f, 6.86148f, 5.5504f));
  points.push_back(Vector3(-1.2833f, 2.44301f, -1.19663f));
  points.push_back(Vector3(5.4564f, -6.75588f, -8.21161f));
  points.push_back(Vector3(4.99374f, 5.18418f, -3.76141f));
  points.push_back(Vector3(5.05844f, -7.94488f, 2.48695f));
  points.push_back(Vector3(-8.43806f, 9.31211f, -7.11844f));
  points.push_back(Vector3(6.47084f, -1.45787f, -3.38664f));
  points.push_back(Vector3(-8.86471f, -3.41472f, -2.48573f));
  points.push_back(Vector3(-0.0894192f, -3.89203f, -9.44761f));
  points.push_back(Vector3(8.52657f, 9.42442f, -3.94879f));
  points.push_back(Vector3(-3.12967f, -3.67229f, -9.82788f));
  points.push_back(Vector3(8.11029f, -2.49001f, 4.77828f));
  points.push_back(Vector3(-8.7524f, -7.01468f, -3.56426f));
  points.push_back(Vector3(-6.20472f, 7.48039f, -7.55669f));
  points.push_back(Vector3(-0.434889f, 1.96081f, 4.11054f));
  points.push_back(Vector3(-2.19092f, 1.80639f, 7.92169f));
  points.push_back(Vector3(5.08835f, 7.55058f, 6.78457f));
  points.push_back(Vector3(-6.29688f, -4.36262f, 2.10059f));
  points.push_back(Vector3(-5.10971f, 3.0607f, -0.300607f));
  points.push_back(Vector3(-5.97766f, 5.28001f, -2.00537f));
  points.push_back(Vector3(2.88125f, 1.65807f, 7.43278f));
  points.push_back(Vector3(6.55751f, 1.54515f, 4.36933f));
  points.push_back(Vector3(7.91681f, 5.07126f, 8.64681f));
  points.push_back(Vector3(7.51701f, 7.96686f, 7.88812f));
  points.push_back(Vector3(-3.03751f, -4.71847f, -2.48878f));
  points.push_back(Vector3(7.80877f, -9.67772f, -0.534379f));
  points.push_back(Vector3(1.26865f, 0.299387f, 3.47392f));
  points.push_back(Vector3(2.39845f, 2.53822f, -5.38743f));
  points.push_back(Vector3(1.20762f, 2.0603f, 0.312204f));
  points.push_back(Vector3(4.95346f, -2.63771f, -2.42897f));
  points.push_back(Vector3(5.3325f, 4.8088f, 4.34004f));
  points.push_back(Vector3(3.14066f, -9.2822f, -2.43629f));
  points.push_back(Vector3(-6.24805f, 8.63216f, 2.78909f));
  points.push_back(Vector3(6.53432f, -1.17588f, -5.15488f));
  points.push_back(Vector3(7.70989f, -2.46193f, -0.814539f));
  points.push_back(Vector3(1.65624f, -0.426954f, -2.8721f));
  points.push_back(Vector3(-1.33946f, -2.87149f, 5.56566f));
  points.push_back(Vector3(-0.381787f, -3.29875f, 5.72985f));
  points.push_back(Vector3(-6.18397f, 6.02039f, 4.07086f));
  points.push_back(Vector3(3.77483f, -0.426344f, 8.02179f));
  points.push_back(Vector3(3.4135f, 0.215155f, -4.67696f));
  points.push_back(Vector3(0.125431f, 5.33006f, -9.08567f));
  points.push_back(Vector3(0.481277f, -6.91824f, 0.588092f));
  points.push_back(Vector3(4.51582f, -3.72539f, -8.26899f));
  points.push_back(Vector3(-0.909146f, 8.04132f, 1.45116f));
  points.push_back(Vector3(-9.61242f, -3.77667f, -9.6588f));
  points.push_back(Vector3(-5.57176f, 8.88852f, -2.78542f));
  points.push_back(Vector3(-8.47652f, -2.48512f, 2.42592f));
  points.push_back(Vector3(0.126041f, -3.52336f, 8.82687f));
  points.push_back(Vector3(8.30317f, 8.09931f, 0.625935f));
  points.push_back(Vector3(-2.47658f, 2.7195f, -8.51131f));
  points.push_back(Vector3(6.04236f, 7.9931f, -9.27305f));
  points.push_back(Vector3(-9.49706f, -3.98053f, 8.60225f));
  points.push_back(Vector3(2.4723f, -1.02817f, 6.26453f));
  points.push_back(Vector3(-9.35789f, -1.15024f, -0.119938f));
  points.push_back(Vector3(0.800501f, -6.89749f, -0.296335f));
  points.push_back(Vector3(-6.72292f, -9.26267f, -1.12094f));
  TestSphereRitter(points, file);
}

void SphereRitterTest46(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.79553f, -8.30073f, -4.82589f));
  points.push_back(Vector3(8.01202f, 8.29707f, -4.70138f));
  points.push_back(Vector3(7.97784f, 7.11905f, -6.53493f));
  points.push_back(Vector3(7.20878f, 5.35813f, 9.59838f));
  points.push_back(Vector3(0.334788f, 9.18821f, -4.86801f));
  points.push_back(Vector3(2.70974f, 4.98459f, 9.4171f));
  points.push_back(Vector3(-6.48915f, 5.56749f, -3.15714f));
  points.push_back(Vector3(9.30723f, -2.82937f, -4.58296f));
  points.push_back(Vector3(-7.65618f, 5.03464f, -8.85311f));
  points.push_back(Vector3(6.46046f, -9.035f, 1.92846f));
  points.push_back(Vector3(-1.82836f, 4.33699f, 4.27045f));
  points.push_back(Vector3(9.8352f, 5.08347f, 9.40184f));
  points.push_back(Vector3(-1.40782f, -2.41737f, -8.07001f));
  points.push_back(Vector3(-8.09137f, 1.96326f, -5.3264f));
  points.push_back(Vector3(-0.603961f, -7.75811f, -4.0611f));
  points.push_back(Vector3(-1.67211f, 0.166326f, 9.30418f));
  points.push_back(Vector3(2.92215f, -5.99841f, 9.87243f));
  points.push_back(Vector3(-9.80285f, 9.62401f, 7.51274f));
  points.push_back(Vector3(3.22367f, 4.31806f, -2.72134f));
  points.push_back(Vector3(-3.11808f, -9.03561f, -5.01083f));
  points.push_back(Vector3(-0.754112f, 2.04199f, 3.27494f));
  points.push_back(Vector3(-8.24091f, -3.38115f, 0.504471f));
  points.push_back(Vector3(-4.75814f, -3.51299f, -7.53655f));
  points.push_back(Vector3(7.1453f, 0.0253304f, 6.34327f));
  points.push_back(Vector3(-4.68245f, 6.20289f, 5.34532f));
  points.push_back(Vector3(6.84805f, -7.42851f, -6.36097f));
  points.push_back(Vector3(-1.08615f, -1.92175f, 4.36079f));
  points.push_back(Vector3(-2.03101f, -1.56102f, 7.1569f));
  points.push_back(Vector3(-1.41881f, -2.30445f, -8.1811f));
  points.push_back(Vector3(-9.84008f, -2.32276f, 3.46965f));
  points.push_back(Vector3(3.16446f, -3.43364f, -2.20313f));
  points.push_back(Vector3(3.10404f, -9.74181f, -0.638142f));
  points.push_back(Vector3(-9.03378f, -2.43934f, 9.09299f));
  points.push_back(Vector3(3.94147f, -9.10703f, 6.04114f));
  points.push_back(Vector3(-8.905f, -1.07761f, -6.97501f));
  points.push_back(Vector3(8.30439f, 8.67977f, 1.99499f));
  points.push_back(Vector3(9.49644f, 2.33375f, -5.26048f));
  points.push_back(Vector3(3.93902f, 9.57762f, 5.48326f));
  points.push_back(Vector3(-8.28486f, 3.93048f, 6.25965f));
  points.push_back(Vector3(-2.77566f, -4.14716f, -0.741905f));
  points.push_back(Vector3(-0.400098f, -8.38252f, -7.71783f));
  points.push_back(Vector3(2.584f, -2.55776f, -2.36061f));
  points.push_back(Vector3(6.54836f, 9.8645f, 4.15326f));
  points.push_back(Vector3(-4.51949f, 8.20307f, -7.93756f));
  points.push_back(Vector3(-2.0127f, 6.95181f, -7.90216f));
  points.push_back(Vector3(-6.2273f, 7.70928f, 8.11151f));
  points.push_back(Vector3(-7.00308f, -8.11396f, 9.10092f));
  points.push_back(Vector3(2.24769f, -0.867641f, -2.58095f));
  points.push_back(Vector3(-8.02423f, 1.33457f, 0.332957f));
  points.push_back(Vector3(-6.37135f, -1.67272f, -5.90747f));
  TestSphereRitter(points, file);
}

void SphereRitterTest47(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.19553f, 6.35182f, -2.89468f));
  points.push_back(Vector3(8.82382f, 3.24747f, -3.29875f));
  points.push_back(Vector3(-0.215766f, 9.33226f, 6.90542f));
  points.push_back(Vector3(-2.28919f, -1.81494f, -2.30995f));
  points.push_back(Vector3(7.59697f, 9.00998f, -7.81671f));
  points.push_back(Vector3(7.99127f, -8.12616f, -5.57787f));
  points.push_back(Vector3(9.84375f, 7.42119f, -5.94836f));
  points.push_back(Vector3(-6.59963f, -4.36811f, 4.10932f));
  points.push_back(Vector3(-4.85885f, -3.29264f, 5.86474f));
  points.push_back(Vector3(-6.69607f, 6.83035f, 6.98782f));
  points.push_back(Vector3(9.49278f, 7.49138f, 3.62163f));
  points.push_back(Vector3(-5.15854f, 2.37953f, 6.08692f));
  points.push_back(Vector3(-3.73455f, -8.96298f, -6.83218f));
  TestSphereRitter(points, file);
}

void SphereRitterTest48(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.29035f, 4.73128f, 7.26066f));
  points.push_back(Vector3(-3.24198f, 1.41209f, 4.79659f));
  points.push_back(Vector3(2.24342f, -1.81433f, 2.26051f));
  points.push_back(Vector3(-5.91601f, -2.80007f, 9.89563f));
  points.push_back(Vector3(2.27027f, -6.01001f, 1.62328f));
  points.push_back(Vector3(-7.63054f, 3.12967f, 0.0442518f));
  points.push_back(Vector3(-2.86538f, 6.09851f, -2.71645f));
  points.push_back(Vector3(3.16202f, -3.76507f, 7.8515f));
  points.push_back(Vector3(1.62023f, 1.09104f, -9.54589f));
  points.push_back(Vector3(-1.29063f, -4.12397f, -4.31928f));
  points.push_back(Vector3(1.05319f, 4.47493f, 3.90545f));
  points.push_back(Vector3(1.5952f, -4.62264f, -0.907315f));
  points.push_back(Vector3(5.91235f, 2.0951f, 2.01148f));
  points.push_back(Vector3(-8.29585f, -0.204779f, -2.48024f));
  points.push_back(Vector3(7.83868f, 7.95892f, -0.2884f));
  points.push_back(Vector3(2.08533f, -9.85717f, 6.20472f));
  points.push_back(Vector3(9.99878f, -5.37278f, 6.87979f));
  points.push_back(Vector3(-0.805383f, 2.56508f, -1.08066f));
  points.push_back(Vector3(-1.77709f, 1.91809f, -4.10932f));
  points.push_back(Vector3(-0.819422f, 2.5425f, -3.80718f));
  points.push_back(Vector3(3.74981f, 6.40614f, -0.0930815f));
  points.push_back(Vector3(-7.35771f, -8.21833f, 1.14475f));
  points.push_back(Vector3(6.25782f, 0.677206f, -9.95361f));
  points.push_back(Vector3(8.34407f, -8.6285f, 7.11051f));
  points.push_back(Vector3(-0.323801f, 9.89257f, 3.73577f));
  points.push_back(Vector3(-5.96728f, 1.75329f, -9.52025f));
  points.push_back(Vector3(-4.54085f, -3.43303f, 6.54408f));
  TestSphereRitter(points, file);
}

void SphereRitterTest49(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.89319f, -9.75585f, 0.906705f));
  points.push_back(Vector3(8.34529f, -0.183416f, -2.13904f));
  points.push_back(Vector3(-5.10727f, -5.33433f, -0.350658f));
  points.push_back(Vector3(-8.92026f, 9.78149f, 8.28059f));
  points.push_back(Vector3(-1.7777f, -5.66698f, -8.57417f));
  points.push_back(Vector3(4.17585f, 2.93252f, -1.6306f));
  points.push_back(Vector3(-1.24058f, 2.00964f, -4.56343f));
  points.push_back(Vector3(6.3152f, 8.11945f, 5.62975f));
  points.push_back(Vector3(-4.3907f, -5.70299f, -6.13269f));
  points.push_back(Vector3(-6.28224f, -7.89727f, -7.73247f));
  points.push_back(Vector3(8.42219f, -7.8045f, 7.63237f));
  points.push_back(Vector3(0.647908f, -5.17441f, 9.0112f));
  points.push_back(Vector3(-2.8898f, 8.41609f, -5.01511f));
  points.push_back(Vector3(1.93579f, 6.76626f, 8.26411f));
  points.push_back(Vector3(6.68935f, -0.00946074f, -7.64397f));
  points.push_back(Vector3(-5.54491f, -7.44804f, 9.13449f));
  points.push_back(Vector3(4.60921f, -1.00558f, -6.01306f));
  points.push_back(Vector3(2.83181f, 0.0155644f, -8.24824f));
  points.push_back(Vector3(-6.6509f, 8.12922f, 5.10361f));
  points.push_back(Vector3(0.150456f, -2.63466f, 7.86493f));
  points.push_back(Vector3(-7.69524f, -5.95019f, 4.97726f));
  points.push_back(Vector3(9.63622f, -4.44441f, -8.54366f));
  points.push_back(Vector3(-7.2747f, 2.14942f, 3.74615f));
  points.push_back(Vector3(-9.33042f, 0.798669f, 9.57823f));
  points.push_back(Vector3(0.147404f, 4.50667f, -7.13309f));
  points.push_back(Vector3(4.55428f, 5.93616f, 2.21534f));
  points.push_back(Vector3(-7.16666f, -9.58556f, -4.04645f));
  points.push_back(Vector3(-5.28611f, -8.37458f, -6.66494f));
  points.push_back(Vector3(4.8088f, 8.77377f, 7.14591f));
  points.push_back(Vector3(-5.03159f, -8.53999f, 5.76769f));
  points.push_back(Vector3(-9.48363f, 6.2157f, 0.401929f));
  points.push_back(Vector3(-9.37925f, 1.73559f, -7.24479f));
  points.push_back(Vector3(7.57439f, 6.58132f, 7.87286f));
  points.push_back(Vector3(-7.04093f, 9.12412f, 1.42491f));
  points.push_back(Vector3(6.92984f, -1.19053f, 1.14536f));
  points.push_back(Vector3(0.74984f, -9.51231f, 0.4532f));
  points.push_back(Vector3(8.51802f, -6.05396f, 8.27265f));
  TestSphereRitter(points, file);
}

void SphereRitterTest50(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.52452f, 3.90118f, -1.95959f));
  points.push_back(Vector3(5.45518f, 4.48714f, 1.24851f));
  points.push_back(Vector3(6.33534f, 4.13251f, 4.05621f));
  points.push_back(Vector3(-3.12906f, -6.92007f, -6.74612f));
  points.push_back(Vector3(-1.9657f, 2.66213f, -2.74514f));
  points.push_back(Vector3(1.90649f, -8.91293f, -1.14536f));
  points.push_back(Vector3(5.47533f, -1.70141f, 4.41939f));
  points.push_back(Vector3(-5.65416f, 3.51909f, -2.31666f));
  points.push_back(Vector3(4.50545f, 2.99966f, -0.0772118f));
  points.push_back(Vector3(-5.92944f, 0.459304f, -5.95202f));
  points.push_back(Vector3(7.27348f, -1.1478f, 0.655232f));
  points.push_back(Vector3(4.72152f, -3.18155f, -0.534989f));
  points.push_back(Vector3(9.23521f, -6.76992f, -7.97601f));
  points.push_back(Vector3(1.22288f, -6.87796f, 0.219428f));
  points.push_back(Vector3(-3.29569f, 5.43077f, 0.168157f));
  points.push_back(Vector3(-3.16752f, 3.34086f, 6.91824f));
  points.push_back(Vector3(-0.942106f, 7.4926f, -2.77261f));
  points.push_back(Vector3(4.10932f, 1.59764f, 5.54064f));
  points.push_back(Vector3(2.05786f, 4.75997f, -1.99133f));
  points.push_back(Vector3(9.8529f, 2.58644f, 0.477615f));
  points.push_back(Vector3(5.85864f, 0.549638f, 9.97986f));
  points.push_back(Vector3(-6.83645f, 3.24442f, 1.94433f));
  points.push_back(Vector3(5.4912f, 6.48732f, 6.8627f));
  points.push_back(Vector3(-9.16929f, 8.08283f, 5.52782f));
  TestSphereRitter(points, file);
}

void SphereRitterTest51(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.39595f, -2.96548f, 9.37925f));
  points.push_back(Vector3(-1.65746f, 7.74957f, -2.22755f));
  points.push_back(Vector3(1.5598f, -7.12149f, 8.13349f));
  points.push_back(Vector3(-7.03482f, 1.98523f, 8.47041f));
  points.push_back(Vector3(6.10828f, -1.26133f, 3.73699f));
  points.push_back(Vector3(-8.49422f, -4.39619f, 4.01349f));
  points.push_back(Vector3(-2.08655f, 5.10727f, 8.00775f));
  points.push_back(Vector3(2.37526f, -9.47447f, 0.939055f));
  points.push_back(Vector3(9.23399f, 3.3549f, 1.15207f));
  points.push_back(Vector3(5.74389f, -7.38273f, -3.74798f));
  points.push_back(Vector3(3.97687f, 0.730308f, -6.74429f));
  points.push_back(Vector3(9.6173f, 1.83386f, 1.93579f));
  points.push_back(Vector3(-0.588092f, -0.473342f, -6.11377f));
  points.push_back(Vector3(-0.307932f, 6.62282f, 9.7705f));
  points.push_back(Vector3(7.56401f, 5.31907f, -9.87793f));
  points.push_back(Vector3(-2.92032f, -4.62325f, 3.16385f));
  points.push_back(Vector3(1.21006f, 4.51765f, 7.24845f));
  points.push_back(Vector3(-3.87432f, 3.19315f, -3.84136f));
  points.push_back(Vector3(-1.02878f, 2.77505f, -7.48222f));
  points.push_back(Vector3(-3.81573f, 7.42546f, -5.79943f));
  points.push_back(Vector3(0.731529f, 5.51683f, -6.82363f));
  points.push_back(Vector3(8.71273f, 2.87637f, -0.887173f));
  points.push_back(Vector3(1.08737f, -7.48466f, 7.96503f));
  points.push_back(Vector3(-2.94534f, -0.444655f, 4.48714f));
  points.push_back(Vector3(-2.85501f, -7.45293f, 9.01425f));
  points.push_back(Vector3(-6.81631f, 5.18845f, 9.96033f));
  points.push_back(Vector3(0.310984f, 4.19599f, -9.07956f));
  points.push_back(Vector3(-3.97137f, -6.40065f, 5.9801f));
  points.push_back(Vector3(-7.77642f, -2.65053f, -1.64037f));
  points.push_back(Vector3(-7.70806f, -8.764f, 7.28446f));
  points.push_back(Vector3(5.17808f, 9.35118f, 5.36851f));
  points.push_back(Vector3(-4.59273f, 9.9115f, 5.84765f));
  points.push_back(Vector3(9.76745f, 2.61696f, 0.854823f));
  points.push_back(Vector3(-6.06555f, 6.85049f, -4.97055f));
  points.push_back(Vector3(9.54894f, -0.681478f, 8.53328f));
  points.push_back(Vector3(-0.202338f, -4.16608f, 8.57479f));
  points.push_back(Vector3(6.7803f, -4.04096f, 7.80267f));
  points.push_back(Vector3(-8.18598f, -1.901f, 3.45561f));
  points.push_back(Vector3(7.24479f, 8.83419f, -2.39418f));
  points.push_back(Vector3(3.43303f, 1.23386f, -3.14127f));
  points.push_back(Vector3(8.28364f, -7.0336f, -9.53001f));
  points.push_back(Vector3(8.01508f, 1.06479f, 7.31681f));
  points.push_back(Vector3(-4.99374f, -5.34165f, -8.64437f));
  points.push_back(Vector3(-7.1514f, 7.97845f, -9.3292f));
  points.push_back(Vector3(7.63604f, 3.7492f, -2.02918f));
  points.push_back(Vector3(6.86819f, -2.25562f, 5.64745f));
  points.push_back(Vector3(-9.35545f, 8.62423f, 8.49605f));
  points.push_back(Vector3(-0.718101f, -9.76134f, -6.1449f));
  points.push_back(Vector3(4.23566f, 7.32902f, -8.41304f));
  points.push_back(Vector3(-0.521561f, -0.0314341f, -2.48085f));
  points.push_back(Vector3(3.26273f, -5.5327f, -5.32029f));
  points.push_back(Vector3(5.17136f, -7.51335f, 7.6397f));
  points.push_back(Vector3(0.480667f, 8.25983f, -7.58782f));
  points.push_back(Vector3(8.29524f, -6.80654f, -1.84667f));
  points.push_back(Vector3(2.42225f, 7.82769f, 0.0143437f));
  points.push_back(Vector3(-0.863979f, 2.05542f, 0.440382f));
  points.push_back(Vector3(9.86267f, -0.152898f, 9.19492f));
  points.push_back(Vector3(-8.90927f, 2.05908f, 9.75646f));
  points.push_back(Vector3(3.13334f, 8.7817f, -1.05564f));
  points.push_back(Vector3(3.80718f, 3.15531f, -6.67226f));
  points.push_back(Vector3(-1.93335f, 8.34407f, 3.24137f));
  points.push_back(Vector3(-6.26392f, 9.57213f, -8.53938f));
  points.push_back(Vector3(-6.4629f, 6.29627f, -5.59679f));
  points.push_back(Vector3(-9.12107f, 9.20469f, -9.46837f));
  points.push_back(Vector3(8.9581f, 2.50038f, -2.72195f));
  points.push_back(Vector3(-8.86959f, -8.19758f, 2.73904f));
  points.push_back(Vector3(2.15796f, 3.9671f, -1.90466f));
  points.push_back(Vector3(7.77337f, 0.35432f, -5.63952f));
  points.push_back(Vector3(-2.68105f, 2.83731f, 5.12314f));
  points.push_back(Vector3(5.67919f, -0.036317f, 4.67147f));
  points.push_back(Vector3(-8.39717f, 6.42323f, 8.78109f));
  points.push_back(Vector3(-9.73266f, 3.08756f, -6.09119f));
  points.push_back(Vector3(0.229194f, -4.97665f, 9.05576f));
  points.push_back(Vector3(2.68044f, -8.25678f, -6.55873f));
  points.push_back(Vector3(-4.41755f, -4.23139f, 0.449538f));
  points.push_back(Vector3(5.48448f, -1.23814f, 6.93411f));
  points.push_back(Vector3(8.94345f, 1.72948f, 1.75939f));
  points.push_back(Vector3(-7.99676f, 3.77606f, -9.57396f));
  points.push_back(Vector3(6.12171f, -2.55959f, 2.24891f));
  points.push_back(Vector3(-0.396435f, -2.02918f, 4.26069f));
  points.push_back(Vector3(-6.84133f, -2.67006f, -0.292062f));
  points.push_back(Vector3(-4.57137f, 7.11539f, 3.27494f));
  points.push_back(Vector3(7.84661f, 4.85397f, 2.04749f));
  points.push_back(Vector3(-5.3264f, 7.60186f, -3.88592f));
  points.push_back(Vector3(-0.462355f, -0.162664f, 4.87167f));
  points.push_back(Vector3(9.02951f, -2.40455f, 2.32582f));
  TestSphereRitter(points, file);
}

void SphereRitterTest52(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.41465f, 4.71847f, -2.27149f));
  points.push_back(Vector3(-6.75588f, -9.25962f, -6.93411f));
  points.push_back(Vector3(-9.1821f, 5.86596f, -1.66112f));
  points.push_back(Vector3(-9.51598f, 8.11579f, -5.26719f));
  points.push_back(Vector3(1.22166f, -1.88879f, 2.23121f));
  points.push_back(Vector3(3.93475f, -8.65047f, -2.62307f));
  points.push_back(Vector3(6.93106f, 8.00653f, 7.62993f));
  points.push_back(Vector3(-5.96973f, 7.55669f, -6.84133f));
  points.push_back(Vector3(-5.28306f, -5.76464f, -4.76363f));
  points.push_back(Vector3(7.14835f, -4.08429f, -1.63915f));
  points.push_back(Vector3(8.01324f, 8.39839f, 8.31111f));
  points.push_back(Vector3(8.09503f, -7.99493f, -4.99435f));
  points.push_back(Vector3(-1.75512f, -7.50114f, 5.73901f));
  points.push_back(Vector3(4.25459f, 5.28245f, 8.63948f));
  points.push_back(Vector3(0.763268f, 3.26456f, -7.2393f));
  points.push_back(Vector3(2.40455f, 1.68371f, 1.39439f));
  points.push_back(Vector3(-6.91702f, 5.15366f, -1.26926f));
  points.push_back(Vector3(5.02976f, 5.85131f, -8.19819f));
  points.push_back(Vector3(-4.00189f, 5.3795f, -3.01981f));
  points.push_back(Vector3(-4.0202f, 8.46309f, -0.0967437f));
  points.push_back(Vector3(-3.08512f, 7.88751f, -9.07407f));
  points.push_back(Vector3(-2.00415f, 6.07105f, -9.53246f));
  points.push_back(Vector3(-8.01141f, -8.43989f, 5.62731f));
  points.push_back(Vector3(-0.472121f, -3.80657f, 1.08005f));
  points.push_back(Vector3(1.79785f, 3.42753f, 7.45476f));
  points.push_back(Vector3(-2.16895f, 1.70263f, 7.96625f));
  points.push_back(Vector3(-3.09915f, -7.15201f, 8.96603f));
  points.push_back(Vector3(2.08533f, 8.26167f, -6.72475f));
  points.push_back(Vector3(-2.83486f, -9.97742f, 3.91217f));
  points.push_back(Vector3(-3.27677f, 9.2584f, 5.53331f));
  points.push_back(Vector3(4.70931f, 4.26191f, 1.11057f));
  points.push_back(Vector3(-6.198f, 6.74551f, 2.66518f));
  points.push_back(Vector3(-2.75002f, -3.31462f, 8.13349f));
  points.push_back(Vector3(-3.45378f, -3.02774f, 6.89138f));
  points.push_back(Vector3(8.96542f, 0.995819f, -1.07456f));
  points.push_back(Vector3(6.73086f, -2.45094f, -4.64827f));
  points.push_back(Vector3(2.29041f, -2.93374f, 6.07166f));
  points.push_back(Vector3(8.73165f, -7.30644f, -7.91803f));
  points.push_back(Vector3(8.79025f, -2.05725f, -9.02951f));
  points.push_back(Vector3(5.49486f, 5.89221f, 8.40571f));
  points.push_back(Vector3(-7.09769f, 3.83709f, 6.14856f));
  points.push_back(Vector3(-1.2949f, -1.9425f, -7.56279f));
  points.push_back(Vector3(-8.52962f, -0.597858f, -4.1435f));
  points.push_back(Vector3(9.72228f, -3.48247f, 6.72658f));
  points.push_back(Vector3(6.99454f, -4.54695f, 6.45985f));
  points.push_back(Vector3(1.78014f, 8.33125f, 8.5522f));
  points.push_back(Vector3(6.03259f, -4.12946f, -0.608234f));
  points.push_back(Vector3(0.101627f, 3.00943f, -7.39677f));
  points.push_back(Vector3(-1.41209f, -2.81777f, -0.793176f));
  points.push_back(Vector3(7.35771f, 7.2924f, 3.14493f));
  points.push_back(Vector3(-7.84112f, -5.2324f, 9.89196f));
  points.push_back(Vector3(9.95911f, 0.578326f, 4.84115f));
  points.push_back(Vector3(7.93695f, 8.25251f, -3.27067f));
  points.push_back(Vector3(-1.67028f, -3.47514f, -9.32554f));
  points.push_back(Vector3(-1.15329f, 1.98828f, 1.02878f));
  points.push_back(Vector3(-5.79638f, 6.7101f, -5.66393f));
  points.push_back(Vector3(2.30445f, -2.97769f, -6.48549f));
  points.push_back(Vector3(2.55593f, 8.50093f, -4.4084f));
  points.push_back(Vector3(-2.84829f, 1.14841f, 1.59459f));
  points.push_back(Vector3(-2.45521f, 4.02936f, -7.03116f));
  points.push_back(Vector3(-3.22001f, -3.97565f, 8.5577f));
  points.push_back(Vector3(3.27494f, 2.82754f, 1.09104f));
  points.push_back(Vector3(1.42186f, 7.40043f, 1.55431f));
  points.push_back(Vector3(-6.17115f, 9.77233f, 2.69509f));
  points.push_back(Vector3(-5.48692f, -1.23142f, 2.4485f));
  points.push_back(Vector3(5.34471f, -4.96262f, 0.256661f));
  points.push_back(Vector3(3.37321f, 2.69204f, -6.24012f));
  points.push_back(Vector3(-1.60375f, 6.23157f, 1.70263f));
  points.push_back(Vector3(-4.26557f, -9.81811f, -6.43727f));
  points.push_back(Vector3(4.17707f, -2.71401f, -8.54305f));
  points.push_back(Vector3(-6.60146f, 9.35423f, 0.707114f));
  points.push_back(Vector3(5.31053f, -3.4434f, -5.48204f));
  points.push_back(Vector3(-5.06211f, -7.44865f, 7.72698f));
  points.push_back(Vector3(-5.76159f, 0.340892f, 9.87671f));
  points.push_back(Vector3(-6.52577f, 8.8702f, 5.70605f));
  points.push_back(Vector3(-8.64803f, 0.277413f, 2.93252f));
  points.push_back(Vector3(-4.39192f, -1.14841f, 5.73229f));
  points.push_back(Vector3(4.00189f, -3.76202f, -2.94595f));
  points.push_back(Vector3(-3.95733f, 2.72866f, -2.16285f));
  points.push_back(Vector3(-1.35594f, -7.06839f, 4.62264f));
  points.push_back(Vector3(1.85766f, -4.67025f, 3.08267f));
  points.push_back(Vector3(-5.78906f, -9.02585f, 0.30427f));
  points.push_back(Vector3(-6.74856f, 2.2129f, -9.92431f));
  points.push_back(Vector3(-2.21778f, 4.16608f, -3.66192f));
  points.push_back(Vector3(-3.64849f, 5.22691f, 6.33778f));
  points.push_back(Vector3(6.35182f, 6.61184f, 3.89874f));
  points.push_back(Vector3(-9.08689f, 4.01593f, -0.0473037f));
  points.push_back(Vector3(3.35185f, -1.30711f, 8.54305f));
  TestSphereRitter(points, file);
}

void SpherePCATest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.97681f, -5.28855f, 2.96304f));
  points.push_back(Vector3(-8.51253f, -4.59517f, -2.79946f));
  points.push_back(Vector3(-4.89425f, 9.7058f, -3.62163f));
  points.push_back(Vector3(8.68465f, -6.4275f, 7.1514f));
  TestSpherePCA(points, file);
}

void SpherePCATest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.96704f, 7.51335f, -2.51991f));
  points.push_back(Vector3(4.92294f, 6.88284f, 9.18394f));
  points.push_back(Vector3(4.60433f, 0.772423f, 6.76809f));
  points.push_back(Vector3(9.92248f, -6.87857f, 7.28629f));
  points.push_back(Vector3(-1.73986f, 0.666829f, -9.73998f));
  points.push_back(Vector3(-7.37114f, -2.69814f, 2.27271f));
  points.push_back(Vector3(-2.584f, -9.24863f, -2.36f));
  points.push_back(Vector3(-3.29081f, 9.03928f, 7.21915f));
  TestSpherePCA(points, file);
}

void SpherePCATest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.62767f, 2.76528f, -8.93796f));
  points.push_back(Vector3(1.72704f, -2.88003f, -3.37931f));
  points.push_back(Vector3(7.55181f, -2.96121f, 0.00640889f));
  points.push_back(Vector3(-8.00043f, -2.2251f, -8.14386f));
  points.push_back(Vector3(-4.61531f, -2.49001f, -7.08609f));
  points.push_back(Vector3(-8.37458f, -0.0698874f, -5.93066f));
  points.push_back(Vector3(7.37114f, -8.3343f, 2.11035f));
  points.push_back(Vector3(3.0076f, 6.97439f, -4.94797f));
  points.push_back(Vector3(1.03183f, -7.98761f, 3.62651f));
  points.push_back(Vector3(-8.83969f, 3.29936f, 7.06107f));
  points.push_back(Vector3(-7.97174f, 8.00836f, -1.49205f));
  points.push_back(Vector3(8.44172f, -5.90381f, 1.49998f));
  points.push_back(Vector3(3.98907f, -0.987884f, 6.69485f));
  points.push_back(Vector3(-5.2794f, -0.556352f, 2.80496f));
  points.push_back(Vector3(-1.67821f, -9.61242f, 2.08045f));
  points.push_back(Vector3(2.11035f, -9.63805f, 9.59532f));
  points.push_back(Vector3(2.88858f, -8.84274f, 8.53267f));
  points.push_back(Vector3(-0.0332652f, -5.33372f, -5.47044f));
  points.push_back(Vector3(0.150456f, 6.35548f, -7.56462f));
  points.push_back(Vector3(8.4228f, 2.8489f, 7.20267f));
  points.push_back(Vector3(-3.14066f, -7.11539f, 0.357372f));
  points.push_back(Vector3(9.68566f, 1.29917f, -6.84133f));
  points.push_back(Vector3(-9.01608f, 6.78152f, -6.87857f));
  points.push_back(Vector3(-1.75451f, 4.41389f, 9.36888f));
  points.push_back(Vector3(9.89563f, -5.17502f, -7.54936f));
  points.push_back(Vector3(-3.50505f, 1.08982f, 4.65194f));
  points.push_back(Vector3(9.33775f, -3.07047f, -4.08551f));
  points.push_back(Vector3(3.549f, 7.26188f, 5.13535f));
  points.push_back(Vector3(7.90643f, -9.86755f, 2.68715f));
  points.push_back(Vector3(4.77462f, -3.09366f, 2.38746f));
  points.push_back(Vector3(-0.868252f, 2.88308f, -0.955535f));
  points.push_back(Vector3(-9.78332f, 2.01148f, 7.83074f));
  points.push_back(Vector3(5.35325f, 2.09754f, -8.81649f));
  points.push_back(Vector3(-5.80309f, -0.359813f, -6.04602f));
  points.push_back(Vector3(6.80776f, 7.68792f, -3.75164f));
  points.push_back(Vector3(-1.60253f, -5.84948f, -6.79067f));
  points.push_back(Vector3(8.31721f, 2.42531f, 2.96976f));
  points.push_back(Vector3(-0.759606f, 7.17826f, -8.26411f));
  points.push_back(Vector3(7.07816f, 1.61107f, 3.51482f));
  points.push_back(Vector3(9.76257f, -0.25544f, -0.174261f));
  points.push_back(Vector3(-9.1052f, 9.55748f, -9.47325f));
  points.push_back(Vector3(9.04599f, 2.32032f, 6.66066f));
  points.push_back(Vector3(-0.81576f, 0.8652f, 0.400098f));
  points.push_back(Vector3(-8.93735f, -7.72149f, -4.00189f));
  points.push_back(Vector3(-8.20917f, 6.3976f, -1.90039f));
  points.push_back(Vector3(2.00659f, 6.51662f, -5.51683f));
  points.push_back(Vector3(5.53636f, -0.811487f, -7.21122f));
  points.push_back(Vector3(-6.65456f, 2.51259f, 7.76177f));
  points.push_back(Vector3(7.97296f, 6.83828f, -0.372021f));
  points.push_back(Vector3(-0.542924f, -3.69854f, -6.01001f));
  TestSpherePCA(points, file);
}

void SpherePCATest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.24458f, -4.38215f, -1.96081f));
  points.push_back(Vector3(-5.43931f, 6.20899f, -0.0796533f));
  points.push_back(Vector3(5.93616f, -2.90811f, -5.94836f));
  points.push_back(Vector3(7.77703f, -4.87594f, -9.48668f));
  points.push_back(Vector3(-6.94266f, 6.26881f, -6.84194f));
  points.push_back(Vector3(-4.23688f, -0.397046f, -1.301f));
  points.push_back(Vector3(2.83486f, -3.6607f, -2.46437f));
  points.push_back(Vector3(0.484939f, 7.01468f, 6.32313f));
  points.push_back(Vector3(6.61794f, -3.66497f, 9.58617f));
  points.push_back(Vector3(9.99695f, -3.84136f, 1.84851f));
  points.push_back(Vector3(3.18094f, 1.19419f, -0.529496f));
  points.push_back(Vector3(2.64199f, 4.27412f, 0.500809f));
  points.push_back(Vector3(-5.22874f, -5.84765f, 6.292f));
  points.push_back(Vector3(-1.57323f, 8.15302f, -4.77767f));
  points.push_back(Vector3(-8.64681f, 2.68899f, 4.25031f));
  points.push_back(Vector3(-1.40294f, -8.73165f, -2.28736f));
  points.push_back(Vector3(0.226753f, -8.53267f, -1.58238f));
  points.push_back(Vector3(-5.51134f, 8.70785f, 9.17478f));
  points.push_back(Vector3(-2.85623f, -1.09592f, 5.2794f));
  points.push_back(Vector3(-4.8027f, -3.72723f, -3.32072f));
  points.push_back(Vector3(6.1919f, -9.4348f, -6.60634f));
  points.push_back(Vector3(3.02713f, -8.12738f, 5.80004f));
  points.push_back(Vector3(-8.47957f, -4.8381f, 1.89367f));
  points.push_back(Vector3(-1.47374f, -1.23569f, -4.20392f));
  points.push_back(Vector3(-2.99905f, 9.87243f, -8.36665f));
  points.push_back(Vector3(5.72192f, -6.15223f, 2.78115f));
  points.push_back(Vector3(-7.40104f, -6.36708f, 8.04132f));
  points.push_back(Vector3(-4.63729f, 2.53395f, 1.29429f));
  points.push_back(Vector3(-8.86349f, -7.58843f, -1.33152f));
  points.push_back(Vector3(-7.81915f, -2.79458f, 8.21039f));
  points.push_back(Vector3(-1.32786f, 1.73193f, 4.59273f));
  points.push_back(Vector3(3.74859f, 1.49754f, -2.68166f));
  points.push_back(Vector3(8.49849f, -8.5168f, 5.60472f));
  points.push_back(Vector3(6.07105f, -9.99817f, -9.24009f));
  points.push_back(Vector3(-4.80697f, -1.32237f, -2.8367f));
  points.push_back(Vector3(7.02506f, -4.93027f, 7.2924f));
  points.push_back(Vector3(3.80779f, -2.05237f, 4.77279f));
  points.push_back(Vector3(5.65844f, 1.64281f, -0.411084f));
  points.push_back(Vector3(-7.4279f, 9.59288f, -8.6877f));
  points.push_back(Vector3(-4.27107f, -0.00701926f, 5.94348f));
  points.push_back(Vector3(8.02728f, 3.48308f, -2.54616f));
  points.push_back(Vector3(8.14753f, 7.38273f, -1.66417f));
  points.push_back(Vector3(1.67699f, 6.51662f, 7.00797f));
  points.push_back(Vector3(-8.29096f, -4.52498f, -8.62484f));
  points.push_back(Vector3(9.64965f, 4.20026f, 0.544145f));
  points.push_back(Vector3(-2.82571f, 3.33232f, 7.60308f));
  points.push_back(Vector3(3.89508f, 5.70666f, 4.21369f));
  points.push_back(Vector3(-1.15329f, 8.53572f, -3.45378f));
  points.push_back(Vector3(-2.24342f, -1.02512f, 9.04477f));
  points.push_back(Vector3(2.84707f, 3.84991f, 0.283517f));
  points.push_back(Vector3(2.64443f, 0.606403f, 1.49815f));
  points.push_back(Vector3(-5.24766f, -3.58928f, 9.54344f));
  points.push_back(Vector3(-1.29368f, 6.89138f, 1.24241f));
  points.push_back(Vector3(-6.30909f, 3.18766f, 4.11908f));
  points.push_back(Vector3(-6.79189f, -0.149846f, -0.488601f));
  points.push_back(Vector3(7.81549f, -7.09098f, 2.01392f));
  points.push_back(Vector3(8.32575f, -1.84606f, 3.46416f));
  points.push_back(Vector3(9.89502f, -6.72658f, -4.14472f));
  points.push_back(Vector3(-2.23914f, 9.682f, -8.76949f));
  points.push_back(Vector3(-6.02527f, -4.41084f, -4.85763f));
  points.push_back(Vector3(-8.51314f, 2.85745f, 1.27659f));
  points.push_back(Vector3(-2.7897f, -0.501419f, 1.37852f));
  points.push_back(Vector3(2.46254f, -9.83703f, -9.16501f));
  points.push_back(Vector3(-2.39723f, 0.627155f, 2.53883f));
  points.push_back(Vector3(-9.05087f, -8.02118f, -5.99536f));
  points.push_back(Vector3(-9.1052f, 6.39027f, 6.19983f));
  points.push_back(Vector3(3.50322f, 4.54817f, 3.08512f));
  points.push_back(Vector3(-9.14914f, 2.25929f, -0.586871f));
  points.push_back(Vector3(-2.68044f, -5.02609f, -0.555132f));
  points.push_back(Vector3(9.07285f, -4.96078f, -9.33226f));
  points.push_back(Vector3(-1.03183f, -8.80734f, 5.08957f));
  points.push_back(Vector3(-4.14228f, 3.66802f, -2.58034f));
  points.push_back(Vector3(2.03345f, 8.34651f, 5.65233f));
  points.push_back(Vector3(4.87533f, 4.16364f, -5.71581f));
  points.push_back(Vector3(-6.60939f, -2.61818f, 2.32887f));
  points.push_back(Vector3(4.18134f, -3.81207f, -5.46556f));
  points.push_back(Vector3(5.21226f, -0.425733f, -3.33232f));
  points.push_back(Vector3(-3.24503f, -3.32194f, 3.49162f));
  points.push_back(Vector3(-8.11396f, 4.44258f, -9.18943f));
  points.push_back(Vector3(-2.172f, -6.28956f, -0.646687f));
  points.push_back(Vector3(0.279855f, 0.758995f, 9.0698f));
  points.push_back(Vector3(6.33412f, 3.64483f, 7.31803f));
  points.push_back(Vector3(-9.27915f, 3.52458f, 7.23319f));
  points.push_back(Vector3(6.26637f, -0.84994f, -0.827357f));
  points.push_back(Vector3(7.21305f, -3.62529f, 6.21937f));
  points.push_back(Vector3(3.16507f, 7.48772f, -4.75814f));
  points.push_back(Vector3(1.21006f, -8.58272f, -0.970183f));
  points.push_back(Vector3(3.78338f, 9.86816f, -8.76339f));
  points.push_back(Vector3(-3.70281f, -0.500809f, 7.07816f));
  points.push_back(Vector3(5.78784f, -3.67046f, 1.66967f));
  points.push_back(Vector3(-6.19617f, 5.78295f, -3.82305f));
  points.push_back(Vector3(1.57567f, -1.0947f, 6.5276f));
  points.push_back(Vector3(-5.73168f, 0.893277f, -3.53435f));
  points.push_back(Vector3(-1.5598f, -8.64864f, -8.62667f));
  points.push_back(Vector3(-0.751061f, 9.17356f, -3.37138f));
  points.push_back(Vector3(-1.06357f, -1.07944f, 5.46129f));
  TestSpherePCA(points, file);
}

void SpherePCATest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.8114f, -0.7828f, 7.94733f));
  points.push_back(Vector3(-9.48485f, -2.06763f, -3.87494f));
  points.push_back(Vector3(-7.21976f, 1.41209f, -7.15812f));
  points.push_back(Vector3(-2.772f, 6.0802f, 9.38292f));
  points.push_back(Vector3(-7.76544f, 8.39534f, 6.77236f));
  points.push_back(Vector3(-1.94922f, -5.96301f, -0.550249f));
  points.push_back(Vector3(4.57198f, -9.29991f, 1.10324f));
  points.push_back(Vector3(-6.28346f, 3.85662f, 1.16611f));
  points.push_back(Vector3(1.04038f, -8.96359f, 7.10135f));
  points.push_back(Vector3(6.01245f, 2.17139f, 2.39174f));
  points.push_back(Vector3(3.51848f, 1.1301f, -3.75225f));
  points.push_back(Vector3(4.25397f, -1.48961f, -4.1319f));
  points.push_back(Vector3(8.55464f, -9.21995f, 9.57213f));
  points.push_back(Vector3(7.83196f, 6.01245f, -8.00531f));
  points.push_back(Vector3(4.26008f, -8.53389f, 3.9256f));
  points.push_back(Vector3(-3.93719f, 5.8623f, 3.56243f));
  points.push_back(Vector3(1.97302f, 3.79681f, 2.38075f));
  points.push_back(Vector3(-1.20945f, -9.90417f, -6.48976f));
  points.push_back(Vector3(4.46883f, -1.59032f, -5.11765f));
  TestSpherePCA(points, file);
}

void SpherePCATest6(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.94507f, -0.323191f, -2.58217f));
  points.push_back(Vector3(6.48122f, -3.867f, -4.45235f));
  points.push_back(Vector3(5.50096f, 1.11911f, -2.37587f));
  points.push_back(Vector3(8.64498f, -7.87164f, 7.58171f));
  points.push_back(Vector3(6.89749f, -8.24335f, -0.744346f));
  points.push_back(Vector3(9.035f, -2.64626f, 5.97705f));
  points.push_back(Vector3(9.70763f, 8.6932f, -5.71764f));
  points.push_back(Vector3(0.646077f, 9.8468f, -5.6859f));
  points.push_back(Vector3(3.8731f, -1.19663f, -4.28083f));
  points.push_back(Vector3(-7.73736f, -6.47694f, 8.77438f));
  points.push_back(Vector3(0.79928f, -3.22611f, 6.55873f));
  points.push_back(Vector3(-7.49199f, -6.53554f, -9.97192f));
  points.push_back(Vector3(4.48714f, -8.6932f, 2.31971f));
  points.push_back(Vector3(-1.31565f, -0.0735496f, -0.443434f));
  points.push_back(Vector3(-2.50221f, 2.46925f, -6.68752f));
  points.push_back(Vector3(7.09403f, 6.06311f, 0.472732f));
  points.push_back(Vector3(-3.47636f, 0.827357f, 9.63988f));
  points.push_back(Vector3(-9.24009f, -3.45012f, 6.24683f));
  points.push_back(Vector3(2.39601f, 8.92758f, 2.31727f));
  points.push_back(Vector3(-0.564898f, -2.50404f, 1.22715f));
  points.push_back(Vector3(7.80572f, -9.78271f, 0.165716f));
  points.push_back(Vector3(-2.10303f, -5.41734f, 7.06351f));
  points.push_back(Vector3(-4.52803f, 2.29652f, 6.87613f));
  points.push_back(Vector3(4.37727f, 8.96481f, 1.49876f));
  points.push_back(Vector3(2.30201f, 2.79031f, 8.28669f));
  points.push_back(Vector3(-6.05152f, -8.6053f, 3.09244f));
  points.push_back(Vector3(3.89325f, -0.182196f, 9.04477f));
  points.push_back(Vector3(4.41572f, -3.01004f, 9.67589f));
  points.push_back(Vector3(-9.03012f, 7.30522f, -7.17093f));
  points.push_back(Vector3(-2.88797f, -1.63488f, -7.70745f));
  points.push_back(Vector3(7.47917f, -9.07285f, 3.8255f));
  points.push_back(Vector3(-5.39048f, 6.19312f, -7.48527f));
  points.push_back(Vector3(1.69286f, 5.65294f, 1.51097f));
  points.push_back(Vector3(-5.92944f, -4.05988f, 1.83325f));
  points.push_back(Vector3(9.20957f, 3.23893f, 8.71944f));
  points.push_back(Vector3(-8.56502f, -9.77783f, 9.83886f));
  points.push_back(Vector3(2.69265f, 0.108341f, -3.32255f));
  points.push_back(Vector3(0.277413f, 0.290841f, 5.61449f));
  points.push_back(Vector3(-9.85839f, -4.71358f, -7.00369f));
  points.push_back(Vector3(2.45888f, -9.76501f, -3.39152f));
  points.push_back(Vector3(3.80047f, 7.02933f, 1.7069f));
  points.push_back(Vector3(-1.75695f, -4.05621f, 3.87066f));
  points.push_back(Vector3(-1.87658f, 7.89911f, -8.92392f));
  points.push_back(Vector3(3.71075f, -9.72167f, -5.73779f));
  points.push_back(Vector3(9.94812f, -6.12537f, -2.54677f));
  points.push_back(Vector3(5.70727f, -1.22654f, -8.29218f));
  points.push_back(Vector3(9.6588f, -3.91888f, -5.6212f));
  points.push_back(Vector3(1.6245f, -1.02878f, 3.18461f));
  points.push_back(Vector3(-8.73592f, 6.42079f, 8.1048f));
  points.push_back(Vector3(-4.4322f, 3.70769f, -6.53005f));
  points.push_back(Vector3(-5.67614f, -6.71987f, 6.02954f));
  points.push_back(Vector3(6.42384f, -3.15531f, -1.82104f));
  points.push_back(Vector3(4.14716f, 3.043f, 5.82629f));
  points.push_back(Vector3(-0.555742f, 1.54637f, 9.79614f));
  points.push_back(Vector3(1.0947f, 9.90844f, -7.21061f));
  points.push_back(Vector3(-6.17176f, -1.27842f, -1.17038f));
  points.push_back(Vector3(7.68487f, 2.94961f, -6.42872f));
  points.push_back(Vector3(-3.25663f, -0.749229f, -5.75427f));
  points.push_back(Vector3(-4.04462f, -2.00293f, -1.40904f));
  points.push_back(Vector3(1.95654f, -9.48851f, -3.38176f));
  points.push_back(Vector3(9.80895f, 5.22813f, -4.56587f));
  points.push_back(Vector3(1.11667f, 8.08405f, 6.37867f));
  points.push_back(Vector3(-9.81689f, 3.86517f, -5.9563f));
  points.push_back(Vector3(0.296335f, 9.79369f, -9.32981f));
  points.push_back(Vector3(7.54265f, 5.59374f, -6.09363f));
  points.push_back(Vector3(6.1681f, -6.01794f, -1.85705f));
  points.push_back(Vector3(8.6639f, 0.658895f, 6.29749f));
  points.push_back(Vector3(-2.37526f, 9.56481f, -5.98254f));
  points.push_back(Vector3(-4.26862f, 7.70501f, 3.43608f));
  points.push_back(Vector3(2.29896f, -5.47777f, 0.468459f));
  points.push_back(Vector3(-2.37831f, 2.6603f, 3.62835f));
  points.push_back(Vector3(5.74389f, -5.47349f, 2.23182f));
  points.push_back(Vector3(8.62239f, -4.07758f, -0.362255f));
  points.push_back(Vector3(6.5569f, -3.12906f, 6.92496f));
  points.push_back(Vector3(1.14414f, -6.77602f, -0.872524f));
  points.push_back(Vector3(5.91357f, 9.28587f, 6.32984f));
  points.push_back(Vector3(8.66695f, 6.39454f, -6.44703f));
  points.push_back(Vector3(-2.62978f, 1.08188f, 1.32542f));
  points.push_back(Vector3(5.86535f, 8.22138f, 7.86981f));
  points.push_back(Vector3(-5.14328f, 7.84295f, 1.79724f));
  points.push_back(Vector3(6.9335f, 3.32987f, -9.682f));
  points.push_back(Vector3(-3.95672f, 3.12052f, 6.15589f));
  points.push_back(Vector3(3.18827f, 6.86575f, 1.92602f));
  points.push_back(Vector3(-2.79092f, 3.74737f, -4.3675f));
  points.push_back(Vector3(9.4879f, -2.65297f, 1.62084f));
  points.push_back(Vector3(6.87551f, 1.99011f, -1.31016f));
  points.push_back(Vector3(8.42769f, -8.19758f, -2.38929f));
  points.push_back(Vector3(1.28269f, -9.71007f, 3.26701f));
  points.push_back(Vector3(-5.8684f, -7.23258f, -8.67489f));
  points.push_back(Vector3(-2.20374f, 5.33738f, -8.31538f));
  points.push_back(Vector3(6.23218f, -9.67528f, -0.674764f));
  points.push_back(Vector3(5.03647f, -9.88952f, -2.75918f));
  points.push_back(Vector3(-8.13654f, 0.726646f, 3.63201f));
  points.push_back(Vector3(-6.61855f, -2.09754f, 5.51622f));
  TestSpherePCA(points, file);
}

void SpherePCATest7(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.36421f, 1.99988f, 3.83404f));
  points.push_back(Vector3(-6.66433f, 8.47835f, -3.88104f));
  points.push_back(Vector3(-8.0456f, 4.29243f, 9.37986f));
  points.push_back(Vector3(-7.0745f, 0.540483f, 8.90072f));
  points.push_back(Vector3(2.30812f, 0.324412f, 0.457472f));
  points.push_back(Vector3(0.823084f, -2.5016f, 3.94757f));
  points.push_back(Vector3(-4.2082f, -5.15976f, -0.513016f));
  points.push_back(Vector3(-6.44398f, -2.84524f, 9.4409f));
  points.push_back(Vector3(-8.15912f, -8.64925f, 9.24375f));
  points.push_back(Vector3(6.6393f, -9.79492f, -4.67513f));
  points.push_back(Vector3(-6.71743f, 7.14408f, 9.30113f));
  points.push_back(Vector3(0.780358f, -5.02121f, 9.00204f));
  points.push_back(Vector3(-0.512406f, -6.86819f, -1.39683f));
  points.push_back(Vector3(7.84722f, -1.47618f, -4.87167f));
  points.push_back(Vector3(-2.16468f, 6.87063f, -5.8507f));
  points.push_back(Vector3(1.60985f, 3.98541f, -5.35203f));
  points.push_back(Vector3(3.10831f, 4.92782f, 2.23182f));
  points.push_back(Vector3(-1.06113f, 2.2483f, 4.16181f));
  points.push_back(Vector3(-3.51848f, -5.40819f, -2.69021f));
  points.push_back(Vector3(1.23997f, -6.50197f, -6.32984f));
  points.push_back(Vector3(5.03891f, -2.89407f, 6.90664f));
  points.push_back(Vector3(-4.06354f, -5.7561f, -8.95321f));
  points.push_back(Vector3(-8.29524f, 7.80938f, 1.42308f));
  points.push_back(Vector3(-3.68816f, 9.91577f, 7.92047f));
  points.push_back(Vector3(6.58864f, -4.85824f, -2.01331f));
  points.push_back(Vector3(7.40287f, 4.90646f, 6.34388f));
  points.push_back(Vector3(-3.41777f, 3.0253f, -0.212104f));
  points.push_back(Vector3(8.52046f, -6.62526f, -8.69137f));
  points.push_back(Vector3(-6.95242f, -7.90094f, -0.522782f));
  points.push_back(Vector3(1.7423f, -2.24403f, 3.26884f));
  points.push_back(Vector3(-9.87609f, -2.77932f, 9.41588f));
  points.push_back(Vector3(-7.04703f, -9.75524f, -0.158391f));
  points.push_back(Vector3(1.07883f, -6.04297f, -4.46089f));
  points.push_back(Vector3(-9.82665f, -1.9602f, -0.606403f));
  points.push_back(Vector3(9.68444f, -1.86865f, -2.28187f));
  points.push_back(Vector3(5.52965f, 8.305f, -6.43239f));
  points.push_back(Vector3(-9.63561f, -7.83258f, -9.67772f));
  points.push_back(Vector3(-5.27146f, 6.21387f, 3.69427f));
  points.push_back(Vector3(7.31376f, 2.678f, 4.70199f));
  points.push_back(Vector3(3.91644f, -8.50154f, -0.176092f));
  points.push_back(Vector3(-8.61324f, 7.81243f, -7.00736f));
  points.push_back(Vector3(0.674764f, -1.81616f, 3.32072f));
  points.push_back(Vector3(6.93716f, -7.05618f, -7.45415f));
  points.push_back(Vector3(6.29322f, 1.13559f, -2.86477f));
  points.push_back(Vector3(-8.78292f, 1.73864f, 4.82894f));
  points.push_back(Vector3(2.72195f, 4.18378f, -5.51988f));
  points.push_back(Vector3(9.22422f, 9.06247f, 4.43648f));
  points.push_back(Vector3(2.3484f, 0.406812f, 9.15891f));
  points.push_back(Vector3(9.1876f, -4.95651f, -4.738f));
  points.push_back(Vector3(4.39802f, 8.15424f, -8.21467f));
  points.push_back(Vector3(1.02756f, 8.39167f, 4.53658f));
  points.push_back(Vector3(0.872524f, 9.10276f, 8.04071f));
  points.push_back(Vector3(4.31806f, -5.71276f, 3.74493f));
  points.push_back(Vector3(-0.0424207f, -0.491653f, 0.461745f));
  points.push_back(Vector3(-3.72784f, -9.64171f, 0.961028f));
  points.push_back(Vector3(8.33186f, 5.39354f, -3.43913f));
  points.push_back(Vector3(6.38112f, 5.80676f, -5.69628f));
  points.push_back(Vector3(-1.79235f, -0.843226f, 5.77746f));
  points.push_back(Vector3(5.16037f, -3.6607f, 3.63628f));
  points.push_back(Vector3(2.7897f, 1.56285f, 8.44722f));
  points.push_back(Vector3(-7.52922f, -6.49525f, -0.330515f));
  points.push_back(Vector3(-2.37465f, -8.33857f, 4.07514f));
  points.push_back(Vector3(-1.42613f, 3.95245f, -1.08493f));
  points.push_back(Vector3(-2.4424f, -9.44395f, -3.78216f));
  points.push_back(Vector3(0.956145f, 4.49629f, 1.85217f));
  points.push_back(Vector3(-7.86676f, 5.40025f, 9.78332f));
  points.push_back(Vector3(4.54634f, 5.14206f, -7.17032f));
  points.push_back(Vector3(-1.05258f, -9.77172f, 5.9508f));
  points.push_back(Vector3(4.68795f, -3.02896f, 6.0332f));
  TestSpherePCA(points, file);
}

void SpherePCATest8(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.16135f, -2.12317f, 2.46376f));
  points.push_back(Vector3(-1.49632f, -9.729f, -2.55532f));
  points.push_back(Vector3(-7.92108f, -1.04099f, -1.77099f));
  points.push_back(Vector3(-6.08142f, -3.35002f, -1.85278f));
  points.push_back(Vector3(-2.69143f, 0.693686f, 2.44911f));
  points.push_back(Vector3(7.89117f, -9.86328f, 5.60167f));
  points.push_back(Vector3(8.83908f, -8.4875f, -7.50175f));
  points.push_back(Vector3(-5.97034f, -8.57479f, -3.1077f));
  points.push_back(Vector3(6.66189f, -8.54732f, 6.96158f));
  points.push_back(Vector3(4.2552f, -9.48302f, -1.49754f));
  points.push_back(Vector3(0.630207f, 6.80593f, 8.17011f));
  points.push_back(Vector3(1.70202f, 6.34632f, -7.65557f));
  points.push_back(Vector3(-2.40455f, -7.00674f, 0.679647f));
  points.push_back(Vector3(3.98175f, 0.99704f, 1.17038f));
  points.push_back(Vector3(1.04465f, 8.08039f, -6.52516f));
  points.push_back(Vector3(8.36116f, 8.76583f, 7.54875f));
  points.push_back(Vector3(-4.34919f, -5.33738f, 7.65801f));
  points.push_back(Vector3(8.60958f, 5.8562f, 4.0788f));
  points.push_back(Vector3(-1.26682f, -0.825526f, -2.48451f));
  points.push_back(Vector3(-5.14328f, 1.66906f, 6.94021f));
  points.push_back(Vector3(-2.64504f, 7.37663f, 3.65764f));
  points.push_back(Vector3(-4.66353f, -9.94873f, -7.30583f));
  points.push_back(Vector3(6.26576f, 5.45762f, 4.9559f));
  points.push_back(Vector3(-5.11826f, -9.07651f, 2.0835f));
  points.push_back(Vector3(-9.49583f, -9.72655f, -6.32618f));
  points.push_back(Vector3(-8.05963f, -8.03827f, -3.24137f));
  points.push_back(Vector3(9.80346f, -7.69768f, -1.89856f));
  points.push_back(Vector3(-3.76446f, -1.0184f, -1.92358f));
  points.push_back(Vector3(-7.54631f, 3.35063f, -8.46675f));
  points.push_back(Vector3(5.48509f, -5.24094f, 3.65947f));
  points.push_back(Vector3(6.46962f, 0.477615f, 8.23542f));
  points.push_back(Vector3(-5.68163f, 1.89611f, 9.99268f));
  points.push_back(Vector3(-1.71361f, -9.55077f, 8.43806f));
  points.push_back(Vector3(4.19477f, -1.70751f, -9.71679f));
  points.push_back(Vector3(6.292f, 7.82037f, 8.08466f));
  points.push_back(Vector3(2.22877f, -3.46416f, 8.73592f));
  points.push_back(Vector3(0.744346f, 6.96768f, 7.32414f));
  points.push_back(Vector3(1.8656f, 3.35246f, -2.27332f));
  points.push_back(Vector3(5.58763f, -3.42082f, 7.29728f));
  points.push_back(Vector3(-8.16828f, -5.12864f, 5.69262f));
  points.push_back(Vector3(-6.21021f, -3.32682f, 9.92309f));
  points.push_back(Vector3(4.18928f, -9.8059f, 3.22001f));
  points.push_back(Vector3(8.67061f, -4.20331f, 2.80068f));
  points.push_back(Vector3(-9.81445f, -7.79656f, -4.46516f));
  points.push_back(Vector3(1.67455f, -8.00348f, -6.60939f));
  points.push_back(Vector3(6.37196f, 3.19498f, -6.33839f));
  points.push_back(Vector3(4.75204f, -1.89917f, 5.9209f));
  points.push_back(Vector3(5.69079f, 6.21509f, 6.57399f));
  points.push_back(Vector3(5.39293f, 2.16956f, 3.37992f));
  points.push_back(Vector3(1.40721f, 3.51543f, -4.86801f));
  points.push_back(Vector3(-3.08512f, 0.289621f, -1.87353f));
  points.push_back(Vector3(8.33857f, -6.2859f, -1.9779f));
  points.push_back(Vector3(8.39351f, 3.59661f, 0.431227f));
  points.push_back(Vector3(8.39961f, 1.64647f, 2.7488f));
  points.push_back(Vector3(-9.97131f, 7.07938f, -2.70669f));
  points.push_back(Vector3(-1.55675f, 1.95227f, -6.45619f));
  points.push_back(Vector3(-6.58071f, -3.17606f, 6.57033f));
  points.push_back(Vector3(0.293893f, -8.28669f, 5.25681f));
  points.push_back(Vector3(-5.51073f, 7.39006f, 6.33717f));
  points.push_back(Vector3(8.22077f, 1.38524f, -9.52513f));
  points.push_back(Vector3(-7.63604f, 4.48775f, 8.95871f));
  points.push_back(Vector3(0.395215f, -0.584429f, 8.71761f));
  points.push_back(Vector3(-7.34855f, 2.54616f, 6.11805f));
  points.push_back(Vector3(-9.40916f, -3.24564f, -5.92456f));
  points.push_back(Vector3(0.999481f, -5.39171f, 7.5042f));
  points.push_back(Vector3(7.05679f, 5.46678f, -6.32801f));
  points.push_back(Vector3(4.83261f, -4.232f, 4.46577f));
  points.push_back(Vector3(-0.408032f, 3.36161f, -3.80169f));
  points.push_back(Vector3(0.472732f, 3.62102f, 3.28532f));
  points.push_back(Vector3(-4.09955f, -3.57524f, -9.83825f));
  points.push_back(Vector3(1.75878f, 2.32398f, 3.22306f));
  points.push_back(Vector3(-3.24259f, 5.42039f, 7.75262f));
  points.push_back(Vector3(-2.57302f, 3.49895f, -5.32884f));
  points.push_back(Vector3(-1.04099f, 4.7795f, 4.96994f));
  points.push_back(Vector3(0.33845f, 9.7235f, -4.83749f));
  points.push_back(Vector3(7.85882f, 3.34513f, 4.31867f));
  points.push_back(Vector3(4.63729f, 7.35527f, -1.98706f));
  points.push_back(Vector3(-9.90051f, -9.83398f, 5.46556f));
  points.push_back(Vector3(9.62401f, 7.32414f, -7.32902f));
  points.push_back(Vector3(4.36201f, 6.86514f, -5.68285f));
  TestSpherePCA(points, file);
}

void SpherePCATest9(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.03806f, 4.61592f, -1.52379f));
  points.push_back(Vector3(9.10276f, 0.592975f, 6.03992f));
  points.push_back(Vector3(9.86023f, 8.18598f, 3.05765f));
  points.push_back(Vector3(1.26499f, -8.94711f, -0.186468f));
  points.push_back(Vector3(-4.91623f, 6.83645f, 2.24036f));
  points.push_back(Vector3(3.99579f, 4.97787f, 2.84524f));
  points.push_back(Vector3(-1.88391f, 1.72826f, 4.48225f));
  points.push_back(Vector3(-0.143132f, -0.386059f, 2.33741f));
  points.push_back(Vector3(-0.735801f, 9.93774f, -6.68508f));
  points.push_back(Vector3(7.72515f, 8.66878f, 9.91028f));
  points.push_back(Vector3(-5.80859f, 6.65822f, -4.65499f));
  points.push_back(Vector3(-5.04074f, -2.71584f, 2.22633f));
  points.push_back(Vector3(-4.61104f, -9.28526f, -6.04236f));
  points.push_back(Vector3(5.58092f, 9.61364f, 1.93396f));
  points.push_back(Vector3(-1.65319f, -0.907315f, 6.57949f));
  points.push_back(Vector3(5.91479f, -0.375072f, 2.04871f));
  points.push_back(Vector3(-1.99316f, 8.75423f, 5.71703f));
  points.push_back(Vector3(2.01086f, -2.80313f, -7.40898f));
  points.push_back(Vector3(-5.91601f, 4.96445f, 1.08371f));
  points.push_back(Vector3(-8.05414f, -4.79781f, 7.38334f));
  points.push_back(Vector3(6.54592f, 7.28507f, 4.3614f));
  points.push_back(Vector3(3.32987f, 1.60131f, -6.06067f));
  points.push_back(Vector3(7.40898f, 9.72228f, 2.10791f));
  points.push_back(Vector3(-5.49669f, -3.93292f, 2.88858f));
  points.push_back(Vector3(-5.40269f, -7.17215f, -1.55797f));
  points.push_back(Vector3(9.53734f, -4.13129f, -2.25562f));
  points.push_back(Vector3(0.35432f, 5.26475f, 9.96277f));
  points.push_back(Vector3(-5.36058f, 3.11258f, 3.72784f));
  points.push_back(Vector3(-6.85476f, -6.99332f, -6.63503f));
  points.push_back(Vector3(9.60509f, 7.52434f, 8.0987f));
  points.push_back(Vector3(-9.3646f, -1.52745f, -6.08203f));
  points.push_back(Vector3(4.80697f, 8.19025f, -3.28166f));
  points.push_back(Vector3(4.61959f, 1.89306f, -7.16178f));
  points.push_back(Vector3(4.62203f, 6.65334f, 4.69588f));
  points.push_back(Vector3(-0.682089f, -4.28205f, -3.82244f));
  points.push_back(Vector3(4.44014f, 4.86007f, -4.41511f));
  points.push_back(Vector3(-5.36424f, -7.72698f, -0.411695f));
  points.push_back(Vector3(-6.84072f, 7.29606f, 6.15223f));
  points.push_back(Vector3(-1.64464f, 7.72454f, -5.20554f));
  points.push_back(Vector3(-1.29551f, 9.64904f, 4.68307f));
  points.push_back(Vector3(-1.68249f, 4.20026f, 7.19901f));
  points.push_back(Vector3(3.24442f, 9.03317f, -7.26493f));
  points.push_back(Vector3(-0.0979644f, 9.15464f, 2.41127f));
  points.push_back(Vector3(9.78271f, 5.68834f, -4.41755f));
  points.push_back(Vector3(8.05353f, 9.20713f, 4.96384f));
  points.push_back(Vector3(5.30625f, -4.35163f, -2.11158f));
  points.push_back(Vector3(-0.754723f, -2.69997f, 7.69097f));
  points.push_back(Vector3(0.0723289f, -9.38536f, -9.12595f));
  points.push_back(Vector3(-0.419019f, -0.434889f, 7.62139f));
  points.push_back(Vector3(-9.53001f, -2.266f, 7.91375f));
  points.push_back(Vector3(-6.74795f, 4.24543f, -3.67962f));
  points.push_back(Vector3(-3.31889f, 0.599078f, -0.425123f));
  points.push_back(Vector3(3.26151f, 1.9541f, -8.15485f));
  points.push_back(Vector3(8.59127f, -3.88531f, -0.805383f));
  points.push_back(Vector3(6.19678f, 6.88772f, -1.53844f));
  points.push_back(Vector3(-3.42387f, -7.61467f, -1.48839f));
  points.push_back(Vector3(-2.57179f, 4.91684f, -8.63155f));
  points.push_back(Vector3(-9.63012f, -7.03299f, -7.66289f));
  points.push_back(Vector3(4.84359f, 9.17722f, -0.481277f));
  points.push_back(Vector3(1.77892f, -4.78744f, 4.0611f));
  points.push_back(Vector3(-9.31944f, -0.514847f, -7.38151f));
  points.push_back(Vector3(7.96625f, 7.51396f, -7.40226f));
  points.push_back(Vector3(-5.33006f, 0.96408f, 1.10141f));
  points.push_back(Vector3(3.97137f, -5.50645f, 8.60775f));
  points.push_back(Vector3(9.99329f, 2.34107f, 2.72805f));
  points.push_back(Vector3(-1.55675f, 3.15653f, -4.03058f));
  points.push_back(Vector3(-0.912198f, 7.82159f, 9.06247f));
  points.push_back(Vector3(7.89239f, -0.873745f, 6.11011f));
  points.push_back(Vector3(1.52623f, 0.890225f, -8.18903f));
  points.push_back(Vector3(4.45845f, 2.93374f, -9.68322f));
  points.push_back(Vector3(-6.44337f, -3.78521f, -4.52559f));
  points.push_back(Vector3(-7.10318f, -5.68529f, 1.14231f));
  points.push_back(Vector3(1.00497f, 9.63073f, 1.36876f));
  points.push_back(Vector3(-3.4611f, 0.174871f, -9.07956f));
  points.push_back(Vector3(-3.55449f, 8.40815f, -8.56746f));
  points.push_back(Vector3(2.05847f, -8.22871f, 5.78234f));
  points.push_back(Vector3(0.540483f, -2.82388f, 0.70101f));
  points.push_back(Vector3(-8.65535f, 1.21799f, -0.191961f));
  points.push_back(Vector3(8.53755f, -8.54305f, -2.44911f));
  points.push_back(Vector3(-1.82287f, -0.821253f, -1.26499f));
  points.push_back(Vector3(8.77743f, -6.67043f, 3.20414f));
  points.push_back(Vector3(-9.72228f, 7.08121f, 8.25251f));
  points.push_back(Vector3(3.03323f, -5.30381f, 9.02463f));
  points.push_back(Vector3(-3.91522f, 0.779138f, -8.95077f));
  points.push_back(Vector3(-8.77133f, -4.4377f, 4.42549f));
  points.push_back(Vector3(-7.17887f, -9.05209f, -8.19025f));
  points.push_back(Vector3(-2.05786f, 0.0613422f, 2.1427f));
  points.push_back(Vector3(-9.38841f, -9.02097f, -7.18314f));
  points.push_back(Vector3(7.69036f, 4.28327f, -6.25111f));
  TestSpherePCA(points, file);
}

void SpherePCATest10(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.30723f, -1.02512f, 6.51357f));
  points.push_back(Vector3(6.34693f, -9.30174f, 2.48695f));
  points.push_back(Vector3(-6.59841f, 9.38597f, 2.54433f));
  points.push_back(Vector3(7.85028f, 3.24076f, -3.81573f));
  points.push_back(Vector3(-9.10337f, 3.4611f, -6.33778f));
  points.push_back(Vector3(-4.61959f, -4.75692f, 4.65377f));
  points.push_back(Vector3(7.26981f, 3.35551f, 3.87371f));
  points.push_back(Vector3(4.26679f, 2.43019f, 4.35286f));
  points.push_back(Vector3(-3.98358f, -1.27842f, -2.45521f));
  points.push_back(Vector3(-9.83032f, 5.2739f, -9.76806f));
  points.push_back(Vector3(6.92129f, 5.0444f, 7.4633f));
  points.push_back(Vector3(-4.22956f, -3.62957f, -8.64559f));
  points.push_back(Vector3(6.00085f, 3.41777f, -3.34147f));
  points.push_back(Vector3(1.77648f, -2.05176f, 6.72353f));
  points.push_back(Vector3(2.93008f, -6.49892f, -6.14856f));
  TestSpherePCA(points, file);
}

void SpherePCATest11(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.60204f, 8.04926f, -7.19352f));
  points.push_back(Vector3(-7.34123f, -1.03793f, 7.77764f));
  points.push_back(Vector3(-7.75262f, -6.18763f, -8.98129f));
  points.push_back(Vector3(3.21757f, -3.39885f, -7.79473f));
  points.push_back(Vector3(-8.95321f, 8.79818f, 8.9996f));
  points.push_back(Vector3(9.19614f, -7.2808f, 0.265816f));
  points.push_back(Vector3(1.89734f, -1.67577f, -7.31254f));
  points.push_back(Vector3(5.84216f, 6.11072f, -9.29075f));
  points.push_back(Vector3(-3.09976f, -0.240181f, -7.29972f));
  points.push_back(Vector3(1.88818f, 2.5895f, 8.80795f));
  points.push_back(Vector3(-4.15998f, -4.28144f, 9.04538f));
  points.push_back(Vector3(-7.48894f, -5.22324f, -9.00937f));
  points.push_back(Vector3(0.300607f, 7.56706f, 3.02713f));
  points.push_back(Vector3(6.34632f, -7.13675f, -2.84158f));
  points.push_back(Vector3(2.91787f, 9.14914f, -8.39778f));
  points.push_back(Vector3(-4.20942f, -6.39332f, 3.9256f));
  points.push_back(Vector3(6.93106f, -9.7589f, -9.2938f));
  points.push_back(Vector3(6.00269f, -3.60088f, 7.28263f));
  points.push_back(Vector3(5.62731f, -4.0434f, 3.82855f));
  points.push_back(Vector3(8.78048f, 2.78298f, 0.521561f));
  points.push_back(Vector3(-0.890835f, 4.80148f, 2.76284f));
  points.push_back(Vector3(-4.44502f, -8.21467f, 5.35508f));
  points.push_back(Vector3(9.61119f, -3.29264f, 1.55736f));
  points.push_back(Vector3(1.39195f, -9.66979f, -6.59169f));
  points.push_back(Vector3(-1.18198f, -4.31684f, 4.74105f));
  points.push_back(Vector3(-8.20246f, -1.63915f, -5.78661f));
  points.push_back(Vector3(-6.19251f, 2.22816f, -0.630818f));
  points.push_back(Vector3(-1.30161f, 4.5793f, -3.03446f));
  points.push_back(Vector3(-5.17441f, -9.13327f, -0.154729f));
  points.push_back(Vector3(-6.29749f, 3.45378f, 9.12534f));
  points.push_back(Vector3(-9.34996f, -9.47325f, 7.33329f));
  points.push_back(Vector3(8.22321f, -0.216987f, 7.95038f));
  points.push_back(Vector3(8.29402f, 2.56142f, -5.63524f));
  points.push_back(Vector3(3.64177f, 6.23218f, 3.75042f));
  points.push_back(Vector3(-4.33271f, -4.52742f, -7.53899f));
  points.push_back(Vector3(-6.94571f, 4.28327f, -1.4835f));
  points.push_back(Vector3(1.22959f, -0.655843f, 8.76705f));
  points.push_back(Vector3(-8.39167f, -7.47917f, 3.18033f));
  points.push_back(Vector3(-4.11603f, -0.890835f, 9.28098f));
  points.push_back(Vector3(-2.34535f, -9.41527f, 3.48491f));
  points.push_back(Vector3(2.16712f, 6.61916f, 3.82672f));
  points.push_back(Vector3(-5.66881f, 4.97971f, -9.08628f));
  TestSpherePCA(points, file);
}

void SpherePCATest12(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.27732f, -2.62062f, -9.9353f));
  points.push_back(Vector3(6.65334f, 5.13108f, -1.56285f));
  points.push_back(Vector3(1.89673f, 2.58583f, -6.28773f));
  points.push_back(Vector3(-8.43745f, 1.88635f, -3.41227f));
  points.push_back(Vector3(-6.41591f, -5.05295f, -3.16263f));
  points.push_back(Vector3(-5.88427f, 0.769372f, -6.65883f));
  points.push_back(Vector3(4.03058f, -1.26988f, 8.38557f));
  points.push_back(Vector3(5.99902f, -0.105289f, 8.57356f));
  points.push_back(Vector3(9.71068f, -0.0320444f, -7.36991f));
  points.push_back(Vector3(1.00986f, -3.23771f, -3.137f));
  points.push_back(Vector3(-5.60411f, -1.44322f, -4.99435f));
  points.push_back(Vector3(-8.76461f, -1.30528f, -0.771203f));
  points.push_back(Vector3(4.82162f, 8.67367f, -1.41942f));
  points.push_back(Vector3(4.42122f, -9.64476f, 1.74657f));
  points.push_back(Vector3(-8.69015f, 7.45598f, 6.37745f));
  points.push_back(Vector3(-8.06085f, 5.05905f, -4.08124f));
  points.push_back(Vector3(3.76995f, -4.326f, -6.65517f));
  points.push_back(Vector3(-9.08872f, 4.279f, 2.5663f));
  points.push_back(Vector3(-7.24052f, -3.66131f, 5.14512f));
  points.push_back(Vector3(4.03119f, 9.65392f, 1.36387f));
  points.push_back(Vector3(4.24055f, 0.365917f, -8.61385f));
  points.push_back(Vector3(9.14975f, 6.34388f, 4.43403f));
  points.push_back(Vector3(7.77764f, -4.98398f, 1.16794f));
  points.push_back(Vector3(-9.92554f, -1.62999f, 7.13736f));
  points.push_back(Vector3(-6.22791f, 3.36772f, -8.85189f));
  points.push_back(Vector3(-7.10196f, -2.01453f, 4.86923f));
  points.push_back(Vector3(8.32087f, 4.04767f, -6.54347f));
  points.push_back(Vector3(0.954314f, 4.79476f, 3.75774f));
  points.push_back(Vector3(-3.03262f, -7.61834f, -5.01816f));
  points.push_back(Vector3(8.72799f, 8.62545f, -1.78442f));
  points.push_back(Vector3(-6.46046f, 9.45006f, 3.56426f));
  points.push_back(Vector3(3.21635f, 5.68529f, 1.76427f));
  points.push_back(Vector3(9.7821f, 6.84072f, -7.29179f));
  points.push_back(Vector3(-7.17215f, 2.72927f, 1.96265f));
  points.push_back(Vector3(8.30012f, -5.37523f, -2.71279f));
  points.push_back(Vector3(1.44993f, -8.67122f, 8.13532f));
  points.push_back(Vector3(7.74957f, 0.713218f, -9.3115f));
  points.push_back(Vector3(-8.69991f, -3.56304f, -5.63829f));
  points.push_back(Vector3(7.83746f, -6.10523f, 1.57323f));
  points.push_back(Vector3(-4.9205f, -7.34001f, -7.55669f));
  points.push_back(Vector3(5.0383f, -7.14225f, -1.72216f));
  points.push_back(Vector3(8.29951f, -9.3646f, 2.70486f));
  points.push_back(Vector3(-9.57823f, 2.01025f, -6.51234f));
  points.push_back(Vector3(-1.04953f, -2.99173f, 7.10318f));
  points.push_back(Vector3(-8.80978f, 4.28388f, -6.46779f));
  points.push_back(Vector3(-3.59966f, -2.6487f, -8.35688f));
  points.push_back(Vector3(9.90417f, 4.01166f, 8.13593f));
  points.push_back(Vector3(7.07511f, -5.64318f, -3.90118f));
  points.push_back(Vector3(2.4424f, -8.29768f, 0.0564592f));
  points.push_back(Vector3(-6.42689f, 6.34266f, -9.08261f));
  points.push_back(Vector3(-9.98169f, -0.184637f, 2.39723f));
  points.push_back(Vector3(8.92087f, 5.98315f, -3.43059f));
  points.push_back(Vector3(-5.51622f, -3.25358f, -3.1492f));
  points.push_back(Vector3(1.124f, 8.75668f, -8.12006f));
  points.push_back(Vector3(-7.67693f, 7.90399f, 1.36143f));
  points.push_back(Vector3(-2.39051f, -2.64687f, 7.60674f));
  points.push_back(Vector3(-6.46046f, 0.22187f, -6.95181f));
  points.push_back(Vector3(6.99637f, 4.73434f, -7.81854f));
  points.push_back(Vector3(-0.357372f, 2.49245f, 4.32905f));
  points.push_back(Vector3(-0.591754f, 7.15995f, -9.33103f));
  points.push_back(Vector3(-7.3516f, 0.779748f, 9.4055f));
  points.push_back(Vector3(8.79696f, -8.16034f, -2.00964f));
  points.push_back(Vector3(6.89322f, 8.54244f, -2.73782f));
  points.push_back(Vector3(3.88104f, -5.64745f, -4.03546f));
  points.push_back(Vector3(-9.99451f, 7.3748f, -1.57628f));
  points.push_back(Vector3(0.920133f, 1.17649f, 3.13578f));
  TestSpherePCA(points, file);
}

void SpherePCATest13(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.16889f, 4.91012f, -7.63115f));
  points.push_back(Vector3(-7.33024f, 5.4387f, -9.00571f));
  points.push_back(Vector3(-1.87597f, 9.19919f, -2.98929f));
  points.push_back(Vector3(5.18296f, -8.30683f, -8.46492f));
  points.push_back(Vector3(6.5331f, -9.96643f, 7.8692f));
  points.push_back(Vector3(-2.10852f, 1.60192f, 6.04236f));
  points.push_back(Vector3(5.29527f, 1.95593f, 2.29957f));
  points.push_back(Vector3(-0.459914f, -4.74166f, 9.01547f));
  points.push_back(Vector3(5.30992f, -7.1746f, 3.80291f));
  points.push_back(Vector3(-7.87713f, 7.92901f, -5.35386f));
  TestSpherePCA(points, file);
}

void SpherePCATest14(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.60958f, -4.91806f, 2.71218f));
  points.push_back(Vector3(6.82546f, -5.87085f, 1.32725f));
  points.push_back(Vector3(-1.70751f, 4.05255f, 9.80102f));
  points.push_back(Vector3(-5.51866f, -8.35627f, 5.59374f));
  points.push_back(Vector3(0.270699f, -1.86193f, -5.58031f));
  points.push_back(Vector3(-0.803552f, 4.185f, 0.705893f));
  points.push_back(Vector3(-1.64647f, 8.76705f, 2.48817f));
  points.push_back(Vector3(-8.64864f, 9.94385f, 2.83242f));
  points.push_back(Vector3(-4.45174f, 1.13254f, 9.54222f));
  points.push_back(Vector3(9.75646f, 0.000915555f, 4.95224f));
  points.push_back(Vector3(7.99249f, 0.339671f, 3.45317f));
  points.push_back(Vector3(9.96399f, 3.92438f, 8.43013f));
  points.push_back(Vector3(5.1561f, 6.03931f, -5.15793f));
  points.push_back(Vector3(-9.84191f, 0.784631f, 3.93658f));
  points.push_back(Vector3(5.12192f, -7.55791f, -0.558184f));
  points.push_back(Vector3(-3.21451f, 4.0556f, -8.63521f));
  points.push_back(Vector3(-8.98495f, -9.47874f, -2.95022f));
  points.push_back(Vector3(-8.93735f, -7.99249f, -1.11362f));
  points.push_back(Vector3(3.12418f, 3.75103f, 7.97357f));
  points.push_back(Vector3(8.62728f, 1.81066f, 1.5006f));
  points.push_back(Vector3(0.675985f, -9.48607f, 2.6072f));
  points.push_back(Vector3(0.401929f, -1.8955f, 1.80395f));
  points.push_back(Vector3(0.0820948f, 7.73614f, -4.54085f));
  points.push_back(Vector3(-4.22834f, 7.77581f, -7.22465f));
  points.push_back(Vector3(5.24277f, 3.94513f, -5.98987f));
  points.push_back(Vector3(-8.15241f, 4.57625f, 6.64663f));
  points.push_back(Vector3(-7.25272f, 8.27815f, -2.1305f));
  points.push_back(Vector3(-2.50771f, -7.40104f, -2.15979f));
  points.push_back(Vector3(2.96487f, -2.54067f, -2.86538f));
  points.push_back(Vector3(0.343333f, -1.11545f, 4.13862f));
  points.push_back(Vector3(-0.399487f, 7.97235f, 3.30302f));
  points.push_back(Vector3(-8.17743f, 5.17808f, -8.9874f));
  points.push_back(Vector3(-2.12989f, 8.0285f, 3.90545f));
  points.push_back(Vector3(-8.41487f, 9.51781f, 2.09265f));
  points.push_back(Vector3(7.39128f, 6.01062f, 5.8562f));
  points.push_back(Vector3(-8.53572f, -7.56462f, 6.43178f));
  points.push_back(Vector3(-7.19352f, 1.3187f, 4.70077f));
  points.push_back(Vector3(2.32337f, -7.4163f, 3.10892f));
  points.push_back(Vector3(5.5327f, -7.49748f, -9.85046f));
  points.push_back(Vector3(7.70074f, -4.9144f, 8.27876f));
  points.push_back(Vector3(6.27613f, -1.3126f, -5.15122f));
  points.push_back(Vector3(-1.64464f, 5.32762f, 1.53966f));
  points.push_back(Vector3(2.72011f, -3.8786f, -4.10077f));
  points.push_back(Vector3(-5.80981f, 3.73882f, -0.0570696f));
  points.push_back(Vector3(-7.56706f, -5.30686f, 9.6118f));
  points.push_back(Vector3(7.09464f, -4.07025f, -8.42158f));
  points.push_back(Vector3(-9.85168f, -8.05841f, 1.89306f));
  points.push_back(Vector3(-7.47429f, 9.74303f, 9.01425f));
  points.push_back(Vector3(-6.37989f, -3.01492f, -7.99188f));
  points.push_back(Vector3(-8.42219f, 8.97763f, 8.36482f));
  points.push_back(Vector3(5.71276f, 6.34999f, -1.23447f));
  points.push_back(Vector3(-8.58211f, -4.8796f, -5.04013f));
  points.push_back(Vector3(4.82101f, -9.55016f, 7.87652f));
  points.push_back(Vector3(2.80374f, -4.03424f, -6.03504f));
  points.push_back(Vector3(3.55205f, 5.90014f, 9.93347f));
  points.push_back(Vector3(1.39134f, -4.01532f, -3.61675f));
  points.push_back(Vector3(-0.604572f, -2.50587f, -7.47429f));
  TestSpherePCA(points, file);
}

void SpherePCATest15(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.59777f, 1.16977f, -5.38682f));
  points.push_back(Vector3(2.03284f, -8.44722f, -7.42912f));
  points.push_back(Vector3(-3.95306f, -9.76134f, -8.82565f));
  points.push_back(Vector3(-4.28755f, -3.57952f, -7.74102f));
  points.push_back(Vector3(-1.92785f, 8.99655f, -3.91095f));
  points.push_back(Vector3(-9.63988f, 5.4564f, 2.75735f));
  points.push_back(Vector3(4.1319f, 7.04093f, 6.62282f));
  points.push_back(Vector3(4.73983f, 4.43892f, -0.727256f));
  points.push_back(Vector3(-5.2739f, -6.74123f, -1.28819f));
  points.push_back(Vector3(1.99988f, -5.21226f, -6.30848f));
  points.push_back(Vector3(-0.497147f, 1.52074f, 6.05091f));
  points.push_back(Vector3(3.90728f, -3.58013f, 9.37498f));
  points.push_back(Vector3(2.81045f, 4.2674f, 8.6169f));
  points.push_back(Vector3(-2.63466f, -8.14936f, -2.17139f));
  points.push_back(Vector3(6.70156f, 4.34309f, -5.39415f));
  points.push_back(Vector3(-3.64299f, -2.81716f, -4.63912f));
  points.push_back(Vector3(-7.83196f, -2.2074f, -7.42119f));
  points.push_back(Vector3(3.85418f, 1.28086f, -9.21751f));
  points.push_back(Vector3(0.315867f, -2.5663f, -0.572222f));
  points.push_back(Vector3(-8.08832f, -6.45802f, -2.04505f));
  points.push_back(Vector3(7.14835f, -8.75057f, -3.02103f));
  points.push_back(Vector3(-3.54228f, 5.70666f, -8.15363f));
  points.push_back(Vector3(-9.06247f, -6.38051f, -1.76061f));
  points.push_back(Vector3(-1.2009f, 6.62587f, 6.33778f));
  points.push_back(Vector3(-7.50175f, 3.5081f, -4.13739f));
  points.push_back(Vector3(-8.92514f, -6.6747f, -1.23875f));
  points.push_back(Vector3(8.34223f, 4.58235f, 2.97769f));
  points.push_back(Vector3(-9.74059f, -0.448927f, -7.36869f));
  points.push_back(Vector3(-2.57179f, 0.210883f, 2.48512f));
  points.push_back(Vector3(7.38456f, -3.23099f, 8.623f));
  TestSpherePCA(points, file);
}

void SpherePCATest16(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.30723f, -1.02512f, 6.51357f));
  points.push_back(Vector3(6.34693f, -9.30174f, 2.48695f));
  points.push_back(Vector3(-6.59841f, 9.38597f, 2.54433f));
  points.push_back(Vector3(7.85028f, 3.24076f, -3.81573f));
  points.push_back(Vector3(-9.10337f, 3.4611f, -6.33778f));
  points.push_back(Vector3(-4.61959f, -4.75692f, 4.65377f));
  points.push_back(Vector3(7.26981f, 3.35551f, 3.87371f));
  points.push_back(Vector3(4.26679f, 2.43019f, 4.35286f));
  points.push_back(Vector3(-3.98358f, -1.27842f, -2.45521f));
  points.push_back(Vector3(-9.83032f, 5.2739f, -9.76806f));
  points.push_back(Vector3(6.92129f, 5.0444f, 7.4633f));
  points.push_back(Vector3(-4.22956f, -3.62957f, -8.64559f));
  points.push_back(Vector3(6.00085f, 3.41777f, -3.34147f));
  points.push_back(Vector3(1.77648f, -2.05176f, 6.72353f));
  points.push_back(Vector3(2.93008f, -6.49892f, -6.14856f));
  points.push_back(Vector3(-2.3075f, -1.76183f, -9.84741f));
  points.push_back(Vector3(-5.51012f, 9.03989f, 9.29869f));
  points.push_back(Vector3(7.02445f, -2.33558f, 6.31336f));
  points.push_back(Vector3(-7.40593f, 5.26109f, -1.84729f));
  points.push_back(Vector3(0.541704f, -1.04038f, -9.38902f));
  points.push_back(Vector3(-6.04785f, 2.0011f, -5.23545f));
  points.push_back(Vector3(2.37709f, 1.93701f, 5.74572f));
  points.push_back(Vector3(7.82342f, 8.17805f, -3.95001f));
  points.push_back(Vector3(9.52147f, -3.84259f, -9.83215f));
  points.push_back(Vector3(-8.83114f, -5.31541f, 7.73675f));
  points.push_back(Vector3(-1.68126f, 5.74999f, -9.2407f));
  points.push_back(Vector3(9.31639f, -3.60454f, 6.39393f));
  points.push_back(Vector3(-5.75671f, -7.49565f, -3.73882f));
  points.push_back(Vector3(7.4456f, 2.30384f, -4.81613f));
  points.push_back(Vector3(6.11805f, 8.76278f, -8.01996f));
  points.push_back(Vector3(6.40248f, 8.32209f, 4.76974f));
  points.push_back(Vector3(5.51805f, -7.12821f, -7.60552f));
  points.push_back(Vector3(7.92718f, -7.54082f, -4.80819f));
  points.push_back(Vector3(-1.14658f, -0.261544f, 9.12107f));
  points.push_back(Vector3(-8.07733f, -0.511795f, -7.57439f));
  points.push_back(Vector3(6.07654f, -0.362255f, 9.70458f));
  points.push_back(Vector3(-5.61144f, 4.26862f, 7.07694f));
  points.push_back(Vector3(-1.43223f, 2.57973f, -9.61242f));
  points.push_back(Vector3(-8.47774f, -7.83441f, -5.07981f));
  points.push_back(Vector3(-7.87408f, -4.46333f, -4.08673f));
  points.push_back(Vector3(5.87817f, 3.94086f, -7.83746f));
  points.push_back(Vector3(-8.56929f, -1.66417f, 3.95123f));
  points.push_back(Vector3(-3.26334f, -6.38295f, -5.12803f));
  points.push_back(Vector3(-7.4041f, -6.57643f, 3.54289f));
  points.push_back(Vector3(1.58238f, -6.33168f, -5.39659f));
  points.push_back(Vector3(2.78787f, 7.56462f, 8.36299f));
  points.push_back(Vector3(1.2363f, 4.85031f, -6.80898f));
  points.push_back(Vector3(2.95022f, 2.32521f, 9.2523f));
  points.push_back(Vector3(-9.70031f, 0.719932f, 1.61107f));
  points.push_back(Vector3(-6.03931f, 7.41874f, -1.20701f));
  points.push_back(Vector3(9.61486f, -8.23908f, 3.15714f));
  points.push_back(Vector3(0.450758f, 9.15586f, 6.19373f));
  points.push_back(Vector3(0.886563f, 3.596f, -7.52373f));
  points.push_back(Vector3(-7.3101f, 7.83685f, -4.03363f));
  points.push_back(Vector3(-1.91076f, 0.531327f, -8.27631f));
  points.push_back(Vector3(-2.26112f, 5.47472f, 1.24363f));
  points.push_back(Vector3(-1.94617f, 2.13477f, -4.24177f));
  points.push_back(Vector3(-0.925626f, 1.20518f, -5.33799f));
  points.push_back(Vector3(-3.5081f, 9.15708f, -7.57012f));
  points.push_back(Vector3(1.61168f, -1.34678f, -1.00436f));
  points.push_back(Vector3(-2.10547f, 8.44172f, 4.00372f));
  points.push_back(Vector3(-1.09897f, 9.88098f, -1.3358f));
  points.push_back(Vector3(-9.07895f, -3.01065f, 4.28205f));
  points.push_back(Vector3(-6.13025f, -3.16507f, 4.38459f));
  points.push_back(Vector3(7.50786f, 5.50401f, 5.3856f));
  points.push_back(Vector3(6.23035f, 5.92883f, -0.968352f));
  points.push_back(Vector3(-3.56548f, 4.15754f, 0.989105f));
  points.push_back(Vector3(1.10935f, 7.05863f, 5.81896f));
  points.push_back(Vector3(3.10343f, -9.61547f, 1.63427f));
  points.push_back(Vector3(7.11478f, 7.47124f, 2.5602f));
  points.push_back(Vector3(-0.842006f, 2.7427f, 4.9266f));
  TestSpherePCA(points, file);
}

void SpherePCATest17(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.08994f, -5.95202f, -5.01328f));
  points.push_back(Vector3(7.23869f, -3.09061f, 3.72601f));
  points.push_back(Vector3(0.467849f, -5.36119f, 1.03305f));
  points.push_back(Vector3(-1.17038f, -6.59963f, -0.885342f));
  points.push_back(Vector3(3.75896f, 4.26069f, -9.93103f));
  points.push_back(Vector3(8.85495f, -0.600299f, -9.54772f));
  points.push_back(Vector3(9.06491f, 8.41243f, 3.32804f));
  points.push_back(Vector3(-5.81286f, 1.34129f, -8.97824f));
  points.push_back(Vector3(7.528f, -5.5565f, -4.83322f));
  points.push_back(Vector3(6.27003f, -9.9115f, 6.41652f));
  points.push_back(Vector3(6.56911f, -8.764f, -5.72863f));
  points.push_back(Vector3(6.81936f, -4.07697f, 3.24381f));
  points.push_back(Vector3(2.76589f, -6.39454f, 1.29307f));
  points.push_back(Vector3(2.32948f, 2.77444f, -6.77358f));
  points.push_back(Vector3(9.15586f, 1.5714f, 7.53594f));
  points.push_back(Vector3(-1.44688f, -6.86453f, -6.61306f));
  points.push_back(Vector3(9.92248f, -9.41343f, 1.36998f));
  points.push_back(Vector3(9.93957f, -6.26881f, 7.08609f));
  points.push_back(Vector3(3.13089f, 5.7622f, -1.70324f));
  points.push_back(Vector3(-8.76888f, -4.66659f, 0.745567f));
  points.push_back(Vector3(2.04627f, 3.45256f, -0.450148f));
  points.push_back(Vector3(-8.40938f, 0.628986f, 9.5465f));
  points.push_back(Vector3(-9.84497f, 9.86938f, 5.23789f));
  points.push_back(Vector3(8.211f, 4.23322f, -5.1915f));
  points.push_back(Vector3(-3.24809f, -8.88852f, -6.13819f));
  points.push_back(Vector3(-1.06784f, 1.32725f, -1.37852f));
  points.push_back(Vector3(-8.58699f, -5.3325f, 3.05338f));
  points.push_back(Vector3(4.34126f, 8.47713f, 0.0674459f));
  points.push_back(Vector3(-0.693075f, -8.46248f, -0.951262f));
  points.push_back(Vector3(-8.2519f, -5.57115f, -5.37645f));
  points.push_back(Vector3(7.5988f, 3.18461f, -2.65847f));
  points.push_back(Vector3(8.79574f, -7.35282f, -3.52153f));
  points.push_back(Vector3(-1.26194f, 0.9653f, 6.47755f));
  points.push_back(Vector3(5.7329f, -6.53066f, 5.10361f));
  points.push_back(Vector3(1.59703f, 0.148015f, 3.75164f));
  TestSpherePCA(points, file);
}

void SpherePCATest18(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.61425f, 8.6877f, 7.38639f));
  points.push_back(Vector3(4.53658f, 1.1887f, -6.60268f));
  points.push_back(Vector3(0.84933f, 4.5323f, -9.44884f));
  points.push_back(Vector3(5.7329f, -2.85745f, -7.95587f));
  points.push_back(Vector3(9.97253f, 8.20368f, 7.72942f));
  points.push_back(Vector3(5.70177f, -5.4912f, -7.20939f));
  points.push_back(Vector3(-4.80697f, -7.82586f, -9.1174f));
  points.push_back(Vector3(9.14975f, -8.8757f, 5.02182f));
  points.push_back(Vector3(3.42265f, -0.738853f, -5.33372f));
  points.push_back(Vector3(1.55248f, 5.99414f, -5.8446f));
  points.push_back(Vector3(4.85031f, -1.68615f, -1.97241f));
  points.push_back(Vector3(-1.67455f, 9.84741f, -4.15876f));
  points.push_back(Vector3(-7.2277f, -2.53578f, 6.25843f));
  points.push_back(Vector3(-6.71194f, -4.09955f, -4.85092f));
  points.push_back(Vector3(-8.4344f, 3.56731f, 2.59255f));
  points.push_back(Vector3(-5.90808f, 2.87881f, 9.61974f));
  points.push_back(Vector3(-8.78109f, 7.58782f, 5.08774f));
  points.push_back(Vector3(-7.55303f, 1.75329f, -3.21879f));
  points.push_back(Vector3(1.56102f, -8.4753f, -2.96854f));
  points.push_back(Vector3(-0.615558f, -9.49461f, 8.22077f));
  points.push_back(Vector3(-5.00595f, 5.45518f, 0.113834f));
  points.push_back(Vector3(-7.15445f, -9.97742f, 5.88f));
  points.push_back(Vector3(5.62914f, 5.97278f, -8.49055f));
  points.push_back(Vector3(9.17051f, 1.44566f, -5.3795f));
  points.push_back(Vector3(-2.22327f, -7.78985f, -8.62362f));
  points.push_back(Vector3(-6.03442f, -6.53371f, 0.569781f));
  points.push_back(Vector3(-9.7943f, -4.83261f, 8.54427f));
  points.push_back(Vector3(4.0141f, -0.336619f, 9.96704f));
  points.push_back(Vector3(7.01651f, 2.83547f, -8.07428f));
  points.push_back(Vector3(-7.34123f, 3.50871f, -9.36949f));
  points.push_back(Vector3(3.79559f, -9.92431f, -4.185f));
  points.push_back(Vector3(9.14365f, -5.34227f, 0.202948f));
  points.push_back(Vector3(-8.44844f, 0.808435f, -8.64193f));
  points.push_back(Vector3(-9.94873f, -2.96426f, -5.38621f));
  points.push_back(Vector3(-6.88345f, -6.58193f, 6.51723f));
  points.push_back(Vector3(-9.09543f, -0.393384f, -0.856044f));
  points.push_back(Vector3(-0.115055f, 0.76632f, -4.67818f));
  points.push_back(Vector3(-9.48485f, 6.97867f, 5.59069f));
  points.push_back(Vector3(-6.64174f, 6.41835f, 6.61977f));
  points.push_back(Vector3(-7.52678f, -8.26472f, 4.87289f));
  points.push_back(Vector3(-1.49693f, -8.94833f, 5.38072f));
  points.push_back(Vector3(-0.415967f, -3.94024f, 7.41264f));
  points.push_back(Vector3(6.9042f, -9.88464f, -1.57994f));
  points.push_back(Vector3(0.694906f, -0.715049f, -3.67351f));
  points.push_back(Vector3(9.60875f, -1.98218f, -6.40004f));
  points.push_back(Vector3(-2.3075f, 3.0839f, -6.65273f));
  points.push_back(Vector3(-5.08591f, 8.13044f, -0.237129f));
  points.push_back(Vector3(5.93738f, 9.46104f, 6.9573f));
  points.push_back(Vector3(-2.36122f, 3.96344f, -3.76385f));
  points.push_back(Vector3(-3.39091f, 1.13254f, 8.9819f));
  points.push_back(Vector3(-3.86883f, 7.74224f, 8.28913f));
  points.push_back(Vector3(6.82546f, 1.73132f, 2.33619f));
  points.push_back(Vector3(3.9555f, 0.579547f, 0.901212f));
  points.push_back(Vector3(-4.55977f, -2.94046f, -8.75362f));
  points.push_back(Vector3(-2.71462f, 6.16871f, -9.88891f));
  points.push_back(Vector3(1.73193f, 0.84994f, -1.4182f));
  points.push_back(Vector3(-0.936003f, 9.77722f, -8.41914f));
  points.push_back(Vector3(3.07779f, -8.36055f, 5.4619f));
  points.push_back(Vector3(9.48424f, -1.0886f, 2.27027f));
  points.push_back(Vector3(-1.09775f, -6.0155f, 8.47652f));
  points.push_back(Vector3(-8.24702f, -6.23035f, 5.87939f));
  points.push_back(Vector3(3.9671f, 9.76623f, -7.74834f));
  points.push_back(Vector3(-5.05905f, -2.95145f, 8.35505f));
  points.push_back(Vector3(7.08792f, 6.3213f, -7.84051f));
  points.push_back(Vector3(4.52437f, 6.29688f, 8.86166f));
  points.push_back(Vector3(-5.92517f, 0.0546281f, 6.22913f));
  points.push_back(Vector3(-1.55492f, -9.65148f, -3.3311f));
  points.push_back(Vector3(-1.44261f, -0.48555f, -0.735801f));
  points.push_back(Vector3(-5.31907f, 6.845f, -2.12378f));
  points.push_back(Vector3(3.92193f, -6.76077f, -1.69652f));
  points.push_back(Vector3(7.91864f, 3.0784f, 0.301828f));
  points.push_back(Vector3(6.37562f, 7.37236f, -0.627155f));
  points.push_back(Vector3(-9.54161f, 9.7589f, 2.7311f));
  points.push_back(Vector3(-4.43892f, -1.26438f, 3.50383f));
  points.push_back(Vector3(-1.53722f, -0.621052f, 8.49666f));
  points.push_back(Vector3(7.80389f, -6.8627f, 7.66839f));
  points.push_back(Vector3(1.57018f, -9.89196f, -4.41023f));
  points.push_back(Vector3(-9.61974f, 8.73592f, 6.17908f));
  points.push_back(Vector3(4.24665f, 5.09445f, 8.67672f));
  points.push_back(Vector3(-4.28327f, 2.74758f, 2.65786f));
  points.push_back(Vector3(-6.46046f, -1.8131f, -5.02426f));
  points.push_back(Vector3(-5.40086f, 9.22483f, 4.45906f));
  points.push_back(Vector3(-7.37419f, 2.90933f, 8.51619f));
  points.push_back(Vector3(9.89807f, -1.55553f, 2.83975f));
  points.push_back(Vector3(5.20005f, 4.5201f, -1.75146f));
  points.push_back(Vector3(-0.669271f, 7.28019f, 5.85009f));
  points.push_back(Vector3(4.86618f, 7.69524f, -2.58217f));
  points.push_back(Vector3(-9.90722f, 7.11356f, -0.809046f));
  points.push_back(Vector3(-1.27293f, 7.25455f, 6.93472f));
  points.push_back(Vector3(2.0951f, -5.95874f, -4.16791f));
  points.push_back(Vector3(-2.1659f, -1.08615f, -3.20963f));
  points.push_back(Vector3(2.69814f, 7.71966f, -9.65087f));
  points.push_back(Vector3(1.59337f, 3.80718f, -0.71749f));
  points.push_back(Vector3(6.65273f, -7.28813f, -8.65474f));
  points.push_back(Vector3(-8.94772f, -3.02408f, -1.5244f));
  points.push_back(Vector3(2.9545f, -7.77398f, -2.62978f));
  points.push_back(Vector3(9.80773f, -1.35655f, -5.57787f));
  TestSpherePCA(points, file);
}

void SpherePCATest19(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.20673f, 0.263985f, 5.20432f));
  points.push_back(Vector3(-6.38478f, 5.82385f, 5.45762f));
  points.push_back(Vector3(2.0304f, 3.14554f, 5.53148f));
  points.push_back(Vector3(-3.52031f, -6.59169f, -8.9758f));
  points.push_back(Vector3(9.79553f, -1.84912f, -9.48668f));
  points.push_back(Vector3(-3.17301f, -9.39818f, -7.62932f));
  points.push_back(Vector3(4.06476f, 9.14792f, 9.9176f));
  points.push_back(Vector3(0.0125126f, 1.13681f, 7.669f));
  points.push_back(Vector3(-4.03668f, 4.58052f, -3.30607f));
  points.push_back(Vector3(1.05991f, -7.95648f, -1.75268f));
  points.push_back(Vector3(-2.01819f, 6.31031f, 1.02451f));
  points.push_back(Vector3(0.89816f, 9.88403f, 5.14206f));
  points.push_back(Vector3(-1.3889f, -7.19108f, -0.606403f));
  points.push_back(Vector3(3.11014f, -1.46458f, -8.41487f));
  points.push_back(Vector3(7.30155f, 7.03177f, 2.78237f));
  points.push_back(Vector3(-6.02405f, 5.24155f, 6.34999f));
  points.push_back(Vector3(-0.0186163f, -6.79495f, 6.2096f));
  points.push_back(Vector3(-5.9209f, 5.08591f, -7.57195f));
  points.push_back(Vector3(6.68691f, -7.06351f, 3.46965f));
  points.push_back(Vector3(4.95102f, 8.48506f, 2.29957f));
  points.push_back(Vector3(-7.44377f, 1.82775f, -1.55187f));
  points.push_back(Vector3(-8.39473f, 4.12214f, -2.52846f));
  points.push_back(Vector3(-5.87146f, -4.17585f, 0.375683f));
  points.push_back(Vector3(-6.10584f, -6.43422f, -1.37669f));
  points.push_back(Vector3(6.96524f, -5.79638f, -2.71157f));
  points.push_back(Vector3(-1.14414f, -3.98724f, 5.98682f));
  points.push_back(Vector3(0.671102f, 5.99292f, 2.32093f));
  points.push_back(Vector3(5.19639f, 4.76791f, 0.122379f));
  points.push_back(Vector3(5.86535f, 1.1771f, 3.74615f));
  points.push_back(Vector3(2.15369f, 3.69793f, -6.55873f));
  points.push_back(Vector3(-2.95389f, 9.82788f, 4.39863f));
  points.push_back(Vector3(0.83346f, 4.39436f, 5.18662f));
  points.push_back(Vector3(8.1811f, -6.29994f, -8.20856f));
  points.push_back(Vector3(9.1052f, 5.79028f, 9.69359f));
  points.push_back(Vector3(6.60451f, 8.51802f, -0.679037f));
  points.push_back(Vector3(3.8316f, 9.87976f, -8.0285f));
  points.push_back(Vector3(-1.93518f, -6.55568f, 4.01471f));
  points.push_back(Vector3(-0.880459f, -7.47124f, 8.62239f));
  points.push_back(Vector3(3.90423f, -0.217597f, -0.260323f));
  points.push_back(Vector3(8.80306f, 9.68261f, 8.21528f));
  points.push_back(Vector3(2.96304f, -3.88775f, 9.1998f));
  points.push_back(Vector3(8.18049f, -1.03793f, 6.09058f));
  points.push_back(Vector3(8.34529f, -5.51927f, -4.07941f));
  points.push_back(Vector3(6.42445f, -2.65053f, 6.55141f));
  points.push_back(Vector3(-4.84787f, 4.31318f, -8.81283f));
  points.push_back(Vector3(-0.248726f, -0.270699f, -6.90847f));
  points.push_back(Vector3(-7.7929f, 9.97742f, 3.1431f));
  points.push_back(Vector3(-1.26194f, -6.89016f, -2.78054f));
  points.push_back(Vector3(1.13681f, -3.1138f, 8.40938f));
  points.push_back(Vector3(3.68877f, -0.179754f, 0.974456f));
  points.push_back(Vector3(-7.51091f, -7.85882f, 3.20231f));
  points.push_back(Vector3(-7.85211f, -7.60857f, 0.0192267f));
  points.push_back(Vector3(-6.73757f, -8.45149f, -6.5508f));
  points.push_back(Vector3(-4.96017f, 5.68651f, 5.61022f));
  points.push_back(Vector3(5.90503f, 7.85638f, -5.61449f));
  points.push_back(Vector3(4.98459f, -9.37742f, 7.40715f));
  points.push_back(Vector3(7.94122f, 7.73064f, -7.9693f));
  points.push_back(Vector3(-5.40452f, -8.92331f, 7.38029f));
  points.push_back(Vector3(-3.58257f, -0.0930815f, -5.6975f));
  points.push_back(Vector3(-3.48308f, 3.69793f, 0.596637f));
  points.push_back(Vector3(4.84237f, 6.4861f, -9.21506f));
  points.push_back(Vector3(3.0784f, 1.98035f, -6.14246f));
  points.push_back(Vector3(-5.30686f, 6.13025f, 9.94324f));
  points.push_back(Vector3(-5.71642f, -6.51784f, -9.45921f));
  points.push_back(Vector3(-8.55281f, -5.65172f, -6.81387f));
  points.push_back(Vector3(-9.16379f, -4.96323f, 2.06519f));
  points.push_back(Vector3(-1.16001f, -5.30686f, -0.66805f));
  points.push_back(Vector3(6.62038f, -2.26478f, 5.67675f));
  points.push_back(Vector3(7.32048f, 8.00836f, -6.97439f));
  points.push_back(Vector3(-5.0792f, -6.19251f, 7.16788f));
  points.push_back(Vector3(-4.19111f, -2.61513f, -0.83346f));
  points.push_back(Vector3(-2.74453f, -6.18763f, -1.70324f));
  points.push_back(Vector3(-7.51518f, 6.67715f, 4.80148f));
  points.push_back(Vector3(5.42406f, -2.7311f, -5.50462f));
  points.push_back(Vector3(-7.1569f, -7.21549f, 2.79885f));
  points.push_back(Vector3(8.85556f, -4.4554f, -8.56563f));
  points.push_back(Vector3(-5.72069f, 9.03561f, 0.394604f));
  points.push_back(Vector3(-7.0574f, 4.90341f, 1.75817f));
  points.push_back(Vector3(-1.67211f, 1.19297f, 2.95145f));
  points.push_back(Vector3(-7.61589f, -7.35466f, -1.87353f));
  points.push_back(Vector3(-2.93985f, 1.61596f, -8.59066f));
  points.push_back(Vector3(-0.940275f, -7.22282f, 8.3282f));
  points.push_back(Vector3(1.44017f, 3.19254f, 3.52947f));
  points.push_back(Vector3(9.1644f, -7.96319f, -5.06272f));
  points.push_back(Vector3(9.13205f, -4.49141f, 6.55629f));
  TestSpherePCA(points, file);
}

void SpherePCATest20(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.17072f, -1.65075f, 1.4658f));
  points.push_back(Vector3(-2.01697f, -0.857265f, 8.59798f));
  points.push_back(Vector3(-3.77544f, -9.01486f, 6.9335f));
  points.push_back(Vector3(8.93551f, -8.2165f, -8.49178f));
  points.push_back(Vector3(-6.97989f, -0.0656148f, -5.67614f));
  points.push_back(Vector3(7.30949f, 5.23362f, -5.20371f));
  points.push_back(Vector3(4.17768f, 7.59758f, -4.66842f));
  points.push_back(Vector3(-9.90905f, 6.09424f, 4.73373f));
  points.push_back(Vector3(-3.60332f, 6.07593f, -9.20347f));
  points.push_back(Vector3(2.06702f, 1.82958f, 2.20435f));
  points.push_back(Vector3(-9.04904f, -1.47435f, -5.92517f));
  points.push_back(Vector3(3.45683f, 4.67269f, -9.40916f));
  points.push_back(Vector3(1.19602f, 3.11563f, 9.70031f));
  points.push_back(Vector3(2.28431f, 9.42442f, -2.38685f));
  points.push_back(Vector3(1.35716f, 3.77728f, 9.81323f));
  points.push_back(Vector3(-0.927458f, -2.57363f, 9.27f));
  points.push_back(Vector3(7.11722f, 1.16733f, 3.06558f));
  TestSpherePCA(points, file);
}

void SpherePCATest21(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.68343f, -7.64946f, -0.714438f));
  points.push_back(Vector3(3.40312f, 1.19541f, -7.35038f));
  points.push_back(Vector3(8.0047f, -9.8413f, -3.08084f));
  points.push_back(Vector3(-6.67715f, -5.01572f, 4.59944f));
  points.push_back(Vector3(0.308542f, 4.47188f, -6.74612f));
  points.push_back(Vector3(7.65069f, -1.44627f, 4.60921f));
  points.push_back(Vector3(-2.9899f, -2.49062f, 4.69222f));
  points.push_back(Vector3(1.74596f, -9.13694f, 4.42183f));
  points.push_back(Vector3(5.76952f, -8.60836f, 8.33125f));
  points.push_back(Vector3(-2.31483f, -5.67003f, 4.59578f));
  points.push_back(Vector3(0.22187f, 3.00882f, 8.84884f));
  points.push_back(Vector3(9.14914f, 3.5258f, -1.66112f));
  points.push_back(Vector3(-1.26926f, -2.92337f, -8.56624f));
  points.push_back(Vector3(6.30116f, -0.48677f, 1.54515f));
  points.push_back(Vector3(-4.88144f, -8.64559f, -6.12049f));
  points.push_back(Vector3(-3.68999f, -2.10242f, -0.191961f));
  points.push_back(Vector3(4.1258f, 0.821863f, -7.59819f));
  points.push_back(Vector3(-9.19309f, -8.30866f, 4.12885f));
  points.push_back(Vector3(1.38218f, -3.57524f, 9.39268f));
  points.push_back(Vector3(-9.31333f, -7.2338f, -1.02206f));
  points.push_back(Vector3(1.96509f, 1.21433f, 9.60692f));
  points.push_back(Vector3(3.69671f, 0.567339f, -8.29402f));
  points.push_back(Vector3(5.52904f, -5.13169f, 6.83645f));
  points.push_back(Vector3(3.74004f, 6.31886f, -6.41469f));
  points.push_back(Vector3(-7.84539f, 9.19492f, 8.26167f));
  points.push_back(Vector3(5.21775f, 7.72881f, 2.50954f));
  points.push_back(Vector3(-6.12964f, -5.26414f, -8.88729f));
  points.push_back(Vector3(3.60637f, -4.38215f, -1.98401f));
  points.push_back(Vector3(4.81002f, 4.60005f, 8.30012f));
  points.push_back(Vector3(7.23991f, -7.44255f, 3.42509f));
  points.push_back(Vector3(0.662557f, -1.47679f, 8.94345f));
  points.push_back(Vector3(-2.50099f, 6.90542f, -0.0985748f));
  TestSpherePCA(points, file);
}

void SpherePCATest22(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.64415f, -9.7174f, 3.83465f));
  points.push_back(Vector3(4.23017f, 6.75649f, -2.55287f));
  points.push_back(Vector3(-7.64641f, -8.66817f, -0.616169f));
  points.push_back(Vector3(2.02002f, -1.50304f, -8.35933f));
  points.push_back(Vector3(7.28507f, -3.28288f, 4.55367f));
  points.push_back(Vector3(6.96707f, 8.98312f, 4.1026f));
  points.push_back(Vector3(-1.56774f, -3.20048f, 6.37074f));
  points.push_back(Vector3(7.41752f, -6.34083f, 0.801111f));
  points.push_back(Vector3(9.72838f, -1.98523f, -0.41963f));
  points.push_back(Vector3(-9.28709f, -5.49425f, 7.52495f));
  points.push_back(Vector3(-2.62429f, 4.80148f, -9.51476f));
  points.push_back(Vector3(2.85989f, 7.52373f, 7.96686f));
  points.push_back(Vector3(-6.04907f, -7.79107f, 4.33638f));
  points.push_back(Vector3(-9.35728f, 3.49345f, 0.126041f));
  points.push_back(Vector3(3.18644f, 9.61242f, -9.93347f));
  points.push_back(Vector3(-0.154729f, -3.94208f, 3.85296f));
  points.push_back(Vector3(1.93945f, 0.952483f, 1.04099f));
  points.push_back(Vector3(8.56014f, -4.8619f, 0.528275f));
  points.push_back(Vector3(1.39561f, 0.447096f, -9.96094f));
  points.push_back(Vector3(-4.10504f, -0.188299f, -2.53212f));
  points.push_back(Vector3(4.70626f, 7.09037f, 3.49223f));
  points.push_back(Vector3(6.07349f, 5.61571f, 7.19169f));
  points.push_back(Vector3(5.67553f, -0.86581f, 6.39271f));
  points.push_back(Vector3(8.6169f, -0.76632f, -2.34779f));
  points.push_back(Vector3(-4.8265f, 3.52824f, 7.96503f));
  points.push_back(Vector3(-0.614338f, 1.23142f, 6.46046f));
  points.push_back(Vector3(-8.79818f, 7.51579f, 1.48106f));
  points.push_back(Vector3(-2.69692f, 7.37358f, 2.47108f));
  points.push_back(Vector3(-2.50587f, -7.24235f, -7.87225f));
  points.push_back(Vector3(-9.95117f, 3.64666f, 4.39558f));
  points.push_back(Vector3(-3.34147f, 8.94833f, -2.97891f));
  points.push_back(Vector3(-8.55586f, 1.84484f, -9.16684f));
  points.push_back(Vector3(9.69726f, 6.4275f, -6.15833f));
  points.push_back(Vector3(-3.92254f, -5.95508f, 1.77221f));
  points.push_back(Vector3(-3.26029f, -1.7185f, 1.65563f));
  TestSpherePCA(points, file);
}

void SpherePCATest23(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.04172f, -8.50459f, -3.3311f));
  points.push_back(Vector3(-0.27131f, 8.00226f, 1.24607f));
  points.push_back(Vector3(6.06067f, -8.24152f, 2.902f));
  points.push_back(Vector3(8.7701f, -8.76644f, -0.240181f));
  points.push_back(Vector3(8.05902f, 6.63869f, -4.85031f));
  points.push_back(Vector3(2.83059f, -7.75933f, 0.35371f));
  points.push_back(Vector3(-4.11847f, -6.98843f, -9.45311f));
  points.push_back(Vector3(0.959197f, 1.28513f, -6.22547f));
  points.push_back(Vector3(1.43834f, -3.56243f, 7.304f));
  points.push_back(Vector3(7.61284f, -3.53008f, 5.02609f));
  points.push_back(Vector3(-9.47203f, 0.856655f, -1.66051f));
  points.push_back(Vector3(3.56426f, -4.35896f, 3.8432f));
  points.push_back(Vector3(-7.12088f, -5.98621f, 8.36848f));
  points.push_back(Vector3(-5.4387f, -9.37437f, 1.26438f));
  points.push_back(Vector3(-5.43687f, 3.89874f, 3.57646f));
  points.push_back(Vector3(5.34837f, -3.95123f, -9.38719f));
  points.push_back(Vector3(-7.23075f, 1.20273f, 3.84442f));
  points.push_back(Vector3(4.15876f, -7.68548f, 9.09116f));
  points.push_back(Vector3(-0.604572f, 3.48735f, 5.48448f));
  points.push_back(Vector3(8.81466f, 4.44319f, 9.94995f));
  points.push_back(Vector3(-1.49266f, 0.835902f, -9.85534f));
  points.push_back(Vector3(2.42653f, 7.68059f, 7.44804f));
  points.push_back(Vector3(6.08203f, -7.18986f, 5.42589f));
  points.push_back(Vector3(-2.90384f, -0.227363f, 9.95911f));
  points.push_back(Vector3(0.917081f, 5.00412f, 7.32109f));
  points.push_back(Vector3(-9.74059f, 0.903653f, -6.80349f));
  points.push_back(Vector3(5.82018f, 2.91116f, 6.35426f));
  points.push_back(Vector3(3.0784f, 8.14081f, 8.06146f));
  points.push_back(Vector3(-9.45738f, 3.66314f, -9.27488f));
  points.push_back(Vector3(-4.07636f, -5.79089f, 8.60103f));
  points.push_back(Vector3(-4.98215f, 4.98886f, 3.41227f));
  points.push_back(Vector3(5.11399f, -6.85171f, 7.46941f));
  points.push_back(Vector3(5.70544f, 7.97601f, -1.49693f));
  points.push_back(Vector3(0.0918607f, -9.74548f, 1.65014f));
  points.push_back(Vector3(-8.19941f, 8.36665f, 7.52983f));
  points.push_back(Vector3(3.72356f, 3.30119f, 2.46071f));
  points.push_back(Vector3(-5.81286f, -7.25272f, 1.77343f));
  points.push_back(Vector3(-7.20511f, -1.2186f, -6.37806f));
  points.push_back(Vector3(-9.15403f, 3.49406f, -6.09241f));
  points.push_back(Vector3(3.64422f, 3.36528f, -8.18781f));
  points.push_back(Vector3(-9.57091f, -7.65618f, -5.61632f));
  points.push_back(Vector3(-8.33796f, -0.607624f, -1.7655f));
  points.push_back(Vector3(3.41044f, 9.36888f, -2.73782f));
  points.push_back(Vector3(-4.39802f, 6.54347f, 9.77538f));
  points.push_back(Vector3(0.105899f, -5.54247f, 9.10703f));
  points.push_back(Vector3(0.824305f, 2.34352f, 6.78457f));
  points.push_back(Vector3(-0.577105f, -5.25498f, 5.69811f));
  points.push_back(Vector3(2.18909f, -5.65661f, -6.0387f));
  points.push_back(Vector3(-6.03809f, 6.10096f, -2.83792f));
  points.push_back(Vector3(-0.144353f, -0.788903f, 3.63018f));
  points.push_back(Vector3(-1.46825f, -7.49504f, -4.91195f));
  points.push_back(Vector3(2.21839f, 1.02206f, -0.475173f));
  points.push_back(Vector3(2.78176f, -3.79986f, -2.07129f));
  TestSpherePCA(points, file);
}

void SpherePCATest24(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.29319f, 4.89669f, 2.83792f));
  points.push_back(Vector3(9.15647f, -5.23301f, -0.736412f));
  points.push_back(Vector3(6.69973f, -3.12113f, -6.91092f));
  points.push_back(Vector3(1.583f, 2.60842f, -3.62774f));
  points.push_back(Vector3(5.48448f, -5.84521f, 8.47774f));
  points.push_back(Vector3(9.45738f, 9.82238f, 3.37504f));
  points.push_back(Vector3(-4.9089f, 3.86395f, -7.35466f));
  points.push_back(Vector3(-9.59166f, 6.58071f, -5.67797f));
  points.push_back(Vector3(-1.59276f, 5.97034f, 8.58516f));
  points.push_back(Vector3(0.561846f, 7.96869f, -2.67373f));
  points.push_back(Vector3(-0.257271f, -4.65011f, 6.98355f));
  points.push_back(Vector3(5.65416f, -7.87835f, 5.69628f));
  points.push_back(Vector3(-5.21653f, 1.87048f, -3.77789f));
  points.push_back(Vector3(0.343944f, -5.59496f, -0.932341f));
  points.push_back(Vector3(-3.82611f, 6.6802f, -5.63646f));
  points.push_back(Vector3(9.67528f, -9.24558f, -9.8236f));
  points.push_back(Vector3(2.82083f, 5.46922f, 5.85376f));
  points.push_back(Vector3(-0.494705f, 4.75143f, 8.56502f));
  points.push_back(Vector3(-5.99536f, -9.56969f, 2.74941f));
  points.push_back(Vector3(-8.49666f, 6.61733f, -8.37092f));
  points.push_back(Vector3(-7.91314f, -5.42894f, -5.47838f));
  points.push_back(Vector3(5.53758f, -9.34019f, -1.53356f));
  points.push_back(Vector3(2.46864f, 7.3693f, -5.562f));
  points.push_back(Vector3(0.445875f, -6.81021f, -4.57991f));
  points.push_back(Vector3(-0.949431f, -7.93023f, 6.6625f));
  points.push_back(Vector3(-4.21125f, -1.87353f, 6.67776f));
  points.push_back(Vector3(-9.81567f, -5.36668f, -0.976897f));
  points.push_back(Vector3(-5.2916f, 4.90707f, 1.09348f));
  points.push_back(Vector3(6.55568f, -4.99313f, 4.42305f));
  points.push_back(Vector3(-5.9978f, -4.63485f, 0.223701f));
  points.push_back(Vector3(-8.93368f, -4.48531f, 1.54027f));
  points.push_back(Vector3(4.4438f, 5.51866f, 4.7673f));
  points.push_back(Vector3(-5.87451f, -8.82992f, -4.63363f));
  points.push_back(Vector3(-5.2916f, -2.86599f, 9.78088f));
  points.push_back(Vector3(-1.76794f, 5.21836f, 2.69448f));
  points.push_back(Vector3(-1.41636f, 5.09384f, -4.3614f));
  points.push_back(Vector3(5.95752f, 2.60964f, -0.571001f));
  points.push_back(Vector3(9.84313f, 2.38014f, 4.24238f));
  points.push_back(Vector3(-2.19703f, -3.02713f, -1.97485f));
  points.push_back(Vector3(-5.16221f, 7.528f, 0.961028f));
  points.push_back(Vector3(-6.51418f, 5.43565f, 7.01651f));
  points.push_back(Vector3(1.96936f, -7.92413f, 4.70321f));
  points.push_back(Vector3(4.45662f, 2.86721f, -7.10746f));
  points.push_back(Vector3(2.22816f, 0.430006f, 3.87066f));
  points.push_back(Vector3(-0.600299f, 5.28916f, -9.89624f));
  points.push_back(Vector3(-1.52623f, 4.1319f, 7.22709f));
  points.push_back(Vector3(-9.38597f, -6.20777f, 0.165105f));
  points.push_back(Vector3(-4.45845f, 9.27366f, 8.44783f));
  points.push_back(Vector3(-0.0332652f, -2.15491f, -1.78137f));
  points.push_back(Vector3(-8.88668f, -7.75018f, -6.2157f));
  points.push_back(Vector3(-8.8641f, -7.14713f, -2.5309f));
  points.push_back(Vector3(-8.93002f, 7.6751f, -3.6314f));
  points.push_back(Vector3(-7.43461f, -6.26759f, 1.18503f));
  points.push_back(Vector3(-4.70748f, 5.59923f, 0.726035f));
  points.push_back(Vector3(-4.60128f, 6.63869f, -9.11252f));
  points.push_back(Vector3(3.01187f, 5.68468f, 9.5465f));
  points.push_back(Vector3(5.28123f, -2.75796f, -9.50621f));
  points.push_back(Vector3(-6.5624f, -3.81451f, 4.17096f));
  points.push_back(Vector3(8.62911f, 8.71334f, 1.98279f));
  points.push_back(Vector3(9.91699f, 7.95648f, 3.11014f));
  points.push_back(Vector3(-4.55367f, -1.8009f, 1.19114f));
  points.push_back(Vector3(-3.14798f, -9.2053f, -8.31721f));
  points.push_back(Vector3(-5.62548f, -0.285958f, 5.00595f));
  points.push_back(Vector3(-9.4586f, 3.67718f, 3.12174f));
  points.push_back(Vector3(-5.99353f, 6.37684f, 6.13697f));
  points.push_back(Vector3(-9.58129f, -5.62243f, -0.386059f));
  points.push_back(Vector3(-0.0204474f, -1.57811f, -8.81466f));
  points.push_back(Vector3(-1.50182f, 0.128483f, -6.61061f));
  points.push_back(Vector3(2.57729f, 7.81854f, 4.5323f));
  points.push_back(Vector3(-5.468f, 1.75451f, 5.48082f));
  points.push_back(Vector3(-3.05826f, 8.18232f, 6.95486f));
  points.push_back(Vector3(-4.93942f, 1.75878f, 5.75671f));
  points.push_back(Vector3(0.0704978f, -7.54509f, -3.4257f));
  points.push_back(Vector3(8.63216f, 4.5201f, -5.23667f));
  points.push_back(Vector3(-1.96875f, -6.94082f, 3.00455f));
  points.push_back(Vector3(9.5172f, 6.6332f, -1.75634f));
  points.push_back(Vector3(5.77197f, -7.61528f, 6.11927f));
  points.push_back(Vector3(-9.29014f, -9.98535f, -8.51253f));
  points.push_back(Vector3(3.03873f, 8.08588f, 1.02512f));
  points.push_back(Vector3(6.42994f, 2.14393f, -4.5793f));
  points.push_back(Vector3(-4.26923f, 0.187078f, 3.22794f));
  points.push_back(Vector3(-2.82571f, -0.758385f, -8.02973f));
  points.push_back(Vector3(-4.9675f, -2.01209f, -4.97299f));
  points.push_back(Vector3(9.19248f, -8.14447f, -4.62813f));
  points.push_back(Vector3(-0.645466f, 6.65761f, 8.47163f));
  points.push_back(Vector3(-2.56569f, 0.603961f, -8.89218f));
  points.push_back(Vector3(-0.99826f, 8.77133f, -5.90136f));
  points.push_back(Vector3(-0.760216f, -4.64339f, -2.35267f));
  TestSpherePCA(points, file);
}

void SpherePCATest25(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.26228f, -3.42448f, -0.0918607f));
  points.push_back(Vector3(2.37709f, 9.54955f, -1.64953f));
  points.push_back(Vector3(8.83908f, -6.82791f, 3.35124f));
  points.push_back(Vector3(1.54942f, -4.06354f, -9.72838f));
  points.push_back(Vector3(-8.55525f, -4.62325f, -8.74691f));
  points.push_back(Vector3(0.522172f, -7.71294f, -2.51381f));
  points.push_back(Vector3(-7.22221f, 7.11478f, -5.17197f));
  points.push_back(Vector3(-4.55489f, 4.53536f, 7.79107f));
  points.push_back(Vector3(6.40126f, -4.41267f, -7.46574f));
  points.push_back(Vector3(-0.506912f, 1.2656f, 9.86999f));
  points.push_back(Vector3(6.69607f, 5.08713f, 2.94534f));
  points.push_back(Vector3(1.36265f, 6.87979f, 7.77581f));
  points.push_back(Vector3(3.4788f, -1.00009f, 1.13865f));
  points.push_back(Vector3(8.83969f, -7.29179f, 2.20801f));
  points.push_back(Vector3(-5.67431f, -5.68407f, 0.735191f));
  points.push_back(Vector3(6.04907f, -4.82406f, 6.25355f));
  points.push_back(Vector3(6.65944f, 7.48711f, -0.0106815f));
  points.push_back(Vector3(4.15632f, -3.26151f, 3.42265f));
  points.push_back(Vector3(1.04404f, -7.74285f, 5.08408f));
  TestSpherePCA(points, file);
}

void SpherePCATest26(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.61608f, 2.12745f, -3.51726f));
  points.push_back(Vector3(9.84924f, -5.10666f, -8.9996f));
  points.push_back(Vector3(-1.05014f, 6.31886f, 0.473952f));
  points.push_back(Vector3(9.48546f, -2.76711f, -7.98273f));
  points.push_back(Vector3(-3.54045f, -1.8955f, -5.81591f));
  points.push_back(Vector3(-4.88083f, -1.85949f, 1.54454f));
  points.push_back(Vector3(-5.92456f, -2.18421f, 3.91522f));
  points.push_back(Vector3(-0.299387f, 1.9602f, 0.740074f));
  points.push_back(Vector3(-5.49058f, -7.48894f, 1.66051f));
  points.push_back(Vector3(-8.50398f, -0.105289f, 1.71361f));
  points.push_back(Vector3(3.01859f, 5.41307f, 9.52513f));
  points.push_back(Vector3(2.62795f, -0.974456f, -3.35063f));
  points.push_back(Vector3(-8.48262f, 9.11435f, 3.46355f));
  points.push_back(Vector3(7.77886f, -3.59355f, 4.81491f));
  points.push_back(Vector3(9.67406f, -4.02997f, -8.90988f));
  points.push_back(Vector3(3.80902f, 1.09104f, 3.90179f));
  points.push_back(Vector3(-1.39988f, -6.18824f, -5.84887f));
  points.push_back(Vector3(-6.47877f, 9.31272f, 5.03098f));
  points.push_back(Vector3(4.21674f, -9.21384f, -0.76754f));
  points.push_back(Vector3(-2.18177f, -4.87411f, -0.496536f));
  points.push_back(Vector3(0.975066f, -7.7691f, 3.00577f));
  points.push_back(Vector3(-7.60552f, 3.06253f, -7.36625f));
  points.push_back(Vector3(-5.03464f, -2.48329f, 3.16874f));
  points.push_back(Vector3(-9.53368f, -6.70156f, 8.15668f));
  points.push_back(Vector3(-9.06369f, -1.70141f, 5.81591f));
  points.push_back(Vector3(-5.67309f, 5.98437f, -1.70446f));
  points.push_back(Vector3(-7.06107f, 3.99091f, 6.74001f));
  points.push_back(Vector3(-1.76672f, -7.82281f, -7.86615f));
  points.push_back(Vector3(-4.2851f, -1.8363f, -9.3939f));
  points.push_back(Vector3(5.81835f, -3.14859f, 0.88168f));
  points.push_back(Vector3(5.98682f, 3.33415f, -9.43785f));
  points.push_back(Vector3(9.29685f, 7.13675f, -4.42183f));
  points.push_back(Vector3(2.0951f, 3.84991f, -5.80981f));
  points.push_back(Vector3(7.7868f, 8.83663f, 3.09122f));
  points.push_back(Vector3(9.3585f, 9.74242f, 2.19275f));
  points.push_back(Vector3(0.547197f, -1.17283f, -7.41813f));
  points.push_back(Vector3(9.66124f, 1.00375f, -3.58562f));
  points.push_back(Vector3(0.333567f, -7.27897f, 9.32615f));
  points.push_back(Vector3(9.60448f, -5.6975f, 6.17603f));
  TestSpherePCA(points, file);
}

void SpherePCATest27(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.11335f, 8.59859f, -2.33497f));
  points.push_back(Vector3(3.90851f, 1.713f, -1.89856f));
  points.push_back(Vector3(-8.68465f, -0.827967f, -0.808435f));
  points.push_back(Vector3(0.113224f, 9.16623f, -7.71233f));
  points.push_back(Vector3(4.88266f, -7.1923f, 7.13004f));
  points.push_back(Vector3(-5.80309f, -0.0827052f, 0.926237f));
  points.push_back(Vector3(-3.41838f, 3.98846f, -2.61147f));
  points.push_back(Vector3(4.10688f, -8.14081f, 8.89401f));
  points.push_back(Vector3(-5.12803f, 1.8186f, 7.96258f));
  points.push_back(Vector3(-6.31031f, -1.29307f, 3.02408f));
  points.push_back(Vector3(4.06842f, -7.35038f, 0.657063f));
  points.push_back(Vector3(-1.31016f, -1.50182f, 7.14896f));
  points.push_back(Vector3(-2.41676f, 5.27573f, -9.25108f));
  points.push_back(Vector3(2.06458f, -5.25498f, -2.67495f));
  points.push_back(Vector3(-3.77606f, 4.08979f, 3.36161f));
  points.push_back(Vector3(-2.71706f, 9.27976f, -4.91562f));
  points.push_back(Vector3(-6.94266f, 0.661336f, 0.22187f));
  points.push_back(Vector3(3.59294f, 9.81262f, 4.68856f));
  points.push_back(Vector3(1.87231f, 7.64824f, 0.0454726f));
  points.push_back(Vector3(-1.44932f, -8.6755f, -8.01019f));
  points.push_back(Vector3(-8.5406f, 3.37077f, 2.52968f));
  points.push_back(Vector3(-7.1746f, -8.73592f, 0.0277718f));
  points.push_back(Vector3(-4.68184f, -6.74978f, -7.58965f));
  points.push_back(Vector3(-7.03787f, -3.50261f, 2.45949f));
  points.push_back(Vector3(8.45515f, 8.07611f, -1.35472f));
  points.push_back(Vector3(1.87292f, 7.68364f, -7.13797f));
  points.push_back(Vector3(-7.78253f, -8.69747f, 7.11966f));
  points.push_back(Vector3(-3.11014f, -3.39091f, -1.72277f));
  points.push_back(Vector3(-2.96548f, 0.755333f, 5.77929f));
  points.push_back(Vector3(3.66375f, -3.40007f, -8.35444f));
  points.push_back(Vector3(-5.92456f, 6.69485f, -8.71273f));
  points.push_back(Vector3(-6.37745f, -2.125f, 2.54372f));
  points.push_back(Vector3(-7.34123f, -9.23826f, -1.3242f));
  points.push_back(Vector3(-4.44319f, -8.83969f, -8.73653f));
  points.push_back(Vector3(3.25297f, 1.27903f, 2.55287f));
  points.push_back(Vector3(-9.33042f, 6.51234f, 0.389721f));
  points.push_back(Vector3(-1.40477f, 2.30567f, -7.33268f));
  points.push_back(Vector3(-2.3191f, 2.61513f, -6.92679f));
  points.push_back(Vector3(0.357372f, 9.19919f, 0.584429f));
  points.push_back(Vector3(-7.27714f, 7.33634f, -9.32493f));
  points.push_back(Vector3(8.33064f, -5.27879f, 0.360424f));
  points.push_back(Vector3(-9.63317f, 5.50096f, -3.14798f));
  points.push_back(Vector3(5.8916f, -0.554521f, -3.08451f));
  points.push_back(Vector3(-0.332957f, 7.24906f, 3.03934f));
  points.push_back(Vector3(-8.07672f, -9.09299f, 3.8316f));
  points.push_back(Vector3(5.07248f, 2.3954f, -5.9624f));
  points.push_back(Vector3(-1.96753f, -9.98535f, 9.96948f));
  points.push_back(Vector3(8.99594f, 5.47777f, -5.32701f));
  points.push_back(Vector3(3.18278f, 3.29936f, -5.79455f));
  points.push_back(Vector3(-6.85965f, -4.8851f, 1.63121f));
  points.push_back(Vector3(8.4228f, 8.04376f, 2.15552f));
  points.push_back(Vector3(-7.97967f, 2.44972f, -8.80367f));
  points.push_back(Vector3(-5.46617f, -3.24503f, 0.488601f));
  points.push_back(Vector3(6.798f, -0.765099f, 6.14185f));
  points.push_back(Vector3(7.83868f, 0.291452f, 5.91662f));
  points.push_back(Vector3(3.24686f, 9.17722f, 6.01184f));
  points.push_back(Vector3(-3.53618f, -2.26417f, -0.459914f));
  points.push_back(Vector3(-3.24931f, 8.80184f, -3.05887f));
  points.push_back(Vector3(3.62163f, 8.35872f, -4.41511f));
  points.push_back(Vector3(-7.72149f, 9.01853f, 2.50832f));
  points.push_back(Vector3(8.4051f, 9.14548f, 9.04416f));
  points.push_back(Vector3(0.752892f, 8.11945f, -1.58727f));
  points.push_back(Vector3(0.739464f, -7.00491f, -8.05353f));
  points.push_back(Vector3(-2.34779f, -6.29566f, -6.50746f));
  points.push_back(Vector3(-2.05786f, 0.210273f, -4.62813f));
  points.push_back(Vector3(7.53349f, -2.52113f, 0.257881f));
  points.push_back(Vector3(8.35627f, 1.89489f, -3.63506f));
  points.push_back(Vector3(-8.05597f, 5.49242f, 2.22266f));
  points.push_back(Vector3(-4.785f, -9.22361f, -1.80151f));
  points.push_back(Vector3(-9.55931f, 9.71007f, -4.65072f));
  points.push_back(Vector3(3.78521f, 5.33494f, 1.35716f));
  points.push_back(Vector3(-2.44484f, 7.32963f, -0.58504f));
  points.push_back(Vector3(-0.610065f, -0.610675f, 3.74981f));
  points.push_back(Vector3(-4.79781f, 4.42305f, 4.4908f));
  points.push_back(Vector3(-4.30158f, -5.95447f, -5.51256f));
  points.push_back(Vector3(2.52358f, -7.09952f, 0.608844f));
  TestSpherePCA(points, file);
}

void SpherePCATest28(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.91659f, 4.79476f, 3.58501f));
  points.push_back(Vector3(5.01511f, 4.61959f, -7.76299f));
  points.push_back(Vector3(5.74084f, -0.801111f, -2.19214f));
  points.push_back(Vector3(-7.63665f, 5.54674f, 1.4536f));
  points.push_back(Vector3(-0.654012f, 2.88003f, 8.48689f));
  points.push_back(Vector3(9.51781f, 3.45073f, 8.84335f));
  points.push_back(Vector3(6.27674f, -2.41432f, 9.49828f));
  points.push_back(Vector3(-3.76568f, -1.36265f, 3.50139f));
  points.push_back(Vector3(2.9545f, 1.6715f, 6.66311f));
  points.push_back(Vector3(1.13804f, 0.721152f, 8.8757f));
  points.push_back(Vector3(5.9209f, -6.39088f, -5.98254f));
  points.push_back(Vector3(-7.48161f, -2.59926f, -7.08365f));
  points.push_back(Vector3(-8.07245f, 0.085757f, 4.44136f));
  points.push_back(Vector3(1.67028f, -1.26377f, -7.63726f));
  points.push_back(Vector3(-6.24256f, 2.50832f, 8.18232f));
  points.push_back(Vector3(-6.8157f, 8.69625f, -9.16868f));
  points.push_back(Vector3(7.74468f, 9.0698f, -7.16056f));
  points.push_back(Vector3(-3.51421f, -3.90362f, 9.35423f));
  points.push_back(Vector3(-7.90948f, -9.98474f, 6.85232f));
  points.push_back(Vector3(7.47002f, -6.64357f, -0.890835f));
  points.push_back(Vector3(1.71789f, -6.03198f, 7.95709f));
  points.push_back(Vector3(-9.129f, 6.19129f, 1.93823f));
  points.push_back(Vector3(-2.11158f, 5.53087f, -9.08078f));
  points.push_back(Vector3(-4.57869f, -6.93655f, -2.772f));
  points.push_back(Vector3(-8.14997f, 1.47069f, -2.35023f));
  points.push_back(Vector3(7.49504f, -7.70745f, -3.54411f));
  points.push_back(Vector3(-6.36219f, 7.05008f, 0.019837f));
  points.push_back(Vector3(7.2631f, -0.242622f, -8.45454f));
  points.push_back(Vector3(2.53639f, -2.00903f, -6.12354f));
  points.push_back(Vector3(6.88467f, -6.36952f, 2.78909f));
  points.push_back(Vector3(-3.00699f, 9.72655f, -5.65172f));
  points.push_back(Vector3(-4.55123f, 6.96341f, -1.17954f));
  points.push_back(Vector3(1.4951f, -3.62224f, 0.0717185f));
  points.push_back(Vector3(2.78359f, 6.81509f, 7.58538f));
  points.push_back(Vector3(8.58516f, -0.0595111f, -0.0534074f));
  points.push_back(Vector3(-3.70647f, -7.59575f, -4.12824f));
  points.push_back(Vector3(-1.69713f, -2.1836f, -7.05435f));
  points.push_back(Vector3(-5.72924f, -3.01798f, -1.68798f));
  points.push_back(Vector3(7.36869f, 6.75466f, 1.84912f));
  points.push_back(Vector3(8.04804f, -8.71578f, -2.76223f));
  points.push_back(Vector3(-1.09897f, 5.79882f, 8.06757f));
  points.push_back(Vector3(6.50868f, 3.05094f, 5.00107f));
  points.push_back(Vector3(-7.11295f, -7.3809f, -0.55269f));
  points.push_back(Vector3(2.28858f, 9.60082f, -7.27348f));
  points.push_back(Vector3(0.458693f, -0.957976f, 8.60836f));
  points.push_back(Vector3(1.99927f, -8.55098f, -3.43669f));
  points.push_back(Vector3(3.82733f, -4.77889f, 8.46431f));
  points.push_back(Vector3(-4.48775f, -3.12113f, 6.71926f));
  points.push_back(Vector3(0.959807f, 0.228584f, 6.63381f));
  points.push_back(Vector3(-5.77319f, 2.69204f, -1.44688f));
  points.push_back(Vector3(-7.77093f, 2.33131f, 3.89752f));
  points.push_back(Vector3(-2.2074f, 7.69646f, -8.89767f));
  points.push_back(Vector3(7.88995f, 7.43461f, -3.69976f));
  points.push_back(Vector3(5.55406f, 5.18906f, 9.24619f));
  points.push_back(Vector3(2.7488f, -8.46248f, 8.32148f));
  points.push_back(Vector3(5.38438f, -8.64009f, -6.27857f));
  points.push_back(Vector3(0.404981f, 5.13657f, 8.34834f));
  points.push_back(Vector3(1.25217f, 0.652791f, 0.917081f));
  points.push_back(Vector3(-3.67901f, -3.25846f, -0.0936918f));
  points.push_back(Vector3(-5.84948f, -0.860317f, -5.79882f));
  points.push_back(Vector3(9.3469f, 1.66051f, 5.25193f));
  points.push_back(Vector3(1.54393f, -4.51888f, 3.1901f));
  points.push_back(Vector3(7.62322f, -6.7217f, 4.55306f));
  TestSpherePCA(points, file);
}

void SpherePCATest29(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.16135f, -2.12317f, 2.46376f));
  points.push_back(Vector3(-1.49632f, -9.729f, -2.55532f));
  points.push_back(Vector3(-7.92108f, -1.04099f, -1.77099f));
  points.push_back(Vector3(-6.08142f, -3.35002f, -1.85278f));
  points.push_back(Vector3(-2.69143f, 0.693686f, 2.44911f));
  points.push_back(Vector3(7.89117f, -9.86328f, 5.60167f));
  points.push_back(Vector3(8.83908f, -8.4875f, -7.50175f));
  points.push_back(Vector3(-5.97034f, -8.57479f, -3.1077f));
  points.push_back(Vector3(6.66189f, -8.54732f, 6.96158f));
  points.push_back(Vector3(4.2552f, -9.48302f, -1.49754f));
  points.push_back(Vector3(0.630207f, 6.80593f, 8.17011f));
  points.push_back(Vector3(1.70202f, 6.34632f, -7.65557f));
  points.push_back(Vector3(-2.40455f, -7.00674f, 0.679647f));
  points.push_back(Vector3(3.98175f, 0.99704f, 1.17038f));
  points.push_back(Vector3(1.04465f, 8.08039f, -6.52516f));
  points.push_back(Vector3(8.36116f, 8.76583f, 7.54875f));
  points.push_back(Vector3(-4.34919f, -5.33738f, 7.65801f));
  points.push_back(Vector3(8.60958f, 5.8562f, 4.0788f));
  points.push_back(Vector3(-1.26682f, -0.825526f, -2.48451f));
  points.push_back(Vector3(-5.14328f, 1.66906f, 6.94021f));
  points.push_back(Vector3(-2.64504f, 7.37663f, 3.65764f));
  points.push_back(Vector3(-4.66353f, -9.94873f, -7.30583f));
  points.push_back(Vector3(6.26576f, 5.45762f, 4.9559f));
  points.push_back(Vector3(-5.11826f, -9.07651f, 2.0835f));
  points.push_back(Vector3(-9.49583f, -9.72655f, -6.32618f));
  points.push_back(Vector3(-8.05963f, -8.03827f, -3.24137f));
  points.push_back(Vector3(9.80346f, -7.69768f, -1.89856f));
  points.push_back(Vector3(-3.76446f, -1.0184f, -1.92358f));
  points.push_back(Vector3(-7.54631f, 3.35063f, -8.46675f));
  points.push_back(Vector3(5.48509f, -5.24094f, 3.65947f));
  points.push_back(Vector3(6.46962f, 0.477615f, 8.23542f));
  points.push_back(Vector3(-5.68163f, 1.89611f, 9.99268f));
  points.push_back(Vector3(-1.71361f, -9.55077f, 8.43806f));
  points.push_back(Vector3(4.19477f, -1.70751f, -9.71679f));
  points.push_back(Vector3(6.292f, 7.82037f, 8.08466f));
  points.push_back(Vector3(2.22877f, -3.46416f, 8.73592f));
  points.push_back(Vector3(0.744346f, 6.96768f, 7.32414f));
  points.push_back(Vector3(1.8656f, 3.35246f, -2.27332f));
  points.push_back(Vector3(5.58763f, -3.42082f, 7.29728f));
  points.push_back(Vector3(-8.16828f, -5.12864f, 5.69262f));
  points.push_back(Vector3(-6.21021f, -3.32682f, 9.92309f));
  points.push_back(Vector3(4.18928f, -9.8059f, 3.22001f));
  points.push_back(Vector3(8.67061f, -4.20331f, 2.80068f));
  points.push_back(Vector3(-9.81445f, -7.79656f, -4.46516f));
  points.push_back(Vector3(1.67455f, -8.00348f, -6.60939f));
  points.push_back(Vector3(6.37196f, 3.19498f, -6.33839f));
  points.push_back(Vector3(4.75204f, -1.89917f, 5.9209f));
  points.push_back(Vector3(5.69079f, 6.21509f, 6.57399f));
  points.push_back(Vector3(5.39293f, 2.16956f, 3.37992f));
  points.push_back(Vector3(1.40721f, 3.51543f, -4.86801f));
  points.push_back(Vector3(-3.08512f, 0.289621f, -1.87353f));
  points.push_back(Vector3(8.33857f, -6.2859f, -1.9779f));
  points.push_back(Vector3(8.39351f, 3.59661f, 0.431227f));
  points.push_back(Vector3(8.39961f, 1.64647f, 2.7488f));
  points.push_back(Vector3(-9.97131f, 7.07938f, -2.70669f));
  points.push_back(Vector3(-1.55675f, 1.95227f, -6.45619f));
  points.push_back(Vector3(-6.58071f, -3.17606f, 6.57033f));
  points.push_back(Vector3(0.293893f, -8.28669f, 5.25681f));
  points.push_back(Vector3(-5.51073f, 7.39006f, 6.33717f));
  points.push_back(Vector3(8.22077f, 1.38524f, -9.52513f));
  points.push_back(Vector3(-7.63604f, 4.48775f, 8.95871f));
  points.push_back(Vector3(0.395215f, -0.584429f, 8.71761f));
  points.push_back(Vector3(-7.34855f, 2.54616f, 6.11805f));
  points.push_back(Vector3(-9.40916f, -3.24564f, -5.92456f));
  points.push_back(Vector3(0.999481f, -5.39171f, 7.5042f));
  points.push_back(Vector3(7.05679f, 5.46678f, -6.32801f));
  points.push_back(Vector3(4.83261f, -4.232f, 4.46577f));
  points.push_back(Vector3(-0.408032f, 3.36161f, -3.80169f));
  points.push_back(Vector3(0.472732f, 3.62102f, 3.28532f));
  points.push_back(Vector3(-4.09955f, -3.57524f, -9.83825f));
  points.push_back(Vector3(1.75878f, 2.32398f, 3.22306f));
  points.push_back(Vector3(-3.24259f, 5.42039f, 7.75262f));
  points.push_back(Vector3(-2.57302f, 3.49895f, -5.32884f));
  points.push_back(Vector3(-1.04099f, 4.7795f, 4.96994f));
  points.push_back(Vector3(0.33845f, 9.7235f, -4.83749f));
  points.push_back(Vector3(7.85882f, 3.34513f, 4.31867f));
  points.push_back(Vector3(4.63729f, 7.35527f, -1.98706f));
  points.push_back(Vector3(-9.90051f, -9.83398f, 5.46556f));
  points.push_back(Vector3(9.62401f, 7.32414f, -7.32902f));
  points.push_back(Vector3(4.36201f, 6.86514f, -5.68285f));
  points.push_back(Vector3(-5.9801f, -2.09876f, -0.22187f));
  points.push_back(Vector3(-3.88165f, 3.59661f, -5.57176f));
  points.push_back(Vector3(3.84564f, -5.27146f, 0.0570696f));
  points.push_back(Vector3(-6.00391f, 0.83224f, 9.08139f));
  points.push_back(Vector3(3.91461f, -6.87613f, -2.9899f));
  points.push_back(Vector3(2.86843f, 6.56301f, 0.220038f));
  points.push_back(Vector3(9.39329f, 8.34284f, -8.62911f));
  points.push_back(Vector3(-5.2092f, 0.599689f, 4.21918f));
  points.push_back(Vector3(-7.52007f, -6.42872f, -7.02139f));
  points.push_back(Vector3(-4.19599f, 6.90847f, -3.31645f));
  TestSpherePCA(points, file);
}

void SpherePCATest30(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.00632f, 9.58129f, -7.06961f));
  points.push_back(Vector3(4.09589f, 1.32176f, 4.38643f));
  points.push_back(Vector3(0.25483f, -0.401318f, 4.30342f));
  points.push_back(Vector3(1.22532f, 9.60936f, 0.243843f));
  points.push_back(Vector3(-8.71639f, 8.42219f, -1.03977f));
  points.push_back(Vector3(-6.68752f, 6.87246f, 2.77932f));
  points.push_back(Vector3(-4.00555f, -8.53877f, -4.03851f));
  points.push_back(Vector3(-8.96237f, 6.24317f, -9.16074f));
  points.push_back(Vector3(1.8717f, -2.06702f, 1.4066f));
  points.push_back(Vector3(8.62056f, 6.2566f, 8.98312f));
  points.push_back(Vector3(3.49773f, -6.92862f, -8.61019f));
  points.push_back(Vector3(6.12232f, -9.5703f, 9.29258f));
  TestSpherePCA(points, file);
}

void SpherePCATest31(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.49178f, 2.14026f, 6.01489f));
  points.push_back(Vector3(-6.63747f, 5.56505f, 2.73171f));
  points.push_back(Vector3(-9.62584f, -1.36143f, 4.39558f));
  points.push_back(Vector3(-6.91519f, 6.31825f, 7.18009f));
  points.push_back(Vector3(-2.49184f, -6.01672f, -6.42445f));
  points.push_back(Vector3(3.55388f, 9.92065f, 4.21247f));
  points.push_back(Vector3(4.279f, -4.09223f, -6.43117f));
  points.push_back(Vector3(8.83236f, -9.36216f, -4.56709f));
  points.push_back(Vector3(1.41209f, -0.632649f, -3.12174f));
  points.push_back(Vector3(3.05765f, -0.144963f, -0.966521f));
  points.push_back(Vector3(-3.94147f, 1.48961f, 5.12009f));
  points.push_back(Vector3(-3.87249f, 2.39784f, 0.736412f));
  points.push_back(Vector3(-0.815149f, -1.29002f, -0.264595f));
  points.push_back(Vector3(-4.77157f, -9.08078f, -6.30482f));
  points.push_back(Vector3(-3.25175f, 0.664388f, -1.95898f));
  points.push_back(Vector3(3.48979f, 9.55077f, 8.71212f));
  points.push_back(Vector3(-4.48469f, 3.28532f, 2.29957f));
  points.push_back(Vector3(7.6867f, 6.02588f, -7.8515f));
  points.push_back(Vector3(6.44215f, 7.32536f, -1.85705f));
  points.push_back(Vector3(1.0184f, 9.20591f, -4.20698f));
  points.push_back(Vector3(7.80999f, -9.25108f, -8.01385f));
  points.push_back(Vector3(7.04093f, 8.77316f, 3.31095f));
  points.push_back(Vector3(9.2346f, 6.6332f, 7.58843f));
  points.push_back(Vector3(-0.71688f, 8.47713f, -5.81347f));
  points.push_back(Vector3(8.81527f, 4.76302f, 2.09693f));
  points.push_back(Vector3(-9.47203f, 6.03504f, 0.809656f));
  points.push_back(Vector3(-8.50276f, 7.70989f, 4.31806f));
  points.push_back(Vector3(-1.44566f, -5.72802f, 9.99207f));
  points.push_back(Vector3(9.7528f, -6.90054f, -4.99374f));
  points.push_back(Vector3(3.94147f, -8.32331f, -0.669271f));
  points.push_back(Vector3(-9.66063f, 5.74206f, -6.77358f));
  points.push_back(Vector3(2.77139f, 8.90927f, 3.86578f));
  points.push_back(Vector3(-4.16791f, 8.59615f, -3.19742f));
  points.push_back(Vector3(5.21714f, -6.71987f, 1.9364f));
  points.push_back(Vector3(9.14182f, 2.88125f, 0.976897f));
  points.push_back(Vector3(2.6017f, -1.57811f, -6.40553f));
  points.push_back(Vector3(-3.97443f, 7.33573f, 0.242622f));
  points.push_back(Vector3(3.07047f, -6.24439f, 2.73904f));
  points.push_back(Vector3(7.03787f, 7.30216f, -3.68267f));
  points.push_back(Vector3(1.98279f, -9.56175f, 7.96319f));
  points.push_back(Vector3(-1.02817f, 8.43013f, 2.902f));
  points.push_back(Vector3(-9.96338f, 9.7058f, -0.695517f));
  points.push_back(Vector3(-0.785241f, -0.199286f, 7.7868f));
  points.push_back(Vector3(-7.48405f, 8.50642f, -8.72127f));
  points.push_back(Vector3(-3.10953f, 9.78027f, -2.6017f));
  points.push_back(Vector3(-0.694296f, -1.57445f, -0.851161f));
  points.push_back(Vector3(-5.0914f, 7.30888f, 0.674154f));
  points.push_back(Vector3(-9.9176f, -0.263985f, 7.94549f));
  points.push_back(Vector3(9.38047f, 4.18378f, 0.561235f));
  points.push_back(Vector3(4.71969f, -4.58846f, -5.2794f));
  points.push_back(Vector3(9.96948f, -7.30522f, 5.11094f));
  points.push_back(Vector3(-1.93274f, 2.64016f, 6.43788f));
  points.push_back(Vector3(8.97031f, -9.8236f, -1.58483f));
  points.push_back(Vector3(-6.69179f, -5.74999f, -8.77255f));
  points.push_back(Vector3(0.873135f, 0.234077f, -2.82571f));
  points.push_back(Vector3(-8.45088f, -7.9577f, -7.92169f));
  points.push_back(Vector3(0.307321f, 1.96936f, -6.13391f));
  points.push_back(Vector3(9.74181f, -9.2346f, 1.69408f));
  points.push_back(Vector3(-2.94717f, 6.10767f, 4.86862f));
  points.push_back(Vector3(6.85904f, 7.93451f, 7.97174f));
  points.push_back(Vector3(-5.14634f, -7.13797f, -6.04419f));
  points.push_back(Vector3(2.06885f, 3.30241f, -6.38234f));
  points.push_back(Vector3(-1.57384f, -6.67287f, 0.867641f));
  points.push_back(Vector3(-9.15708f, 5.14817f, -6.52516f));
  points.push_back(Vector3(-7.03726f, -3.48613f, 3.55693f));
  points.push_back(Vector3(8.12128f, -8.98984f, 1.60558f));
  points.push_back(Vector3(-5.00778f, 0.442213f, -6.10828f));
  points.push_back(Vector3(-5.74938f, -9.27f, -0.409864f));
  points.push_back(Vector3(-4.78683f, 0.435499f, 2.39357f));
  points.push_back(Vector3(-8.04376f, 2.02124f, -9.64232f));
  points.push_back(Vector3(-4.62752f, 3.41105f, 0.586261f));
  points.push_back(Vector3(3.57891f, 5.87939f, -9.36094f));
  points.push_back(Vector3(-5.12131f, -3.91705f, -7.74285f));
  points.push_back(Vector3(9.71557f, -6.62709f, 2.38258f));
  points.push_back(Vector3(1.1771f, 0.013123f, 9.78881f));
  points.push_back(Vector3(-4.21857f, -0.664998f, -8.39351f));
  points.push_back(Vector3(-6.59536f, -0.0674459f, -8.70907f));
  points.push_back(Vector3(-5.73473f, -5.42528f, -5.19394f));
  points.push_back(Vector3(-5.94104f, -3.82427f, 1.05136f));
  points.push_back(Vector3(-9.80224f, 9.08261f, -9.48241f));
  TestSpherePCA(points, file);
}

void SpherePCATest32(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.84313f, -5.74816f, -6.50807f));
  points.push_back(Vector3(-4.47798f, -2.7958f, -2.22144f));
  points.push_back(Vector3(2.38502f, 9.99939f, -8.40388f));
  points.push_back(Vector3(-2.73232f, 7.52434f, 8.95321f));
  points.push_back(Vector3(-3.96527f, 6.81021f, -9.94873f));
  points.push_back(Vector3(8.73409f, -7.8576f, -0.483718f));
  points.push_back(Vector3(6.69424f, 0.967742f, 9.62401f));
  points.push_back(Vector3(2.53578f, -2.77261f, -7.33634f));
  points.push_back(Vector3(-1.56652f, 3.04056f, -0.989715f));
  points.push_back(Vector3(5.11704f, 4.58419f, 3.31889f));
  points.push_back(Vector3(-5.78784f, -5.28367f, 0.202948f));
  points.push_back(Vector3(-6.9097f, 5.36546f, 8.80245f));
  points.push_back(Vector3(8.47896f, -2.82571f, 4.85519f));
  points.push_back(Vector3(-0.323191f, -5.88855f, 6.63686f));
  points.push_back(Vector3(-6.01184f, 9.91516f, -0.101627f));
  points.push_back(Vector3(-8.46736f, -2.74697f, -7.9223f));
  points.push_back(Vector3(0.0747703f, 3.38603f, 7.39799f));
  points.push_back(Vector3(-4.02264f, -8.95993f, 5.50768f));
  points.push_back(Vector3(6.95853f, 6.59291f, -9.90967f));
  points.push_back(Vector3(-0.70101f, 1.85461f, 5.78539f));
  points.push_back(Vector3(2.78481f, 4.65804f, -7.32048f));
  points.push_back(Vector3(0.923185f, 9.56786f, 2.60353f));
  points.push_back(Vector3(-0.68453f, -6.45375f, -7.72454f));
  points.push_back(Vector3(-1.74047f, 4.48592f, -8.80734f));
  points.push_back(Vector3(-8.84762f, -7.68914f, -8.11396f));
  points.push_back(Vector3(-4.47981f, -7.00491f, -0.936003f));
  points.push_back(Vector3(4.50728f, 9.8352f, 1.0593f));
  points.push_back(Vector3(-0.768151f, -1.22471f, -0.837123f));
  points.push_back(Vector3(7.34611f, 5.57054f, 0.142521f));
  TestSpherePCA(points, file);
}

void SpherePCATest33(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.43013f, 5.50951f, 4.02081f));
  points.push_back(Vector3(8.66268f, 0.726035f, -2.97159f));
  points.push_back(Vector3(9.26511f, 3.25236f, -3.19071f));
  points.push_back(Vector3(-3.24259f, 3.5197f, 8.01385f));
  points.push_back(Vector3(-3.60454f, 7.05496f, -6.52882f));
  points.push_back(Vector3(-8.39412f, -2.65908f, -7.16605f));
  points.push_back(Vector3(-1.08188f, 1.01596f, 9.56114f));
  points.push_back(Vector3(1.74535f, -5.2678f, 8.15607f));
  points.push_back(Vector3(-2.28675f, 8.60958f, 0.0552385f));
  points.push_back(Vector3(-5.20798f, 8.93124f, 4.73739f));
  points.push_back(Vector3(-7.16117f, 1.41575f, 8.70785f));
  points.push_back(Vector3(2.75613f, -2.13294f, -4.32234f));
  points.push_back(Vector3(-1.9187f, -2.42958f, 6.37501f));
  points.push_back(Vector3(6.02832f, -4.77218f, -5.92334f));
  points.push_back(Vector3(-4.60005f, -3.82977f, -5.40635f));
  points.push_back(Vector3(2.26661f, 4.97971f, 5.9624f));
  points.push_back(Vector3(6.69362f, -9.66918f, 1.32908f));
  points.push_back(Vector3(-5.61327f, -8.30439f, -3.59539f));
  points.push_back(Vector3(4.11725f, -9.78027f, 9.92737f));
  points.push_back(Vector3(9.56359f, 5.97278f, 6.01489f));
  points.push_back(Vector3(2.40516f, 0.703452f, 2.33863f));
  points.push_back(Vector3(1.03732f, 4.54817f, -6.06739f));
  points.push_back(Vector3(-0.193793f, 8.76583f, 6.16504f));
  points.push_back(Vector3(-0.906095f, 1.04831f, -5.41124f));
  points.push_back(Vector3(0.861538f, -3.95978f, -5.51927f));
  points.push_back(Vector3(-0.673544f, -2.01148f, -8.69747f));
  points.push_back(Vector3(6.77297f, -5.80981f, 0.248726f));
  points.push_back(Vector3(-2.24342f, 6.33778f, 2.81777f));
  points.push_back(Vector3(0.0985748f, -2.07251f, -4.07819f));
  points.push_back(Vector3(-3.99884f, -1.94128f, 1.55065f));
  points.push_back(Vector3(2.42286f, -5.26109f, -3.9317f));
  points.push_back(Vector3(-1.98462f, 2.05664f, 7.22892f));
  points.push_back(Vector3(8.99899f, -5.68224f, 9.00327f));
  points.push_back(Vector3(-4.56954f, 7.46086f, -0.857875f));
  points.push_back(Vector3(5.65416f, -3.16935f, -4.97665f));
  points.push_back(Vector3(3.70769f, 2.584f, -2.98135f));
  points.push_back(Vector3(-7.02933f, -0.0112918f, 6.37562f));
  points.push_back(Vector3(-1.28269f, -4.27229f, 6.95181f));
  points.push_back(Vector3(3.42143f, 2.87515f, -9.93408f));
  points.push_back(Vector3(5.41917f, -2.17322f, 7.45842f));
  points.push_back(Vector3(1.23569f, -7.80694f, -8.46065f));
  points.push_back(Vector3(-0.435499f, -0.874966f, -5.93799f));
  points.push_back(Vector3(4.83016f, 6.48f, 7.59209f));
  points.push_back(Vector3(-7.68609f, 5.24888f, 1.30345f));
  points.push_back(Vector3(-9.92004f, -1.61473f, 3.18522f));
  points.push_back(Vector3(8.77316f, -5.34776f, -8.73775f));
  points.push_back(Vector3(2.15491f, 6.90786f, -8.44172f));
  points.push_back(Vector3(-2.72622f, 1.9364f, -9.90478f));
  points.push_back(Vector3(6.4745f, 2.88186f, 2.68227f));
  points.push_back(Vector3(9.25169f, 2.52113f, 1.11179f));
  points.push_back(Vector3(8.13837f, -5.32701f, -5.79272f));
  points.push_back(Vector3(2.23853f, -3.91705f, -2.78603f));
  points.push_back(Vector3(6.40431f, 9.35606f, -5.87817f));
  points.push_back(Vector3(-6.59658f, 1.48473f, 9.45067f));
  points.push_back(Vector3(8.95749f, -9.86267f, 7.75872f));
  points.push_back(Vector3(0.616169f, 7.25944f, -5.43809f));
  points.push_back(Vector3(-7.68853f, 6.0155f, -3.73455f));
  points.push_back(Vector3(4.78011f, -8.60714f, -4.76608f));
  points.push_back(Vector3(2.22999f, 7.00125f, 1.45909f));
  points.push_back(Vector3(3.63811f, -5.15244f, -5.23606f));
  points.push_back(Vector3(4.01227f, -9.63927f, -4.2143f));
  points.push_back(Vector3(-4.14594f, 7.3516f, 5.55834f));
  points.push_back(Vector3(-0.564898f, 2.53639f, -1.64037f));
  points.push_back(Vector3(7.53349f, 4.01776f, -9.25901f));
  points.push_back(Vector3(7.45964f, 0.379955f, 1.16855f));
  points.push_back(Vector3(3.81512f, -0.144353f, -7.24601f));
  points.push_back(Vector3(2.12012f, 6.46901f, -3.81024f));
  points.push_back(Vector3(8.40083f, 8.61263f, 4.54634f));
  points.push_back(Vector3(-4.26008f, 9.07041f, 6.65639f));
  points.push_back(Vector3(-3.76446f, 5.27573f, 0.435499f));
  points.push_back(Vector3(-8.7286f, -9.64415f, 6.71194f));
  points.push_back(Vector3(1.64892f, 0.326243f, -2.66579f));
  points.push_back(Vector3(6.66799f, 9.14914f, 5.60656f));
  points.push_back(Vector3(8.5052f, 1.07089f, -4.64217f));
  points.push_back(Vector3(-0.769372f, 9.35545f, -2.07678f));
  TestSpherePCA(points, file);
}

void SpherePCATest34(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.90439f, 4.15693f, 9.00571f));
  points.push_back(Vector3(-6.86331f, 2.39296f, 6.61794f));
  points.push_back(Vector3(-2.86111f, 8.47896f, -1.7246f));
  points.push_back(Vector3(9.84924f, 5.00534f, 1.61534f));
  points.push_back(Vector3(0.42085f, 3.47453f, 9.75707f));
  points.push_back(Vector3(-6.98843f, 1.66112f, -3.68206f));
  points.push_back(Vector3(-7.01895f, 3.73577f, -8.69747f));
  points.push_back(Vector3(-7.07327f, -6.37684f, 9.18943f));
  points.push_back(Vector3(-3.56792f, 2.17017f, 4.69771f));
  points.push_back(Vector3(1.47435f, -2.68349f, 3.52763f));
  points.push_back(Vector3(-3.08939f, -8.98557f, 5.03464f));
  points.push_back(Vector3(6.70522f, 2.3307f, 8.06696f));
  points.push_back(Vector3(-0.544145f, -9.81262f, 1.21006f));
  points.push_back(Vector3(-5.27207f, -4.30097f, -5.62792f));
  points.push_back(Vector3(5.10971f, 8.09015f, -2.8074f));
  points.push_back(Vector3(-5.11643f, -0.575884f, 5.13779f));
  points.push_back(Vector3(3.45622f, -8.27693f, -1.5421f));
  points.push_back(Vector3(-9.95972f, -9.25779f, -0.144353f));
  points.push_back(Vector3(-3.8432f, -5.55345f, -6.35121f));
  points.push_back(Vector3(-3.13456f, 5.63402f, -8.59004f));
  points.push_back(Vector3(5.833f, -6.68569f, -9.39512f));
  points.push_back(Vector3(-6.42018f, 7.95404f, 1.41331f));
  points.push_back(Vector3(1.86987f, -3.73455f, 0.966521f));
  points.push_back(Vector3(7.64336f, 1.94861f, -3.98419f));
  points.push_back(Vector3(-7.10868f, 4.94369f, -8.98557f));
  points.push_back(Vector3(5.32701f, -2.8135f, -9.90051f));
  points.push_back(Vector3(-2.7604f, -5.88977f, -9.15525f));
  points.push_back(Vector3(1.94739f, 4.67391f, -1.45604f));
  points.push_back(Vector3(-9.65514f, 6.02222f, 1.7954f));
  points.push_back(Vector3(7.9284f, -6.42445f, 1.2833f));
  points.push_back(Vector3(3.84808f, -9.82299f, 5.86596f));
  points.push_back(Vector3(-5.47227f, -7.91192f, 6.5685f));
  points.push_back(Vector3(-1.76305f, -1.86926f, 3.0784f));
  points.push_back(Vector3(-3.62712f, -3.98907f, -3.2786f));
  points.push_back(Vector3(-8.8641f, 1.99499f, 5.8916f));
  points.push_back(Vector3(-1.55675f, -2.9191f, -4.75631f));
  points.push_back(Vector3(-0.353099f, -3.60576f, 6.39088f));
  points.push_back(Vector3(-4.63607f, 2.5248f, -4.09894f));
  points.push_back(Vector3(9.89441f, -0.553911f, 4.51033f));
  points.push_back(Vector3(-6.77114f, -9.86694f, -4.15021f));
  points.push_back(Vector3(2.56508f, 1.3657f, 6.51357f));
  points.push_back(Vector3(1.25584f, -8.02911f, 8.50276f));
  points.push_back(Vector3(2.36183f, -8.02362f, -5.10666f));
  points.push_back(Vector3(4.83077f, 7.03421f, -9.84924f));
  points.push_back(Vector3(4.30219f, 3.28837f, -3.82061f));
  points.push_back(Vector3(-4.5555f, -8.63643f, 9.87609f));
  points.push_back(Vector3(3.29447f, 2.88614f, -5.55834f));
  points.push_back(Vector3(9.16257f, 5.69201f, -2.5425f));
  points.push_back(Vector3(-2.1836f, 0.621662f, -1.98828f));
  points.push_back(Vector3(6.07166f, -1.73864f, -8.59737f));
  points.push_back(Vector3(-3.60881f, -2.44728f, 7.59392f));
  TestSpherePCA(points, file);
}

void SpherePCATest35(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.77355f, 3.86334f, -4.88815f));
  points.push_back(Vector3(9.5703f, -2.45277f, 1.66234f));
  points.push_back(Vector3(8.87448f, 7.46574f, 4.32173f));
  points.push_back(Vector3(5.93127f, 4.36506f, 9.8938f));
  points.push_back(Vector3(8.97275f, 0.277413f, 4.12763f));
  points.push_back(Vector3(-0.884732f, 5.03708f, -6.87857f));
  points.push_back(Vector3(5.80248f, 3.50871f, -6.5154f));
  points.push_back(Vector3(-6.75588f, -2.02124f, 2.51198f));
  points.push_back(Vector3(-9.61364f, -0.718711f, -5.79028f));
  points.push_back(Vector3(-2.92459f, -1.94372f, -1.20884f));
  points.push_back(Vector3(-1.68065f, 6.24683f, -2.19825f));
  points.push_back(Vector3(2.51015f, 4.12091f, 0.509964f));
  points.push_back(Vector3(-7.60613f, 9.43724f, 2.67373f));
  points.push_back(Vector3(-7.48527f, -3.60515f, 8.3581f));
  points.push_back(Vector3(0.207831f, -4.19111f, 2.45766f));
  points.push_back(Vector3(-8.5577f, -0.165105f, -7.80084f));
  points.push_back(Vector3(1.72765f, 5.53453f, -9.82726f));
  points.push_back(Vector3(-1.61901f, 6.47511f, -3.23527f));
  points.push_back(Vector3(-5.98865f, -7.55852f, -6.9274f));
  points.push_back(Vector3(-5.89282f, 0.13947f, -9.12595f));
  points.push_back(Vector3(-6.54286f, 7.50969f, -8.53572f));
  points.push_back(Vector3(-3.27433f, -6.8157f, 6.2096f));
  points.push_back(Vector3(-7.45903f, 9.50255f, 4.21674f));
  points.push_back(Vector3(-7.116f, 9.64782f, -2.54677f));
  points.push_back(Vector3(-9.44029f, -0.763268f, 6.51418f));
  points.push_back(Vector3(2.87332f, -5.12253f, -1.34739f));
  points.push_back(Vector3(8.85067f, 1.02329f, 4.20698f));
  points.push_back(Vector3(1.55675f, 0.784631f, 3.32072f));
  points.push_back(Vector3(2.89773f, 9.08628f, 6.33778f));
  points.push_back(Vector3(5.40757f, -9.09055f, -9.29136f));
  points.push_back(Vector3(-0.935392f, -9.27305f, -4.42122f));
  points.push_back(Vector3(1.41636f, -7.01224f, -9.76745f));
  points.push_back(Vector3(-5.00717f, 4.10688f, -2.06214f));
  points.push_back(Vector3(8.85617f, 1.08615f, -7.20878f));
  points.push_back(Vector3(-7.56157f, -0.644246f, 0.590533f));
  points.push_back(Vector3(2.24525f, -2.74697f, -5.82263f));
  points.push_back(Vector3(1.96081f, -0.273751f, 2.72195f));
  points.push_back(Vector3(-4.05744f, 6.40614f, 4.39741f));
  points.push_back(Vector3(-6.98721f, -2.8019f, -8.86166f));
  points.push_back(Vector3(-9.94324f, 0.409864f, -9.95361f));
  points.push_back(Vector3(2.98379f, -3.17606f, -7.23319f));
  points.push_back(Vector3(-3.71319f, -9.53856f, 7.3925f));
  points.push_back(Vector3(7.25089f, -1.31443f, -7.52861f));
  points.push_back(Vector3(-6.52699f, -6.50136f, 4.00677f));
  points.push_back(Vector3(-8.30073f, 8.07001f, -0.687582f));
  points.push_back(Vector3(-1.5775f, -9.11435f, 9.18394f));
  points.push_back(Vector3(2.02002f, 5.93799f, 0.0595111f));
  points.push_back(Vector3(-9.39451f, -1.3773f, -9.55992f));
  points.push_back(Vector3(-7.12027f, 5.38865f, -2.14087f));
  points.push_back(Vector3(-7.98883f, 0.204779f, -2.34962f));
  points.push_back(Vector3(7.30888f, -1.87841f, -0.992767f));
  points.push_back(Vector3(8.31843f, -1.34678f, 0.332957f));
  points.push_back(Vector3(4.77096f, -9.5587f, 4.23872f));
  points.push_back(Vector3(-2.87088f, 5.48692f, -0.295724f));
  points.push_back(Vector3(8.03705f, -6.48732f, 5.37828f));
  points.push_back(Vector3(-4.24604f, 4.16181f, -2.02185f));
  TestSpherePCA(points, file);
}

void SpherePCATest36(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.04965f, 5.25437f, -6.94449f));
  points.push_back(Vector3(0.98056f, 2.82022f, -8.34101f));
  points.push_back(Vector3(-1.53844f, -1.0947f, 2.59011f));
  points.push_back(Vector3(3.78033f, -8.4051f, -0.347606f));
  points.push_back(Vector3(-5.99109f, 6.24195f, 0.970183f));
  points.push_back(Vector3(0.501419f, 6.76748f, -4.62996f));
  points.push_back(Vector3(-8.58821f, -4.42183f, 2.67739f));
  points.push_back(Vector3(3.16385f, 4.62813f, -3.35063f));
  points.push_back(Vector3(5.78661f, 9.43907f, -4.71908f));
  points.push_back(Vector3(7.38945f, -7.92657f, -4.74288f));
  points.push_back(Vector3(3.2017f, 9.25352f, 4.32844f));
  points.push_back(Vector3(0.773034f, -7.64519f, 7.07694f));
  points.push_back(Vector3(7.86065f, 0.612507f, -2.81106f));
  points.push_back(Vector3(-7.47734f, -7.34977f, -0.0753807f));
  points.push_back(Vector3(6.99515f, -6.48915f, -2.4308f));
  points.push_back(Vector3(4.21552f, 8.89706f, 7.74224f));
  points.push_back(Vector3(2.2953f, 6.10034f, 0.0985748f));
  points.push_back(Vector3(8.45576f, 2.55104f, 2.09021f));
  points.push_back(Vector3(-9.9823f, 0.533158f, -5.71337f));
  points.push_back(Vector3(2.55043f, 2.9252f, -4.91806f));
  points.push_back(Vector3(2.4308f, 7.93878f, 1.71239f));
  points.push_back(Vector3(0.620441f, -0.161443f, -5.53636f));
  points.push_back(Vector3(3.42753f, -1.01352f, -7.93939f));
  points.push_back(Vector3(2.28187f, 7.18253f, 4.10077f));
  points.push_back(Vector3(-6.44398f, 9.35545f, 5.07797f));
  TestSpherePCA(points, file);
}

void SpherePCATest37(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.93857f, -7.36869f, 3.64727f));
  points.push_back(Vector3(3.45683f, -4.63118f, 5.8739f));
  points.push_back(Vector3(4.8442f, -1.1478f, 6.95181f));
  points.push_back(Vector3(-6.35914f, 6.53981f, 1.15818f));
  points.push_back(Vector3(-9.29136f, -8.20978f, -0.508744f));
  points.push_back(Vector3(-6.88833f, 3.39824f, 5.1384f));
  points.push_back(Vector3(-6.01489f, -0.355541f, -7.14469f));
  points.push_back(Vector3(-7.70257f, -2.17017f, -3.59416f));
  points.push_back(Vector3(4.91195f, 7.42485f, 3.60027f));
  points.push_back(Vector3(-9.47752f, -6.37013f, -7.98761f));
  points.push_back(Vector3(5.77319f, -8.30012f, 0.48677f));
  points.push_back(Vector3(-0.15595f, -1.63671f, 1.80883f));
  points.push_back(Vector3(-1.87475f, 8.23237f, -6.30177f));
  points.push_back(Vector3(1.06418f, 4.30464f, -1.32115f));
  points.push_back(Vector3(-7.05435f, -1.05869f, 1.66356f));
  points.push_back(Vector3(0.0704978f, 9.02768f, 7.93634f));
  points.push_back(Vector3(8.93918f, -2.46315f, -7.46147f));
  points.push_back(Vector3(8.30195f, -0.754112f, 0.101627f));
  points.push_back(Vector3(1.30284f, 1.89123f, -8.94223f));
  points.push_back(Vector3(-9.75646f, 4.18134f, 3.22428f));
  points.push_back(Vector3(7.50664f, 8.50093f, -0.232856f));
  points.push_back(Vector3(5.90503f, 9.62584f, -3.7669f));
  points.push_back(Vector3(0.588702f, -7.48405f, -0.83346f));
  points.push_back(Vector3(9.68261f, 3.44157f, 6.11805f));
  points.push_back(Vector3(-3.39213f, 8.43684f, -3.51848f));
  points.push_back(Vector3(-8.53084f, 9.98657f, -8.5577f));
  points.push_back(Vector3(3.70159f, 4.10504f, 0.17365f));
  TestSpherePCA(points, file);
}

void SpherePCATest38(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.59737f, -5.5565f, 8.13349f));
  points.push_back(Vector3(-5.05234f, -8.09809f, -4.29304f));
  points.push_back(Vector3(9.69115f, -6.66799f, -9.73266f));
  points.push_back(Vector3(-8.034f, -8.89767f, 5.75549f));
  points.push_back(Vector3(1.34556f, -1.26804f, -4.31013f));
  points.push_back(Vector3(2.69082f, 2.3954f, 8.18171f));
  points.push_back(Vector3(5.05783f, -5.08347f, 4.29304f));
  points.push_back(Vector3(8.04498f, 4.92904f, 8.52046f));
  points.push_back(Vector3(9.02646f, 1.6306f, 7.57622f));
  points.push_back(Vector3(-9.90844f, -3.40373f, -0.395825f));
  points.push_back(Vector3(-1.01779f, -2.25501f, -5.53026f));
  points.push_back(Vector3(4.15021f, 8.85433f, 3.57952f));
  points.push_back(Vector3(-7.3162f, -3.85846f, -8.38923f));
  points.push_back(Vector3(3.21635f, -2.25257f, 5.94592f));
  points.push_back(Vector3(-3.52641f, -1.97546f, 8.4521f));
  points.push_back(Vector3(-1.51585f, -5.21653f, 5.67125f));
  points.push_back(Vector3(6.72719f, -6.82485f, 2.66884f));
  points.push_back(Vector3(4.61776f, 6.65395f, 9.3878f));
  points.push_back(Vector3(7.19047f, 8.18232f, -5.22996f));
  points.push_back(Vector3(-1.97729f, -5.91174f, -6.19861f));
  points.push_back(Vector3(4.79171f, 9.86023f, 5.2562f));
  points.push_back(Vector3(3.11136f, -0.132145f, 1.27903f));
  points.push_back(Vector3(4.06415f, -1.52867f, 5.50645f));
  points.push_back(Vector3(7.99371f, -3.33964f, -8.43684f));
  points.push_back(Vector3(6.28407f, 7.41813f, 7.37541f));
  points.push_back(Vector3(9.68017f, 9.4702f, 0.290231f));
  points.push_back(Vector3(-3.65093f, -4.6617f, 8.69503f));
  points.push_back(Vector3(-7.82342f, -2.48512f, 4.83871f));
  points.push_back(Vector3(-9.22666f, 5.49058f, 5.05417f));
  points.push_back(Vector3(1.38707f, -1.17038f, 2.63283f));
  points.push_back(Vector3(6.45558f, 8.42341f, -5.17991f));
  points.push_back(Vector3(-9.09787f, -9.69726f, -1.23936f));
  points.push_back(Vector3(-5.38804f, 9.78149f, 6.91214f));
  points.push_back(Vector3(5.17502f, -1.28636f, -8.77133f));
  points.push_back(Vector3(9.94201f, 8.06513f, -8.20002f));
  points.push_back(Vector3(-6.386f, -2.88797f, 5.80432f));
  points.push_back(Vector3(-5.84948f, -0.103458f, -1.85461f));
  points.push_back(Vector3(3.41655f, -1.87353f, 0.698569f));
  points.push_back(Vector3(8.05902f, 5.19394f, -7.18925f));
  points.push_back(Vector3(-7.11844f, -6.06494f, 6.89077f));
  points.push_back(Vector3(9.94018f, -5.74572f, -6.70522f));
  points.push_back(Vector3(-6.89749f, -5.75304f, 5.04135f));
  points.push_back(Vector3(-7.80633f, -4.52132f, -8.65474f));
  points.push_back(Vector3(-3.26823f, 1.17283f, -2.63283f));
  points.push_back(Vector3(-3.72417f, -1.06052f, -2.81716f));
  points.push_back(Vector3(0.539262f, -4.15571f, 4.89059f));
  TestSpherePCA(points, file);
}

void SpherePCATest39(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.73104f, -5.0969f, -2.39662f));
  points.push_back(Vector3(-9.08689f, -9.89746f, -4.87106f));
  points.push_back(Vector3(2.41188f, -6.96158f, -4.9498f));
  points.push_back(Vector3(3.38298f, -2.8489f, 3.95428f));
  points.push_back(Vector3(-3.99152f, 2.09449f, 8.17377f));
  points.push_back(Vector3(-6.32557f, 5.71215f, -5.2916f));
  points.push_back(Vector3(-9.80712f, -7.09037f, -2.52724f));
  points.push_back(Vector3(-5.02609f, -9.08078f, 1.66845f));
  points.push_back(Vector3(-8.14203f, 9.39818f, -3.80657f));
  points.push_back(Vector3(-3.65764f, 7.94916f, 5.98682f));
  points.push_back(Vector3(-3.7376f, -6.61184f, 4.78072f));
  points.push_back(Vector3(-7.59575f, 3.80779f, -2.26051f));
  points.push_back(Vector3(8.61751f, -3.33171f, 4.35896f));
  points.push_back(Vector3(-5.93127f, -8.33857f, -6.4922f));
  points.push_back(Vector3(9.71191f, 9.02707f, -2.16102f));
  points.push_back(Vector3(9.51537f, -5.01572f, 2.58217f));
  points.push_back(Vector3(1.27781f, -9.7943f, 9.92798f));
  TestSpherePCA(points, file);
}

void SpherePCATest40(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.5876f, 7.2454f, 2.64992f));
  points.push_back(Vector3(8.38313f, 3.37992f, 7.69097f));
  points.push_back(Vector3(-0.810877f, 4.39924f, 0.657063f));
  points.push_back(Vector3(-6.79617f, -9.34873f, 5.88977f));
  points.push_back(Vector3(8.90866f, 9.22788f, 3.41472f));
  points.push_back(Vector3(-4.39802f, 4.23749f, 4.41084f));
  points.push_back(Vector3(-9.35545f, 6.70888f, -0.869472f));
  points.push_back(Vector3(-4.71114f, -9.24924f, 9.92737f));
  points.push_back(Vector3(-6.4098f, -4.62081f, -7.39555f));
  points.push_back(Vector3(0.37141f, 7.09281f, 1.81494f));
  points.push_back(Vector3(8.1402f, 2.24891f, -3.01614f));
  points.push_back(Vector3(2.63833f, 2.96182f, -0.462355f));
  points.push_back(Vector3(-1.04221f, -2.10669f, 5.58519f));
  points.push_back(Vector3(-9.23582f, -4.78378f, -2.37953f));
  points.push_back(Vector3(5.93371f, -3.99091f, 5.96057f));
  points.push_back(Vector3(9.8999f, 3.72417f, -5.74023f));
  points.push_back(Vector3(9.82055f, 2.05359f, -2.64931f));
  points.push_back(Vector3(-0.753502f, 8.85861f, 8.13898f));
  points.push_back(Vector3(-6.08814f, -8.12555f, 3.76751f));
  points.push_back(Vector3(5.85315f, -9.01425f, -2.61452f));
  points.push_back(Vector3(-5.11277f, -4.01837f, -9.20347f));
  points.push_back(Vector3(5.36912f, -5.33006f, 7.50847f));
  points.push_back(Vector3(-2.61818f, 0.751061f, 7.21244f));
  points.push_back(Vector3(1.51158f, -2.60231f, 3.88653f));
  points.push_back(Vector3(0.484939f, -3.02103f, -4.82101f));
  points.push_back(Vector3(7.87347f, 6.88223f, -8.3404f));
  points.push_back(Vector3(2.6841f, -8.77743f, -2.28431f));
  points.push_back(Vector3(1.08066f, -5.05539f, -5.99597f));
  points.push_back(Vector3(7.28141f, 8.85006f, -8.34712f));
  points.push_back(Vector3(-4.40962f, -7.88324f, -8.62239f));
  points.push_back(Vector3(-4.49934f, 2.13294f, 1.08493f));
  points.push_back(Vector3(-9.86511f, 7.90765f, 1.8833f));
  points.push_back(Vector3(1.89734f, -5.42528f, -7.24967f));
  points.push_back(Vector3(-3.50017f, -0.28901f, 8.84335f));
  points.push_back(Vector3(8.7347f, 6.44398f, -6.57949f));
  points.push_back(Vector3(5.40574f, 1.00925f, -1.38524f));
  points.push_back(Vector3(5.27146f, -1.2888f, -7.31742f));
  points.push_back(Vector3(-5.67309f, 9.41282f, 2.02307f));
  points.push_back(Vector3(6.83035f, 5.77074f, -4.97177f));
  points.push_back(Vector3(0.532548f, -0.356761f, -0.932951f));
  points.push_back(Vector3(9.66002f, 3.89386f, -4.66659f));
  points.push_back(Vector3(-7.94183f, -1.65319f, -8.70785f));
  points.push_back(Vector3(3.42265f, 4.94308f, 4.21735f));
  points.push_back(Vector3(-7.81732f, 9.035f, -8.11335f));
  points.push_back(Vector3(6.14551f, -4.18928f, -3.17423f));
  points.push_back(Vector3(-8.25617f, -0.893277f, -7.34916f));
  points.push_back(Vector3(-0.827967f, 5.99353f, -7.14835f));
  points.push_back(Vector3(0.884121f, 9.23338f, 2.03528f));
  points.push_back(Vector3(-5.47533f, 1.03916f, 9.53551f));
  points.push_back(Vector3(9.96094f, -9.14487f, -8.07794f));
  points.push_back(Vector3(-3.32438f, -9.07712f, -4.45845f));
  points.push_back(Vector3(-9.03745f, -7.20634f, 5.23545f));
  points.push_back(Vector3(-2.54128f, -7.90643f, 4.41755f));
  points.push_back(Vector3(-1.67882f, -4.69344f, 4.30219f));
  points.push_back(Vector3(-0.675985f, -7.36015f, -5.66637f));
  points.push_back(Vector3(3.96344f, 2.02979f, 3.71685f));
  points.push_back(Vector3(-9.24863f, 4.09162f, -1.46153f));
  points.push_back(Vector3(8.39229f, -0.527055f, -6.36891f));
  points.push_back(Vector3(-9.02768f, 3.43364f, -9.20774f));
  points.push_back(Vector3(9.91089f, -7.28751f, 2.61513f));
  points.push_back(Vector3(-8.35933f, -2.62001f, 4.67086f));
  points.push_back(Vector3(-9.59899f, -2.96731f, -4.22529f));
  points.push_back(Vector3(3.31584f, 0.358593f, 7.33207f));
  points.push_back(Vector3(-9.19309f, 1.09165f, -3.58196f));
  points.push_back(Vector3(-3.03201f, -9.47264f, 9.8352f));
  points.push_back(Vector3(5.11216f, -9.78149f, 0.472121f));
  points.push_back(Vector3(7.82647f, -3.08267f, 9.6881f));
  points.push_back(Vector3(0.727866f, 1.1063f, 4.8204f));
  points.push_back(Vector3(-6.89261f, -1.96692f, -0.336619f));
  points.push_back(Vector3(-1.7655f, 4.07941f, -3.95611f));
  points.push_back(Vector3(-0.857875f, 0.398267f, -7.60918f));
  points.push_back(Vector3(-3.11014f, 8.67122f, 7.36991f));
  points.push_back(Vector3(9.52879f, -2.85745f, -4.54085f));
  points.push_back(Vector3(-3.24992f, -4.99741f, -8.67672f));
  points.push_back(Vector3(6.77175f, 4.25764f, -0.872524f));
  points.push_back(Vector3(6.07837f, -0.0918607f, -3.72051f));
  points.push_back(Vector3(-2.13355f, -1.86438f, 0.822474f));
  points.push_back(Vector3(-3.4727f, 5.374f, -0.813929f));
  points.push_back(Vector3(1.99683f, -5.08896f, -0.145573f));
  points.push_back(Vector3(0.793176f, 0.194403f, -3.2255f));
  points.push_back(Vector3(8.37458f, 2.47291f, 4.72579f));
  points.push_back(Vector3(0.600909f, 6.23585f, -3.93658f));
  points.push_back(Vector3(-3.15409f, 2.32276f, -3.45012f));
  points.push_back(Vector3(9.50438f, -9.09116f, -5.6444f));
  points.push_back(Vector3(5.63219f, 3.15897f, -2.09387f));
  points.push_back(Vector3(-2.51137f, -0.162664f, 1.79907f));
  points.push_back(Vector3(2.00903f, -6.25416f, -0.529496f));
  points.push_back(Vector3(-4.62264f, -9.25047f, -1.64769f));
  points.push_back(Vector3(-4.6086f, -8.28242f, 9.4586f));
  points.push_back(Vector3(-1.07578f, 3.9378f, -5.75976f));
  points.push_back(Vector3(0.577105f, 0.0161748f, 5.79211f));
  points.push_back(Vector3(7.85394f, -1.50792f, 1.13804f));
  points.push_back(Vector3(4.42854f, 6.13514f, 0.489822f));
  points.push_back(Vector3(6.37745f, 9.74242f, 2.92398f));
  points.push_back(Vector3(4.47493f, -6.25294f, 2.50587f));
  TestSpherePCA(points, file);
}

void SpherePCATest41(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.75951f, 9.78515f, -8.5638f));
  points.push_back(Vector3(-7.62078f, 1.61596f, -1.56102f));
  points.push_back(Vector3(2.172f, -5.04135f, -5.13352f));
  points.push_back(Vector3(-0.336009f, 3.73272f, -9.91821f));
  points.push_back(Vector3(3.55998f, -9.02951f, -1.05747f));
  points.push_back(Vector3(-6.80837f, -0.384228f, -8.1579f));
  points.push_back(Vector3(-6.37623f, 4.01715f, 2.25745f));
  points.push_back(Vector3(-0.614338f, 2.12867f, -7.51885f));
  points.push_back(Vector3(-7.22282f, 6.53005f, 5.2501f));
  points.push_back(Vector3(7.46757f, 0.751061f, 5.88549f));
  points.push_back(Vector3(-8.85922f, -3.44768f, -2.67861f));
  points.push_back(Vector3(-7.60674f, -0.128483f, -5.14878f));
  points.push_back(Vector3(1.1771f, 7.88934f, 2.23731f));
  points.push_back(Vector3(-8.9172f, -7.14835f, 0.702231f));
  points.push_back(Vector3(-6.54897f, 8.98801f, 2.96915f));
  points.push_back(Vector3(3.42448f, -7.64885f, -7.77642f));
  points.push_back(Vector3(-9.94263f, 1.96387f, 6.72842f));
  points.push_back(Vector3(-9.13816f, -6.43849f, -0.984222f));
  points.push_back(Vector3(-4.57808f, -2.38868f, -2.3307f));
  points.push_back(Vector3(5.06943f, 7.79717f, -8.10785f));
  points.push_back(Vector3(-8.40815f, 0.0796533f, -8.77926f));
  points.push_back(Vector3(-0.113834f, 1.90771f, -1.06967f));
  points.push_back(Vector3(7.1868f, 8.6932f, 2.60475f));
  points.push_back(Vector3(3.80963f, 6.6802f, 2.70608f));
  points.push_back(Vector3(-1.55858f, -3.37809f, 5.43931f));
  points.push_back(Vector3(0.343944f, 7.25455f, -5.42955f));
  points.push_back(Vector3(9.71923f, -0.739464f, -3.16385f));
  points.push_back(Vector3(2.02185f, -6.81387f, 8.15241f));
  points.push_back(Vector3(2.00842f, 1.7893f, -4.42366f));
  points.push_back(Vector3(-6.70827f, -2.48817f, -1.04831f));
  points.push_back(Vector3(3.72845f, -2.07984f, -7.65069f));
  points.push_back(Vector3(0.342723f, 5.63402f, 2.60537f));
  points.push_back(Vector3(1.19236f, 2.81838f, -1.88757f));
  points.push_back(Vector3(4.71053f, -1.5183f, -6.54897f));
  points.push_back(Vector3(-1.25217f, 5.08652f, -9.14121f));
  points.push_back(Vector3(-5.24766f, 2.70913f, 0.112003f));
  points.push_back(Vector3(-6.47084f, -1.93274f, -4.92538f));
  points.push_back(Vector3(7.21793f, 6.20594f, -1.74841f));
  points.push_back(Vector3(-0.706503f, 2.00476f, -5.75732f));
  points.push_back(Vector3(-7.23197f, -7.59941f, -4.90646f));
  points.push_back(Vector3(-9.40855f, -1.68065f, 7.62078f));
  points.push_back(Vector3(6.82607f, 4.20209f, 8.14447f));
  points.push_back(Vector3(-5.02976f, 7.93634f, -9.50865f));
  TestSpherePCA(points, file);
}

void SpherePCATest42(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.69686f, 6.42872f, 2.96182f));
  points.push_back(Vector3(0.593585f, -2.87332f, -4.12763f));
  points.push_back(Vector3(-5.29344f, 2.66579f, 6.3744f));
  points.push_back(Vector3(-0.409253f, -4.38398f, 4.41084f));
  points.push_back(Vector3(5.7213f, -6.22181f, -1.56163f));
  points.push_back(Vector3(-6.42628f, 3.97504f, 5.88855f));
  points.push_back(Vector3(9.18882f, -2.99905f, -4.08063f));
  points.push_back(Vector3(-4.39619f, 6.71316f, -5.54796f));
  points.push_back(Vector3(3.3787f, 4.1435f, -2.70913f));
  points.push_back(Vector3(7.29423f, -8.36482f, -2.49855f));
  points.push_back(Vector3(7.40043f, -7.29789f, 9.3292f));
  points.push_back(Vector3(-0.735191f, 7.7752f, 3.99762f));
  points.push_back(Vector3(9.94812f, -1.37608f, -8.12983f));
  points.push_back(Vector3(7.7337f, 3.05643f, 9.20164f));
  points.push_back(Vector3(1.87536f, -1.8247f, -6.63259f));
  points.push_back(Vector3(4.32844f, 5.38133f, -0.216376f));
  points.push_back(Vector3(-4.20515f, 4.39253f, -4.15326f));
  points.push_back(Vector3(-1.67333f, 4.60494f, 1.87719f));
  points.push_back(Vector3(-0.0283822f, -8.74508f, 4.79598f));
  points.push_back(Vector3(-0.274972f, 5.10971f, -2.03955f));
  points.push_back(Vector3(3.83099f, 8.64437f, 9.85046f));
  points.push_back(Vector3(0.53621f, -8.15668f, -1.01535f));
  points.push_back(Vector3(-9.11618f, -4.32295f, 8.44844f));
  points.push_back(Vector3(-7.18558f, 9.28648f, 8.33369f));
  points.push_back(Vector3(4.27351f, -8.19086f, 9.33653f));
  points.push_back(Vector3(7.74712f, -4.64827f, 6.5923f));
  points.push_back(Vector3(-6.9982f, -3.502f, -1.51646f));
  points.push_back(Vector3(3.14127f, 3.21574f, -6.8157f));
  points.push_back(Vector3(5.69994f, -8.10358f, -0.939055f));
  points.push_back(Vector3(-0.644856f, 5.95508f, -4.81857f));
  points.push_back(Vector3(-4.00189f, -8.67f, -7.82769f));
  points.push_back(Vector3(-1.42674f, -5.74084f, 7.52922f));
  points.push_back(Vector3(1.76305f, 1.8424f, 8.52473f));
  points.push_back(Vector3(-8.07245f, 8.74569f, -4.90951f));
  points.push_back(Vector3(2.01819f, 4.27656f, -4.40413f));
  points.push_back(Vector3(-4.29853f, -1.85888f, -2.29957f));
  points.push_back(Vector3(2.94839f, -8.25373f, -7.22953f));
  points.push_back(Vector3(-5.69201f, 5.26902f, 7.45293f));
  points.push_back(Vector3(0.342723f, -0.56856f, -9.36521f));
  points.push_back(Vector3(-3.62896f, -3.1431f, 5.12436f));
  points.push_back(Vector3(-7.26005f, -2.13843f, -7.08853f));
  points.push_back(Vector3(3.54228f, -6.75222f, 2.52846f));
  points.push_back(Vector3(-0.0894192f, 0.835292f, 2.62734f));
  points.push_back(Vector3(2.21839f, 2.55654f, -7.83319f));
  points.push_back(Vector3(-2.41676f, -9.77905f, 0.753502f));
  points.push_back(Vector3(8.49605f, 3.22123f, 7.28874f));
  points.push_back(Vector3(-5.94348f, -4.26435f, -1.94433f));
  points.push_back(Vector3(-0.906705f, -8.21833f, -3.07047f));
  points.push_back(Vector3(-9.99695f, 0.768761f, 1.90161f));
  points.push_back(Vector3(-1.95105f, 1.46764f, -5.86718f));
  points.push_back(Vector3(1.86071f, 8.05902f, -8.33979f));
  points.push_back(Vector3(-6.76077f, 4.42793f, -6.14246f));
  points.push_back(Vector3(-5.73107f, 3.87432f, 1.71178f));
  points.push_back(Vector3(0.732139f, -1.39927f, -7.38334f));
  points.push_back(Vector3(0.465407f, -1.06052f, -7.67083f));
  points.push_back(Vector3(-8.89706f, -8.19391f, 7.05191f));
  points.push_back(Vector3(-6.03076f, -8.89401f, 8.4753f));
  points.push_back(Vector3(-7.3217f, -6.80105f, -3.94024f));
  points.push_back(Vector3(-7.24479f, 1.20273f, 7.16422f));
  TestSpherePCA(points, file);
}

void SpherePCATest43(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.47407f, 1.18259f, 4.14533f));
  points.push_back(Vector3(5.54674f, 2.22449f, 4.30158f));
  points.push_back(Vector3(7.47185f, 2.55898f, -4.90402f));
  points.push_back(Vector3(-0.687582f, 5.50584f, 7.42241f));
  points.push_back(Vector3(-0.879238f, 4.87533f, -4.51888f));
  points.push_back(Vector3(-1.20518f, -2.76406f, 5.42528f));
  points.push_back(Vector3(-5.66454f, 5.13291f, -3.72356f));
  points.push_back(Vector3(-6.12903f, -6.88284f, -6.03504f));
  points.push_back(Vector3(1.62877f, 0.115055f, -6.07044f));
  points.push_back(Vector3(-6.4391f, -5.25193f, -8.98862f));
  points.push_back(Vector3(-7.4572f, -2.40272f, 1.64525f));
  points.push_back(Vector3(-2.59316f, -0.207831f, -6.53859f));
  points.push_back(Vector3(-9.52269f, -6.13697f, 4.88937f));
  points.push_back(Vector3(4.81552f, 6.36403f, 6.70949f));
  points.push_back(Vector3(-6.22364f, 9.03684f, 1.55675f));
  points.push_back(Vector3(-3.96222f, 5.64318f, 0.171819f));
  points.push_back(Vector3(9.08322f, 7.26676f, 0.727866f));
  points.push_back(Vector3(-1.98096f, -2.00537f, -2.09937f));
  points.push_back(Vector3(2.54128f, -6.02832f, -1.66173f));
  points.push_back(Vector3(-4.88815f, 7.622f, -5.75549f));
  points.push_back(Vector3(-6.01794f, 9.76867f, 5.95996f));
  points.push_back(Vector3(-8.89584f, -8.58272f, 2.52358f));
  points.push_back(Vector3(5.20676f, 2.73598f, 2.65908f));
  points.push_back(Vector3(7.61528f, 1.80395f, -7.63237f));
  points.push_back(Vector3(-9.6234f, 9.97314f, -7.85638f));
  points.push_back(Vector3(7.27653f, -6.62404f, 1.27537f));
  points.push_back(Vector3(6.90054f, 8.30073f, 0.555742f));
  points.push_back(Vector3(-9.41954f, 1.64586f, -9.51048f));
  points.push_back(Vector3(-8.5345f, -4.85397f, 6.88528f));
  points.push_back(Vector3(5.50706f, -8.40632f, 7.07266f));
  points.push_back(Vector3(-9.37864f, 6.41896f, 0.50325f));
  points.push_back(Vector3(1.39073f, -3.40312f, 5.48692f));
  points.push_back(Vector3(0.945158f, 1.22471f, -8.6877f));
  points.push_back(Vector3(5.60167f, 7.07511f, 5.64135f));
  points.push_back(Vector3(2.96793f, -4.03668f, -0.10651f));
  points.push_back(Vector3(-4.17463f, 5.43687f, -7.34733f));
  points.push_back(Vector3(8.04254f, 5.20249f, -9.58983f));
  points.push_back(Vector3(-5.29038f, 2.07007f, 9.12351f));
  points.push_back(Vector3(0.826136f, -3.6607f, 0.308542f));
  points.push_back(Vector3(-0.245674f, 8.71273f, 5.88122f));
  points.push_back(Vector3(-5.5327f, 1.78076f, -9.4293f));
  points.push_back(Vector3(-7.84234f, -6.91458f, -5.44359f));
  points.push_back(Vector3(3.4257f, 8.83663f, -9.04416f));
  points.push_back(Vector3(-3.67168f, -5.34288f, -2.58522f));
  points.push_back(Vector3(2.65542f, -3.85113f, 8.75607f));
  points.push_back(Vector3(-0.526444f, 8.29829f, 9.11802f));
  points.push_back(Vector3(4.10932f, -1.1948f, 9.64049f));
  points.push_back(Vector3(0.557573f, 2.95572f, 4.05316f));
  points.push_back(Vector3(4.66598f, -5.22629f, 7.62871f));
  points.push_back(Vector3(-7.51335f, -1.23386f, -6.00452f));
  points.push_back(Vector3(6.21204f, 5.52721f, 0.655232f));
  points.push_back(Vector3(3.1492f, 0.736412f, -3.3372f));
  points.push_back(Vector3(1.12827f, 6.06739f, 1.03977f));
  points.push_back(Vector3(2.36854f, 2.80251f, 8.77682f));
  points.push_back(Vector3(-2.58644f, -3.34269f, -1.04343f));
  points.push_back(Vector3(-4.52803f, -4.83016f, -0.103458f));
  points.push_back(Vector3(9.59899f, -7.17887f, 4.24055f));
  points.push_back(Vector3(2.49489f, -7.11661f, 8.20612f));
  points.push_back(Vector3(6.94327f, -5.8916f, 0.00762963f));
  points.push_back(Vector3(-2.46376f, -2.96182f, -1.0239f));
  points.push_back(Vector3(-8.29402f, 8.26533f, -6.80349f));
  points.push_back(Vector3(8.00653f, 4.47798f, -6.78701f));
  points.push_back(Vector3(0.00946074f, 8.25922f, 4.6556f));
  points.push_back(Vector3(0.84994f, -0.341502f, 0.423292f));
  points.push_back(Vector3(-1.53783f, -2.36366f, 7.37968f));
  points.push_back(Vector3(4.93576f, -3.84075f, 8.06818f));
  points.push_back(Vector3(-6.16443f, 7.35343f, -1.57018f));
  points.push_back(Vector3(8.03644f, 7.53471f, 3.61003f));
  points.push_back(Vector3(3.10831f, -2.86477f, 0.404981f));
  points.push_back(Vector3(-4.2204f, 0.385449f, 5.54186f));
  points.push_back(Vector3(9.66613f, -1.02451f, -5.37767f));
  points.push_back(Vector3(1.0831f, -0.893887f, -9.99756f));
  points.push_back(Vector3(0.88229f, -7.86615f, -7.09281f));
  points.push_back(Vector3(-1.60375f, -5.68224f, -8.04437f));
  points.push_back(Vector3(5.12803f, -9.53307f, 0.537431f));
  points.push_back(Vector3(0.100406f, -2.02246f, 6.9805f));
  points.push_back(Vector3(5.06882f, 6.51967f, -7.99615f));
  points.push_back(Vector3(5.0914f, -9.94995f, -6.01489f));
  points.push_back(Vector3(1.32054f, 5.16282f, -3.72417f));
  points.push_back(Vector3(4.46211f, -3.00089f, -6.90603f));
  points.push_back(Vector3(-1.28513f, 5.0444f, -8.25373f));
  points.push_back(Vector3(-1.21982f, -6.36769f, -0.904874f));
  points.push_back(Vector3(9.00266f, 1.32542f, 5.43931f));
  TestSpherePCA(points, file);
}

void SpherePCATest44(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.65535f, 4.19477f, -8.06635f));
  points.push_back(Vector3(9.0228f, 9.33287f, 6.2035f));
  points.push_back(Vector3(-5.40025f, 5.14573f, -1.99072f));
  points.push_back(Vector3(0.788293f, -6.27979f, 4.97543f));
  points.push_back(Vector3(9.48363f, 5.85925f, 2.8843f));
  points.push_back(Vector3(-4.19721f, 7.71172f, 2.05115f));
  points.push_back(Vector3(-7.34672f, -1.47435f, 2.2367f));
  points.push_back(Vector3(-5.97095f, -0.836512f, 4.36079f));
  points.push_back(Vector3(-9.45006f, 5.88855f, -9.58983f));
  points.push_back(Vector3(-1.53111f, -0.281075f, -1.21555f));
  points.push_back(Vector3(5.86474f, 3.62041f, 7.88812f));
  points.push_back(Vector3(8.9172f, -4.97177f, 7.022f));
  points.push_back(Vector3(-3.70281f, -6.01856f, -9.43907f));
  points.push_back(Vector3(3.43608f, -7.57378f, 6.23402f));
  points.push_back(Vector3(1.6068f, -2.28797f, -5.0969f));
  points.push_back(Vector3(0.273751f, 2.93008f, -0.143742f));
  points.push_back(Vector3(0.786462f, -6.31886f, 5.51256f));
  points.push_back(Vector3(-4.23139f, 5.86535f, 8.63155f));
  points.push_back(Vector3(4.20331f, 6.76443f, -1.41514f));
  points.push_back(Vector3(-7.39006f, 8.081f, 1.01352f));
  points.push_back(Vector3(-1.76611f, 6.35487f, 9.12107f));
  points.push_back(Vector3(-9.98291f, -1.98645f, -2.85195f));
  points.push_back(Vector3(-5.18052f, -6.74917f, 3.61248f));
  points.push_back(Vector3(5.59008f, 0.383618f, 4.0904f));
  points.push_back(Vector3(7.91803f, 3.96527f, 6.11255f));
  points.push_back(Vector3(0.159001f, -7.51885f, -5.65539f));
  points.push_back(Vector3(-4.39253f, -8.78903f, -3.62774f));
  points.push_back(Vector3(4.53658f, 0.421461f, 7.67937f));
  points.push_back(Vector3(3.03079f, -9.99451f, 6.77786f));
  points.push_back(Vector3(3.00882f, 5.76281f, -0.0888089f));
  points.push_back(Vector3(9.99023f, -7.09098f, 2.48512f));
  points.push_back(Vector3(-4.64888f, -7.80267f, 4.64644f));
  points.push_back(Vector3(0.359813f, -2.02307f, 9.04721f));
  points.push_back(Vector3(-0.508744f, 0.932341f, -2.9313f));
  points.push_back(Vector3(0.945769f, 1.46764f, 6.40187f));
  points.push_back(Vector3(-6.77541f, -5.4912f, -4.49629f));
  points.push_back(Vector3(-2.34657f, 6.76992f, 9.82849f));
  points.push_back(Vector3(8.1341f, 4.66964f, 9.01608f));
  points.push_back(Vector3(-0.81637f, -6.14856f, -0.0509659f));
  points.push_back(Vector3(4.50545f, -7.17032f, 0.265816f));
  points.push_back(Vector3(-4.43587f, 2.34657f, -2.52724f));
  points.push_back(Vector3(-4.84298f, -5.5327f, 4.78378f));
  points.push_back(Vector3(3.06986f, 8.58577f, -3.31095f));
  points.push_back(Vector3(-8.88607f, 3.57524f, -6.84927f));
  points.push_back(Vector3(-8.96603f, 5.08286f, 7.25394f));
  points.push_back(Vector3(-4.44624f, -7.07755f, 3.88165f));
  points.push_back(Vector3(2.19153f, 2.56142f, -1.02206f));
  points.push_back(Vector3(-3.13211f, -7.37358f, -5.48509f));
  points.push_back(Vector3(-0.99765f, -7.85577f, -8.27509f));
  points.push_back(Vector3(9.50682f, -4.03912f, -0.893277f));
  points.push_back(Vector3(6.42628f, -8.66573f, -5.4033f));
  points.push_back(Vector3(5.09751f, -0.0143437f, 4.38398f));
  points.push_back(Vector3(9.3054f, -5.71459f, 7.83563f));
  points.push_back(Vector3(8.53877f, -8.11151f, 6.89688f));
  points.push_back(Vector3(-7.60674f, -2.73843f, 9.82238f));
  points.push_back(Vector3(6.92251f, -7.56279f, -8.0401f));
  points.push_back(Vector3(-4.3498f, -3.57219f, -7.31925f));
  points.push_back(Vector3(-4.23078f, -1.8601f, 4.58724f));
  points.push_back(Vector3(9.16562f, -0.127262f, -4.17829f));
  points.push_back(Vector3(9.57213f, -3.9024f, 5.48753f));
  points.push_back(Vector3(3.53191f, 1.41331f, 9.76012f));
  points.push_back(Vector3(-5.36363f, -7.40837f, 3.96954f));
  points.push_back(Vector3(-4.88754f, -7.16117f, -4.7557f));
  points.push_back(Vector3(4.11542f, -9.28159f, -3.16446f));
  points.push_back(Vector3(-6.02832f, 6.28712f, -2.38502f));
  points.push_back(Vector3(-9.51964f, 6.32435f, 0.50264f));
  points.push_back(Vector3(7.75079f, 1.92053f, 5.87695f));
  points.push_back(Vector3(1.98279f, -2.3777f, 5.1915f));
  points.push_back(Vector3(9.94934f, -9.50194f, 2.73049f));
  points.push_back(Vector3(-0.652181f, -5.2971f, 7.57195f));
  points.push_back(Vector3(-1.52135f, 8.26472f, 8.25373f));
  points.push_back(Vector3(-0.347606f, 3.14859f, -5.77929f));
  points.push_back(Vector3(2.40577f, 5.39293f, 8.56136f));
  points.push_back(Vector3(8.39961f, -6.34327f, -4.84359f));
  TestSpherePCA(points, file);
}

void SpherePCATest45(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.45433f, -6.48793f, -0.339671f));
  points.push_back(Vector3(-0.497147f, 4.83016f, 5.1323f));
  points.push_back(Vector3(-7.17582f, 1.59886f, -3.21818f));
  points.push_back(Vector3(5.53392f, 9.92126f, -5.80493f));
  points.push_back(Vector3(-9.02829f, -3.87066f, -8.66939f));
  points.push_back(Vector3(-7.71172f, 3.98175f, -7.54021f));
  points.push_back(Vector3(4.58357f, 0.839564f, 8.28059f));
  points.push_back(Vector3(5.05478f, 4.27045f, 7.53166f));
  points.push_back(Vector3(-3.54167f, -0.759606f, -4.87777f));
  points.push_back(Vector3(6.02954f, -6.06861f, 9.52025f));
  points.push_back(Vector3(-8.61995f, -9.61852f, -1.74596f));
  points.push_back(Vector3(-5.85925f, -4.4261f, -8.82748f));
  points.push_back(Vector3(-6.84988f, 5.49242f, 9.84313f));
  points.push_back(Vector3(-5.93921f, -4.59456f, 1.94128f));
  points.push_back(Vector3(2.92398f, -8.6755f, 2.72744f));
  points.push_back(Vector3(-3.25846f, 5.92273f, 7.0397f));
  points.push_back(Vector3(0.710166f, 9.64049f, 0.0021363f));
  points.push_back(Vector3(6.51357f, -2.96854f, -3.20231f));
  points.push_back(Vector3(9.1113f, -9.39146f, 0.990936f));
  points.push_back(Vector3(4.66109f, 0.871303f, 5.56688f));
  points.push_back(Vector3(-3.46904f, 3.40129f, 8.764f));
  points.push_back(Vector3(8.96603f, 6.86148f, 5.5504f));
  points.push_back(Vector3(-1.2833f, 2.44301f, -1.19663f));
  points.push_back(Vector3(5.4564f, -6.75588f, -8.21161f));
  points.push_back(Vector3(4.99374f, 5.18418f, -3.76141f));
  points.push_back(Vector3(5.05844f, -7.94488f, 2.48695f));
  points.push_back(Vector3(-8.43806f, 9.31211f, -7.11844f));
  points.push_back(Vector3(6.47084f, -1.45787f, -3.38664f));
  points.push_back(Vector3(-8.86471f, -3.41472f, -2.48573f));
  points.push_back(Vector3(-0.0894192f, -3.89203f, -9.44761f));
  points.push_back(Vector3(8.52657f, 9.42442f, -3.94879f));
  points.push_back(Vector3(-3.12967f, -3.67229f, -9.82788f));
  points.push_back(Vector3(8.11029f, -2.49001f, 4.77828f));
  points.push_back(Vector3(-8.7524f, -7.01468f, -3.56426f));
  points.push_back(Vector3(-6.20472f, 7.48039f, -7.55669f));
  points.push_back(Vector3(-0.434889f, 1.96081f, 4.11054f));
  points.push_back(Vector3(-2.19092f, 1.80639f, 7.92169f));
  points.push_back(Vector3(5.08835f, 7.55058f, 6.78457f));
  points.push_back(Vector3(-6.29688f, -4.36262f, 2.10059f));
  points.push_back(Vector3(-5.10971f, 3.0607f, -0.300607f));
  points.push_back(Vector3(-5.97766f, 5.28001f, -2.00537f));
  points.push_back(Vector3(2.88125f, 1.65807f, 7.43278f));
  points.push_back(Vector3(6.55751f, 1.54515f, 4.36933f));
  points.push_back(Vector3(7.91681f, 5.07126f, 8.64681f));
  points.push_back(Vector3(7.51701f, 7.96686f, 7.88812f));
  points.push_back(Vector3(-3.03751f, -4.71847f, -2.48878f));
  points.push_back(Vector3(7.80877f, -9.67772f, -0.534379f));
  points.push_back(Vector3(1.26865f, 0.299387f, 3.47392f));
  points.push_back(Vector3(2.39845f, 2.53822f, -5.38743f));
  points.push_back(Vector3(1.20762f, 2.0603f, 0.312204f));
  points.push_back(Vector3(4.95346f, -2.63771f, -2.42897f));
  points.push_back(Vector3(5.3325f, 4.8088f, 4.34004f));
  points.push_back(Vector3(3.14066f, -9.2822f, -2.43629f));
  points.push_back(Vector3(-6.24805f, 8.63216f, 2.78909f));
  points.push_back(Vector3(6.53432f, -1.17588f, -5.15488f));
  points.push_back(Vector3(7.70989f, -2.46193f, -0.814539f));
  points.push_back(Vector3(1.65624f, -0.426954f, -2.8721f));
  points.push_back(Vector3(-1.33946f, -2.87149f, 5.56566f));
  points.push_back(Vector3(-0.381787f, -3.29875f, 5.72985f));
  points.push_back(Vector3(-6.18397f, 6.02039f, 4.07086f));
  points.push_back(Vector3(3.77483f, -0.426344f, 8.02179f));
  points.push_back(Vector3(3.4135f, 0.215155f, -4.67696f));
  points.push_back(Vector3(0.125431f, 5.33006f, -9.08567f));
  points.push_back(Vector3(0.481277f, -6.91824f, 0.588092f));
  points.push_back(Vector3(4.51582f, -3.72539f, -8.26899f));
  points.push_back(Vector3(-0.909146f, 8.04132f, 1.45116f));
  points.push_back(Vector3(-9.61242f, -3.77667f, -9.6588f));
  points.push_back(Vector3(-5.57176f, 8.88852f, -2.78542f));
  points.push_back(Vector3(-8.47652f, -2.48512f, 2.42592f));
  points.push_back(Vector3(0.126041f, -3.52336f, 8.82687f));
  points.push_back(Vector3(8.30317f, 8.09931f, 0.625935f));
  points.push_back(Vector3(-2.47658f, 2.7195f, -8.51131f));
  points.push_back(Vector3(6.04236f, 7.9931f, -9.27305f));
  points.push_back(Vector3(-9.49706f, -3.98053f, 8.60225f));
  points.push_back(Vector3(2.4723f, -1.02817f, 6.26453f));
  points.push_back(Vector3(-9.35789f, -1.15024f, -0.119938f));
  points.push_back(Vector3(0.800501f, -6.89749f, -0.296335f));
  points.push_back(Vector3(-6.72292f, -9.26267f, -1.12094f));
  TestSpherePCA(points, file);
}

void SpherePCATest46(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.79553f, -8.30073f, -4.82589f));
  points.push_back(Vector3(8.01202f, 8.29707f, -4.70138f));
  points.push_back(Vector3(7.97784f, 7.11905f, -6.53493f));
  points.push_back(Vector3(7.20878f, 5.35813f, 9.59838f));
  points.push_back(Vector3(0.334788f, 9.18821f, -4.86801f));
  points.push_back(Vector3(2.70974f, 4.98459f, 9.4171f));
  points.push_back(Vector3(-6.48915f, 5.56749f, -3.15714f));
  points.push_back(Vector3(9.30723f, -2.82937f, -4.58296f));
  points.push_back(Vector3(-7.65618f, 5.03464f, -8.85311f));
  points.push_back(Vector3(6.46046f, -9.035f, 1.92846f));
  points.push_back(Vector3(-1.82836f, 4.33699f, 4.27045f));
  points.push_back(Vector3(9.8352f, 5.08347f, 9.40184f));
  points.push_back(Vector3(-1.40782f, -2.41737f, -8.07001f));
  points.push_back(Vector3(-8.09137f, 1.96326f, -5.3264f));
  points.push_back(Vector3(-0.603961f, -7.75811f, -4.0611f));
  points.push_back(Vector3(-1.67211f, 0.166326f, 9.30418f));
  points.push_back(Vector3(2.92215f, -5.99841f, 9.87243f));
  points.push_back(Vector3(-9.80285f, 9.62401f, 7.51274f));
  points.push_back(Vector3(3.22367f, 4.31806f, -2.72134f));
  points.push_back(Vector3(-3.11808f, -9.03561f, -5.01083f));
  points.push_back(Vector3(-0.754112f, 2.04199f, 3.27494f));
  points.push_back(Vector3(-8.24091f, -3.38115f, 0.504471f));
  points.push_back(Vector3(-4.75814f, -3.51299f, -7.53655f));
  points.push_back(Vector3(7.1453f, 0.0253304f, 6.34327f));
  points.push_back(Vector3(-4.68245f, 6.20289f, 5.34532f));
  points.push_back(Vector3(6.84805f, -7.42851f, -6.36097f));
  points.push_back(Vector3(-1.08615f, -1.92175f, 4.36079f));
  points.push_back(Vector3(-2.03101f, -1.56102f, 7.1569f));
  points.push_back(Vector3(-1.41881f, -2.30445f, -8.1811f));
  points.push_back(Vector3(-9.84008f, -2.32276f, 3.46965f));
  points.push_back(Vector3(3.16446f, -3.43364f, -2.20313f));
  points.push_back(Vector3(3.10404f, -9.74181f, -0.638142f));
  points.push_back(Vector3(-9.03378f, -2.43934f, 9.09299f));
  points.push_back(Vector3(3.94147f, -9.10703f, 6.04114f));
  points.push_back(Vector3(-8.905f, -1.07761f, -6.97501f));
  points.push_back(Vector3(8.30439f, 8.67977f, 1.99499f));
  points.push_back(Vector3(9.49644f, 2.33375f, -5.26048f));
  points.push_back(Vector3(3.93902f, 9.57762f, 5.48326f));
  points.push_back(Vector3(-8.28486f, 3.93048f, 6.25965f));
  points.push_back(Vector3(-2.77566f, -4.14716f, -0.741905f));
  points.push_back(Vector3(-0.400098f, -8.38252f, -7.71783f));
  points.push_back(Vector3(2.584f, -2.55776f, -2.36061f));
  points.push_back(Vector3(6.54836f, 9.8645f, 4.15326f));
  points.push_back(Vector3(-4.51949f, 8.20307f, -7.93756f));
  points.push_back(Vector3(-2.0127f, 6.95181f, -7.90216f));
  points.push_back(Vector3(-6.2273f, 7.70928f, 8.11151f));
  points.push_back(Vector3(-7.00308f, -8.11396f, 9.10092f));
  points.push_back(Vector3(2.24769f, -0.867641f, -2.58095f));
  points.push_back(Vector3(-8.02423f, 1.33457f, 0.332957f));
  points.push_back(Vector3(-6.37135f, -1.67272f, -5.90747f));
  TestSpherePCA(points, file);
}

void SpherePCATest47(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.19553f, 6.35182f, -2.89468f));
  points.push_back(Vector3(8.82382f, 3.24747f, -3.29875f));
  points.push_back(Vector3(-0.215766f, 9.33226f, 6.90542f));
  points.push_back(Vector3(-2.28919f, -1.81494f, -2.30995f));
  points.push_back(Vector3(7.59697f, 9.00998f, -7.81671f));
  points.push_back(Vector3(7.99127f, -8.12616f, -5.57787f));
  points.push_back(Vector3(9.84375f, 7.42119f, -5.94836f));
  points.push_back(Vector3(-6.59963f, -4.36811f, 4.10932f));
  points.push_back(Vector3(-4.85885f, -3.29264f, 5.86474f));
  points.push_back(Vector3(-6.69607f, 6.83035f, 6.98782f));
  points.push_back(Vector3(9.49278f, 7.49138f, 3.62163f));
  points.push_back(Vector3(-5.15854f, 2.37953f, 6.08692f));
  points.push_back(Vector3(-3.73455f, -8.96298f, -6.83218f));
  TestSpherePCA(points, file);
}

void SpherePCATest48(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.29035f, 4.73128f, 7.26066f));
  points.push_back(Vector3(-3.24198f, 1.41209f, 4.79659f));
  points.push_back(Vector3(2.24342f, -1.81433f, 2.26051f));
  points.push_back(Vector3(-5.91601f, -2.80007f, 9.89563f));
  points.push_back(Vector3(2.27027f, -6.01001f, 1.62328f));
  points.push_back(Vector3(-7.63054f, 3.12967f, 0.0442518f));
  points.push_back(Vector3(-2.86538f, 6.09851f, -2.71645f));
  points.push_back(Vector3(3.16202f, -3.76507f, 7.8515f));
  points.push_back(Vector3(1.62023f, 1.09104f, -9.54589f));
  points.push_back(Vector3(-1.29063f, -4.12397f, -4.31928f));
  points.push_back(Vector3(1.05319f, 4.47493f, 3.90545f));
  points.push_back(Vector3(1.5952f, -4.62264f, -0.907315f));
  points.push_back(Vector3(5.91235f, 2.0951f, 2.01148f));
  points.push_back(Vector3(-8.29585f, -0.204779f, -2.48024f));
  points.push_back(Vector3(7.83868f, 7.95892f, -0.2884f));
  points.push_back(Vector3(2.08533f, -9.85717f, 6.20472f));
  points.push_back(Vector3(9.99878f, -5.37278f, 6.87979f));
  points.push_back(Vector3(-0.805383f, 2.56508f, -1.08066f));
  points.push_back(Vector3(-1.77709f, 1.91809f, -4.10932f));
  points.push_back(Vector3(-0.819422f, 2.5425f, -3.80718f));
  points.push_back(Vector3(3.74981f, 6.40614f, -0.0930815f));
  points.push_back(Vector3(-7.35771f, -8.21833f, 1.14475f));
  points.push_back(Vector3(6.25782f, 0.677206f, -9.95361f));
  points.push_back(Vector3(8.34407f, -8.6285f, 7.11051f));
  points.push_back(Vector3(-0.323801f, 9.89257f, 3.73577f));
  points.push_back(Vector3(-5.96728f, 1.75329f, -9.52025f));
  points.push_back(Vector3(-4.54085f, -3.43303f, 6.54408f));
  TestSpherePCA(points, file);
}

void SpherePCATest49(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.89319f, -9.75585f, 0.906705f));
  points.push_back(Vector3(8.34529f, -0.183416f, -2.13904f));
  points.push_back(Vector3(-5.10727f, -5.33433f, -0.350658f));
  points.push_back(Vector3(-8.92026f, 9.78149f, 8.28059f));
  points.push_back(Vector3(-1.7777f, -5.66698f, -8.57417f));
  points.push_back(Vector3(4.17585f, 2.93252f, -1.6306f));
  points.push_back(Vector3(-1.24058f, 2.00964f, -4.56343f));
  points.push_back(Vector3(6.3152f, 8.11945f, 5.62975f));
  points.push_back(Vector3(-4.3907f, -5.70299f, -6.13269f));
  points.push_back(Vector3(-6.28224f, -7.89727f, -7.73247f));
  points.push_back(Vector3(8.42219f, -7.8045f, 7.63237f));
  points.push_back(Vector3(0.647908f, -5.17441f, 9.0112f));
  points.push_back(Vector3(-2.8898f, 8.41609f, -5.01511f));
  points.push_back(Vector3(1.93579f, 6.76626f, 8.26411f));
  points.push_back(Vector3(6.68935f, -0.00946074f, -7.64397f));
  points.push_back(Vector3(-5.54491f, -7.44804f, 9.13449f));
  points.push_back(Vector3(4.60921f, -1.00558f, -6.01306f));
  points.push_back(Vector3(2.83181f, 0.0155644f, -8.24824f));
  points.push_back(Vector3(-6.6509f, 8.12922f, 5.10361f));
  points.push_back(Vector3(0.150456f, -2.63466f, 7.86493f));
  points.push_back(Vector3(-7.69524f, -5.95019f, 4.97726f));
  points.push_back(Vector3(9.63622f, -4.44441f, -8.54366f));
  points.push_back(Vector3(-7.2747f, 2.14942f, 3.74615f));
  points.push_back(Vector3(-9.33042f, 0.798669f, 9.57823f));
  points.push_back(Vector3(0.147404f, 4.50667f, -7.13309f));
  points.push_back(Vector3(4.55428f, 5.93616f, 2.21534f));
  points.push_back(Vector3(-7.16666f, -9.58556f, -4.04645f));
  points.push_back(Vector3(-5.28611f, -8.37458f, -6.66494f));
  points.push_back(Vector3(4.8088f, 8.77377f, 7.14591f));
  points.push_back(Vector3(-5.03159f, -8.53999f, 5.76769f));
  points.push_back(Vector3(-9.48363f, 6.2157f, 0.401929f));
  points.push_back(Vector3(-9.37925f, 1.73559f, -7.24479f));
  points.push_back(Vector3(7.57439f, 6.58132f, 7.87286f));
  points.push_back(Vector3(-7.04093f, 9.12412f, 1.42491f));
  points.push_back(Vector3(6.92984f, -1.19053f, 1.14536f));
  points.push_back(Vector3(0.74984f, -9.51231f, 0.4532f));
  points.push_back(Vector3(8.51802f, -6.05396f, 8.27265f));
  TestSpherePCA(points, file);
}

void SpherePCATest50(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.52452f, 3.90118f, -1.95959f));
  points.push_back(Vector3(5.45518f, 4.48714f, 1.24851f));
  points.push_back(Vector3(6.33534f, 4.13251f, 4.05621f));
  points.push_back(Vector3(-3.12906f, -6.92007f, -6.74612f));
  points.push_back(Vector3(-1.9657f, 2.66213f, -2.74514f));
  points.push_back(Vector3(1.90649f, -8.91293f, -1.14536f));
  points.push_back(Vector3(5.47533f, -1.70141f, 4.41939f));
  points.push_back(Vector3(-5.65416f, 3.51909f, -2.31666f));
  points.push_back(Vector3(4.50545f, 2.99966f, -0.0772118f));
  points.push_back(Vector3(-5.92944f, 0.459304f, -5.95202f));
  points.push_back(Vector3(7.27348f, -1.1478f, 0.655232f));
  points.push_back(Vector3(4.72152f, -3.18155f, -0.534989f));
  points.push_back(Vector3(9.23521f, -6.76992f, -7.97601f));
  points.push_back(Vector3(1.22288f, -6.87796f, 0.219428f));
  points.push_back(Vector3(-3.29569f, 5.43077f, 0.168157f));
  points.push_back(Vector3(-3.16752f, 3.34086f, 6.91824f));
  points.push_back(Vector3(-0.942106f, 7.4926f, -2.77261f));
  points.push_back(Vector3(4.10932f, 1.59764f, 5.54064f));
  points.push_back(Vector3(2.05786f, 4.75997f, -1.99133f));
  points.push_back(Vector3(9.8529f, 2.58644f, 0.477615f));
  points.push_back(Vector3(5.85864f, 0.549638f, 9.97986f));
  points.push_back(Vector3(-6.83645f, 3.24442f, 1.94433f));
  points.push_back(Vector3(5.4912f, 6.48732f, 6.8627f));
  points.push_back(Vector3(-9.16929f, 8.08283f, 5.52782f));
  TestSpherePCA(points, file);
}

void SpherePCATest51(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-8.39595f, -2.96548f, 9.37925f));
  points.push_back(Vector3(-1.65746f, 7.74957f, -2.22755f));
  points.push_back(Vector3(1.5598f, -7.12149f, 8.13349f));
  points.push_back(Vector3(-7.03482f, 1.98523f, 8.47041f));
  points.push_back(Vector3(6.10828f, -1.26133f, 3.73699f));
  points.push_back(Vector3(-8.49422f, -4.39619f, 4.01349f));
  points.push_back(Vector3(-2.08655f, 5.10727f, 8.00775f));
  points.push_back(Vector3(2.37526f, -9.47447f, 0.939055f));
  points.push_back(Vector3(9.23399f, 3.3549f, 1.15207f));
  points.push_back(Vector3(5.74389f, -7.38273f, -3.74798f));
  points.push_back(Vector3(3.97687f, 0.730308f, -6.74429f));
  points.push_back(Vector3(9.6173f, 1.83386f, 1.93579f));
  points.push_back(Vector3(-0.588092f, -0.473342f, -6.11377f));
  points.push_back(Vector3(-0.307932f, 6.62282f, 9.7705f));
  points.push_back(Vector3(7.56401f, 5.31907f, -9.87793f));
  points.push_back(Vector3(-2.92032f, -4.62325f, 3.16385f));
  points.push_back(Vector3(1.21006f, 4.51765f, 7.24845f));
  points.push_back(Vector3(-3.87432f, 3.19315f, -3.84136f));
  points.push_back(Vector3(-1.02878f, 2.77505f, -7.48222f));
  points.push_back(Vector3(-3.81573f, 7.42546f, -5.79943f));
  points.push_back(Vector3(0.731529f, 5.51683f, -6.82363f));
  points.push_back(Vector3(8.71273f, 2.87637f, -0.887173f));
  points.push_back(Vector3(1.08737f, -7.48466f, 7.96503f));
  points.push_back(Vector3(-2.94534f, -0.444655f, 4.48714f));
  points.push_back(Vector3(-2.85501f, -7.45293f, 9.01425f));
  points.push_back(Vector3(-6.81631f, 5.18845f, 9.96033f));
  points.push_back(Vector3(0.310984f, 4.19599f, -9.07956f));
  points.push_back(Vector3(-3.97137f, -6.40065f, 5.9801f));
  points.push_back(Vector3(-7.77642f, -2.65053f, -1.64037f));
  points.push_back(Vector3(-7.70806f, -8.764f, 7.28446f));
  points.push_back(Vector3(5.17808f, 9.35118f, 5.36851f));
  points.push_back(Vector3(-4.59273f, 9.9115f, 5.84765f));
  points.push_back(Vector3(9.76745f, 2.61696f, 0.854823f));
  points.push_back(Vector3(-6.06555f, 6.85049f, -4.97055f));
  points.push_back(Vector3(9.54894f, -0.681478f, 8.53328f));
  points.push_back(Vector3(-0.202338f, -4.16608f, 8.57479f));
  points.push_back(Vector3(6.7803f, -4.04096f, 7.80267f));
  points.push_back(Vector3(-8.18598f, -1.901f, 3.45561f));
  points.push_back(Vector3(7.24479f, 8.83419f, -2.39418f));
  points.push_back(Vector3(3.43303f, 1.23386f, -3.14127f));
  points.push_back(Vector3(8.28364f, -7.0336f, -9.53001f));
  points.push_back(Vector3(8.01508f, 1.06479f, 7.31681f));
  points.push_back(Vector3(-4.99374f, -5.34165f, -8.64437f));
  points.push_back(Vector3(-7.1514f, 7.97845f, -9.3292f));
  points.push_back(Vector3(7.63604f, 3.7492f, -2.02918f));
  points.push_back(Vector3(6.86819f, -2.25562f, 5.64745f));
  points.push_back(Vector3(-9.35545f, 8.62423f, 8.49605f));
  points.push_back(Vector3(-0.718101f, -9.76134f, -6.1449f));
  points.push_back(Vector3(4.23566f, 7.32902f, -8.41304f));
  points.push_back(Vector3(-0.521561f, -0.0314341f, -2.48085f));
  points.push_back(Vector3(3.26273f, -5.5327f, -5.32029f));
  points.push_back(Vector3(5.17136f, -7.51335f, 7.6397f));
  points.push_back(Vector3(0.480667f, 8.25983f, -7.58782f));
  points.push_back(Vector3(8.29524f, -6.80654f, -1.84667f));
  points.push_back(Vector3(2.42225f, 7.82769f, 0.0143437f));
  points.push_back(Vector3(-0.863979f, 2.05542f, 0.440382f));
  points.push_back(Vector3(9.86267f, -0.152898f, 9.19492f));
  points.push_back(Vector3(-8.90927f, 2.05908f, 9.75646f));
  points.push_back(Vector3(3.13334f, 8.7817f, -1.05564f));
  points.push_back(Vector3(3.80718f, 3.15531f, -6.67226f));
  points.push_back(Vector3(-1.93335f, 8.34407f, 3.24137f));
  points.push_back(Vector3(-6.26392f, 9.57213f, -8.53938f));
  points.push_back(Vector3(-6.4629f, 6.29627f, -5.59679f));
  points.push_back(Vector3(-9.12107f, 9.20469f, -9.46837f));
  points.push_back(Vector3(8.9581f, 2.50038f, -2.72195f));
  points.push_back(Vector3(-8.86959f, -8.19758f, 2.73904f));
  points.push_back(Vector3(2.15796f, 3.9671f, -1.90466f));
  points.push_back(Vector3(7.77337f, 0.35432f, -5.63952f));
  points.push_back(Vector3(-2.68105f, 2.83731f, 5.12314f));
  points.push_back(Vector3(5.67919f, -0.036317f, 4.67147f));
  points.push_back(Vector3(-8.39717f, 6.42323f, 8.78109f));
  points.push_back(Vector3(-9.73266f, 3.08756f, -6.09119f));
  points.push_back(Vector3(0.229194f, -4.97665f, 9.05576f));
  points.push_back(Vector3(2.68044f, -8.25678f, -6.55873f));
  points.push_back(Vector3(-4.41755f, -4.23139f, 0.449538f));
  points.push_back(Vector3(5.48448f, -1.23814f, 6.93411f));
  points.push_back(Vector3(8.94345f, 1.72948f, 1.75939f));
  points.push_back(Vector3(-7.99676f, 3.77606f, -9.57396f));
  points.push_back(Vector3(6.12171f, -2.55959f, 2.24891f));
  points.push_back(Vector3(-0.396435f, -2.02918f, 4.26069f));
  points.push_back(Vector3(-6.84133f, -2.67006f, -0.292062f));
  points.push_back(Vector3(-4.57137f, 7.11539f, 3.27494f));
  points.push_back(Vector3(7.84661f, 4.85397f, 2.04749f));
  points.push_back(Vector3(-5.3264f, 7.60186f, -3.88592f));
  points.push_back(Vector3(-0.462355f, -0.162664f, 4.87167f));
  points.push_back(Vector3(9.02951f, -2.40455f, 2.32582f));
  TestSpherePCA(points, file);
}

void SpherePCATest52(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<Vector3> points;
  points.push_back(Vector3(-9.41465f, 4.71847f, -2.27149f));
  points.push_back(Vector3(-6.75588f, -9.25962f, -6.93411f));
  points.push_back(Vector3(-9.1821f, 5.86596f, -1.66112f));
  points.push_back(Vector3(-9.51598f, 8.11579f, -5.26719f));
  points.push_back(Vector3(1.22166f, -1.88879f, 2.23121f));
  points.push_back(Vector3(3.93475f, -8.65047f, -2.62307f));
  points.push_back(Vector3(6.93106f, 8.00653f, 7.62993f));
  points.push_back(Vector3(-5.96973f, 7.55669f, -6.84133f));
  points.push_back(Vector3(-5.28306f, -5.76464f, -4.76363f));
  points.push_back(Vector3(7.14835f, -4.08429f, -1.63915f));
  points.push_back(Vector3(8.01324f, 8.39839f, 8.31111f));
  points.push_back(Vector3(8.09503f, -7.99493f, -4.99435f));
  points.push_back(Vector3(-1.75512f, -7.50114f, 5.73901f));
  points.push_back(Vector3(4.25459f, 5.28245f, 8.63948f));
  points.push_back(Vector3(0.763268f, 3.26456f, -7.2393f));
  points.push_back(Vector3(2.40455f, 1.68371f, 1.39439f));
  points.push_back(Vector3(-6.91702f, 5.15366f, -1.26926f));
  points.push_back(Vector3(5.02976f, 5.85131f, -8.19819f));
  points.push_back(Vector3(-4.00189f, 5.3795f, -3.01981f));
  points.push_back(Vector3(-4.0202f, 8.46309f, -0.0967437f));
  points.push_back(Vector3(-3.08512f, 7.88751f, -9.07407f));
  points.push_back(Vector3(-2.00415f, 6.07105f, -9.53246f));
  points.push_back(Vector3(-8.01141f, -8.43989f, 5.62731f));
  points.push_back(Vector3(-0.472121f, -3.80657f, 1.08005f));
  points.push_back(Vector3(1.79785f, 3.42753f, 7.45476f));
  points.push_back(Vector3(-2.16895f, 1.70263f, 7.96625f));
  points.push_back(Vector3(-3.09915f, -7.15201f, 8.96603f));
  points.push_back(Vector3(2.08533f, 8.26167f, -6.72475f));
  points.push_back(Vector3(-2.83486f, -9.97742f, 3.91217f));
  points.push_back(Vector3(-3.27677f, 9.2584f, 5.53331f));
  points.push_back(Vector3(4.70931f, 4.26191f, 1.11057f));
  points.push_back(Vector3(-6.198f, 6.74551f, 2.66518f));
  points.push_back(Vector3(-2.75002f, -3.31462f, 8.13349f));
  points.push_back(Vector3(-3.45378f, -3.02774f, 6.89138f));
  points.push_back(Vector3(8.96542f, 0.995819f, -1.07456f));
  points.push_back(Vector3(6.73086f, -2.45094f, -4.64827f));
  points.push_back(Vector3(2.29041f, -2.93374f, 6.07166f));
  points.push_back(Vector3(8.73165f, -7.30644f, -7.91803f));
  points.push_back(Vector3(8.79025f, -2.05725f, -9.02951f));
  points.push_back(Vector3(5.49486f, 5.89221f, 8.40571f));
  points.push_back(Vector3(-7.09769f, 3.83709f, 6.14856f));
  points.push_back(Vector3(-1.2949f, -1.9425f, -7.56279f));
  points.push_back(Vector3(-8.52962f, -0.597858f, -4.1435f));
  points.push_back(Vector3(9.72228f, -3.48247f, 6.72658f));
  points.push_back(Vector3(6.99454f, -4.54695f, 6.45985f));
  points.push_back(Vector3(1.78014f, 8.33125f, 8.5522f));
  points.push_back(Vector3(6.03259f, -4.12946f, -0.608234f));
  points.push_back(Vector3(0.101627f, 3.00943f, -7.39677f));
  points.push_back(Vector3(-1.41209f, -2.81777f, -0.793176f));
  points.push_back(Vector3(7.35771f, 7.2924f, 3.14493f));
  points.push_back(Vector3(-7.84112f, -5.2324f, 9.89196f));
  points.push_back(Vector3(9.95911f, 0.578326f, 4.84115f));
  points.push_back(Vector3(7.93695f, 8.25251f, -3.27067f));
  points.push_back(Vector3(-1.67028f, -3.47514f, -9.32554f));
  points.push_back(Vector3(-1.15329f, 1.98828f, 1.02878f));
  points.push_back(Vector3(-5.79638f, 6.7101f, -5.66393f));
  points.push_back(Vector3(2.30445f, -2.97769f, -6.48549f));
  points.push_back(Vector3(2.55593f, 8.50093f, -4.4084f));
  points.push_back(Vector3(-2.84829f, 1.14841f, 1.59459f));
  points.push_back(Vector3(-2.45521f, 4.02936f, -7.03116f));
  points.push_back(Vector3(-3.22001f, -3.97565f, 8.5577f));
  points.push_back(Vector3(3.27494f, 2.82754f, 1.09104f));
  points.push_back(Vector3(1.42186f, 7.40043f, 1.55431f));
  points.push_back(Vector3(-6.17115f, 9.77233f, 2.69509f));
  points.push_back(Vector3(-5.48692f, -1.23142f, 2.4485f));
  points.push_back(Vector3(5.34471f, -4.96262f, 0.256661f));
  points.push_back(Vector3(3.37321f, 2.69204f, -6.24012f));
  points.push_back(Vector3(-1.60375f, 6.23157f, 1.70263f));
  points.push_back(Vector3(-4.26557f, -9.81811f, -6.43727f));
  points.push_back(Vector3(4.17707f, -2.71401f, -8.54305f));
  points.push_back(Vector3(-6.60146f, 9.35423f, 0.707114f));
  points.push_back(Vector3(5.31053f, -3.4434f, -5.48204f));
  points.push_back(Vector3(-5.06211f, -7.44865f, 7.72698f));
  points.push_back(Vector3(-5.76159f, 0.340892f, 9.87671f));
  points.push_back(Vector3(-6.52577f, 8.8702f, 5.70605f));
  points.push_back(Vector3(-8.64803f, 0.277413f, 2.93252f));
  points.push_back(Vector3(-4.39192f, -1.14841f, 5.73229f));
  points.push_back(Vector3(4.00189f, -3.76202f, -2.94595f));
  points.push_back(Vector3(-3.95733f, 2.72866f, -2.16285f));
  points.push_back(Vector3(-1.35594f, -7.06839f, 4.62264f));
  points.push_back(Vector3(1.85766f, -4.67025f, 3.08267f));
  points.push_back(Vector3(-5.78906f, -9.02585f, 0.30427f));
  points.push_back(Vector3(-6.74856f, 2.2129f, -9.92431f));
  points.push_back(Vector3(-2.21778f, 4.16608f, -3.66192f));
  points.push_back(Vector3(-3.64849f, 5.22691f, 6.33778f));
  points.push_back(Vector3(6.35182f, 6.61184f, 3.89874f));
  points.push_back(Vector3(-9.08689f, 4.01593f, -0.0473037f));
  points.push_back(Vector3(3.35185f, -1.30711f, 8.54305f));
  TestSpherePCA(points, file);
}

void BoundingSphereSpatialPartitionStructure1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(4);
  data[0].mBoundingSphere = Sphere(Vector3(0, 0, 0), 1);
  data[1].mBoundingSphere = Sphere(Vector3(3, 0, 0), 1);
  data[2].mBoundingSphere = Sphere(Vector3(1.5f, 1, 0), 1.5f);
  data[3].mBoundingSphere = Sphere(Vector3(-1, 0, 0), 0.5f);
  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  spatialPartition.RemoveProxy(proxies[2]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  data[1].mBoundingSphere = Sphere(Vector3(1, 2, 3), 1.5);
  spatialPartition.UpdateProxy(proxies[1], data[1]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  spatialPartition.RemoveProxy(proxies[1]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

// Medium BoundingSphereSpatialPartition insertion/update/removal test
void BoundingSphereSpatialPartitionStructure2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(5);
  data[0].mBoundingSphere = Sphere(Vector3(-0.5f, -1, -1), 3.5f);
  data[1].mBoundingSphere = Sphere(Vector3(2.25f, -1.75f, 2.25f), 3.75f);
  data[2].mBoundingSphere = Sphere(Vector3(-4.75f, -4.75f, 2.5f), 3.5f);
  data[3].mBoundingSphere = Sphere(Vector3(0, 2.75f, -4.5f), 3.25f);
  data[4].mBoundingSphere = Sphere(Vector3(-0.25f, 4.5f, 0.5f), 0.25f);
  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Update object number 0
  data[0].mBoundingSphere = Sphere(Vector3(-1, -1.5f, -9.75f), 2);
  spatialPartition.UpdateProxy(proxies[0], data[0]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 4
  spatialPartition.RemoveProxy(proxies[4]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 2
  spatialPartition.RemoveProxy(proxies[2]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 3
  spatialPartition.RemoveProxy(proxies[3]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 1
  spatialPartition.RemoveProxy(proxies[1]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 0
  spatialPartition.RemoveProxy(proxies[0]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

}

// Large BoundingSphereSpatialPartition insertion/update/removal test
void BoundingSphereSpatialPartitionStructure3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(15);
  data[0].mBoundingSphere = Sphere(Vector3(3.75f, 5, 5.25f), 2.25f);
  data[1].mBoundingSphere = Sphere(Vector3(5.25f, 5.5f, 1.75f), 2);
  data[2].mBoundingSphere = Sphere(Vector3(1.25f, 0, -8.5f), 1);
  data[3].mBoundingSphere = Sphere(Vector3(-2.25f, 3.5f, -5.75f), 2.75f);
  data[4].mBoundingSphere = Sphere(Vector3(6.25f, 3.75f, -1.25f), 0.25f);
  data[5].mBoundingSphere = Sphere(Vector3(-2.75f, -6.75f, -3.5f), 1.25f);
  data[6].mBoundingSphere = Sphere(Vector3(4.5f, 5.5f, -1.25f), 1.5f);
  data[7].mBoundingSphere = Sphere(Vector3(-5, 7.5f, 2.75f), 0.5f);
  data[8].mBoundingSphere = Sphere(Vector3(-5.5f, -6.25f, -3.25f), 2.5f);
  data[9].mBoundingSphere = Sphere(Vector3(8.75f, -1, -2.5f), 1.5f);
  data[10].mBoundingSphere = Sphere(Vector3(-4.75f, -4.75f, 4.25f), 2.25f);
  data[11].mBoundingSphere = Sphere(Vector3(-0.5f, -3, -7.5f), 0.75f);
  data[12].mBoundingSphere = Sphere(Vector3(0, -4.5f, 3.25f), 1);
  data[13].mBoundingSphere = Sphere(Vector3(1.75f, 4.75f, 7.5f), 1.25f);
  data[14].mBoundingSphere = Sphere(Vector3(-5, 7.25f, -2.75f), 3);
  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Update object number 2
  data[2].mBoundingSphere = Sphere(Vector3(-4.75f, -1.5f, 5.75f), 1.5f);
  spatialPartition.UpdateProxy(proxies[2], data[2]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 3
  spatialPartition.RemoveProxy(proxies[3]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 0
  spatialPartition.RemoveProxy(proxies[0]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Update object number 13
  data[13].mBoundingSphere = Sphere(Vector3(6.75f, -0.25f, 5.75f), 1.75f);
  spatialPartition.UpdateProxy(proxies[13], data[13]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Update object number 8
  data[8].mBoundingSphere = Sphere(Vector3(-3.25f, 8.5f, 0.5f), 0.5f);
  spatialPartition.UpdateProxy(proxies[8], data[8]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 7
  spatialPartition.RemoveProxy(proxies[7]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Update object number 1
  data[1].mBoundingSphere = Sphere(Vector3(1, 8.25f, -1.75f), 0.5f);
  spatialPartition.UpdateProxy(proxies[1], data[1]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Update object number 12
  data[12].mBoundingSphere = Sphere(Vector3(-2.5f, -2.5f, 2.25f), 0.25f);
  spatialPartition.UpdateProxy(proxies[12], data[12]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 9
  spatialPartition.RemoveProxy(proxies[9]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 4
  spatialPartition.RemoveProxy(proxies[4]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 10
  spatialPartition.RemoveProxy(proxies[10]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 11
  spatialPartition.RemoveProxy(proxies[11]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Update object number 6
  data[6].mBoundingSphere = Sphere(Vector3(-1.75f, 1.5f, -9.25f), 1.75f);
  spatialPartition.UpdateProxy(proxies[6], data[6]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Update object number 14
  data[14].mBoundingSphere = Sphere(Vector3(-5.75f, -2, 5.25f), 1.25f);
  spatialPartition.UpdateProxy(proxies[14], data[14]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 5
  spatialPartition.RemoveProxy(proxies[5]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 2
  spatialPartition.RemoveProxy(proxies[2]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Update object number 13
  data[13].mBoundingSphere = Sphere(Vector3(-7.25f, 1.5f, -4), 0.75f);
  spatialPartition.UpdateProxy(proxies[13], data[13]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 8
  spatialPartition.RemoveProxy(proxies[8]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Update object number 1
  data[1].mBoundingSphere = Sphere(Vector3(5.25f, 5, 0.25f), 0.5f);
  spatialPartition.UpdateProxy(proxies[1], data[1]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Update object number 12
  data[12].mBoundingSphere = Sphere(Vector3(-6.25f, -2.75f, -4), 2.5f);
  spatialPartition.UpdateProxy(proxies[12], data[12]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 6
  spatialPartition.RemoveProxy(proxies[6]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Update object number 14
  data[14].mBoundingSphere = Sphere(Vector3(-1, 2, -6.75f), 1.75f);
  spatialPartition.UpdateProxy(proxies[14], data[14]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 13
  spatialPartition.RemoveProxy(proxies[13]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 1
  spatialPartition.RemoveProxy(proxies[1]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 12
  spatialPartition.RemoveProxy(proxies[12]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

  // Remove object number 14
  spatialPartition.RemoveProxy(proxies[14]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);

}


void BoundingSphereSpatialPartitionRayCastTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(4);
  data[0].mBoundingSphere = Sphere(Vector3(0, 0, 0), 1);
  data[1].mBoundingSphere = Sphere(Vector3(3, 0, 0), 1);
  data[2].mBoundingSphere = Sphere(Vector3(1.5f, 1, 0), 1.5f);
  data[3].mBoundingSphere = Sphere(Vector3(-1, 0, 0), 0.5f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;


  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  Ray ray;
  ray.mStart = Vector3(Vector3(0, 0, 0));
  ray.mDirection = Vector3(Vector3(1, 0, 0));

  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void BoundingSphereSpatialPartitionRayCastTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(5);
  data[0].mBoundingSphere = Sphere(Vector3(-3.25f, 0.75f, -1.75f), 3.5f);
  data[1].mBoundingSphere = Sphere(Vector3(-4, -8.25f, 1), 3.5f);
  data[2].mBoundingSphere = Sphere(Vector3(-5.25f, 1.75f, -3.25f), 2.25f);
  data[3].mBoundingSphere = Sphere(Vector3(-3.5f, -8.5f, -0.75f), 3.5f);
  data[4].mBoundingSphere = Sphere(Vector3(3, 7.75f, 1.25f), 0.5f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;


  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  Ray ray;
  ray.mStart = Vector3(Vector3(-4.25f, -0.5f, -1.25f));
  ray.mDirection = Vector3(Vector3(0.242536f, 0.970143f, 0));

  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void BoundingSphereSpatialPartitionRayCastTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(8);
  data[0].mBoundingSphere = Sphere(Vector3(4.75f, -7, 4.25f), 1.5f);
  data[1].mBoundingSphere = Sphere(Vector3(-4.25f, -7.25f, 1.5f), 2.25f);
  data[2].mBoundingSphere = Sphere(Vector3(8, 2.5f, 0), 1.25f);
  data[3].mBoundingSphere = Sphere(Vector3(-2, 2, 4), 3);
  data[4].mBoundingSphere = Sphere(Vector3(-2, -0.5f, 1), 3.5f);
  data[5].mBoundingSphere = Sphere(Vector3(1.5f, 0.5f, -4.75f), 2.75f);
  data[6].mBoundingSphere = Sphere(Vector3(-1.5f, -3.25f, -4.25f), 3.5f);
  data[7].mBoundingSphere = Sphere(Vector3(-9, -1, 4.25f), 1.25f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;


  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  Ray ray;
  ray.mStart = Vector3(Vector3(-0.5f, -2.25f, 3.5f));
  ray.mDirection = Vector3(Vector3(-0.235702f, 0.942809f, -0.235702f));

  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void BoundingSphereSpatialPartitionFrustumCastTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(5);
  data[0].mBoundingSphere = Sphere(Vector3(-3.5f, 5.75f, -2.25f), 2.25f);
  data[1].mBoundingSphere = Sphere(Vector3(-3.5f, -1.25f, 2), 2.5f);
  data[2].mBoundingSphere = Sphere(Vector3(5.25f, -6.5f, 1.5f), 2);
  data[3].mBoundingSphere = Sphere(Vector3(-4.75f, -7.25f, 0.25f), 2.5f);
  data[4].mBoundingSphere = Sphere(Vector3(0.75f, -7.75f, 1.5f), 0.75f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  Frustum frustum;
  frustum.Set(Vector3(-2.5724f, -3.36233f, 0.876386f), Vector3(6.1442f, -3.36233f, 0.876386f), Vector3(6.1442f, 5.06641f, 0.876386f), Vector3(-2.5724f, 5.06641f, 0.876386f), Vector3(0.289302f, -0.50063f, -4.34991f), Vector3(3.2825f, -0.50063f, -4.34991f), Vector3(3.2825f, 2.20471f, -4.34991f), Vector3(0.289302f, 2.20471f, -4.34991f));

  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void BoundingSphereSpatialPartitionSelfQuery1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(5);
  data[0].mBoundingSphere = Sphere(Vector3(-0.75f, 1.5f, 3.75f), 2.75f);
  data[1].mBoundingSphere = Sphere(Vector3(0, 1.25f, 0.75f), 1.5f);
  data[2].mBoundingSphere = Sphere(Vector3(-5.75f, -5, 0.5f), 3);
  data[3].mBoundingSphere = Sphere(Vector3(6, -0.75f, 6.75f), 3);
  data[4].mBoundingSphere = Sphere(Vector3(-9.5f, -1.5f, 2), 3.75f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void BoundingSphereSpatialPartitionSelfQuery2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(5);
  data[0].mBoundingSphere = Sphere(Vector3(2, 1.5f, 0.25f), 0.25f);
  data[1].mBoundingSphere = Sphere(Vector3(-2, 7, -6), 0.75f);
  data[2].mBoundingSphere = Sphere(Vector3(6, 3.5f, -6.25f), 0.25f);
  data[3].mBoundingSphere = Sphere(Vector3(-5.75f, -0.75f, 2), 1.5f);
  data[4].mBoundingSphere = Sphere(Vector3(2, -0.5f, -6.5f), 1);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionStructureFuzzTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mBoundingSphere = Sphere(Vector3(12.1134f, 63.9507f, -45.8527f), 3.8729f);
  data[1].mBoundingSphere = Sphere(Vector3(-53.2922f, -50.5657f, -17.4317f), 2.88854f);
  data[2].mBoundingSphere = Sphere(Vector3(-10.0795f, 45.8398f, 46.3538f), 0.213105f);
  data[3].mBoundingSphere = Sphere(Vector3(-44.1893f, -12.8978f, 9.08879f), 2.05819f);
  data[4].mBoundingSphere = Sphere(Vector3(-42.5728f, -62.8023f, -32.6821f), 0.282803f);
  data[5].mBoundingSphere = Sphere(Vector3(-4.16478f, -77.0127f, -48.3367f), 3.75751f);
  data[6].mBoundingSphere = Sphere(Vector3(12.4219f, -20.9396f, 16.3388f), 0.503262f);
  data[7].mBoundingSphere = Sphere(Vector3(0.710801f, -21.1439f, -76.9608f), 1.30207f);
  data[8].mBoundingSphere = Sphere(Vector3(42.4061f, 42.7265f, -31.1818f), 1.96901f);
  data[9].mBoundingSphere = Sphere(Vector3(-8.79841f, 22.8637f, 94.4291f), 3.58343f);
  data[10].mBoundingSphere = Sphere(Vector3(-55.0731f, -12.7229f, 77.9166f), 3.87081f);
  data[11].mBoundingSphere = Sphere(Vector3(33.083f, 4.21261f, 48.4401f), 0.229225f);
  data[12].mBoundingSphere = Sphere(Vector3(-35.1704f, 74.2576f, -10.2726f), 1.19549f);
  data[13].mBoundingSphere = Sphere(Vector3(2.30722f, -65.6331f, 73.9283f), 3.24179f);
  data[14].mBoundingSphere = Sphere(Vector3(37.8938f, 43.4157f, 61.7349f), 1.90047f);
  data[15].mBoundingSphere = Sphere(Vector3(-41.9322f, -29.8107f, 74.283f), 1.70808f);
  data[16].mBoundingSphere = Sphere(Vector3(27.3172f, -50.492f, -52.7709f), 2.76225f);
  data[17].mBoundingSphere = Sphere(Vector3(-70.1172f, 23.7024f, 66.5752f), 0.587341f);
  data[18].mBoundingSphere = Sphere(Vector3(25.1088f, -36.6376f, -45.403f), 3.70091f);
  data[19].mBoundingSphere = Sphere(Vector3(2.93309f, 66.9721f, -65.7093f), 2.97331f);
  data[20].mBoundingSphere = Sphere(Vector3(-8.54621f, 84.4843f, -7.69969f), 3.57938f);
  data[21].mBoundingSphere = Sphere(Vector3(15.442f, -40.6033f, -53.9992f), 0.429273f);
  data[22].mBoundingSphere = Sphere(Vector3(-69.9541f, 15.6529f, 29.1443f), 0.277816f);
  data[23].mBoundingSphere = Sphere(Vector3(-22.5421f, 43.4104f, 61.0101f), 1.80178f);
  data[24].mBoundingSphere = Sphere(Vector3(-42.672f, 32.3134f, 12.6087f), 2.64268f);
  data[25].mBoundingSphere = Sphere(Vector3(-52.3366f, 21.3156f, 68.7492f), 1.70576f);
  data[26].mBoundingSphere = Sphere(Vector3(-77.1917f, -2.93215f, 7.86012f), 1.11072f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mBoundingSphere = Sphere(Vector3(29.5558f, 43.2152f, -3.76617f), 3.89447f);
  data[1].mBoundingSphere = Sphere(Vector3(-45.0427f, 66.8037f, 49.5495f), 1.26356f);
  data[2].mBoundingSphere = Sphere(Vector3(-70.9836f, 44.7991f, 48.4598f), 1.24385f);
  data[3].mBoundingSphere = Sphere(Vector3(56.7929f, 22.3786f, 50.5828f), 2.84737f);
  data[4].mBoundingSphere = Sphere(Vector3(-64.4388f, -1.58193f, 19.1217f), 2.93017f);
  data[5].mBoundingSphere = Sphere(Vector3(-22.548f, -73.1778f, 58.104f), 3.38895f);
  data[6].mBoundingSphere = Sphere(Vector3(-21.3659f, -17.3306f, -41.1448f), 3.1337f);
  data[7].mBoundingSphere = Sphere(Vector3(-69.862f, -34.3978f, 37.494f), 3.45842f);
  data[8].mBoundingSphere = Sphere(Vector3(-79.9023f, -33.0439f, -29.2157f), 0.326524f);
  data[9].mBoundingSphere = Sphere(Vector3(-12.5649f, 17.4764f, 83.3003f), 3.59051f);
  data[10].mBoundingSphere = Sphere(Vector3(-21.9098f, 42.0939f, 44.0233f), 3.46341f);
  data[11].mBoundingSphere = Sphere(Vector3(20.0387f, 16.0543f, -34.0961f), 0.262856f);
  data[12].mBoundingSphere = Sphere(Vector3(-70.6427f, -30.6848f, 25.2917f), 2.54527f);
  data[13].mBoundingSphere = Sphere(Vector3(-47.4416f, 10.3674f, 77.844f), 3.24805f);
  data[14].mBoundingSphere = Sphere(Vector3(-49.3584f, 63.5766f, 15.9383f), 2.3603f);
  data[15].mBoundingSphere = Sphere(Vector3(46.6234f, -61.2209f, 13.0952f), 2.14042f);
  data[16].mBoundingSphere = Sphere(Vector3(47.861f, 4.58898f, 83.4184f), 1.59779f);
  data[17].mBoundingSphere = Sphere(Vector3(14.6026f, -9.6707f, -70.4486f), 3.65939f);
  data[18].mBoundingSphere = Sphere(Vector3(48.4942f, 21.1472f, 29.314f), 0.938615f);
  data[19].mBoundingSphere = Sphere(Vector3(58.2919f, -4.67668f, -69.0399f), 2.92611f);
  data[20].mBoundingSphere = Sphere(Vector3(-22.7006f, 59.741f, 76.3843f), 2.12f);
  data[21].mBoundingSphere = Sphere(Vector3(38.5521f, -73.9811f, 8.09065f), 2.71609f);
  data[22].mBoundingSphere = Sphere(Vector3(58.2988f, 12.5235f, 11.4229f), 1.77499f);
  data[23].mBoundingSphere = Sphere(Vector3(-15.7622f, 52.9167f, -64.9862f), 0.886312f);
  data[24].mBoundingSphere = Sphere(Vector3(-43.4172f, 55.2648f, 33.0697f), 2.84772f);
  data[25].mBoundingSphere = Sphere(Vector3(-12.9475f, 38.2593f, 37.9882f), 2.97784f);
  data[26].mBoundingSphere = Sphere(Vector3(-47.1268f, -80.7238f, 5.13397f), 1.78276f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mBoundingSphere = Sphere(Vector3(7.24715f, 76.7069f, -32.8739f), 0.625031f);
  data[1].mBoundingSphere = Sphere(Vector3(-23.5206f, -51.4863f, 27.0046f), 0.923191f);
  data[2].mBoundingSphere = Sphere(Vector3(-44.012f, -56.0882f, -5.76507f), 1.00147f);
  data[3].mBoundingSphere = Sphere(Vector3(-42.819f, -6.25114f, -16.3429f), 0.920292f);
  data[4].mBoundingSphere = Sphere(Vector3(25.7981f, 27.9279f, 49.197f), 1.89699f);
  data[5].mBoundingSphere = Sphere(Vector3(-24.5852f, 18.5209f, -22.0414f), 2.55257f);
  data[6].mBoundingSphere = Sphere(Vector3(47.6422f, -31.4464f, -76.1564f), 0.806757f);
  data[7].mBoundingSphere = Sphere(Vector3(-10.075f, 22.7076f, 49.7637f), 1.06467f);
  data[8].mBoundingSphere = Sphere(Vector3(21.0056f, 33.7363f, 75.9545f), 1.63896f);
  data[9].mBoundingSphere = Sphere(Vector3(66.2184f, 49.4582f, 8.74305f), 3.85156f);
  data[10].mBoundingSphere = Sphere(Vector3(50.1745f, 52.8952f, -27.8288f), 2.55768f);
  data[11].mBoundingSphere = Sphere(Vector3(2.7672f, -32.1148f, 12.7778f), 3.33839f);
  data[12].mBoundingSphere = Sphere(Vector3(6.84295f, -32.6234f, 55.6119f), 3.30093f);
  data[13].mBoundingSphere = Sphere(Vector3(-17.5326f, -0.299239f, 59.5119f), 3.53658f);
  data[14].mBoundingSphere = Sphere(Vector3(40.5899f, 54.4156f, -67.3579f), 1.57344f);
  data[15].mBoundingSphere = Sphere(Vector3(-44.8685f, 69.0884f, 1.74266f), 1.47393f);
  data[16].mBoundingSphere = Sphere(Vector3(1.55936f, 47.4698f, -78.5002f), 1.31505f);
  data[17].mBoundingSphere = Sphere(Vector3(-58.4435f, 56.463f, -22.6317f), 3.30047f);
  data[18].mBoundingSphere = Sphere(Vector3(-38.9505f, -57.0808f, 21.7441f), 2.44333f);
  data[19].mBoundingSphere = Sphere(Vector3(-32.0847f, -51.9622f, -18.1122f), 2.86813f);
  data[20].mBoundingSphere = Sphere(Vector3(-9.81452f, -40.1009f, 89.0731f), 2.47128f);
  data[21].mBoundingSphere = Sphere(Vector3(-15.7815f, -51.8171f, 54.5488f), 2.58713f);
  data[22].mBoundingSphere = Sphere(Vector3(-18.4397f, 39.7975f, 6.54929f), 2.40112f);
  data[23].mBoundingSphere = Sphere(Vector3(-56.6899f, -39.0232f, 37.1882f), 0.555797f);
  data[24].mBoundingSphere = Sphere(Vector3(-52.4788f, 43.5098f, -70.781f), 1.69161f);
  data[25].mBoundingSphere = Sphere(Vector3(16.3911f, -97.4255f, -3.47249f), 0.96668f);
  data[26].mBoundingSphere = Sphere(Vector3(32.075f, -19.1715f, 92.4445f), 1.30102f);
  data[27].mBoundingSphere = Sphere(Vector3(-61.4836f, 44.8021f, -21.026f), 2.18622f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(18);
  data[0].mBoundingSphere = Sphere(Vector3(-36.9834f, 55.4682f, -65.1022f), 3.21987f);
  data[1].mBoundingSphere = Sphere(Vector3(-58.7673f, -33.129f, 63.9096f), 0.63141f);
  data[2].mBoundingSphere = Sphere(Vector3(-43.1487f, 0.562659f, 81.6378f), 2.57704f);
  data[3].mBoundingSphere = Sphere(Vector3(86.3306f, -14.9376f, -29.7357f), 2.09971f);
  data[4].mBoundingSphere = Sphere(Vector3(-2.78039f, -68.4385f, 22.6926f), 1.0307f);
  data[5].mBoundingSphere = Sphere(Vector3(-54.7011f, -37.84f, -44.3606f), 2.57588f);
  data[6].mBoundingSphere = Sphere(Vector3(-61.8068f, 34.3909f, 42.536f), 1.68222f);
  data[7].mBoundingSphere = Sphere(Vector3(18.9988f, 2.77921f, 15.5963f), 0.854073f);
  data[8].mBoundingSphere = Sphere(Vector3(31.748f, 36.914f, -1.12513f), 1.189f);
  data[9].mBoundingSphere = Sphere(Vector3(-40.8902f, 4.62211f, -6.01992f), 3.89853f);
  data[10].mBoundingSphere = Sphere(Vector3(-45.7983f, 79.1437f, 38.7134f), 2.48636f);
  data[11].mBoundingSphere = Sphere(Vector3(-48.3839f, 8.052f, -1.17841f), 0.851405f);
  data[12].mBoundingSphere = Sphere(Vector3(76.7824f, -27.4326f, -43.6208f), 3.28296f);
  data[13].mBoundingSphere = Sphere(Vector3(-63.7337f, -3.44972f, -28.4929f), 0.218207f);
  data[14].mBoundingSphere = Sphere(Vector3(15.6996f, 61.5587f, -49.9191f), 2.13218f);
  data[15].mBoundingSphere = Sphere(Vector3(92.6454f, -17.498f, -18.6946f), 1.02478f);
  data[16].mBoundingSphere = Sphere(Vector3(-48.2948f, -31.6317f, -29.869f), 3.0785f);
  data[17].mBoundingSphere = Sphere(Vector3(44.7856f, 34.2326f, 13.0439f), 0.55139f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(29);
  data[0].mBoundingSphere = Sphere(Vector3(-60.4241f, 35.6379f, -24.8088f), 1.87913f);
  data[1].mBoundingSphere = Sphere(Vector3(-61.2151f, -54.7619f, 21.9532f), 0.872976f);
  data[2].mBoundingSphere = Sphere(Vector3(-64.2234f, -49.0026f, 21.4224f), 0.750975f);
  data[3].mBoundingSphere = Sphere(Vector3(1.02556f, -17.6753f, 59.0145f), 2.94223f);
  data[4].mBoundingSphere = Sphere(Vector3(13.516f, -35.3349f, 61.5304f), 3.4372f);
  data[5].mBoundingSphere = Sphere(Vector3(-49.1768f, 41.2999f, 22.0361f), 1.98304f);
  data[6].mBoundingSphere = Sphere(Vector3(-45.2886f, -32.5117f, -16.848f), 3.9223f);
  data[7].mBoundingSphere = Sphere(Vector3(16.9857f, -48.6959f, 30.2574f), 3.87046f);
  data[8].mBoundingSphere = Sphere(Vector3(-36.1886f, 4.47766f, 24.1271f), 3.12721f);
  data[9].mBoundingSphere = Sphere(Vector3(-7.76969f, 6.18942f, -97.7193f), 0.611927f);
  data[10].mBoundingSphere = Sphere(Vector3(33.8354f, -39.988f, -4.91811f), 1.62087f);
  data[11].mBoundingSphere = Sphere(Vector3(-85.5282f, 44.3558f, 15.3546f), 3.19691f);
  data[12].mBoundingSphere = Sphere(Vector3(-32.9866f, -49.5561f, 61.9092f), 0.406891f);
  data[13].mBoundingSphere = Sphere(Vector3(-34.5912f, 11.391f, 60.5471f), 2.72096f);
  data[14].mBoundingSphere = Sphere(Vector3(-83.764f, -2.15277f, 17.6694f), 2.1853f);
  data[15].mBoundingSphere = Sphere(Vector3(-27.8013f, 41.0965f, 31.2861f), 0.384973f);
  data[16].mBoundingSphere = Sphere(Vector3(-52.2615f, -47.7539f, -4.09668f), 1.68871f);
  data[17].mBoundingSphere = Sphere(Vector3(73.2137f, -15.4779f, -59.4148f), 3.76957f);
  data[18].mBoundingSphere = Sphere(Vector3(-2.38563f, 49.9766f, 11.6437f), 3.0952f);
  data[19].mBoundingSphere = Sphere(Vector3(-40.0158f, 15.7368f, 61.9833f), 0.783563f);
  data[20].mBoundingSphere = Sphere(Vector3(33.5354f, -63.5788f, 66.3506f), 3.71402f);
  data[21].mBoundingSphere = Sphere(Vector3(69.2864f, 30.9922f, 20.3386f), 2.48983f);
  data[22].mBoundingSphere = Sphere(Vector3(-27.8577f, -19.6444f, -75.8716f), 0.947429f);
  data[23].mBoundingSphere = Sphere(Vector3(57.0773f, -68.1952f, 2.35929f), 2.80237f);
  data[24].mBoundingSphere = Sphere(Vector3(65.2894f, 23.2135f, 42.185f), 3.52835f);
  data[25].mBoundingSphere = Sphere(Vector3(-19.2207f, -73.3356f, 61.4809f), 3.26243f);
  data[26].mBoundingSphere = Sphere(Vector3(37.4212f, -40.123f, 48.7763f), 1.43056f);
  data[27].mBoundingSphere = Sphere(Vector3(52.9393f, 79.6471f, 21.4246f), 0.286166f);
  data[28].mBoundingSphere = Sphere(Vector3(-80.2827f, -0.138535f, -54.6174f), 0.85674f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest6(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(25);
  data[0].mBoundingSphere = Sphere(Vector3(-31.3164f, 74.5184f, -31.9931f), 2.89863f);
  data[1].mBoundingSphere = Sphere(Vector3(30.1976f, 46.1776f, 79.974f), 0.214496f);
  data[2].mBoundingSphere = Sphere(Vector3(-42.5837f, 7.75985f, 59.0475f), 2.38407f);
  data[3].mBoundingSphere = Sphere(Vector3(-21.7572f, -10.806f, -3.78849f), 3.30812f);
  data[4].mBoundingSphere = Sphere(Vector3(14.3229f, 14.3759f, 26.6211f), 1.81152f);
  data[5].mBoundingSphere = Sphere(Vector3(45.3808f, -57.867f, -60.585f), 3.34001f);
  data[6].mBoundingSphere = Sphere(Vector3(53.1155f, -47.6906f, 61.669f), 3.4648f);
  data[7].mBoundingSphere = Sphere(Vector3(-16.0582f, 62.0451f, -34.7227f), 2.71598f);
  data[8].mBoundingSphere = Sphere(Vector3(46.0282f, 35.015f, -48.8856f), 1.5623f);
  data[9].mBoundingSphere = Sphere(Vector3(-27.9001f, 42.4065f, 60.577f), 2.25557f);
  data[10].mBoundingSphere = Sphere(Vector3(-8.05161f, 34.769f, 59.5902f), 0.559624f);
  data[11].mBoundingSphere = Sphere(Vector3(-54.522f, -48.944f, 45.3124f), 1.6821f);
  data[12].mBoundingSphere = Sphere(Vector3(-60.6907f, -41.8115f, 35.2888f), 1.62678f);
  data[13].mBoundingSphere = Sphere(Vector3(40.8919f, -17.5899f, -65.5937f), 2.48775f);
  data[14].mBoundingSphere = Sphere(Vector3(-65.0637f, -2.0093f, 14.8739f), 2.9006f);
  data[15].mBoundingSphere = Sphere(Vector3(-53.1547f, -17.177f, -72.3578f), 1.77325f);
  data[16].mBoundingSphere = Sphere(Vector3(-89.5203f, -36.9009f, 7.31081f), 2.11189f);
  data[17].mBoundingSphere = Sphere(Vector3(-39.7074f, 7.82733f, -12.1042f), 3.66287f);
  data[18].mBoundingSphere = Sphere(Vector3(-20.7289f, 82.7686f, -36.9087f), 1.58805f);
  data[19].mBoundingSphere = Sphere(Vector3(35.5499f, -20.0361f, 1.634f), 2.69383f);
  data[20].mBoundingSphere = Sphere(Vector3(23.0944f, 67.9211f, -40.4948f), 0.430201f);
  data[21].mBoundingSphere = Sphere(Vector3(46.9361f, -25.4195f, 62.1112f), 3.78174f);
  data[22].mBoundingSphere = Sphere(Vector3(54.3371f, -22.7586f, 9.16851f), 0.465688f);
  data[23].mBoundingSphere = Sphere(Vector3(91.7252f, 3.01754f, -13.6861f), 2.76005f);
  data[24].mBoundingSphere = Sphere(Vector3(-61.1391f, -24.1386f, -51.8318f), 3.17545f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest7(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(29);
  data[0].mBoundingSphere = Sphere(Vector3(-55.8845f, 61.7573f, 6.06819f), 3.20526f);
  data[1].mBoundingSphere = Sphere(Vector3(25.8397f, -60.0785f, -10.5389f), 3.11596f);
  data[2].mBoundingSphere = Sphere(Vector3(-15.7535f, 74.9967f, 28.3843f), 3.35115f);
  data[3].mBoundingSphere = Sphere(Vector3(-69.6073f, 24.3211f, 30.609f), 3.49541f);
  data[4].mBoundingSphere = Sphere(Vector3(27.8454f, 57.4899f, -6.07653f), 1.49632f);
  data[5].mBoundingSphere = Sphere(Vector3(-6.38781f, -17.0665f, -86.7406f), 3.90177f);
  data[6].mBoundingSphere = Sphere(Vector3(-2.26219f, -5.26943f, 31.495f), 1.96333f);
  data[7].mBoundingSphere = Sphere(Vector3(59.9335f, -2.54711f, -35.0003f), 2.55153f);
  data[8].mBoundingSphere = Sphere(Vector3(34.1257f, -76.5772f, -31.301f), 3.32343f);
  data[9].mBoundingSphere = Sphere(Vector3(48.584f, 8.32966f, 66.8236f), 1.09042f);
  data[10].mBoundingSphere = Sphere(Vector3(-49.1283f, -32.272f, 60.3811f), 2.62656f);
  data[11].mBoundingSphere = Sphere(Vector3(-34.5657f, -51.8421f, -72.918f), 1.46199f);
  data[12].mBoundingSphere = Sphere(Vector3(-11.502f, 39.0521f, 85.5702f), 3.90746f);
  data[13].mBoundingSphere = Sphere(Vector3(-51.6842f, 2.51928f, 47.7166f), 3.24956f);
  data[14].mBoundingSphere = Sphere(Vector3(-48.9007f, 67.2775f, 21.6967f), 0.565191f);
  data[15].mBoundingSphere = Sphere(Vector3(33.8892f, 20.1237f, -73.3396f), 1.49481f);
  data[16].mBoundingSphere = Sphere(Vector3(41.6169f, -81.6884f, -19.2848f), 3.82025f);
  data[17].mBoundingSphere = Sphere(Vector3(-2.35583f, -52.0779f, -32.0856f), 3.99107f);
  data[18].mBoundingSphere = Sphere(Vector3(-54.139f, -22.9262f, -37.8801f), 3.24283f);
  data[19].mBoundingSphere = Sphere(Vector3(44.166f, -8.42941f, 34.7656f), 3.4503f);
  data[20].mBoundingSphere = Sphere(Vector3(48.1948f, -19.969f, 12.8815f), 3.76029f);
  data[21].mBoundingSphere = Sphere(Vector3(-51.6747f, -11.9796f, 43.1351f), 3.3472f);
  data[22].mBoundingSphere = Sphere(Vector3(12.0809f, 73.9722f, 57.9532f), 2.33617f);
  data[23].mBoundingSphere = Sphere(Vector3(44.2705f, 76.8261f, 40.7136f), 2.43614f);
  data[24].mBoundingSphere = Sphere(Vector3(-42.5287f, -36.4602f, -77.2199f), 3.12686f);
  data[25].mBoundingSphere = Sphere(Vector3(46.8464f, -57.5454f, -52.4068f), 2.54492f);
  data[26].mBoundingSphere = Sphere(Vector3(32.3414f, -57.3638f, -24.6354f), 2.71087f);
  data[27].mBoundingSphere = Sphere(Vector3(36.2257f, -73.4589f, -24.9521f), 1.64221f);
  data[28].mBoundingSphere = Sphere(Vector3(-68.6525f, 47.9204f, -9.87183f), 2.39543f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest8(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(26);
  data[0].mBoundingSphere = Sphere(Vector3(59.22f, 60.4506f, 8.49013f), 0.970043f);
  data[1].mBoundingSphere = Sphere(Vector3(16.8715f, -2.92257f, -56.8983f), 3.27113f);
  data[2].mBoundingSphere = Sphere(Vector3(-1.99085f, 4.22225f, -57.3524f), 2.9732f);
  data[3].mBoundingSphere = Sphere(Vector3(12.8368f, -10.2279f, -31.2492f), 0.307273f);
  data[4].mBoundingSphere = Sphere(Vector3(29.2385f, 66.0527f, -10.5308f), 0.547795f);
  data[5].mBoundingSphere = Sphere(Vector3(-75.8088f, -51.395f, 37.0752f), 3.37678f);
  data[6].mBoundingSphere = Sphere(Vector3(-30.385f, 29.0416f, 32.7488f), 2.14239f);
  data[7].mBoundingSphere = Sphere(Vector3(-16.9199f, 82.3531f, 25.9413f), 1.6799f);
  data[8].mBoundingSphere = Sphere(Vector3(-29.2954f, 82.1828f, -15.181f), 0.662142f);
  data[9].mBoundingSphere = Sphere(Vector3(-57.0865f, 11.0146f, -72.2851f), 0.350877f);
  data[10].mBoundingSphere = Sphere(Vector3(64.728f, 10.3833f, 1.32671f), 0.915885f);
  data[11].mBoundingSphere = Sphere(Vector3(48.0701f, -9.02178f, 20.3491f), 1.59106f);
  data[12].mBoundingSphere = Sphere(Vector3(-19.6983f, 41.9851f, 15.5935f), 3.83683f);
  data[13].mBoundingSphere = Sphere(Vector3(33.8776f, 2.22161f, -53.0229f), 3.37678f);
  data[14].mBoundingSphere = Sphere(Vector3(41.9664f, -52.3251f, 24.4776f), 0.678146f);
  data[15].mBoundingSphere = Sphere(Vector3(-84.4281f, 18.5179f, -41.798f), 0.543852f);
  data[16].mBoundingSphere = Sphere(Vector3(-49.4007f, 0.0663061f, -44.1647f), 3.78545f);
  data[17].mBoundingSphere = Sphere(Vector3(13.9726f, 92.2119f, 3.23819f), 3.44589f);
  data[18].mBoundingSphere = Sphere(Vector3(-10.8746f, -67.853f, 43.7484f), 3.74115f);
  data[19].mBoundingSphere = Sphere(Vector3(-30.9735f, -70.0994f, 34.7853f), 1.98768f);
  data[20].mBoundingSphere = Sphere(Vector3(19.0127f, 39.7578f, 67.5165f), 1.08694f);
  data[21].mBoundingSphere = Sphere(Vector3(-45.7727f, 66.2296f, 18.0673f), 0.434028f);
  data[22].mBoundingSphere = Sphere(Vector3(-55.092f, 72.9339f, -35.3278f), 2.41956f);
  data[23].mBoundingSphere = Sphere(Vector3(-84.5817f, -42.6984f, 14.4884f), 1.39345f);
  data[24].mBoundingSphere = Sphere(Vector3(-3.28568f, 3.02432f, -74.9546f), 3.66102f);
  data[25].mBoundingSphere = Sphere(Vector3(-45.953f, 16.1155f, 77.9214f), 3.57624f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest9(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mBoundingSphere = Sphere(Vector3(19.9451f, 7.06128f, -1.25424f), 3.44682f);
  data[1].mBoundingSphere = Sphere(Vector3(81.1041f, -23.6301f, -50.0775f), 2.1737f);
  data[2].mBoundingSphere = Sphere(Vector3(-30.2721f, -27.1018f, 80.2427f), 2.34441f);
  data[3].mBoundingSphere = Sphere(Vector3(48.5149f, -64.2908f, 11.7672f), 2.52521f);
  data[4].mBoundingSphere = Sphere(Vector3(-84.4003f, 37.8013f, -12.6448f), 3.15029f);
  data[5].mBoundingSphere = Sphere(Vector3(-54.0281f, 52.8015f, 13.2604f), 3.58854f);
  data[6].mBoundingSphere = Sphere(Vector3(-30.7782f, -57.7462f, -63.9878f), 2.06782f);
  data[7].mBoundingSphere = Sphere(Vector3(-20.8676f, -48.9442f, -14.8072f), 2.8512f);
  data[8].mBoundingSphere = Sphere(Vector3(33.6913f, 12.2561f, 34.2917f), 2.75645f);
  data[9].mBoundingSphere = Sphere(Vector3(-24.0502f, 38.3226f, 59.3401f), 3.21581f);
  data[10].mBoundingSphere = Sphere(Vector3(16.0921f, 58.4856f, -20.9022f), 0.967492f);
  data[11].mBoundingSphere = Sphere(Vector3(-58.566f, 16.5227f, 24.9651f), 3.57358f);
  data[12].mBoundingSphere = Sphere(Vector3(-53.0949f, -53.7119f, -58.3124f), 3.85701f);
  data[13].mBoundingSphere = Sphere(Vector3(-99.6236f, -1.03161f, 2.13798f), 1.25382f);
  data[14].mBoundingSphere = Sphere(Vector3(-19.9383f, 96.668f, 7.51925f), 0.371404f);
  data[15].mBoundingSphere = Sphere(Vector3(-18.1659f, -51.2093f, -31.0592f), 2.54863f);
  data[16].mBoundingSphere = Sphere(Vector3(17.5368f, -26.7162f, 80.5796f), 0.510221f);
  data[17].mBoundingSphere = Sphere(Vector3(34.1319f, 10.9395f, 53.8223f), 3.31125f);
  data[18].mBoundingSphere = Sphere(Vector3(-69.5802f, -6.3955f, 14.1713f), 2.8621f);
  data[19].mBoundingSphere = Sphere(Vector3(65.5264f, 10.0222f, 34.5623f), 0.431013f);
  data[20].mBoundingSphere = Sphere(Vector3(-83.542f, -11.8856f, -43.8198f), 0.616565f);
  data[21].mBoundingSphere = Sphere(Vector3(30.3072f, -66.8331f, -16.9421f), 3.78244f);
  data[22].mBoundingSphere = Sphere(Vector3(21.1611f, 69.2663f, 56.3858f), 3.2513f);
  data[23].mBoundingSphere = Sphere(Vector3(-9.88018f, 65.2465f, -13.1657f), 3.04881f);
  data[24].mBoundingSphere = Sphere(Vector3(-12.9588f, -91.7475f, -4.87335f), 1.693f);
  data[25].mBoundingSphere = Sphere(Vector3(-79.707f, 45.3168f, 20.0053f), 3.42224f);
  data[26].mBoundingSphere = Sphere(Vector3(-76.4926f, 23.5253f, 1.84446f), 2.35496f);
  data[27].mBoundingSphere = Sphere(Vector3(-55.8307f, -49.5418f, 45.4852f), 0.977233f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest10(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(20);
  data[0].mBoundingSphere = Sphere(Vector3(-43.6415f, -80.0956f, -20.8419f), 0.796435f);
  data[1].mBoundingSphere = Sphere(Vector3(-44.875f, -9.07864f, 47.6301f), 3.98202f);
  data[2].mBoundingSphere = Sphere(Vector3(62.0058f, -37.8402f, 54.718f), 2.68501f);
  data[3].mBoundingSphere = Sphere(Vector3(38.1206f, 14.1828f, -33.4709f), 1.80364f);
  data[4].mBoundingSphere = Sphere(Vector3(-11.3368f, -34.5214f, -5.12339f), 2.30776f);
  data[5].mBoundingSphere = Sphere(Vector3(-74.7373f, 43.8097f, 34.0063f), 3.47755f);
  data[6].mBoundingSphere = Sphere(Vector3(76.8409f, 48.7538f, -30.403f), 3.69453f);
  data[7].mBoundingSphere = Sphere(Vector3(-26.3098f, -50.5947f, -43.7989f), 1.80364f);
  data[8].mBoundingSphere = Sphere(Vector3(14.5123f, -13.8148f, 26.061f), 2.96601f);
  data[9].mBoundingSphere = Sphere(Vector3(47.2575f, -9.16982f, -80.0973f), 0.620392f);
  data[10].mBoundingSphere = Sphere(Vector3(-13.7619f, 39.2961f, 40.8469f), 3.07316f);
  data[11].mBoundingSphere = Sphere(Vector3(8.57899f, -38.9978f, -57.6125f), 0.33267f);
  data[12].mBoundingSphere = Sphere(Vector3(27.62f, -27.363f, -62.5971f), 0.512192f);
  data[13].mBoundingSphere = Sphere(Vector3(-10.3742f, 16.9391f, 93.8603f), 1.0133f);
  data[14].mBoundingSphere = Sphere(Vector3(-25.0696f, 40.2033f, 67.1917f), 1.01469f);
  data[15].mBoundingSphere = Sphere(Vector3(67.5428f, 51.8742f, 23.9218f), 0.280947f);
  data[16].mBoundingSphere = Sphere(Vector3(-0.117334f, -34.4722f, -39.299f), 3.41226f);
  data[17].mBoundingSphere = Sphere(Vector3(-36.7371f, 8.8961f, 28.149f), 1.15235f);
  data[18].mBoundingSphere = Sphere(Vector3(-5.44739f, -12.7023f, 0.848993f), 1.07569f);
  data[19].mBoundingSphere = Sphere(Vector3(-69.98f, 18.1585f, 10.0352f), 3.26939f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest11(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(25);
  data[0].mBoundingSphere = Sphere(Vector3(-10.9397f, -28.9068f, -48.992f), 3.00103f);
  data[1].mBoundingSphere = Sphere(Vector3(-58.6163f, -9.95136f, -42.2582f), 1.72466f);
  data[2].mBoundingSphere = Sphere(Vector3(0.0985109f, 62.2752f, 21.6573f), 1.63989f);
  data[3].mBoundingSphere = Sphere(Vector3(38.3656f, 32.428f, 73.8492f), 1.70553f);
  data[4].mBoundingSphere = Sphere(Vector3(55.9078f, -58.9393f, 12.9005f), 3.31404f);
  data[5].mBoundingSphere = Sphere(Vector3(-2.00596f, -6.51906f, 66.3059f), 0.400629f);
  data[6].mBoundingSphere = Sphere(Vector3(-19.7827f, 26.2731f, -67.8415f), 0.969695f);
  data[7].mBoundingSphere = Sphere(Vector3(41.6221f, 18.5795f, -10.286f), 1.78033f);
  data[8].mBoundingSphere = Sphere(Vector3(-35.8196f, 70.1593f, 43.2114f), 3.23692f);
  data[9].mBoundingSphere = Sphere(Vector3(80.2167f, -46.6196f, -16.4873f), 1.42847f);
  data[10].mBoundingSphere = Sphere(Vector3(-16.4353f, 15.5526f, 9.78788f), 2.55849f);
  data[11].mBoundingSphere = Sphere(Vector3(-25.3606f, 35.9968f, -19.253f), 0.511032f);
  data[12].mBoundingSphere = Sphere(Vector3(36.4092f, -74.6593f, -9.5148f), 0.796319f);
  data[13].mBoundingSphere = Sphere(Vector3(37.2304f, -23.6619f, 41.7905f), 1.21845f);
  data[14].mBoundingSphere = Sphere(Vector3(23.4065f, 8.37779f, -21.8491f), 1.11129f);
  data[15].mBoundingSphere = Sphere(Vector3(-17.1607f, 59.2698f, -55.8053f), 2.68385f);
  data[16].mBoundingSphere = Sphere(Vector3(-39.3179f, -20.4194f, -66.6087f), 0.319565f);
  data[17].mBoundingSphere = Sphere(Vector3(-49.2389f, -71.5084f, 18.3422f), 1.17566f);
  data[18].mBoundingSphere = Sphere(Vector3(-43.4011f, -37.4542f, 57.7819f), 0.721982f);
  data[19].mBoundingSphere = Sphere(Vector3(-82.3695f, -21.1543f, 47.2612f), 2.16663f);
  data[20].mBoundingSphere = Sphere(Vector3(-44.8281f, 45.6282f, -47.431f), 3.41052f);
  data[21].mBoundingSphere = Sphere(Vector3(-84.8937f, 14.7141f, 8.96462f), 2.47534f);
  data[22].mBoundingSphere = Sphere(Vector3(79.3428f, -40.6569f, 18.0237f), 2.04787f);
  data[23].mBoundingSphere = Sphere(Vector3(42.5562f, 45.7692f, 20.2298f), 3.28527f);
  data[24].mBoundingSphere = Sphere(Vector3(-13.3159f, -39.2486f, -53.0065f), 3.72387f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest12(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(26);
  data[0].mBoundingSphere = Sphere(Vector3(-41.7929f, -73.4843f, 30.2175f), 1.0024f);
  data[1].mBoundingSphere = Sphere(Vector3(-18.8645f, -40.2681f, -52.7201f), 2.62668f);
  data[2].mBoundingSphere = Sphere(Vector3(-10.7607f, -3.64904f, -10.786f), 2.18147f);
  data[3].mBoundingSphere = Sphere(Vector3(-47.4323f, -59.0589f, -22.9126f), 0.374535f);
  data[4].mBoundingSphere = Sphere(Vector3(-92.7186f, -15.7043f, 28.9111f), 3.55212f);
  data[5].mBoundingSphere = Sphere(Vector3(77.1116f, -20.4278f, 36.2466f), 3.71251f);
  data[6].mBoundingSphere = Sphere(Vector3(-0.469062f, 14.3209f, 15.7405f), 3.08755f);
  data[7].mBoundingSphere = Sphere(Vector3(43.5389f, 3.14038f, 8.79099f), 0.761876f);
  data[8].mBoundingSphere = Sphere(Vector3(-30.3458f, -10.5834f, -72.2842f), 1.29754f);
  data[9].mBoundingSphere = Sphere(Vector3(74.3322f, 15.0901f, 36.2107f), 0.83285f);
  data[10].mBoundingSphere = Sphere(Vector3(-60.4203f, -26.3962f, 54.4252f), 3.0255f);
  data[11].mBoundingSphere = Sphere(Vector3(-29.0418f, 46.0212f, -30.793f), 1.30694f);
  data[12].mBoundingSphere = Sphere(Vector3(57.8032f, 24.9432f, 60.0135f), 2.61833f);
  data[13].mBoundingSphere = Sphere(Vector3(-4.2521f, -14.7707f, 11.6466f), 2.49563f);
  data[14].mBoundingSphere = Sphere(Vector3(14.983f, -14.1974f, 50.7554f), 1.87322f);
  data[15].mBoundingSphere = Sphere(Vector3(32.6288f, -51.6065f, 57.6372f), 2.07466f);
  data[16].mBoundingSphere = Sphere(Vector3(-19.1797f, 7.24698f, -72.0874f), 3.7589f);
  data[17].mBoundingSphere = Sphere(Vector3(47.3627f, 1.73998f, 57.132f), 3.292f);
  data[18].mBoundingSphere = Sphere(Vector3(-88.3799f, 17.1755f, -37.6688f), 0.91113f);
  data[19].mBoundingSphere = Sphere(Vector3(3.62925f, -70.758f, -49.9286f), 2.7517f);
  data[20].mBoundingSphere = Sphere(Vector3(1.75391f, -38.2039f, 10.766f), 0.704239f);
  data[21].mBoundingSphere = Sphere(Vector3(23.9811f, -66.0111f, -37.0135f), 3.37237f);
  data[22].mBoundingSphere = Sphere(Vector3(19.4955f, 16.3632f, -90.5689f), 3.29722f);
  data[23].mBoundingSphere = Sphere(Vector3(73.5245f, -0.31722f, 23.5343f), 3.12094f);
  data[24].mBoundingSphere = Sphere(Vector3(-12.2621f, 9.54716f, 90.9609f), 1.05447f);
  data[25].mBoundingSphere = Sphere(Vector3(-75.2379f, 25.9167f, 48.7187f), 1.32109f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest13(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(17);
  data[0].mBoundingSphere = Sphere(Vector3(-10.1387f, 65.8447f, -48.353f), 0.957402f);
  data[1].mBoundingSphere = Sphere(Vector3(-19.1979f, 18.4479f, -15.3038f), 1.49771f);
  data[2].mBoundingSphere = Sphere(Vector3(54.8692f, -42.7122f, -58.0577f), 1.45816f);
  data[3].mBoundingSphere = Sphere(Vector3(61.4135f, 13.5873f, 69.046f), 2.13566f);
  data[4].mBoundingSphere = Sphere(Vector3(5.32301f, -91.1361f, -16.8955f), 3.30476f);
  data[5].mBoundingSphere = Sphere(Vector3(64.0172f, -69.3289f, 21.0035f), 2.68954f);
  data[6].mBoundingSphere = Sphere(Vector3(-1.18737f, -1.27383f, -25.8673f), 0.667708f);
  data[7].mBoundingSphere = Sphere(Vector3(8.21196f, 72.1218f, -46.064f), 3.20096f);
  data[8].mBoundingSphere = Sphere(Vector3(23.6697f, -40.9306f, -27.2882f), 2.68478f);
  data[9].mBoundingSphere = Sphere(Vector3(-69.757f, -4.04411f, -51.9447f), 1.91253f);
  data[10].mBoundingSphere = Sphere(Vector3(48.7718f, -65.0194f, -10.111f), 3.84669f);
  data[11].mBoundingSphere = Sphere(Vector3(-66.7722f, -11.9032f, 5.40089f), 1.99128f);
  data[12].mBoundingSphere = Sphere(Vector3(-72.1325f, -25.7011f, 47.2132f), 0.459194f);
  data[13].mBoundingSphere = Sphere(Vector3(-54.9508f, -36.9933f, 54.407f), 3.5287f);
  data[14].mBoundingSphere = Sphere(Vector3(87.977f, 20.7068f, -21.5357f), 3.78058f);
  data[15].mBoundingSphere = Sphere(Vector3(50.3691f, 71.2471f, -45.6847f), 3.61428f);
  data[16].mBoundingSphere = Sphere(Vector3(56.9771f, 40.944f, 15.1938f), 0.431593f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest14(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(21);
  data[0].mBoundingSphere = Sphere(Vector3(-20.3875f, -21.0884f, 4.07694f), 0.547215f);
  data[1].mBoundingSphere = Sphere(Vector3(-28.2185f, -29.0881f, 37.9882f), 3.21395f);
  data[2].mBoundingSphere = Sphere(Vector3(-5.45975f, 32.4707f, -71.5586f), 3.53809f);
  data[3].mBoundingSphere = Sphere(Vector3(-69.9196f, 50.4582f, -19.7362f), 0.281063f);
  data[4].mBoundingSphere = Sphere(Vector3(-59.4235f, -30.9479f, -64.6081f), 2.90628f);
  data[5].mBoundingSphere = Sphere(Vector3(-28.4558f, -40.1281f, -31.1084f), 1.43381f);
  data[6].mBoundingSphere = Sphere(Vector3(-4.78903f, 15.649f, 77.3306f), 0.519846f);
  data[7].mBoundingSphere = Sphere(Vector3(0.983179f, 76.2383f, -53.6273f), 3.87429f);
  data[8].mBoundingSphere = Sphere(Vector3(-42.9347f, 34.853f, -3.61767f), 0.438087f);
  data[9].mBoundingSphere = Sphere(Vector3(-49.8844f, 62.5284f, 17.3061f), 1.83843f);
  data[10].mBoundingSphere = Sphere(Vector3(5.81186f, -66.7019f, 33.7038f), 3.9397f);
  data[11].mBoundingSphere = Sphere(Vector3(11.9818f, -59.0938f, -18.2555f), 1.81036f);
  data[12].mBoundingSphere = Sphere(Vector3(33.9439f, 58.2068f, -63.1608f), 3.12431f);
  data[13].mBoundingSphere = Sphere(Vector3(-41.2904f, 24.3422f, 70.8109f), 2.11293f);
  data[14].mBoundingSphere = Sphere(Vector3(11.3075f, 51.7318f, -79.8411f), 3.49112f);
  data[15].mBoundingSphere = Sphere(Vector3(30.1854f, -60.6813f, 33.2295f), 1.47161f);
  data[16].mBoundingSphere = Sphere(Vector3(-23.7724f, -6.41724f, -81.2625f), 3.28991f);
  data[17].mBoundingSphere = Sphere(Vector3(79.7128f, -24.3568f, -38.0215f), 2.35519f);
  data[18].mBoundingSphere = Sphere(Vector3(76.4866f, 26.8647f, 17.98f), 1.8491f);
  data[19].mBoundingSphere = Sphere(Vector3(32.4297f, -7.99472f, 73.1241f), 1.48971f);
  data[20].mBoundingSphere = Sphere(Vector3(-27.2907f, 45.9738f, -59.0219f), 2.67817f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest15(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(22);
  data[0].mBoundingSphere = Sphere(Vector3(44.3862f, -29.0535f, 20.0708f), 3.71808f);
  data[1].mBoundingSphere = Sphere(Vector3(-75.7425f, 34.0632f, 29.0324f), 0.447249f);
  data[2].mBoundingSphere = Sphere(Vector3(-62.9998f, 45.6116f, 29.5253f), 3.47164f);
  data[3].mBoundingSphere = Sphere(Vector3(54.2738f, -75.8102f, 31.6035f), 0.448524f);
  data[4].mBoundingSphere = Sphere(Vector3(25.8727f, 72.5591f, -0.0634759f), 2.89701f);
  data[5].mBoundingSphere = Sphere(Vector3(5.36868f, -36.5172f, -78.1543f), 2.53738f);
  data[6].mBoundingSphere = Sphere(Vector3(13.8688f, -6.88648f, 42.7343f), 1.08474f);
  data[7].mBoundingSphere = Sphere(Vector3(26.9602f, 73.7266f, 8.88469f), 1.04148f);
  data[8].mBoundingSphere = Sphere(Vector3(-46.4414f, -38.5493f, -55.1224f), 2.72978f);
  data[9].mBoundingSphere = Sphere(Vector3(-53.2814f, -81.052f, -12.2784f), 1.51128f);
  data[10].mBoundingSphere = Sphere(Vector3(11.4536f, -8.29067f, 49.8394f), 3.8359f);
  data[11].mBoundingSphere = Sphere(Vector3(35.3767f, -62.1889f, 16.0845f), 2.86222f);
  data[12].mBoundingSphere = Sphere(Vector3(55.3288f, -11.6969f, 60.0223f), 0.697049f);
  data[13].mBoundingSphere = Sphere(Vector3(-8.58013f, -28.3868f, 49.5688f), 2.79321f);
  data[14].mBoundingSphere = Sphere(Vector3(81.2326f, 0.101248f, 19.9499f), 3.15295f);
  data[15].mBoundingSphere = Sphere(Vector3(-32.2576f, 28.0216f, 7.10537f), 3.67923f);
  data[16].mBoundingSphere = Sphere(Vector3(-38.8229f, 61.4164f, -17.9603f), 2.71853f);
  data[17].mBoundingSphere = Sphere(Vector3(-65.3788f, -30.6167f, 15.6429f), 3.73965f);
  data[18].mBoundingSphere = Sphere(Vector3(11.4096f, 80.6118f, 32.739f), 1.99058f);
  data[19].mBoundingSphere = Sphere(Vector3(-83.129f, -47.0727f, 6.36105f), 3.88078f);
  data[20].mBoundingSphere = Sphere(Vector3(34.6237f, 84.4897f, 38.3232f), 2.72746f);
  data[21].mBoundingSphere = Sphere(Vector3(14.4142f, 8.13481f, -15.2346f), 3.61451f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest16(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mBoundingSphere = Sphere(Vector3(78.3412f, -12.4592f, 4.9312f), 0.703775f);
  data[1].mBoundingSphere = Sphere(Vector3(8.34954f, -49.9204f, 57.3148f), 0.665273f);
  data[2].mBoundingSphere = Sphere(Vector3(-23.1482f, -1.74327f, 81.8958f), 0.395526f);
  data[3].mBoundingSphere = Sphere(Vector3(56.4517f, 6.00319f, 57.3688f), 1.5601f);
  data[4].mBoundingSphere = Sphere(Vector3(40.8484f, 1.79879f, 69.7016f), 1.51336f);
  data[5].mBoundingSphere = Sphere(Vector3(-31.8492f, -88.3813f, 13.832f), 3.85341f);
  data[6].mBoundingSphere = Sphere(Vector3(32.3998f, 61.8852f, -26.5537f), 1.22564f);
  data[7].mBoundingSphere = Sphere(Vector3(76.6735f, -13.7821f, -12.2031f), 1.74577f);
  data[8].mBoundingSphere = Sphere(Vector3(-32.4947f, -89.6869f, 29.1938f), 1.30856f);
  data[9].mBoundingSphere = Sphere(Vector3(17.9552f, 23.1229f, 71.8537f), 3.55351f);
  data[10].mBoundingSphere = Sphere(Vector3(21.4802f, -34.0749f, -64.7024f), 1.15444f);
  data[11].mBoundingSphere = Sphere(Vector3(-30.1958f, 59.1161f, -19.8902f), 1.20349f);
  data[12].mBoundingSphere = Sphere(Vector3(21.1605f, 62.7464f, -45.5669f), 0.755498f);
  data[13].mBoundingSphere = Sphere(Vector3(7.87116f, 91.1446f, -11.838f), 2.90524f);
  data[14].mBoundingSphere = Sphere(Vector3(-86.7218f, -26.4166f, -1.99526f), 2.2623f);
  data[15].mBoundingSphere = Sphere(Vector3(46.9936f, 57.8394f, -15.8462f), 3.59619f);
  data[16].mBoundingSphere = Sphere(Vector3(31.3889f, -52.2252f, -67.2298f), 2.51709f);
  data[17].mBoundingSphere = Sphere(Vector3(44.4005f, -35.1132f, -70.4922f), 3.36344f);
  data[18].mBoundingSphere = Sphere(Vector3(-22.3079f, 64.6505f, 57.1959f), 3.16304f);
  data[19].mBoundingSphere = Sphere(Vector3(38.5949f, 32.533f, -84.1236f), 1.63931f);
  data[20].mBoundingSphere = Sphere(Vector3(-11.1267f, -43.5062f, 87.7462f), 0.327335f);
  data[21].mBoundingSphere = Sphere(Vector3(-26.719f, 3.27997f, 61.855f), 1.37292f);
  data[22].mBoundingSphere = Sphere(Vector3(-21.8967f, -84.4701f, -6.35229f), 3.27994f);
  data[23].mBoundingSphere = Sphere(Vector3(22.5547f, 46.7036f, 45.166f), 0.376043f);
  data[24].mBoundingSphere = Sphere(Vector3(-42.3349f, 76.8187f, -14.151f), 2.26706f);
  data[25].mBoundingSphere = Sphere(Vector3(-23.4542f, 11.8119f, 44.9154f), 0.244301f);
  data[26].mBoundingSphere = Sphere(Vector3(-35.217f, -22.5866f, -70.2544f), 3.31995f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest17(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(29);
  data[0].mBoundingSphere = Sphere(Vector3(42.3444f, 27.9496f, 17.3953f), 1.79633f);
  data[1].mBoundingSphere = Sphere(Vector3(-37.204f, -65.6497f, 41.1268f), 0.926206f);
  data[2].mBoundingSphere = Sphere(Vector3(1.52183f, 41.6971f, -13.4204f), 1.95741f);
  data[3].mBoundingSphere = Sphere(Vector3(54.3986f, -13.8652f, -67.5926f), 1.06804f);
  data[4].mBoundingSphere = Sphere(Vector3(-14.5843f, -54.8729f, 68.39f), 0.480648f);
  data[5].mBoundingSphere = Sphere(Vector3(-32.4333f, 8.79526f, -35.0955f), 1.46245f);
  data[6].mBoundingSphere = Sphere(Vector3(55.172f, -62.0735f, 31.3093f), 1.60649f);
  data[7].mBoundingSphere = Sphere(Vector3(-90.8069f, 20.2274f, -14.4614f), 0.791101f);
  data[8].mBoundingSphere = Sphere(Vector3(17.387f, 57.7435f, 44.0404f), 3.10761f);
  data[9].mBoundingSphere = Sphere(Vector3(-73.4557f, -65.7629f, 2.6518f), 3.9521f);
  data[10].mBoundingSphere = Sphere(Vector3(-58.3718f, 33.4837f, -31.8979f), 2.77559f);
  data[11].mBoundingSphere = Sphere(Vector3(17.0424f, -75.7379f, -44.8772f), 0.283615f);
  data[12].mBoundingSphere = Sphere(Vector3(58.0963f, 62.5788f, 16.2588f), 1.58295f);
  data[13].mBoundingSphere = Sphere(Vector3(-62.4194f, -59.4766f, -48.2782f), 3.06412f);
  data[14].mBoundingSphere = Sphere(Vector3(1.04739f, 43.9528f, -54.2725f), 3.51965f);
  data[15].mBoundingSphere = Sphere(Vector3(-16.8476f, -62.8059f, 6.71336f), 2.08545f);
  data[16].mBoundingSphere = Sphere(Vector3(41.0741f, -24.6573f, 49.2722f), 0.704587f);
  data[17].mBoundingSphere = Sphere(Vector3(-49.0224f, 66.4486f, -37.8551f), 0.302982f);
  data[18].mBoundingSphere = Sphere(Vector3(35.396f, 38.8229f, -25.8871f), 0.773125f);
  data[19].mBoundingSphere = Sphere(Vector3(66.8413f, -6.39589f, 18.0471f), 1.55929f);
  data[20].mBoundingSphere = Sphere(Vector3(73.3356f, -14.1862f, -65.8299f), 1.53749f);
  data[21].mBoundingSphere = Sphere(Vector3(21.7158f, 84.6064f, 39.3442f), 2.58365f);
  data[22].mBoundingSphere = Sphere(Vector3(-57.4725f, 35.7502f, 34.7711f), 0.324784f);
  data[23].mBoundingSphere = Sphere(Vector3(-73.763f, 22.3301f, 46.3553f), 0.666085f);
  data[24].mBoundingSphere = Sphere(Vector3(5.68075f, -9.74992f, 5.94692f), 3.78801f);
  data[25].mBoundingSphere = Sphere(Vector3(-1.1732f, 95.9675f, -27.0897f), 1.80665f);
  data[26].mBoundingSphere = Sphere(Vector3(42.0588f, 31.0133f, 48.3005f), 3.99269f);
  data[27].mBoundingSphere = Sphere(Vector3(30.4824f, 51.3617f, 45.6026f), 2.73975f);
  data[28].mBoundingSphere = Sphere(Vector3(-3.60971f, 15.0739f, -84.9653f), 0.579223f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest18(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(16);
  data[0].mBoundingSphere = Sphere(Vector3(-62.035f, 17.5656f, 50.0426f), 1.10898f);
  data[1].mBoundingSphere = Sphere(Vector3(-30.1493f, -23.3812f, 1.95756f), 2.69858f);
  data[2].mBoundingSphere = Sphere(Vector3(-11.0906f, 13.6689f, -93.3027f), 1.0685f);
  data[3].mBoundingSphere = Sphere(Vector3(-16.0179f, 11.3783f, 66.2609f), 3.34941f);
  data[4].mBoundingSphere = Sphere(Vector3(-72.9941f, -33.3841f, 17.062f), 1.94732f);
  data[5].mBoundingSphere = Sphere(Vector3(58.8096f, 53.3351f, -9.46022f), 0.361431f);
  data[6].mBoundingSphere = Sphere(Vector3(-34.4648f, -60.8978f, 63.8533f), 1.09784f);
  data[7].mBoundingSphere = Sphere(Vector3(-76.9076f, 24.7713f, 8.67763f), 1.39902f);
  data[8].mBoundingSphere = Sphere(Vector3(42.1908f, 6.55243f, 56.7207f), 2.60662f);
  data[9].mBoundingSphere = Sphere(Vector3(43.9332f, 45.8553f, -59.1297f), 2.87729f);
  data[10].mBoundingSphere = Sphere(Vector3(20.3262f, -52.8958f, 10.3457f), 1.8709f);
  data[11].mBoundingSphere = Sphere(Vector3(-70.2642f, 4.87167f, 45.7281f), 2.32701f);
  data[12].mBoundingSphere = Sphere(Vector3(37.4993f, 44.5428f, 11.7449f), 2.95221f);
  data[13].mBoundingSphere = Sphere(Vector3(34.3282f, 82.5481f, 33.445f), 1.73429f);
  data[14].mBoundingSphere = Sphere(Vector3(-42.8193f, 57.2782f, -11.6195f), 0.30275f);
  data[15].mBoundingSphere = Sphere(Vector3(56.3647f, 10.0423f, 17.0594f), 1.85559f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest19(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(24);
  data[0].mBoundingSphere = Sphere(Vector3(-26.0559f, -51.8179f, 76.4371f), 0.625843f);
  data[1].mBoundingSphere = Sphere(Vector3(35.0555f, 55.1399f, -10.2353f), 2.62981f);
  data[2].mBoundingSphere = Sphere(Vector3(6.66967f, 47.1231f, 48.915f), 2.07396f);
  data[3].mBoundingSphere = Sphere(Vector3(21.9602f, 26.5155f, -2.0071f), 1.03336f);
  data[4].mBoundingSphere = Sphere(Vector3(-66.6669f, -14.7831f, 12.5064f), 2.18263f);
  data[5].mBoundingSphere = Sphere(Vector3(-48.4815f, 46.9826f, -59.832f), 2.23679f);
  data[6].mBoundingSphere = Sphere(Vector3(-57.0989f, 23.999f, -0.334577f), 2.20385f);
  data[7].mBoundingSphere = Sphere(Vector3(-33.5289f, 75.7648f, 44.9178f), 3.69059f);
  data[8].mBoundingSphere = Sphere(Vector3(-34.2426f, -17.7419f, -5.90463f), 0.406659f);
  data[9].mBoundingSphere = Sphere(Vector3(64.6959f, -11.9367f, 11.8297f), 2.51152f);
  data[10].mBoundingSphere = Sphere(Vector3(-30.482f, 47.6529f, 21.2251f), 0.344847f);
  data[11].mBoundingSphere = Sphere(Vector3(7.07144f, 15.2505f, 21.464f), 3.98863f);
  data[12].mBoundingSphere = Sphere(Vector3(-61.7607f, 29.7059f, -63.4824f), 0.599866f);
  data[13].mBoundingSphere = Sphere(Vector3(-90.1872f, 6.02716f, -38.9778f), 3.96289f);
  data[14].mBoundingSphere = Sphere(Vector3(73.5837f, 19.6745f, 25.9664f), 3.99919f);
  data[15].mBoundingSphere = Sphere(Vector3(-47.6919f, -63.1876f, 50.2222f), 2.08371f);
  data[16].mBoundingSphere = Sphere(Vector3(-13.4719f, -41.0494f, -27.6058f), 0.708646f);
  data[17].mBoundingSphere = Sphere(Vector3(-4.14313f, -77.999f, 1.26118f), 0.338469f);
  data[18].mBoundingSphere = Sphere(Vector3(-33.4383f, -74.7453f, 37.6116f), 1.20129f);
  data[19].mBoundingSphere = Sphere(Vector3(50.1862f, -16.1274f, -78.7443f), 2.05877f);
  data[20].mBoundingSphere = Sphere(Vector3(59.9805f, 43.2943f, -20.2687f), 1.29963f);
  data[21].mBoundingSphere = Sphere(Vector3(71.4168f, -38.5539f, 18.4589f), 3.79995f);
  data[22].mBoundingSphere = Sphere(Vector3(-80.4005f, -40.5877f, 35.5041f), 0.893619f);
  data[23].mBoundingSphere = Sphere(Vector3(4.88503f, -32.0727f, -48.371f), 2.89747f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest20(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(18);
  data[0].mBoundingSphere = Sphere(Vector3(-29.9341f, -6.74625f, -52.7315f), 0.272134f);
  data[1].mBoundingSphere = Sphere(Vector3(62.6997f, -49.3117f, -50.7256f), 2.82661f);
  data[2].mBoundingSphere = Sphere(Vector3(-5.60366f, -68.1652f, 55.7696f), 2.4039f);
  data[3].mBoundingSphere = Sphere(Vector3(-16.432f, -31.5549f, 39.82f), 0.424982f);
  data[4].mBoundingSphere = Sphere(Vector3(-2.1972f, 14.1075f, 18.6829f), 3.05496f);
  data[5].mBoundingSphere = Sphere(Vector3(-12.6559f, -15.8888f, -94.3496f), 1.86951f);
  data[6].mBoundingSphere = Sphere(Vector3(47.1819f, 73.187f, -13.376f), 1.9406f);
  data[7].mBoundingSphere = Sphere(Vector3(-20.3356f, 57.1865f, -45.676f), 3.40716f);
  data[8].mBoundingSphere = Sphere(Vector3(32.3115f, -5.17687f, 33.7626f), 0.303909f);
  data[9].mBoundingSphere = Sphere(Vector3(23.6644f, 51.8668f, 58.3588f), 1.51336f);
  data[10].mBoundingSphere = Sphere(Vector3(-46.2958f, -17.4116f, -4.3444f), 0.811396f);
  data[11].mBoundingSphere = Sphere(Vector3(-24.255f, -9.48497f, -74.2257f), 3.47593f);
  data[12].mBoundingSphere = Sphere(Vector3(21.7805f, -79.517f, -30.2144f), 2.22449f);
  data[13].mBoundingSphere = Sphere(Vector3(-30.2468f, 45.1955f, 32.0301f), 2.35369f);
  data[14].mBoundingSphere = Sphere(Vector3(-54.5409f, -15.1841f, -60.1861f), 0.245112f);
  data[15].mBoundingSphere = Sphere(Vector3(49.0287f, 17.2839f, -79.5857f), 3.70973f);
  data[16].mBoundingSphere = Sphere(Vector3(-21.2812f, -64.7188f, -12.8494f), 2.13717f);
  data[17].mBoundingSphere = Sphere(Vector3(79.1151f, -35.5526f, 36.0537f), 1.52032f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest21(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(15);
  data[0].mBoundingSphere = Sphere(Vector3(52.7313f, -15.9246f, 55.4332f), 3.08453f);
  data[1].mBoundingSphere = Sphere(Vector3(49.5126f, -3.41858f, 19.9803f), 2.94513f);
  data[2].mBoundingSphere = Sphere(Vector3(-27.2685f, 24.8974f, 8.02756f), 0.331858f);
  data[3].mBoundingSphere = Sphere(Vector3(-40.7504f, -52.6764f, 64.6378f), 0.227949f);
  data[4].mBoundingSphere = Sphere(Vector3(-9.46531f, -17.6934f, 71.5886f), 2.70264f);
  data[5].mBoundingSphere = Sphere(Vector3(-14.927f, 52.343f, -29.0709f), 0.838881f);
  data[6].mBoundingSphere = Sphere(Vector3(9.3176f, -8.681f, 57.394f), 0.994281f);
  data[7].mBoundingSphere = Sphere(Vector3(-2.44568f, 70.1464f, 32.5603f), 1.38696f);
  data[8].mBoundingSphere = Sphere(Vector3(-13.2806f, -77.7071f, 56.2633f), 3.70242f);
  data[9].mBoundingSphere = Sphere(Vector3(-56.7543f, 8.84207f, -64.2774f), 1.3132f);
  data[10].mBoundingSphere = Sphere(Vector3(47.9268f, 83.5411f, 1.88446f), 3.60698f);
  data[11].mBoundingSphere = Sphere(Vector3(70.884f, -29.785f, -2.25595f), 2.01459f);
  data[12].mBoundingSphere = Sphere(Vector3(-18.7643f, -28.3191f, -33.2139f), 1.83437f);
  data[13].mBoundingSphere = Sphere(Vector3(-14.5964f, -39.9516f, 27.7343f), 2.64384f);
  data[14].mBoundingSphere = Sphere(Vector3(67.7289f, -17.1937f, 22.0513f), 1.99441f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest22(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(25);
  data[0].mBoundingSphere = Sphere(Vector3(-17.5736f, 0.502237f, -44.5228f), 1.85582f);
  data[1].mBoundingSphere = Sphere(Vector3(-6.99606f, -26.0008f, -27.5769f), 0.349718f);
  data[2].mBoundingSphere = Sphere(Vector3(32.9768f, -77.9042f, 52.2849f), 1.42581f);
  data[3].mBoundingSphere = Sphere(Vector3(-8.89858f, 88.4759f, 30.2566f), 0.899185f);
  data[4].mBoundingSphere = Sphere(Vector3(-9.95014f, -52.1746f, -66.462f), 3.00648f);
  data[5].mBoundingSphere = Sphere(Vector3(-35.2251f, -10.9148f, -51.9477f), 1.7068f);
  data[6].mBoundingSphere = Sphere(Vector3(60.6823f, 30.3348f, -35.4199f), 3.16745f);
  data[7].mBoundingSphere = Sphere(Vector3(11.4886f, 27.8975f, -1.45003f), 2.15074f);
  data[8].mBoundingSphere = Sphere(Vector3(-42.2198f, 2.26088f, -80.7293f), 1.7242f);
  data[9].mBoundingSphere = Sphere(Vector3(-52.2254f, -58.1156f, 55.42f), 0.409326f);
  data[10].mBoundingSphere = Sphere(Vector3(66.8929f, -3.76869f, 29.1245f), 1.99047f);
  data[11].mBoundingSphere = Sphere(Vector3(-44.9715f, 59.4884f, 6.59155f), 2.50074f);
  data[12].mBoundingSphere = Sphere(Vector3(5.22425f, -72.8683f, -44.9857f), 2.00508f);
  data[13].mBoundingSphere = Sphere(Vector3(3.44328f, 6.01534f, -34.9483f), 3.2978f);
  data[14].mBoundingSphere = Sphere(Vector3(53.2836f, 19.9872f, 7.84201f), 3.33456f);
  data[15].mBoundingSphere = Sphere(Vector3(-12.7671f, -45.7657f, -87.6795f), 0.317478f);
  data[16].mBoundingSphere = Sphere(Vector3(8.15822f, 39.6502f, -54.1776f), 3.25072f);
  data[17].mBoundingSphere = Sphere(Vector3(76.2606f, -3.00663f, 23.7788f), 2.28677f);
  data[18].mBoundingSphere = Sphere(Vector3(3.3355f, -8.06437f, -20.7987f), 0.682437f);
  data[19].mBoundingSphere = Sphere(Vector3(19.4835f, 26.5637f, 44.6013f), 2.08139f);
  data[20].mBoundingSphere = Sphere(Vector3(59.5927f, -38.0349f, -30.3691f), 0.743669f);
  data[21].mBoundingSphere = Sphere(Vector3(7.34624f, 46.6676f, 45.3941f), 1.44111f);
  data[22].mBoundingSphere = Sphere(Vector3(-32.4418f, 5.92458f, -67.7619f), 2.63538f);
  data[23].mBoundingSphere = Sphere(Vector3(34.9789f, 55.8913f, 38.6704f), 3.85991f);
  data[24].mBoundingSphere = Sphere(Vector3(49.5204f, -51.0366f, 68.1689f), 1.32259f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest23(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(17);
  data[0].mBoundingSphere = Sphere(Vector3(44.9586f, 11.3765f, -12.8712f), 0.370128f);
  data[1].mBoundingSphere = Sphere(Vector3(3.30474f, 31.9652f, -69.0714f), 0.201856f);
  data[2].mBoundingSphere = Sphere(Vector3(-6.88561f, 30.9464f, 52.2182f), 2.26021f);
  data[3].mBoundingSphere = Sphere(Vector3(-7.70104f, -49.5084f, -28.3653f), 3.1206f);
  data[4].mBoundingSphere = Sphere(Vector3(-35.9286f, -6.09963f, 67.2092f), 0.677566f);
  data[5].mBoundingSphere = Sphere(Vector3(-13.2118f, -0.0506657f, 40.768f), 1.44227f);
  data[6].mBoundingSphere = Sphere(Vector3(-15.8428f, 33.7171f, 92.7721f), 1.78276f);
  data[7].mBoundingSphere = Sphere(Vector3(-13.1862f, -33.1423f, 63.5236f), 1.64893f);
  data[8].mBoundingSphere = Sphere(Vector3(-15.0785f, -46.3947f, -60.8713f), 1.0271f);
  data[9].mBoundingSphere = Sphere(Vector3(67.027f, -54.8059f, 48.3699f), 3.46851f);
  data[10].mBoundingSphere = Sphere(Vector3(78.642f, 32.726f, 46.9492f), 3.53287f);
  data[11].mBoundingSphere = Sphere(Vector3(-27.6075f, 32.9529f, -39.0149f), 1.49388f);
  data[12].mBoundingSphere = Sphere(Vector3(-37.6576f, -66.3316f, -31.3928f), 3.14878f);
  data[13].mBoundingSphere = Sphere(Vector3(36.9924f, -65.2911f, 1.64245f), 2.47534f);
  data[14].mBoundingSphere = Sphere(Vector3(5.43116f, -48.9515f, -20.2098f), 3.78128f);
  data[15].mBoundingSphere = Sphere(Vector3(43.1022f, -13.1702f, -39.8771f), 1.28861f);
  data[16].mBoundingSphere = Sphere(Vector3(-60.679f, 72.2307f, -26.6142f), 3.19864f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest24(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(22);
  data[0].mBoundingSphere = Sphere(Vector3(5.17426f, 43.1591f, 43.8353f), 1.27702f);
  data[1].mBoundingSphere = Sphere(Vector3(-38.825f, 5.63764f, -64.2278f), 0.262624f);
  data[2].mBoundingSphere = Sphere(Vector3(-30.9746f, 36.7281f, 45.7695f), 3.41412f);
  data[3].mBoundingSphere = Sphere(Vector3(29.2809f, -20.2678f, -33.3472f), 1.18389f);
  data[4].mBoundingSphere = Sphere(Vector3(3.56134f, -59.9863f, 29.3464f), 1.97145f);
  data[5].mBoundingSphere = Sphere(Vector3(15.1099f, -34.3123f, -41.587f), 1.12069f);
  data[6].mBoundingSphere = Sphere(Vector3(39.2136f, -66.5668f, 35.3237f), 2.56406f);
  data[7].mBoundingSphere = Sphere(Vector3(6.83216f, 2.19263f, -36.2995f), 2.97645f);
  data[8].mBoundingSphere = Sphere(Vector3(35.7728f, 36.2788f, 3.9096f), 2.21093f);
  data[9].mBoundingSphere = Sphere(Vector3(-58.5717f, 48.3155f, 36.5964f), 3.08465f);
  data[10].mBoundingSphere = Sphere(Vector3(-11.3963f, -79.3658f, 21.3275f), 3.48126f);
  data[11].mBoundingSphere = Sphere(Vector3(88.6952f, 38.052f, 12.2051f), 0.842708f);
  data[12].mBoundingSphere = Sphere(Vector3(29.2027f, -47.6312f, 76.1834f), 0.61529f);
  data[13].mBoundingSphere = Sphere(Vector3(-39.3263f, 53.3271f, -16.1138f), 3.12083f);
  data[14].mBoundingSphere = Sphere(Vector3(-65.7438f, 27.2772f, -44.595f), 2.2209f);
  data[15].mBoundingSphere = Sphere(Vector3(-27.7615f, 58.8772f, -30.501f), 0.644514f);
  data[16].mBoundingSphere = Sphere(Vector3(79.5152f, 50.2156f, 1.74244f), 3.14437f);
  data[17].mBoundingSphere = Sphere(Vector3(-7.89851f, -22.3473f, -48.3933f), 3.75472f);
  data[18].mBoundingSphere = Sphere(Vector3(55.1503f, -62.5546f, -32.2576f), 0.516251f);
  data[19].mBoundingSphere = Sphere(Vector3(28.3571f, -41.3263f, -65.8171f), 0.739726f);
  data[20].mBoundingSphere = Sphere(Vector3(-52.9056f, 42.195f, -33.1391f), 0.773125f);
  data[21].mBoundingSphere = Sphere(Vector3(52.8346f, -42.2794f, -62.0066f), 2.14563f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionStructureFuzzTest25(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(29);
  data[0].mBoundingSphere = Sphere(Vector3(82.3159f, 54.4008f, 7.34652f), 3.27936f);
  data[1].mBoundingSphere = Sphere(Vector3(-76.6237f, 18.3217f, -7.2849f), 2.12488f);
  data[2].mBoundingSphere = Sphere(Vector3(-69.8454f, -19.8061f, 31.1238f), 1.25753f);
  data[3].mBoundingSphere = Sphere(Vector3(12.3873f, -2.87546f, -91.4912f), 1.03162f);
  data[4].mBoundingSphere = Sphere(Vector3(-54.3299f, 50.8227f, -47.053f), 0.87286f);
  data[5].mBoundingSphere = Sphere(Vector3(75.0975f, 36.7523f, -23.3076f), 0.650313f);
  data[6].mBoundingSphere = Sphere(Vector3(22.3836f, 10.1258f, -93.4867f), 3.48057f);
  data[7].mBoundingSphere = Sphere(Vector3(70.6245f, 47.2014f, -33.4606f), 1.5572f);
  data[8].mBoundingSphere = Sphere(Vector3(51.7442f, 57.8362f, 17.1357f), 0.702036f);
  data[9].mBoundingSphere = Sphere(Vector3(41.243f, -46.4919f, 56.1146f), 0.628626f);
  data[10].mBoundingSphere = Sphere(Vector3(4.53917f, -43.2565f, -84.9862f), 1.81303f);
  data[11].mBoundingSphere = Sphere(Vector3(18.1395f, 32.2028f, 85.0684f), 1.56659f);
  data[12].mBoundingSphere = Sphere(Vector3(38.4892f, 8.90341f, 32.9268f), 0.80351f);
  data[13].mBoundingSphere = Sphere(Vector3(3.73257f, -52.6281f, 34.6052f), 3.09659f);
  data[14].mBoundingSphere = Sphere(Vector3(-2.71325f, -58.7315f, 51.8331f), 0.915769f);
  data[15].mBoundingSphere = Sphere(Vector3(82.477f, 22.0184f, 5.30665f), 2.84273f);
  data[16].mBoundingSphere = Sphere(Vector3(31.8258f, -26.6294f, 13.4853f), 1.65543f);
  data[17].mBoundingSphere = Sphere(Vector3(-27.5031f, 50.247f, 66.4275f), 1.67653f);
  data[18].mBoundingSphere = Sphere(Vector3(12.6809f, -68.9699f, 52.9502f), 1.47857f);
  data[19].mBoundingSphere = Sphere(Vector3(7.50023f, -39.1447f, -25.5079f), 0.941282f);
  data[20].mBoundingSphere = Sphere(Vector3(-4.63374f, -64.5449f, -64.229f), 0.953111f);
  data[21].mBoundingSphere = Sphere(Vector3(32.8333f, -19.1576f, -21.7115f), 3.95141f);
  data[22].mBoundingSphere = Sphere(Vector3(-70.7473f, 15.6595f, -1.59478f), 2.59572f);
  data[23].mBoundingSphere = Sphere(Vector3(17.2671f, -68.918f, -3.68452f), 2.76631f);
  data[24].mBoundingSphere = Sphere(Vector3(69.7687f, -0.140473f, -48.739f), 3.58343f);
  data[25].mBoundingSphere = Sphere(Vector3(1.01605f, -10.3108f, -27.9271f), 3.43975f);
  data[26].mBoundingSphere = Sphere(Vector3(-23.1679f, 46.675f, -66.9988f), 0.34044f);
  data[27].mBoundingSphere = Sphere(Vector3(88.5441f, -37.666f, 4.77191f), 2.34441f);
  data[28].mBoundingSphere = Sphere(Vector3(-50.5248f, -28.4186f, -30.3923f), 1.20001f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintSphereData, file, true);
}

void SphereSpatialPartitionRayCastFuzzTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(33);
  data[0].mBoundingSphere = Sphere(Vector3(-5.26247f, 7.17047f, -14.3424f), 2.39451f);
  data[1].mBoundingSphere = Sphere(Vector3(-6.08262f, -38.0933f, -17.3042f), 3.91523f);
  data[2].mBoundingSphere = Sphere(Vector3(39.3644f, 12.1685f, -27.0028f), 1.90349f);
  data[3].mBoundingSphere = Sphere(Vector3(34.1295f, -33.515f, 1.52629f), 1.35994f);
  data[4].mBoundingSphere = Sphere(Vector3(0.203705f, -43.8077f, -22.5967f), 3.47384f);
  data[5].mBoundingSphere = Sphere(Vector3(-9.70535f, -47.7021f, 8.45147f), 2.01285f);
  data[6].mBoundingSphere = Sphere(Vector3(-25.6452f, 30.7422f, -23.8555f), 0.591516f);
  data[7].mBoundingSphere = Sphere(Vector3(-12.1264f, 1.48389f, 13.1183f), 3.43406f);
  data[8].mBoundingSphere = Sphere(Vector3(23.9692f, 17.3361f, -14.3942f), 2.55408f);
  data[9].mBoundingSphere = Sphere(Vector3(33.873f, -16.1128f, -6.40945f), 1.36759f);
  data[10].mBoundingSphere = Sphere(Vector3(29.3499f, -5.8997f, -1.99338f), 2.65927f);
  data[11].mBoundingSphere = Sphere(Vector3(-31.8262f, 28.6584f, 13.5665f), 0.919016f);
  data[12].mBoundingSphere = Sphere(Vector3(-19.0155f, 35.5948f, -16.9283f), 1.97064f);
  data[13].mBoundingSphere = Sphere(Vector3(30.4739f, -36.8383f, 12.8174f), 3.50759f);
  data[14].mBoundingSphere = Sphere(Vector3(-18.6776f, -14.9198f, 20.5344f), 1.2573f);
  data[15].mBoundingSphere = Sphere(Vector3(-5.05542f, 7.46377f, 21.6573f), 3.79299f);
  data[16].mBoundingSphere = Sphere(Vector3(24.2839f, 27.2689f, -16.778f), 2.90849f);
  data[17].mBoundingSphere = Sphere(Vector3(13.838f, 32.1401f, -11.3889f), 0.378826f);
  data[18].mBoundingSphere = Sphere(Vector3(33.8874f, 22.5827f, 4.87271f), 3.82349f);
  data[19].mBoundingSphere = Sphere(Vector3(-15.2475f, -12.8352f, 10.0995f), 1.28931f);
  data[20].mBoundingSphere = Sphere(Vector3(-14.1748f, -11.5292f, -38.307f), 2.07675f);
  data[21].mBoundingSphere = Sphere(Vector3(-9.41328f, 8.92825f, -19.7369f), 1.42152f);
  data[22].mBoundingSphere = Sphere(Vector3(44.0725f, -14.7525f, -15.9679f), 2.15746f);
  data[23].mBoundingSphere = Sphere(Vector3(-35.115f, -9.24835f, 32.8248f), 0.372912f);
  data[24].mBoundingSphere = Sphere(Vector3(27.9333f, -33.82f, -10.2109f), 3.58471f);
  data[25].mBoundingSphere = Sphere(Vector3(-14.5891f, 23.1187f, 32.9472f), 3.64386f);
  data[26].mBoundingSphere = Sphere(Vector3(21.2655f, 3.21916f, -4.99671f), 3.29652f);
  data[27].mBoundingSphere = Sphere(Vector3(5.89453f, 41.9947f, -22.1512f), 3.41435f);
  data[28].mBoundingSphere = Sphere(Vector3(-17.9104f, -21.2869f, -17.6823f), 0.415821f);
  data[29].mBoundingSphere = Sphere(Vector3(32.6515f, 2.70782f, -3.43741f), 3.49715f);
  data[30].mBoundingSphere = Sphere(Vector3(12.1299f, 12.2873f, 4.10034f), 3.38965f);
  data[31].mBoundingSphere = Sphere(Vector3(25.8288f, 26.5686f, -25.357f), 1.06467f);
  data[32].mBoundingSphere = Sphere(Vector3(41.0294f, -9.57393f, 24.9998f), 1.50362f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(22.4641f, 2.81232f, -8.0048f));
  ray.mDirection = Vector3(Vector3(0.919881f, 0.0018521f, 0.392193f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(35);
  data[0].mBoundingSphere = Sphere(Vector3(-10.1801f, -35.2866f, 29.0709f), 1.63641f);
  data[1].mBoundingSphere = Sphere(Vector3(21.93f, -35.7074f, 26.5285f), 0.923887f);
  data[2].mBoundingSphere = Sphere(Vector3(11.3041f, 21.8558f, 19.5054f), 2.7118f);
  data[3].mBoundingSphere = Sphere(Vector3(-40.8889f, -15.7011f, -13.2518f), 2.04903f);
  data[4].mBoundingSphere = Sphere(Vector3(-21.1707f, -19.7584f, -12.8416f), 1.45434f);
  data[5].mBoundingSphere = Sphere(Vector3(8.00268f, -1.72874f, 40.7492f), 3.46909f);
  data[6].mBoundingSphere = Sphere(Vector3(-31.4033f, 4.51078f, 32.1382f), 2.11827f);
  data[7].mBoundingSphere = Sphere(Vector3(-25.3091f, 37.197f, -8.01228f), 3.80076f);
  data[8].mBoundingSphere = Sphere(Vector3(2.33349f, 0.377998f, 34.1988f), 3.62391f);
  data[9].mBoundingSphere = Sphere(Vector3(0.283248f, -11.7914f, 38.8078f), 0.905679f);
  data[10].mBoundingSphere = Sphere(Vector3(8.17779f, -42.7253f, 19.1516f), 2.65961f);
  data[11].mBoundingSphere = Sphere(Vector3(7.53043f, -0.825635f, -38.1977f), 3.7814f);
  data[12].mBoundingSphere = Sphere(Vector3(15.1922f, 1.30391f, 1.89779f), 2.95975f);
  data[13].mBoundingSphere = Sphere(Vector3(-17.1438f, -19.4944f, 16.1637f), 1.2246f);
  data[14].mBoundingSphere = Sphere(Vector3(-17.6917f, 12.7984f, 3.78403f), 0.35656f);
  data[15].mBoundingSphere = Sphere(Vector3(-6.50395f, 10.8237f, -31.6261f), 1.27238f);
  data[16].mBoundingSphere = Sphere(Vector3(9.6944f, -42.9674f, 8.6256f), 0.607868f);
  data[17].mBoundingSphere = Sphere(Vector3(14.7625f, 6.09681f, -4.14932f), 0.816034f);
  data[18].mBoundingSphere = Sphere(Vector3(14.5681f, 7.94766f, -8.56275f), 1.59883f);
  data[19].mBoundingSphere = Sphere(Vector3(-15.9901f, -11.7317f, 35.2988f), 3.1918f);
  data[20].mBoundingSphere = Sphere(Vector3(-6.41748f, 35.3806f, 26.9102f), 0.720011f);
  data[21].mBoundingSphere = Sphere(Vector3(14.1637f, 15.0526f, 44.764f), 3.94503f);
  data[22].mBoundingSphere = Sphere(Vector3(-16.1835f, -13.0551f, -18.1517f), 0.819166f);
  data[23].mBoundingSphere = Sphere(Vector3(30.6344f, -15.1528f, 31.2342f), 1.77012f);
  data[24].mBoundingSphere = Sphere(Vector3(7.15115f, -26.1274f, -40.9805f), 3.32888f);
  data[25].mBoundingSphere = Sphere(Vector3(6.04658f, 18.5985f, 24.8543f), 0.425794f);
  data[26].mBoundingSphere = Sphere(Vector3(-30.251f, 9.76922f, -1.54535f), 3.76876f);
  data[27].mBoundingSphere = Sphere(Vector3(42.5949f, 12.3483f, 16.4067f), 1.62458f);
  data[28].mBoundingSphere = Sphere(Vector3(-28.2991f, -24.261f, 15.7523f), 1.02269f);
  data[29].mBoundingSphere = Sphere(Vector3(-7.95766f, -1.38554f, 16.6857f), 0.297647f);
  data[30].mBoundingSphere = Sphere(Vector3(-17.0471f, 18.3165f, -12.7009f), 1.39183f);
  data[31].mBoundingSphere = Sphere(Vector3(17.435f, -14.3848f, -9.30279f), 1.23492f);
  data[32].mBoundingSphere = Sphere(Vector3(-23.9267f, -27.5677f, -11.7977f), 2.22101f);
  data[33].mBoundingSphere = Sphere(Vector3(36.1567f, -32.0035f, -12.1229f), 3.89957f);
  data[34].mBoundingSphere = Sphere(Vector3(33.5726f, 11.3668f, 13.6703f), 0.701572f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-20.4009f, -4.31494f, -2.00424f));
  ray.mDirection = Vector3(Vector3(0.572562f, 0.0637757f, 0.817377f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(35);
  data[0].mBoundingSphere = Sphere(Vector3(-0.445917f, 11.6948f, -32.7032f), 0.786926f);
  data[1].mBoundingSphere = Sphere(Vector3(17.4601f, -25.9223f, 31.7268f), 2.11687f);
  data[2].mBoundingSphere = Sphere(Vector3(21.8433f, -19.5444f, 19.2736f), 0.597082f);
  data[3].mBoundingSphere = Sphere(Vector3(-3.07212f, -12.2667f, 17.3293f), 1.5826f);
  data[4].mBoundingSphere = Sphere(Vector3(-14.4227f, 13.0122f, 44.6717f), 0.219019f);
  data[5].mBoundingSphere = Sphere(Vector3(14.148f, -11.127f, -36.2296f), 2.26798f);
  data[6].mBoundingSphere = Sphere(Vector3(27.0225f, 15.9972f, -16.4007f), 2.78127f);
  data[7].mBoundingSphere = Sphere(Vector3(24.7825f, 5.90323f, -4.90007f), 1.12278f);
  data[8].mBoundingSphere = Sphere(Vector3(6.37819f, 34.1742f, 26.1954f), 3.52673f);
  data[9].mBoundingSphere = Sphere(Vector3(12.9906f, 30.8371f, 9.96358f), 0.48923f);
  data[10].mBoundingSphere = Sphere(Vector3(36.7964f, 20.5623f, 15.5815f), 3.18716f);
  data[11].mBoundingSphere = Sphere(Vector3(2.5553f, -32.5751f, 13.6201f), 0.813947f);
  data[12].mBoundingSphere = Sphere(Vector3(5.6033f, -16.1635f, 10.6139f), 2.83276f);
  data[13].mBoundingSphere = Sphere(Vector3(17.5271f, 26.7685f, 2.20915f), 1.43404f);
  data[14].mBoundingSphere = Sphere(Vector3(5.09606f, -27.9276f, 4.15299f), 2.99616f);
  data[15].mBoundingSphere = Sphere(Vector3(28.4436f, -7.29622f, -33.2398f), 1.83959f);
  data[16].mBoundingSphere = Sphere(Vector3(-12.6304f, -32.3396f, -24.4699f), 3.27124f);
  data[17].mBoundingSphere = Sphere(Vector3(8.18156f, -25.3306f, -2.73827f), 3.40971f);
  data[18].mBoundingSphere = Sphere(Vector3(18.358f, 34.7559f, 1.5258f), 2.3879f);
  data[19].mBoundingSphere = Sphere(Vector3(19.8032f, -40.5286f, 18.7886f), 0.224818f);
  data[20].mBoundingSphere = Sphere(Vector3(35.8335f, 24.0187f, -19.4342f), 2.56127f);
  data[21].mBoundingSphere = Sphere(Vector3(10.082f, -43.3666f, 4.1775f), 0.752947f);
  data[22].mBoundingSphere = Sphere(Vector3(-36.7731f, 6.92711f, 12.9917f), 2.91533f);
  data[23].mBoundingSphere = Sphere(Vector3(9.75581f, -42.5174f, 12.0565f), 0.611811f);
  data[24].mBoundingSphere = Sphere(Vector3(39.5616f, -0.322415f, 5.46168f), 0.982684f);
  data[25].mBoundingSphere = Sphere(Vector3(-15.7475f, -11.1681f, -38.4105f), 1.40505f);
  data[26].mBoundingSphere = Sphere(Vector3(7.00256f, 33.6411f, -8.76295f), 2.27888f);
  data[27].mBoundingSphere = Sphere(Vector3(-12.9163f, -19.372f, -41.1175f), 3.43441f);
  data[28].mBoundingSphere = Sphere(Vector3(-10.8186f, 40.8622f, 10.7427f), 3.75113f);
  data[29].mBoundingSphere = Sphere(Vector3(-17.1716f, -22.8053f, 34.0739f), 2.68617f);
  data[30].mBoundingSphere = Sphere(Vector3(-24.6142f, 13.151f, 31.2181f), 0.502451f);
  data[31].mBoundingSphere = Sphere(Vector3(-2.51662f, -24.5028f, 5.3598f), 3.49309f);
  data[32].mBoundingSphere = Sphere(Vector3(31.6046f, -28.5633f, 19.4012f), 0.592096f);
  data[33].mBoundingSphere = Sphere(Vector3(-35.3285f, 24.8315f, -22.895f), 1.27087f);
  data[34].mBoundingSphere = Sphere(Vector3(-9.40967f, -20.0759f, 20.517f), 2.30799f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(7.72551f, -20.2318f, 10.0446f));
  ray.mDirection = Vector3(Vector3(-0.0458433f, 0.94515f, -0.323405f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(29);
  data[0].mBoundingSphere = Sphere(Vector3(11.9981f, 22.1768f, -0.890872f), 3.11747f);
  data[1].mBoundingSphere = Sphere(Vector3(35.7882f, -19.918f, 19.5841f), 3.97483f);
  data[2].mBoundingSphere = Sphere(Vector3(9.78065f, -21.8236f, -18.2948f), 1.15826f);
  data[3].mBoundingSphere = Sphere(Vector3(-25.5519f, 12.8131f, 33.1924f), 0.509177f);
  data[4].mBoundingSphere = Sphere(Vector3(-8.82467f, 16.534f, -29.2629f), 2.67608f);
  data[5].mBoundingSphere = Sphere(Vector3(-15.718f, -32.3172f, -13.0192f), 2.99303f);
  data[6].mBoundingSphere = Sphere(Vector3(-34.9788f, 12.4706f, -12.2713f), 2.49795f);
  data[7].mBoundingSphere = Sphere(Vector3(-39.5902f, -0.622552f, -11.8971f), 1.71028f);
  data[8].mBoundingSphere = Sphere(Vector3(9.03578f, 37.9738f, 11.5741f), 3.88496f);
  data[9].mBoundingSphere = Sphere(Vector3(-16.8597f, -35.5266f, -2.33593f), 3.16478f);
  data[10].mBoundingSphere = Sphere(Vector3(-9.86907f, 26.2143f, -12.7206f), 3.34628f);
  data[11].mBoundingSphere = Sphere(Vector3(21.8108f, -36.6863f, -4.80659f), 0.88121f);
  data[12].mBoundingSphere = Sphere(Vector3(-17.2552f, 0.307744f, -19.5683f), 0.629438f);
  data[13].mBoundingSphere = Sphere(Vector3(-13.3859f, 3.15193f, 36.7721f), 1.78381f);
  data[14].mBoundingSphere = Sphere(Vector3(3.46566f, 20.745f, 43.4322f), 3.48532f);
  data[15].mBoundingSphere = Sphere(Vector3(20.551f, 9.14062f, 41.2793f), 1.74728f);
  data[16].mBoundingSphere = Sphere(Vector3(-13.2175f, 34.6643f, 12.7408f), 0.607172f);
  data[17].mBoundingSphere = Sphere(Vector3(-22.4218f, 10.5735f, -6.83967f), 1.52508f);
  data[18].mBoundingSphere = Sphere(Vector3(3.48835f, -16.4111f, 39.8452f), 1.54676f);
  data[19].mBoundingSphere = Sphere(Vector3(7.44451f, 0.562794f, 10.9396f), 2.25163f);
  data[20].mBoundingSphere = Sphere(Vector3(21.3714f, -28.5937f, 15.1835f), 3.00289f);
  data[21].mBoundingSphere = Sphere(Vector3(-19.93f, 4.24331f, -43.1626f), 3.31925f);
  data[22].mBoundingSphere = Sphere(Vector3(9.97127f, -2.04815f, 9.5611f), 3.08708f);
  data[23].mBoundingSphere = Sphere(Vector3(-6.98223f, 30.1248f, 28.3642f), 2.63097f);
  data[24].mBoundingSphere = Sphere(Vector3(16.481f, 4.42354f, -23.0685f), 2.76306f);
  data[25].mBoundingSphere = Sphere(Vector3(-33.1468f, -16.0842f, -11.1547f), 3.0277f);
  data[26].mBoundingSphere = Sphere(Vector3(4.10972f, -25.1641f, -32.7969f), 2.06202f);
  data[27].mBoundingSphere = Sphere(Vector3(18.9841f, -9.25912f, 9.87093f), 2.09043f);
  data[28].mBoundingSphere = Sphere(Vector3(27.6627f, 25.5949f, -16.5381f), 2.47174f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(8.33722f, -1.76422f, 10.1208f));
  ray.mDirection = Vector3(Vector3(-0.823764f, 0.331458f, -0.459944f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(41);
  data[0].mBoundingSphere = Sphere(Vector3(20.3601f, -36.2425f, -22.6041f), 1.65195f);
  data[1].mBoundingSphere = Sphere(Vector3(14.2928f, 25.4994f, 20.3206f), 1.45399f);
  data[2].mBoundingSphere = Sphere(Vector3(18.8948f, 27.6272f, -24.4629f), 2.04115f);
  data[3].mBoundingSphere = Sphere(Vector3(25.526f, -16.8766f, -3.35298f), 1.36388f);
  data[4].mBoundingSphere = Sphere(Vector3(10.9711f, -1.49332f, 9.31393f), 0.765587f);
  data[5].mBoundingSphere = Sphere(Vector3(28.2082f, -1.14464f, -21.1615f), 3.88078f);
  data[6].mBoundingSphere = Sphere(Vector3(20.3447f, -27.2091f, 9.79705f), 1.49852f);
  data[7].mBoundingSphere = Sphere(Vector3(-23.2029f, -33.231f, 28.5613f), 1.4105f);
  data[8].mBoundingSphere = Sphere(Vector3(30.0396f, -1.20164f, 26.9304f), 0.760833f);
  data[9].mBoundingSphere = Sphere(Vector3(12.6453f, -35.4633f, -20.7932f), 1.7177f);
  data[10].mBoundingSphere = Sphere(Vector3(-5.93476f, 6.17424f, -6.08599f), 2.18588f);
  data[11].mBoundingSphere = Sphere(Vector3(-11.1553f, -39.6061f, 24.4512f), 1.57715f);
  data[12].mBoundingSphere = Sphere(Vector3(28.7663f, -17.2688f, 24.4445f), 2.75935f);
  data[13].mBoundingSphere = Sphere(Vector3(-1.93112f, -12.2142f, 20.6977f), 0.801422f);
  data[14].mBoundingSphere = Sphere(Vector3(7.14964f, -11.6916f, -26.3955f), 0.434028f);
  data[15].mBoundingSphere = Sphere(Vector3(1.76929f, 14.3389f, 40.0526f), 3.44369f);
  data[16].mBoundingSphere = Sphere(Vector3(19.5069f, 15.4388f, 15.0696f), 0.319913f);
  data[17].mBoundingSphere = Sphere(Vector3(-28.7879f, -25.3388f, -19.8653f), 2.37421f);
  data[18].mBoundingSphere = Sphere(Vector3(31.3668f, 3.0257f, -4.38196f), 0.448524f);
  data[19].mBoundingSphere = Sphere(Vector3(-36.6308f, 15.0995f, 17.8878f), 0.433564f);
  data[20].mBoundingSphere = Sphere(Vector3(37.4023f, -29.5439f, -3.455f), 2.71366f);
  data[21].mBoundingSphere = Sphere(Vector3(-14.8956f, -41.4849f, 4.50145f), 3.55931f);
  data[22].mBoundingSphere = Sphere(Vector3(30.7362f, -12.234f, 29.7071f), 3.38478f);
  data[23].mBoundingSphere = Sphere(Vector3(2.10428f, 9.23576f, -46.6981f), 1.08856f);
  data[24].mBoundingSphere = Sphere(Vector3(11.3553f, 23.1158f, -2.49295f), 1.19839f);
  data[25].mBoundingSphere = Sphere(Vector3(22.1085f, 42.2479f, -11.844f), 1.63571f);
  data[26].mBoundingSphere = Sphere(Vector3(-32.7836f, -7.82569f, -36.394f), 0.22215f);
  data[27].mBoundingSphere = Sphere(Vector3(-0.597684f, -19.6282f, 17.4293f), 2.94397f);
  data[28].mBoundingSphere = Sphere(Vector3(22.0829f, 9.5644f, -18.2753f), 3.69465f);
  data[29].mBoundingSphere = Sphere(Vector3(24.9533f, -27.264f, 31.9242f), 2.11351f);
  data[30].mBoundingSphere = Sphere(Vector3(-0.137885f, 9.49202f, 3.92025f), 2.64025f);
  data[31].mBoundingSphere = Sphere(Vector3(8.66421f, 10.3438f, -13.56f), 0.603113f);
  data[32].mBoundingSphere = Sphere(Vector3(-36.7728f, 1.33327f, -23.3065f), 1.05946f);
  data[33].mBoundingSphere = Sphere(Vector3(21.7233f, -37.0548f, 4.45847f), 0.208234f);
  data[34].mBoundingSphere = Sphere(Vector3(-22.4963f, -41.8396f, -1.08905f), 1.693f);
  data[35].mBoundingSphere = Sphere(Vector3(19.0155f, 6.65431f, -32.3526f), 1.41282f);
  data[36].mBoundingSphere = Sphere(Vector3(27.1309f, -33.9609f, -22.6029f), 1.76224f);
  data[37].mBoundingSphere = Sphere(Vector3(14.814f, -1.03425f, 24.0583f), 0.316782f);
  data[38].mBoundingSphere = Sphere(Vector3(17.8273f, 24.3252f, -17.2362f), 2.48392f);
  data[39].mBoundingSphere = Sphere(Vector3(-2.4091f, 5.10165f, -18.4658f), 3.13846f);
  data[40].mBoundingSphere = Sphere(Vector3(-15.4959f, -15.8574f, -8.13514f), 1.95973f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-13.154f, 18.482f, -3.77084f));
  ray.mDirection = Vector3(Vector3(0.483216f, -0.831913f, -0.272805f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest6(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mBoundingSphere = Sphere(Vector3(-4.04294f, 4.31074f, -5.04536f), 2.61114f);
  data[1].mBoundingSphere = Sphere(Vector3(26.0208f, -18.6986f, 35.3284f), 3.08233f);
  data[2].mBoundingSphere = Sphere(Vector3(27.7437f, 8.79238f, -32.141f), 1.18726f);
  data[3].mBoundingSphere = Sphere(Vector3(6.82081f, 15.6433f, -20.3578f), 3.75403f);
  data[4].mBoundingSphere = Sphere(Vector3(11.4893f, 29.2439f, 32.6694f), 3.01785f);
  data[5].mBoundingSphere = Sphere(Vector3(-11.051f, 27.9943f, -9.96895f), 3.51617f);
  data[6].mBoundingSphere = Sphere(Vector3(-42.9188f, 18.2428f, -4.92167f), 2.17126f);
  data[7].mBoundingSphere = Sphere(Vector3(17.738f, -0.420143f, -42.3802f), 3.38362f);
  data[8].mBoundingSphere = Sphere(Vector3(15.9274f, 9.87154f, 42.7535f), 0.852565f);
  data[9].mBoundingSphere = Sphere(Vector3(32.4431f, 5.14055f, -22.5964f), 0.343107f);
  data[10].mBoundingSphere = Sphere(Vector3(26.6715f, -9.94645f, -25.1162f), 3.71854f);
  data[11].mBoundingSphere = Sphere(Vector3(-14.9828f, -16.6791f, 43.394f), 1.85617f);
  data[12].mBoundingSphere = Sphere(Vector3(0.472642f, 25.3425f, 38.3922f), 3.1671f);
  data[13].mBoundingSphere = Sphere(Vector3(46.0045f, 10.28f, 0.565416f), 0.935948f);
  data[14].mBoundingSphere = Sphere(Vector3(4.40658f, -24.4947f, -42.403f), 1.20245f);
  data[15].mBoundingSphere = Sphere(Vector3(13.5241f, 5.62181f, -11.6958f), 3.00034f);
  data[16].mBoundingSphere = Sphere(Vector3(29.4147f, 10.6238f, -36.7531f), 3.27519f);
  data[17].mBoundingSphere = Sphere(Vector3(29.0774f, -11.5608f, 12.698f), 1.89839f);
  data[18].mBoundingSphere = Sphere(Vector3(-16.9298f, -29.4252f, -5.85705f), 3.09636f);
  data[19].mBoundingSphere = Sphere(Vector3(10.0955f, 19.4276f, -21.3838f), 3.91337f);
  data[20].mBoundingSphere = Sphere(Vector3(-0.395677f, -3.37427f, -45.2419f), 0.227833f);
  data[21].mBoundingSphere = Sphere(Vector3(-25.6738f, -13.2336f, 25.0589f), 0.939775f);
  data[22].mBoundingSphere = Sphere(Vector3(-25.2577f, 3.67253f, -35.1527f), 1.04763f);
  data[23].mBoundingSphere = Sphere(Vector3(-37.5702f, 25.345f, -12.9193f), 3.03594f);
  data[24].mBoundingSphere = Sphere(Vector3(34.5957f, -11.3668f, -29.856f), 3.08871f);
  data[25].mBoundingSphere = Sphere(Vector3(-27.8226f, -33.864f, 19.4458f), 1.15072f);
  data[26].mBoundingSphere = Sphere(Vector3(22.4677f, -33.3982f, 22.263f), 0.75399f);
  data[27].mBoundingSphere = Sphere(Vector3(-18.0211f, 18.9946f, 7.10832f), 0.626887f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-17.7085f, 13.3992f, 7.09386f));
  ray.mDirection = Vector3(Vector3(0.72858f, -0.418212f, -0.542467f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest7(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(25);
  data[0].mBoundingSphere = Sphere(Vector3(-30.4733f, 14.5422f, 5.01615f), 1.57773f);
  data[1].mBoundingSphere = Sphere(Vector3(28.1814f, -20.2923f, 17.2794f), 0.484011f);
  data[2].mBoundingSphere = Sphere(Vector3(28.4303f, 11.4934f, -12.9735f), 2.23656f);
  data[3].mBoundingSphere = Sphere(Vector3(-15.28f, 15.3748f, -4.30079f), 2.95673f);
  data[4].mBoundingSphere = Sphere(Vector3(-2.69278f, 8.35616f, -31.7945f), 1.58724f);
  data[5].mBoundingSphere = Sphere(Vector3(-22.1941f, 16.2312f, 40.4877f), 2.91858f);
  data[6].mBoundingSphere = Sphere(Vector3(-4.03824f, -15.9812f, -45.5171f), 2.45435f);
  data[7].mBoundingSphere = Sphere(Vector3(13.8423f, 19.9102f, 30.2881f), 1.20906f);
  data[8].mBoundingSphere = Sphere(Vector3(-1.64259f, 18.4628f, 24.5256f), 1.63247f);
  data[9].mBoundingSphere = Sphere(Vector3(4.3396f, 0.885307f, 7.92236f), 2.35299f);
  data[10].mBoundingSphere = Sphere(Vector3(22.1418f, 20.5815f, -27.7513f), 3.73582f);
  data[11].mBoundingSphere = Sphere(Vector3(0.64549f, 46.589f, -7.04833f), 3.94723f);
  data[12].mBoundingSphere = Sphere(Vector3(35.4128f, 7.71385f, -27.5278f), 1.32167f);
  data[13].mBoundingSphere = Sphere(Vector3(45.0568f, 15.0531f, -7.1592f), 1.72246f);
  data[14].mBoundingSphere = Sphere(Vector3(-22.9066f, 16.2849f, -19.5003f), 1.091f);
  data[15].mBoundingSphere = Sphere(Vector3(-13.1048f, -7.18364f, 8.72948f), 2.68003f);
  data[16].mBoundingSphere = Sphere(Vector3(39.9909f, -25.7513f, -13.1818f), 1.16105f);
  data[17].mBoundingSphere = Sphere(Vector3(-7.42298f, 13.611f, -15.8786f), 0.703543f);
  data[18].mBoundingSphere = Sphere(Vector3(4.93122f, -9.97545f, 46.4401f), 3.01599f);
  data[19].mBoundingSphere = Sphere(Vector3(-0.614986f, 32.4737f, 3.62548f), 2.04578f);
  data[20].mBoundingSphere = Sphere(Vector3(14.4221f, -10.3596f, 38.2538f), 1.12985f);
  data[21].mBoundingSphere = Sphere(Vector3(-39.4083f, 4.31689f, 8.09951f), 1.89004f);
  data[22].mBoundingSphere = Sphere(Vector3(28.2613f, -14.5982f, -26.3753f), 3.467f);
  data[23].mBoundingSphere = Sphere(Vector3(-7.44694f, -15.1927f, -25.4316f), 3.18728f);
  data[24].mBoundingSphere = Sphere(Vector3(14.8773f, -17.9985f, -15.1848f), 3.05542f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(5.34996f, 3.67138f, 8.00019f));
  ray.mDirection = Vector3(Vector3(-0.628002f, -0.767062f, 0.13126f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest8(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(33);
  data[0].mBoundingSphere = Sphere(Vector3(47.9253f, 2.80149f, 10.8588f), 3.93471f);
  data[1].mBoundingSphere = Sphere(Vector3(17.8331f, -24.6588f, -1.27812f), 2.54225f);
  data[2].mBoundingSphere = Sphere(Vector3(16.8543f, 28.8001f, -13.9899f), 1.32596f);
  data[3].mBoundingSphere = Sphere(Vector3(13.2348f, -33.1441f, -5.84849f), 1.99406f);
  data[4].mBoundingSphere = Sphere(Vector3(34.8327f, -5.46442f, 0.797553f), 1.11999f);
  data[5].mBoundingSphere = Sphere(Vector3(-19.3152f, -5.52929f, -33.7463f), 1.77511f);
  data[6].mBoundingSphere = Sphere(Vector3(-12.4757f, 26.8987f, -25.1574f), 3.85318f);
  data[7].mBoundingSphere = Sphere(Vector3(-21.3334f, -26.2828f, 30.7674f), 1.22912f);
  data[8].mBoundingSphere = Sphere(Vector3(-36.8011f, 11.8533f, 0.447226f), 0.599402f);
  data[9].mBoundingSphere = Sphere(Vector3(-2.05118f, 6.31537f, 15.4519f), 2.74311f);
  data[10].mBoundingSphere = Sphere(Vector3(-23.4946f, 24.1814f, -31.1734f), 2.85108f);
  data[11].mBoundingSphere = Sphere(Vector3(22.4659f, 2.46752f, -10.4162f), 3.86571f);
  data[12].mBoundingSphere = Sphere(Vector3(25.4364f, -37.8425f, 8.59399f), 0.673855f);
  data[13].mBoundingSphere = Sphere(Vector3(31.0716f, -20.4918f, -30.2862f), 1.29963f);
  data[14].mBoundingSphere = Sphere(Vector3(44.8019f, 1.82658f, 0.0752634f), 1.13727f);
  data[15].mBoundingSphere = Sphere(Vector3(-30.5346f, -36.9622f, 1.64996f), 2.97042f);
  data[16].mBoundingSphere = Sphere(Vector3(-31.6731f, -37.5126f, -8.63974f), 2.62053f);
  data[17].mBoundingSphere = Sphere(Vector3(32.5815f, 2.14289f, 29.1287f), 2.56835f);
  data[18].mBoundingSphere = Sphere(Vector3(35.7596f, 8.03395f, -7.91048f), 3.79253f);
  data[19].mBoundingSphere = Sphere(Vector3(29.952f, 30.9521f, 9.88423f), 3.96753f);
  data[20].mBoundingSphere = Sphere(Vector3(-31.7565f, -2.39768f, 36.565f), 1.6676f);
  data[21].mBoundingSphere = Sphere(Vector3(4.84412f, 43.8909f, 15.5199f), 0.517643f);
  data[22].mBoundingSphere = Sphere(Vector3(-43.9959f, -9.32312f, 11.0089f), 1.53621f);
  data[23].mBoundingSphere = Sphere(Vector3(24.669f, 29.3826f, 12.6941f), 0.413385f);
  data[24].mBoundingSphere = Sphere(Vector3(-37.3423f, 8.04792f, 26.5546f), 0.769646f);
  data[25].mBoundingSphere = Sphere(Vector3(-11.6747f, 36.1574f, 21.1536f), 3.13602f);
  data[26].mBoundingSphere = Sphere(Vector3(31.0433f, -7.96942f, -30.3469f), 3.50168f);
  data[27].mBoundingSphere = Sphere(Vector3(-44.93f, 0.344623f, -14.4804f), 2.97227f);
  data[28].mBoundingSphere = Sphere(Vector3(35.1313f, -11.5203f, -3.14696f), 1.58248f);
  data[29].mBoundingSphere = Sphere(Vector3(8.716f, 15.1524f, -36.5551f), 0.606592f);
  data[30].mBoundingSphere = Sphere(Vector3(-1.74832f, 7.94377f, 6.74009f), 1.61066f);
  data[31].mBoundingSphere = Sphere(Vector3(-18.9534f, 38.1109f, 9.65558f), 3.79021f);
  data[32].mBoundingSphere = Sphere(Vector3(20.3391f, -2.20235f, -6.17401f), 3.03779f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(8.82473f, 0.87175f, -18.8326f));
  ray.mDirection = Vector3(Vector3(0.816267f, 0.0798446f, 0.572131f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest9(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(31);
  data[0].mBoundingSphere = Sphere(Vector3(2.84311f, -30.786f, 20.7743f), 1.06015f);
  data[1].mBoundingSphere = Sphere(Vector3(-18.7902f, -3.24567f, 11.3477f), 3.20688f);
  data[2].mBoundingSphere = Sphere(Vector3(-3.89365f, 15.726f, -5.43459f), 1.78926f);
  data[3].mBoundingSphere = Sphere(Vector3(-9.63183f, -4.88088f, 12.7162f), 1.47243f);
  data[4].mBoundingSphere = Sphere(Vector3(38.3662f, 4.57914f, -6.39571f), 3.46723f);
  data[5].mBoundingSphere = Sphere(Vector3(-1.79677f, 28.0372f, -14.8336f), 3.37248f);
  data[6].mBoundingSphere = Sphere(Vector3(8.69318f, 11.4787f, -13.9894f), 0.722098f);
  data[7].mBoundingSphere = Sphere(Vector3(3.71092f, -20.2927f, -34.0867f), 2.78011f);
  data[8].mBoundingSphere = Sphere(Vector3(-38.8566f, 21.6989f, 3.39315f), 3.22694f);
  data[9].mBoundingSphere = Sphere(Vector3(14.7575f, -41.3119f, -14.7755f), 1.8818f);
  data[10].mBoundingSphere = Sphere(Vector3(37.3901f, -30.5488f, 1.29865f), 0.504422f);
  data[11].mBoundingSphere = Sphere(Vector3(-24.3969f, -9.17018f, 7.59125f), 2.81977f);
  data[12].mBoundingSphere = Sphere(Vector3(-8.3286f, 22.3169f, -22.1757f), 3.2085f);
  data[13].mBoundingSphere = Sphere(Vector3(-16.5798f, 0.699844f, 14.9883f), 3.60999f);
  data[14].mBoundingSphere = Sphere(Vector3(13.9254f, 10.4383f, -44.2027f), 1.27806f);
  data[15].mBoundingSphere = Sphere(Vector3(-7.85283f, -7.62173f, 39.3164f), 2.13554f);
  data[16].mBoundingSphere = Sphere(Vector3(45.4399f, 9.98932f, 12.9063f), 2.36957f);
  data[17].mBoundingSphere = Sphere(Vector3(-38.6143f, 12.5519f, -13.2583f), 0.61413f);
  data[18].mBoundingSphere = Sphere(Vector3(-11.7338f, 5.11015f, 33.1919f), 2.36064f);
  data[19].mBoundingSphere = Sphere(Vector3(-45.6435f, -12.0774f, 4.21989f), 2.94165f);
  data[20].mBoundingSphere = Sphere(Vector3(37.5451f, 23.2797f, -23.1846f), 1.93178f);
  data[21].mBoundingSphere = Sphere(Vector3(-3.72062f, -16.4391f, 14.4124f), 1.10921f);
  data[22].mBoundingSphere = Sphere(Vector3(-1.16929f, -16.2439f, 14.0901f), 0.821021f);
  data[23].mBoundingSphere = Sphere(Vector3(11.8471f, -14.7714f, -1.94668f), 3.89725f);
  data[24].mBoundingSphere = Sphere(Vector3(4.45317f, 19.8793f, 41.0476f), 3.95524f);
  data[25].mBoundingSphere = Sphere(Vector3(-22.2532f, 24.3279f, -22.5982f), 1.44227f);
  data[26].mBoundingSphere = Sphere(Vector3(2.41719f, 5.82199f, -18.1708f), 1.45457f);
  data[27].mBoundingSphere = Sphere(Vector3(1.70573f, 8.96752f, -11.0835f), 2.48114f);
  data[28].mBoundingSphere = Sphere(Vector3(-29.3258f, -8.57781f, 19.2047f), 2.31379f);
  data[29].mBoundingSphere = Sphere(Vector3(-10.6131f, -16.004f, -30.9659f), 3.66786f);
  data[30].mBoundingSphere = Sphere(Vector3(-38.1857f, 27.2355f, -0.310625f), 3.95732f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-13.9257f, -0.472823f, 16.6313f));
  ray.mDirection = Vector3(Vector3(-0.867252f, -0.0830694f, -0.49089f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest10(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(34);
  data[0].mBoundingSphere = Sphere(Vector3(-18.2116f, 3.31502f, -32.605f), 1.77279f);
  data[1].mBoundingSphere = Sphere(Vector3(7.51186f, -10.8624f, -18.0162f), 0.820789f);
  data[2].mBoundingSphere = Sphere(Vector3(24.9753f, -16.6921f, -19.528f), 2.35264f);
  data[3].mBoundingSphere = Sphere(Vector3(-28.4768f, -25.1134f, 17.8909f), 0.346702f);
  data[4].mBoundingSphere = Sphere(Vector3(15.3715f, -14.4429f, -8.1174f), 2.995f);
  data[5].mBoundingSphere = Sphere(Vector3(-24.8898f, 13.2308f, 15.8695f), 2.3516f);
  data[6].mBoundingSphere = Sphere(Vector3(4.4304f, -12.051f, 42.0872f), 2.97819f);
  data[7].mBoundingSphere = Sphere(Vector3(-7.99846f, 39.1589f, -8.31879f), 3.30395f);
  data[8].mBoundingSphere = Sphere(Vector3(-22.1707f, -16.3647f, 31.4144f), 3.92068f);
  data[9].mBoundingSphere = Sphere(Vector3(-38.3242f, 10.8756f, 14.3184f), 1.12927f);
  data[10].mBoundingSphere = Sphere(Vector3(-12.3246f, -41.9637f, -9.95031f), 1.95869f);
  data[11].mBoundingSphere = Sphere(Vector3(31.6856f, 6.99112f, 27.1802f), 3.7749f);
  data[12].mBoundingSphere = Sphere(Vector3(5.05471f, 28.8916f, 34.2073f), 1.29824f);
  data[13].mBoundingSphere = Sphere(Vector3(-30.1318f, -38.689f, -2.00259f), 2.14981f);
  data[14].mBoundingSphere = Sphere(Vector3(10.8489f, 31.8466f, 7.23505f), 3.54261f);
  data[15].mBoundingSphere = Sphere(Vector3(-8.4126f, 41.7993f, -12.823f), 2.43962f);
  data[16].mBoundingSphere = Sphere(Vector3(40.1142f, 1.18107f, -22.5789f), 3.19459f);
  data[17].mBoundingSphere = Sphere(Vector3(-2.82459f, 28.5794f, 5.54228f), 3.79624f);
  data[18].mBoundingSphere = Sphere(Vector3(17.2891f, -18.861f, -32.0477f), 0.733811f);
  data[19].mBoundingSphere = Sphere(Vector3(-17.0513f, 33.5569f, 21.2886f), 1.2028f);
  data[20].mBoundingSphere = Sphere(Vector3(-7.8137f, -0.394389f, 6.70954f), 2.86964f);
  data[21].mBoundingSphere = Sphere(Vector3(15.0777f, -45.2241f, -13.4589f), 2.11374f);
  data[22].mBoundingSphere = Sphere(Vector3(20.3289f, -13.0188f, 23.3182f), 2.36749f);
  data[23].mBoundingSphere = Sphere(Vector3(37.7145f, -3.92289f, -24.4771f), 3.66914f);
  data[24].mBoundingSphere = Sphere(Vector3(7.37785f, 34.2252f, -4.18496f), 2.05193f);
  data[25].mBoundingSphere = Sphere(Vector3(-20.5254f, -8.68722f, -17.2332f), 2.68478f);
  data[26].mBoundingSphere = Sphere(Vector3(0.462126f, -47.0231f, -14.4475f), 3.18415f);
  data[27].mBoundingSphere = Sphere(Vector3(6.68453f, 34.3876f, 11.8794f), 0.417212f);
  data[28].mBoundingSphere = Sphere(Vector3(4.65828f, 7.52968f, -11.8173f), 3.81352f);
  data[29].mBoundingSphere = Sphere(Vector3(-17.6992f, 37.1849f, 15.1531f), 2.10354f);
  data[30].mBoundingSphere = Sphere(Vector3(-12.86f, -30.3398f, 36.9646f), 3.30557f);
  data[31].mBoundingSphere = Sphere(Vector3(3.42609f, -45.1182f, 13.3916f), 3.67586f);
  data[32].mBoundingSphere = Sphere(Vector3(-13.8433f, -4.62937f, -22.9573f), 1.64418f);
  data[33].mBoundingSphere = Sphere(Vector3(38.7098f, -21.379f, 18.6393f), 3.65163f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(4.66264f, -20.0209f, -0.0194482f));
  ray.mDirection = Vector3(Vector3(0.781112f, 0.29437f, -0.550645f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest11(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(41);
  data[0].mBoundingSphere = Sphere(Vector3(-5.12207f, 14.7342f, 5.2238f), 3.32331f);
  data[1].mBoundingSphere = Sphere(Vector3(-17.9455f, 3.67356f, -32.9498f), 3.29838f);
  data[2].mBoundingSphere = Sphere(Vector3(17.785f, -17.9469f, -0.415678f), 2.7394f);
  data[3].mBoundingSphere = Sphere(Vector3(-31.3257f, -36.6996f, 2.64424f), 3.81016f);
  data[4].mBoundingSphere = Sphere(Vector3(-13.7984f, 38.0614f, -22.6103f), 0.565539f);
  data[5].mBoundingSphere = Sphere(Vector3(0.503287f, -45.8439f, 1.17709f), 3.43882f);
  data[6].mBoundingSphere = Sphere(Vector3(30.244f, 13.0784f, -37.2715f), 2.995f);
  data[7].mBoundingSphere = Sphere(Vector3(15.5669f, -3.94864f, -6.20726f), 3.69604f);
  data[8].mBoundingSphere = Sphere(Vector3(0.156203f, -23.7837f, 43.102f), 1.91903f);
  data[9].mBoundingSphere = Sphere(Vector3(-20.2832f, 13.8935f, 6.4234f), 0.973058f);
  data[10].mBoundingSphere = Sphere(Vector3(-4.58642f, -24.0996f, 7.93395f), 1.95799f);
  data[11].mBoundingSphere = Sphere(Vector3(22.5255f, 33.9037f, 0.709428f), 2.40842f);
  data[12].mBoundingSphere = Sphere(Vector3(-10.9581f, 17.0804f, 37.0865f), 2.36702f);
  data[13].mBoundingSphere = Sphere(Vector3(5.94642f, -23.8502f, 4.22675f), 0.430897f);
  data[14].mBoundingSphere = Sphere(Vector3(12.9881f, -13.2937f, 20.2174f), 2.21556f);
  data[15].mBoundingSphere = Sphere(Vector3(-9.85698f, -4.10741f, -5.11222f), 0.977697f);
  data[16].mBoundingSphere = Sphere(Vector3(18.8481f, -3.31339f, 11.752f), 2.24409f);
  data[17].mBoundingSphere = Sphere(Vector3(0.456108f, 22.3839f, -13.438f), 2.78718f);
  data[18].mBoundingSphere = Sphere(Vector3(10.9526f, -24.3011f, -27.8133f), 3.39348f);
  data[19].mBoundingSphere = Sphere(Vector3(-26.6952f, -9.93488f, 23.9877f), 3.76678f);
  data[20].mBoundingSphere = Sphere(Vector3(13.2199f, -14.8851f, 15.1088f), 2.01099f);
  data[21].mBoundingSphere = Sphere(Vector3(5.6591f, 33.2083f, 19.8729f), 0.236183f);
  data[22].mBoundingSphere = Sphere(Vector3(1.67906f, 13.8925f, -31.6147f), 0.730912f);
  data[23].mBoundingSphere = Sphere(Vector3(-6.34461f, -13.9448f, 21.9789f), 1.8455f);
  data[24].mBoundingSphere = Sphere(Vector3(-5.92323f, -14.4107f, 45.9409f), 0.829603f);
  data[25].mBoundingSphere = Sphere(Vector3(-23.6614f, 19.17f, -23.2847f), 1.36771f);
  data[26].mBoundingSphere = Sphere(Vector3(-2.04953f, 6.14149f, 26.3861f), 2.65625f);
  data[27].mBoundingSphere = Sphere(Vector3(4.51746f, -30.3231f, 4.47333f), 1.96692f);
  data[28].mBoundingSphere = Sphere(Vector3(-13.3263f, -27.7915f, -11.0801f), 2.73824f);
  data[29].mBoundingSphere = Sphere(Vector3(5.87463f, -31.5097f, -24.563f), 3.14124f);
  data[30].mBoundingSphere = Sphere(Vector3(17.802f, -24.1253f, 26.1398f), 2.76132f);
  data[31].mBoundingSphere = Sphere(Vector3(29.0863f, 16.4593f, 14.0113f), 2.34081f);
  data[32].mBoundingSphere = Sphere(Vector3(6.69676f, -42.0689f, 18.3193f), 3.82581f);
  data[33].mBoundingSphere = Sphere(Vector3(29.6727f, -23.932f, 4.05626f), 0.860915f);
  data[34].mBoundingSphere = Sphere(Vector3(-29.4939f, 6.9986f, 0.794939f), 1.17635f);
  data[35].mBoundingSphere = Sphere(Vector3(-19.8051f, 14.5541f, 7.44805f), 2.60975f);
  data[36].mBoundingSphere = Sphere(Vector3(-3.88986f, -43.6274f, -20.3582f), 2.20791f);
  data[37].mBoundingSphere = Sphere(Vector3(12.8664f, -20.6643f, 26.2281f), 1.95127f);
  data[38].mBoundingSphere = Sphere(Vector3(-31.4125f, -23.8916f, 15.7738f), 3.14576f);
  data[39].mBoundingSphere = Sphere(Vector3(3.09256f, 6.88275f, 10.8226f), 2.42362f);
  data[40].mBoundingSphere = Sphere(Vector3(-1.50983f, 13.7892f, -4.70796f), 0.401093f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-19.1786f, 14.8321f, 3.92847f));
  ray.mDirection = Vector3(Vector3(-0.177408f, -0.201655f, 0.963256f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest12(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mBoundingSphere = Sphere(Vector3(-11.8452f, 29.0876f, -38.3061f), 2.78869f);
  data[1].mBoundingSphere = Sphere(Vector3(-36.1471f, -16.0483f, 20.0103f), 1.33384f);
  data[2].mBoundingSphere = Sphere(Vector3(-10.6562f, 20.4635f, 38.5231f), 1.05308f);
  data[3].mBoundingSphere = Sphere(Vector3(-9.62846f, -34.9546f, -2.96531f), 2.62262f);
  data[4].mBoundingSphere = Sphere(Vector3(-4.71314f, 12.171f, 15.6328f), 1.46976f);
  data[5].mBoundingSphere = Sphere(Vector3(-10.3813f, 19.5587f, 4.74158f), 0.261464f);
  data[6].mBoundingSphere = Sphere(Vector3(13.3568f, 44.1748f, 18.4066f), 3.91337f);
  data[7].mBoundingSphere = Sphere(Vector3(-34.4858f, 10.3821f, -17.67f), 1.03847f);
  data[8].mBoundingSphere = Sphere(Vector3(10.9582f, -13.9732f, 35.9786f), 2.25697f);
  data[9].mBoundingSphere = Sphere(Vector3(-29.2587f, -31.5223f, 12.2604f), 2.48102f);
  data[10].mBoundingSphere = Sphere(Vector3(8.92966f, -41.6175f, 9.25643f), 2.19875f);
  data[11].mBoundingSphere = Sphere(Vector3(-0.547145f, 9.54059f, -14.0551f), 0.471139f);
  data[12].mBoundingSphere = Sphere(Vector3(14.1973f, 6.6038f, 30.6359f), 3.4648f);
  data[13].mBoundingSphere = Sphere(Vector3(18.8156f, 5.67044f, -20.0148f), 3.03571f);
  data[14].mBoundingSphere = Sphere(Vector3(-24.8784f, 23.2188f, -18.1422f), 3.38617f);
  data[15].mBoundingSphere = Sphere(Vector3(-17.2681f, -11.5434f, 27.7047f), 0.910434f);
  data[16].mBoundingSphere = Sphere(Vector3(18.2585f, 16.0057f, -22.1532f), 2.85108f);
  data[17].mBoundingSphere = Sphere(Vector3(21.6399f, 15.6957f, -30.2832f), 1.28073f);
  data[18].mBoundingSphere = Sphere(Vector3(-21.3785f, -37.7412f, -4.66654f), 3.23297f);
  data[19].mBoundingSphere = Sphere(Vector3(1.21769f, 3.36593f, 14.2898f), 3.0959f);
  data[20].mBoundingSphere = Sphere(Vector3(19.2406f, -34.5439f, 13.8945f), 1.89189f);
  data[21].mBoundingSphere = Sphere(Vector3(37.2174f, -28.4365f, -10.4127f), 1.35878f);
  data[22].mBoundingSphere = Sphere(Vector3(-14.3855f, 38.6599f, -20.782f), 1.45271f);
  data[23].mBoundingSphere = Sphere(Vector3(-4.76497f, -12.4321f, 40.6727f), 1.39148f);
  data[24].mBoundingSphere = Sphere(Vector3(-23.7931f, 30.107f, -6.39579f), 2.45678f);
  data[25].mBoundingSphere = Sphere(Vector3(-0.439291f, -17.2537f, 6.76584f), 1.27423f);
  data[26].mBoundingSphere = Sphere(Vector3(-24.5919f, -11.2871f, -9.34737f), 2.1897f);
  data[27].mBoundingSphere = Sphere(Vector3(0.220053f, 1.95936f, 26.2561f), 3.26104f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(1.08862f, 3.95058f, -6.23842f));
  ray.mDirection = Vector3(Vector3(0.0348849f, -0.00183791f, 0.99939f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest13(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(34);
  data[0].mBoundingSphere = Sphere(Vector3(26.1901f, -18.2923f, -37.7076f), 1.72629f);
  data[1].mBoundingSphere = Sphere(Vector3(21.1661f, -8.31683f, 6.20795f), 1.91474f);
  data[2].mBoundingSphere = Sphere(Vector3(20.5359f, -17.1161f, -37.7682f), 3.67296f);
  data[3].mBoundingSphere = Sphere(Vector3(20.9547f, -14.0573f, 33.1707f), 3.109f);
  data[4].mBoundingSphere = Sphere(Vector3(-15.1033f, -38.737f, -15.8889f), 3.45007f);
  data[5].mBoundingSphere = Sphere(Vector3(3.77993f, 30.8284f, 8.74762f), 1.3713f);
  data[6].mBoundingSphere = Sphere(Vector3(-2.07442f, 5.68461f, 25.2835f), 2.57554f);
  data[7].mBoundingSphere = Sphere(Vector3(21.4396f, 40.8171f, 3.77081f), 1.18946f);
  data[8].mBoundingSphere = Sphere(Vector3(-9.75218f, 18.2465f, 38.895f), 3.84959f);
  data[9].mBoundingSphere = Sphere(Vector3(0.845472f, -35.4795f, 7.07134f), 2.64118f);
  data[10].mBoundingSphere = Sphere(Vector3(-10.1478f, -4.12394f, 10.597f), 0.563799f);
  data[11].mBoundingSphere = Sphere(Vector3(-33.2134f, 15.36f, 1.42496f), 1.29001f);
  data[12].mBoundingSphere = Sphere(Vector3(0.399538f, -10, 16.1174f), 2.2848f);
  data[13].mBoundingSphere = Sphere(Vector3(31.3201f, -22.3614f, 31.1885f), 1.85733f);
  data[14].mBoundingSphere = Sphere(Vector3(-15.8478f, 2.59056f, -5.7787f), 2.21197f);
  data[15].mBoundingSphere = Sphere(Vector3(45.8341f, 7.37049f, -1.92135f), 3.86733f);
  data[16].mBoundingSphere = Sphere(Vector3(32.9417f, 16.8641f, -33.326f), 3.91221f);
  data[17].mBoundingSphere = Sphere(Vector3(6.9149f, -6.58764f, -3.87487f), 1.0685f);
  data[18].mBoundingSphere = Sphere(Vector3(6.60302f, -11.6282f, -17.8587f), 1.02756f);
  data[19].mBoundingSphere = Sphere(Vector3(17.7153f, -8.56893f, 20.0287f), 2.23041f);
  data[20].mBoundingSphere = Sphere(Vector3(15.9038f, 28.0574f, 8.64419f), 1.15965f);
  data[21].mBoundingSphere = Sphere(Vector3(-6.83593f, 12.1385f, 37.0934f), 1.1135f);
  data[22].mBoundingSphere = Sphere(Vector3(7.37909f, 0.902253f, 16.1006f), 2.72757f);
  data[23].mBoundingSphere = Sphere(Vector3(-1.31385f, 1.50618f, -16.2191f), 2.01644f);
  data[24].mBoundingSphere = Sphere(Vector3(-9.15291f, 17.8431f, -0.793173f), 0.801654f);
  data[25].mBoundingSphere = Sphere(Vector3(23.3585f, -4.57895f, 6.95096f), 2.09623f);
  data[26].mBoundingSphere = Sphere(Vector3(-9.62779f, -11.6909f, 32.0451f), 2.91266f);
  data[27].mBoundingSphere = Sphere(Vector3(-40.7228f, 17.8932f, -17.8221f), 2.66518f);
  data[28].mBoundingSphere = Sphere(Vector3(17.8896f, -18.5437f, -18.9852f), 1.63421f);
  data[29].mBoundingSphere = Sphere(Vector3(15.7155f, 40.2048f, -20.0957f), 3.86118f);
  data[30].mBoundingSphere = Sphere(Vector3(26.7216f, 34.6998f, 3.31756f), 2.74265f);
  data[31].mBoundingSphere = Sphere(Vector3(-2.43109f, -44.6367f, -14.3909f), 1.69416f);
  data[32].mBoundingSphere = Sphere(Vector3(8.12057f, -31.0931f, 16.8175f), 2.54967f);
  data[33].mBoundingSphere = Sphere(Vector3(-6.55948f, -25.2842f, -33.9333f), 2.6675f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-5.29611f, -7.9267f, 15.9779f));
  ray.mDirection = Vector3(Vector3(0.88704f, -0.309458f, 0.342631f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest14(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(33);
  data[0].mBoundingSphere = Sphere(Vector3(-12.8376f, -17.8773f, 2.33504f), 2.76886f);
  data[1].mBoundingSphere = Sphere(Vector3(43.3232f, 11.2016f, 1.2856f), 0.851405f);
  data[2].mBoundingSphere = Sphere(Vector3(13.7126f, 14.2906f, -41.5836f), 1.06653f);
  data[3].mBoundingSphere = Sphere(Vector3(19.6266f, 4.27519f, 33.3593f), 2.76155f);
  data[4].mBoundingSphere = Sphere(Vector3(-14.2988f, 27.7829f, -2.71748f), 3.52568f);
  data[5].mBoundingSphere = Sphere(Vector3(-29.8406f, -10.6839f, 10.9539f), 3.05739f);
  data[6].mBoundingSphere = Sphere(Vector3(21.9822f, 32.2741f, 18.4839f), 2.91243f);
  data[7].mBoundingSphere = Sphere(Vector3(-29.3177f, -22.8265f, 4.74525f), 3.20131f);
  data[8].mBoundingSphere = Sphere(Vector3(-5.27047f, 41.5656f, -9.92234f), 3.00579f);
  data[9].mBoundingSphere = Sphere(Vector3(15.8641f, -35.9317f, 30.2345f), 1.7816f);
  data[10].mBoundingSphere = Sphere(Vector3(-33.8339f, -31.2267f, -2.05211f), 0.918204f);
  data[11].mBoundingSphere = Sphere(Vector3(14.9596f, 5.70988f, -47.3027f), 2.72177f);
  data[12].mBoundingSphere = Sphere(Vector3(8.53503f, 7.68997f, 14.0148f), 2.19249f);
  data[13].mBoundingSphere = Sphere(Vector3(9.14175f, 19.4994f, -33.0178f), 3.06377f);
  data[14].mBoundingSphere = Sphere(Vector3(-36.5469f, 11.8566f, -3.30596f), 0.272018f);
  data[15].mBoundingSphere = Sphere(Vector3(29.7792f, -30.1773f, -7.10134f), 2.12662f);
  data[16].mBoundingSphere = Sphere(Vector3(44.62f, -0.0128341f, 16.9916f), 3.94735f);
  data[17].mBoundingSphere = Sphere(Vector3(-7.20088f, -11.4547f, -20.7486f), 1.64f);
  data[18].mBoundingSphere = Sphere(Vector3(3.70897f, -2.92047f, 47.2979f), 2.57704f);
  data[19].mBoundingSphere = Sphere(Vector3(40.1728f, 1.35244f, -13.0168f), 0.653096f);
  data[20].mBoundingSphere = Sphere(Vector3(16.0688f, 34.8293f, 24.0051f), 2.08417f);
  data[21].mBoundingSphere = Sphere(Vector3(-11.171f, -3.98994f, 30.6404f), 0.417908f);
  data[22].mBoundingSphere = Sphere(Vector3(23.9239f, 26.8854f, 26.6988f), 2.52683f);
  data[23].mBoundingSphere = Sphere(Vector3(-19.6981f, -0.026439f, -37.8295f), 0.248012f);
  data[24].mBoundingSphere = Sphere(Vector3(-12.2077f, -23.5199f, 3.8115f), 0.844563f);
  data[25].mBoundingSphere = Sphere(Vector3(24.2599f, 10.9075f, 5.15728f), 3.35184f);
  data[26].mBoundingSphere = Sphere(Vector3(16.0121f, -8.80727f, -45.6382f), 3.57996f);
  data[27].mBoundingSphere = Sphere(Vector3(27.2739f, 28.0766f, 4.19659f), 2.24166f);
  data[28].mBoundingSphere = Sphere(Vector3(7.11509f, -7.76798f, -19.6378f), 3.97333f);
  data[29].mBoundingSphere = Sphere(Vector3(30.208f, -12.6319f, 10.2062f), 0.717112f);
  data[30].mBoundingSphere = Sphere(Vector3(11.9044f, 29.5816f, -0.487602f), 3.23541f);
  data[31].mBoundingSphere = Sphere(Vector3(39.8499f, 0.248348f, 20.1011f), 0.223542f);
  data[32].mBoundingSphere = Sphere(Vector3(16.6383f, 24.8561f, 30.9692f), 3.79241f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-2.10337f, 5.95835f, -4.86698f));
  ray.mDirection = Vector3(Vector3(0.525232f, 0.00438121f, 0.850948f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest15(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(41);
  data[0].mBoundingSphere = Sphere(Vector3(19.956f, 20.2228f, 17.3104f), 2.81212f);
  data[1].mBoundingSphere = Sphere(Vector3(0.189107f, 32.6018f, -29.6915f), 0.683944f);
  data[2].mBoundingSphere = Sphere(Vector3(20.5035f, 34.4422f, -2.85377f), 1.19619f);
  data[3].mBoundingSphere = Sphere(Vector3(-30.9705f, 19.232f, 12.4675f), 1.61867f);
  data[4].mBoundingSphere = Sphere(Vector3(-11.7052f, -5.86962f, 36.301f), 2.1853f);
  data[5].mBoundingSphere = Sphere(Vector3(12.6894f, 15.1139f, -31.1865f), 0.581195f);
  data[6].mBoundingSphere = Sphere(Vector3(-17.6209f, -4.12774f, -6.19707f), 3.36077f);
  data[7].mBoundingSphere = Sphere(Vector3(17.1666f, -13.4532f, -38.6389f), 2.63642f);
  data[8].mBoundingSphere = Sphere(Vector3(-25.2726f, -5.17849f, 3.67162f), 1.28734f);
  data[9].mBoundingSphere = Sphere(Vector3(-1.99471f, -24.9077f, -29.192f), 0.825776f);
  data[10].mBoundingSphere = Sphere(Vector3(14.9148f, -22.9417f, -3.02893f), 0.969231f);
  data[11].mBoundingSphere = Sphere(Vector3(5.6729f, 6.88721f, 29.6046f), 1.06073f);
  data[12].mBoundingSphere = Sphere(Vector3(-18.1433f, -36.57f, -2.40495f), 2.98016f);
  data[13].mBoundingSphere = Sphere(Vector3(-18.9579f, 8.93563f, -22.836f), 1.89108f);
  data[14].mBoundingSphere = Sphere(Vector3(13.391f, -6.02691f, 40.3696f), 2.46861f);
  data[15].mBoundingSphere = Sphere(Vector3(11.6745f, -15.4769f, -1.09212f), 1.34729f);
  data[16].mBoundingSphere = Sphere(Vector3(-27.9531f, -12.8039f, -14.5663f), 3.83892f);
  data[17].mBoundingSphere = Sphere(Vector3(-1.3533f, 11.7749f, -21.2323f), 0.458498f);
  data[18].mBoundingSphere = Sphere(Vector3(-15.1687f, -12.4735f, -23.7475f), 1.70634f);
  data[19].mBoundingSphere = Sphere(Vector3(-15.8751f, 3.74127f, -40.7905f), 3.44636f);
  data[20].mBoundingSphere = Sphere(Vector3(2.87338f, -16.2947f, 39.8046f), 0.327683f);
  data[21].mBoundingSphere = Sphere(Vector3(32.8164f, 22.2343f, 8.38472f), 3.19169f);
  data[22].mBoundingSphere = Sphere(Vector3(-1.44154f, -42.5165f, 21.3343f), 3.1068f);
  data[23].mBoundingSphere = Sphere(Vector3(-1.01546f, 25.9777f, -18.4399f), 1.37837f);
  data[24].mBoundingSphere = Sphere(Vector3(36.03f, 2.32807f, -7.51489f), 2.57449f);
  data[25].mBoundingSphere = Sphere(Vector3(-10.4328f, -18.4756f, 15.9929f), 2.5114f);
  data[26].mBoundingSphere = Sphere(Vector3(-20.7747f, 13.6296f, 35.7023f), 1.24489f);
  data[27].mBoundingSphere = Sphere(Vector3(-36.8989f, 1.04745f, -26.1288f), 0.808844f);
  data[28].mBoundingSphere = Sphere(Vector3(2.06214f, 17.1727f, -27.7684f), 2.54538f);
  data[29].mBoundingSphere = Sphere(Vector3(10.822f, -44.3831f, 18.9397f), 1.77105f);
  data[30].mBoundingSphere = Sphere(Vector3(23.6926f, -1.44879f, 9.05867f), 2.22217f);
  data[31].mBoundingSphere = Sphere(Vector3(-46.8816f, -14.5464f, 4.93079f), 2.42292f);
  data[32].mBoundingSphere = Sphere(Vector3(11.1025f, -43.5332f, 17.2969f), 3.02063f);
  data[33].mBoundingSphere = Sphere(Vector3(-17.9656f, 9.87508f, 32.2347f), 2.43173f);
  data[34].mBoundingSphere = Sphere(Vector3(-16.0846f, 28.4591f, 3.29185f), 3.24109f);
  data[35].mBoundingSphere = Sphere(Vector3(43.5026f, 2.45926f, 15.1529f), 0.500595f);
  data[36].mBoundingSphere = Sphere(Vector3(-41.4301f, -12.3861f, 21.8823f), 0.968883f);
  data[37].mBoundingSphere = Sphere(Vector3(17.8525f, -37.5907f, -10.7074f), 2.63642f);
  data[38].mBoundingSphere = Sphere(Vector3(19.7201f, -29.5335f, -27.9399f), 2.58029f);
  data[39].mBoundingSphere = Sphere(Vector3(14.3293f, -26.9531f, 2.42885f), 0.492129f);
  data[40].mBoundingSphere = Sphere(Vector3(22.1981f, -0.708957f, -18.0631f), 1.32259f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-8.97955f, -20.7954f, -10.4117f));
  ray.mDirection = Vector3(Vector3(-0.0464738f, 0.0167398f, 0.998779f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest16(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mBoundingSphere = Sphere(Vector3(14.6327f, 33.7717f, 10.0722f), 0.466732f);
  data[1].mBoundingSphere = Sphere(Vector3(5.10611f, 41.3816f, -7.9338f), 1.09077f);
  data[2].mBoundingSphere = Sphere(Vector3(-15.6634f, 43.8079f, -17.9538f), 2.60349f);
  data[3].mBoundingSphere = Sphere(Vector3(19.7003f, -29.1998f, 28.4508f), 0.83401f);
  data[4].mBoundingSphere = Sphere(Vector3(3.74086f, 11.3801f, -3.7105f), 0.476241f);
  data[5].mBoundingSphere = Sphere(Vector3(41.7832f, 11.1289f, 14.2577f), 1.39125f);
  data[6].mBoundingSphere = Sphere(Vector3(40.1171f, 15.1801f, 1.79626f), 0.682437f);
  data[7].mBoundingSphere = Sphere(Vector3(-11.4523f, -6.56641f, 38.4704f), 3.06134f);
  data[8].mBoundingSphere = Sphere(Vector3(-9.90749f, 18.5285f, -34.2086f), 3.52046f);
  data[9].mBoundingSphere = Sphere(Vector3(18.1399f, -21.8429f, -30.5156f), 3.23634f);
  data[10].mBoundingSphere = Sphere(Vector3(31.0197f, -1.83714f, 7.92441f), 3.71715f);
  data[11].mBoundingSphere = Sphere(Vector3(-5.14342f, -35.8198f, 4.73246f), 2.11618f);
  data[12].mBoundingSphere = Sphere(Vector3(42.2879f, -13.939f, 17.4009f), 1.13008f);
  data[13].mBoundingSphere = Sphere(Vector3(-10.4113f, 2.91787f, -15.1938f), 3.19841f);
  data[14].mBoundingSphere = Sphere(Vector3(-26.0001f, -9.03421f, 23.1463f), 2.42535f);
  data[15].mBoundingSphere = Sphere(Vector3(11.4688f, -23.7367f, 40.5161f), 0.942674f);
  data[16].mBoundingSphere = Sphere(Vector3(2.50205f, 40.5658f, -3.19382f), 2.32945f);
  data[17].mBoundingSphere = Sphere(Vector3(-9.59043f, 26.8716f, -19.4691f), 1.21138f);
  data[18].mBoundingSphere = Sphere(Vector3(-14.3146f, 38.6051f, -21.0449f), 1.45642f);
  data[19].mBoundingSphere = Sphere(Vector3(-38.1004f, 18.7232f, -12.4878f), 2.2841f);
  data[20].mBoundingSphere = Sphere(Vector3(6.81862f, -20.2703f, -14.4115f), 3.71089f);
  data[21].mBoundingSphere = Sphere(Vector3(7.98158f, 30.323f, 18.3782f), 1.04693f);
  data[22].mBoundingSphere = Sphere(Vector3(-27.1965f, -8.39281f, -19.2283f), 0.864858f);
  data[23].mBoundingSphere = Sphere(Vector3(-0.509654f, -46.8324f, -17.3057f), 1.55848f);
  data[24].mBoundingSphere = Sphere(Vector3(-4.0067f, 18.6998f, -3.03087f), 1.31053f);
  data[25].mBoundingSphere = Sphere(Vector3(37.5191f, -17.7591f, 10.2968f), 3.18856f);
  data[26].mBoundingSphere = Sphere(Vector3(21.6371f, -9.31718f, -27.1447f), 0.386712f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-16.3149f, -5.60588f, -5.24464f));
  ray.mDirection = Vector3(Vector3(0.215882f, 0.620435f, -0.75396f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest17(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(26);
  data[0].mBoundingSphere = Sphere(Vector3(26.147f, -17.899f, -33.1627f), 2.39555f);
  data[1].mBoundingSphere = Sphere(Vector3(-34.7778f, 6.28231f, -14.0873f), 2.70844f);
  data[2].mBoundingSphere = Sphere(Vector3(24.1942f, 11.783f, -33.2463f), 3.01831f);
  data[3].mBoundingSphere = Sphere(Vector3(21.4394f, 7.13988f, 16.0967f), 3.59573f);
  data[4].mBoundingSphere = Sphere(Vector3(14.1469f, -9.83644f, -3.5449f), 1.01492f);
  data[5].mBoundingSphere = Sphere(Vector3(7.55481f, -33.9694f, 27.6034f), 1.79424f);
  data[6].mBoundingSphere = Sphere(Vector3(-43.1983f, 7.47878f, -22.0425f), 0.536314f);
  data[7].mBoundingSphere = Sphere(Vector3(-26.1294f, -8.88865f, 37.4398f), 1.06525f);
  data[8].mBoundingSphere = Sphere(Vector3(10.2841f, 8.99783f, 36.5388f), 1.35077f);
  data[9].mBoundingSphere = Sphere(Vector3(-1.66717f, -47.0401f, -3.55392f), 1.7155f);
  data[10].mBoundingSphere = Sphere(Vector3(31.1227f, 17.6433f, 23.5549f), 2.71888f);
  data[11].mBoundingSphere = Sphere(Vector3(-1.87174f, -21.845f, 38.4748f), 2.80933f);
  data[12].mBoundingSphere = Sphere(Vector3(18.4349f, -31.5565f, -16.0463f), 3.94248f);
  data[13].mBoundingSphere = Sphere(Vector3(21.8098f, -2.06162f, -27.2481f), 1.05459f);
  data[14].mBoundingSphere = Sphere(Vector3(21.4139f, -7.89233f, 18.4395f), 1.58886f);
  data[15].mBoundingSphere = Sphere(Vector3(0.135119f, -17.5066f, 1.9553f), 1.5652f);
  data[16].mBoundingSphere = Sphere(Vector3(-18.8586f, -21.2136f, 16.631f), 2.39022f);
  data[17].mBoundingSphere = Sphere(Vector3(-18.8834f, 6.37931f, -18.5308f), 2.49772f);
  data[18].mBoundingSphere = Sphere(Vector3(42.5025f, -17.0686f, -17.8752f), 2.41747f);
  data[19].mBoundingSphere = Sphere(Vector3(-24.8918f, -21.4811f, 26.2983f), 2.9623f);
  data[20].mBoundingSphere = Sphere(Vector3(-38.0316f, 3.05489f, -25.2249f), 0.929685f);
  data[21].mBoundingSphere = Sphere(Vector3(-38.3439f, -1.64062f, -28.1262f), 3.8105f);
  data[22].mBoundingSphere = Sphere(Vector3(15.0708f, -9.22106f, 2.04913f), 3.29861f);
  data[23].mBoundingSphere = Sphere(Vector3(-19.7508f, 34.1313f, 23.1767f), 1.29615f);
  data[24].mBoundingSphere = Sphere(Vector3(31.0562f, -25.5831f, 25.3388f), 1.60718f);
  data[25].mBoundingSphere = Sphere(Vector3(36.1222f, 23.1819f, 13.8781f), 0.212873f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(10.659f, -4.89102f, 14.9044f));
  ray.mDirection = Vector3(Vector3(0.178377f, -0.215463f, -0.960082f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest18(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(37);
  data[0].mBoundingSphere = Sphere(Vector3(17.0357f, -15.9574f, -20.3406f), 1.47799f);
  data[1].mBoundingSphere = Sphere(Vector3(17.0732f, 0.0180061f, -31.838f), 2.14007f);
  data[2].mBoundingSphere = Sphere(Vector3(-8.77707f, -26.9708f, -31.1408f), 1.48843f);
  data[3].mBoundingSphere = Sphere(Vector3(-6.08264f, 30.1031f, -15.8921f), 2.2398f);
  data[4].mBoundingSphere = Sphere(Vector3(16.5173f, 10.9615f, 4.13769f), 1.75331f);
  data[5].mBoundingSphere = Sphere(Vector3(-10.478f, -32.0514f, 9.66597f), 1.94431f);
  data[6].mBoundingSphere = Sphere(Vector3(-2.9798f, 6.81091f, -40.441f), 1.03742f);
  data[7].mBoundingSphere = Sphere(Vector3(-2.75913f, 15.7795f, -13.2312f), 3.85202f);
  data[8].mBoundingSphere = Sphere(Vector3(12.5501f, -20.0448f, -38.8808f), 1.81303f);
  data[9].mBoundingSphere = Sphere(Vector3(13.6839f, 6.38094f, 32.173f), 1.18378f);
  data[10].mBoundingSphere = Sphere(Vector3(30.941f, 35.9896f, 5.85674f), 1.30949f);
  data[11].mBoundingSphere = Sphere(Vector3(1.31443f, -25.4363f, 22.8496f), 1.37084f);
  data[12].mBoundingSphere = Sphere(Vector3(9.97377f, 6.74923f, -12.2633f), 2.0372f);
  data[13].mBoundingSphere = Sphere(Vector3(10.4774f, -10.1049f, -0.979977f), 0.715372f);
  data[14].mBoundingSphere = Sphere(Vector3(30.6883f, 8.77545f, -7.80052f), 3.78696f);
  data[15].mBoundingSphere = Sphere(Vector3(-22.6234f, -36.2959f, -18.6732f), 1.32758f);
  data[16].mBoundingSphere = Sphere(Vector3(-18.1508f, 9.23283f, 19.2917f), 3.70393f);
  data[17].mBoundingSphere = Sphere(Vector3(-26.1111f, -2.09737f, 16.6926f), 1.93782f);
  data[18].mBoundingSphere = Sphere(Vector3(18.9685f, 8.70393f, -6.87418f), 0.637208f);
  data[19].mBoundingSphere = Sphere(Vector3(33.3001f, 26.1381f, 7.93803f), 0.582354f);
  data[20].mBoundingSphere = Sphere(Vector3(12.8643f, 10.3999f, -7.18704f), 3.76412f);
  data[21].mBoundingSphere = Sphere(Vector3(21.4821f, 16.8818f, -20.3984f), 1.56636f);
  data[22].mBoundingSphere = Sphere(Vector3(-27.3767f, -2.69115f, -17.5184f), 3.68885f);
  data[23].mBoundingSphere = Sphere(Vector3(-32.1928f, -3.63273f, -15.2256f), 3.89969f);
  data[24].mBoundingSphere = Sphere(Vector3(-1.95609f, 31.9635f, -9.28299f), 1.01701f);
  data[25].mBoundingSphere = Sphere(Vector3(-13.06f, -20.1689f, -0.891573f), 1.60858f);
  data[26].mBoundingSphere = Sphere(Vector3(35.3888f, 23.1932f, -12.2072f), 1.20535f);
  data[27].mBoundingSphere = Sphere(Vector3(0.589246f, -19.7876f, -19.2167f), 3.52325f);
  data[28].mBoundingSphere = Sphere(Vector3(30.5928f, -8.20492f, -21.8027f), 2.28503f);
  data[29].mBoundingSphere = Sphere(Vector3(12.4238f, 21.192f, -8.83645f), 0.338353f);
  data[30].mBoundingSphere = Sphere(Vector3(16.4884f, 3.20597f, -12.0663f), 2.06144f);
  data[31].mBoundingSphere = Sphere(Vector3(5.07477f, 41.1927f, 26.0911f), 0.551042f);
  data[32].mBoundingSphere = Sphere(Vector3(-4.70105f, 4.97789f, -18.4854f), 1.98826f);
  data[33].mBoundingSphere = Sphere(Vector3(-1.42747f, -26.3959f, -36.2333f), 2.27169f);
  data[34].mBoundingSphere = Sphere(Vector3(2.59595f, 10.8727f, -30.7985f), 3.91685f);
  data[35].mBoundingSphere = Sphere(Vector3(26.3957f, 6.92757f, -26.6627f), 3.51084f);
  data[36].mBoundingSphere = Sphere(Vector3(32.5434f, -32.2901f, 5.88354f), 3.52f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(16.3052f, -1.79402f, 18.5787f));
  ray.mDirection = Vector3(Vector3(-0.233583f, 0.261032f, -0.936644f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest19(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(48);
  data[0].mBoundingSphere = Sphere(Vector3(-12.0599f, 11.5355f, -33.4302f), 2.87764f);
  data[1].mBoundingSphere = Sphere(Vector3(-21.8583f, 22.0361f, 14.0555f), 3.30905f);
  data[2].mBoundingSphere = Sphere(Vector3(29.3528f, -26.2636f, 23.0818f), 3.88287f);
  data[3].mBoundingSphere = Sphere(Vector3(10.4152f, 30.728f, -16.6932f), 0.965404f);
  data[4].mBoundingSphere = Sphere(Vector3(35.9339f, -26.3271f, 14.2366f), 0.214612f);
  data[5].mBoundingSphere = Sphere(Vector3(-13.4449f, -10.3157f, -31.7394f), 2.89886f);
  data[6].mBoundingSphere = Sphere(Vector3(-6.88357f, -2.21423f, -3.67969f), 1.5732f);
  data[7].mBoundingSphere = Sphere(Vector3(-17.4554f, -39.0988f, 19.4974f), 0.435536f);
  data[8].mBoundingSphere = Sphere(Vector3(-17.1304f, 10.7197f, 21.2658f), 1.5775f);
  data[9].mBoundingSphere = Sphere(Vector3(-6.16758f, -9.60531f, -41.9043f), 2.85085f);
  data[10].mBoundingSphere = Sphere(Vector3(-37.4822f, 24.7351f, -6.73668f), 1.76827f);
  data[11].mBoundingSphere = Sphere(Vector3(-10.4358f, 14.8912f, 13.8597f), 1.75748f);
  data[12].mBoundingSphere = Sphere(Vector3(18.7864f, -35.3042f, -9.11417f), 3.78511f);
  data[13].mBoundingSphere = Sphere(Vector3(-4.2931f, -47.1283f, -13.7411f), 2.47209f);
  data[14].mBoundingSphere = Sphere(Vector3(-21.8545f, 3.64562f, 26.2329f), 3.91824f);
  data[15].mBoundingSphere = Sphere(Vector3(-16.9655f, -44.5451f, 6.61032f), 0.753526f);
  data[16].mBoundingSphere = Sphere(Vector3(41.8351f, -21.0839f, 14.7476f), 1.43694f);
  data[17].mBoundingSphere = Sphere(Vector3(13.3107f, -43.7197f, 10.3432f), 3.71924f);
  data[18].mBoundingSphere = Sphere(Vector3(45.2047f, -17.9327f, 8.74784f), 1.69115f);
  data[19].mBoundingSphere = Sphere(Vector3(-11.3664f, 35.2718f, -14.2563f), 3.73362f);
  data[20].mBoundingSphere = Sphere(Vector3(16.654f, -3.53414f, 23.0996f), 2.58899f);
  data[21].mBoundingSphere = Sphere(Vector3(6.29407f, 19.3977f, -19.0616f), 0.273641f);
  data[22].mBoundingSphere = Sphere(Vector3(6.65332f, -22.6296f, 29.922f), 2.4489f);
  data[23].mBoundingSphere = Sphere(Vector3(-27.8722f, 7.7538f, 22.4478f), 1.3691f);
  data[24].mBoundingSphere = Sphere(Vector3(-16.2496f, 32.2389f, -10.1063f), 2.62761f);
  data[25].mBoundingSphere = Sphere(Vector3(-19.8945f, 43.3508f, -10.6509f), 0.816382f);
  data[26].mBoundingSphere = Sphere(Vector3(-39.8037f, 11.8251f, 14.7089f), 1.1215f);
  data[27].mBoundingSphere = Sphere(Vector3(8.58094f, -43.7848f, -15.9712f), 3.36924f);
  data[28].mBoundingSphere = Sphere(Vector3(33.7665f, 27.3087f, -14.1096f), 3.7451f);
  data[29].mBoundingSphere = Sphere(Vector3(16.5251f, 29.5484f, 27.1182f), 2.90292f);
  data[30].mBoundingSphere = Sphere(Vector3(-26.2631f, 25.3926f, -4.83467f), 3.48231f);
  data[31].mBoundingSphere = Sphere(Vector3(15.1315f, -22.6333f, 32.2038f), 0.954619f);
  data[32].mBoundingSphere = Sphere(Vector3(11.5313f, -45.3602f, -13.2939f), 0.214612f);
  data[33].mBoundingSphere = Sphere(Vector3(18.8402f, 4.23653f, -16.7535f), 1.03812f);
  data[34].mBoundingSphere = Sphere(Vector3(-13.0836f, -42.6652f, -0.589766f), 3.82315f);
  data[35].mBoundingSphere = Sphere(Vector3(9.68142f, -31.1336f, -18.7774f), 1.53354f);
  data[36].mBoundingSphere = Sphere(Vector3(19.3303f, -37.4093f, -21.006f), 1.66552f);
  data[37].mBoundingSphere = Sphere(Vector3(15.5652f, 10.4765f, 3.37259f), 2.35218f);
  data[38].mBoundingSphere = Sphere(Vector3(12.1441f, -13.9677f, -41.9008f), 0.628974f);
  data[39].mBoundingSphere = Sphere(Vector3(34.312f, 0.154618f, -31.4622f), 2.57623f);
  data[40].mBoundingSphere = Sphere(Vector3(-7.14924f, 31.1987f, -6.08624f), 3.15748f);
  data[41].mBoundingSphere = Sphere(Vector3(38.2876f, 9.89963f, 14.6126f), 0.474154f);
  data[42].mBoundingSphere = Sphere(Vector3(6.23061f, 32.9282f, -14.0812f), 0.853493f);
  data[43].mBoundingSphere = Sphere(Vector3(-25.4365f, -30.5158f, -8.28423f), 3.48996f);
  data[44].mBoundingSphere = Sphere(Vector3(-37.0724f, 5.99436f, 12.8186f), 0.856392f);
  data[45].mBoundingSphere = Sphere(Vector3(-4.95127f, -19.2982f, 6.65046f), 2.60812f);
  data[46].mBoundingSphere = Sphere(Vector3(-17.6652f, -37.0951f, 13.7825f), 1.39357f);
  data[47].mBoundingSphere = Sphere(Vector3(-11.685f, 14.7625f, 29.3749f), 2.29396f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(4.0834f, 12.6011f, 18.3077f));
  ray.mDirection = Vector3(Vector3(-0.387889f, 0.53087f, -0.753471f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest20(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(36);
  data[0].mBoundingSphere = Sphere(Vector3(-7.50932f, 34.8837f, 12.3809f), 2.79716f);
  data[1].mBoundingSphere = Sphere(Vector3(32.9756f, 22.9658f, 9.51919f), 0.594995f);
  data[2].mBoundingSphere = Sphere(Vector3(-15.9094f, -7.23568f, -19.0849f), 1.72246f);
  data[3].mBoundingSphere = Sphere(Vector3(-16.0275f, -40.0599f, -17.9016f), 1.15571f);
  data[4].mBoundingSphere = Sphere(Vector3(16.7888f, 15.4326f, 1.5787f), 2.94711f);
  data[5].mBoundingSphere = Sphere(Vector3(26.9904f, 2.88068f, 4.62083f), 1.61843f);
  data[6].mBoundingSphere = Sphere(Vector3(-24.6015f, -26.0703f, 26.8388f), 0.761412f);
  data[7].mBoundingSphere = Sphere(Vector3(-35.402f, -0.4888f, -7.53761f), 1.51093f);
  data[8].mBoundingSphere = Sphere(Vector3(0.00231166f, -48.2819f, -8.85199f), 1.86383f);
  data[9].mBoundingSphere = Sphere(Vector3(-3.24241f, 16.2879f, -5.77554f), 0.30762f);
  data[10].mBoundingSphere = Sphere(Vector3(-8.85142f, 8.14422f, 34.3416f), 2.93203f);
  data[11].mBoundingSphere = Sphere(Vector3(-30.1187f, -13.3235f, 0.732899f), 0.888284f);
  data[12].mBoundingSphere = Sphere(Vector3(32.1602f, 25.3632f, -7.69337f), 0.968651f);
  data[13].mBoundingSphere = Sphere(Vector3(12.2183f, 13.7096f, -38.017f), 3.97159f);
  data[14].mBoundingSphere = Sphere(Vector3(-2.60529f, -30.8937f, 19.9625f), 2.22287f);
  data[15].mBoundingSphere = Sphere(Vector3(36.38f, -14.5451f, -25.324f), 1.12312f);
  data[16].mBoundingSphere = Sphere(Vector3(38.5343f, -2.07464f, 15.5741f), 3.08592f);
  data[17].mBoundingSphere = Sphere(Vector3(13.261f, -17.5312f, -14.3057f), 0.540141f);
  data[18].mBoundingSphere = Sphere(Vector3(-9.86038f, 32.5099f, -5.3324f), 3.76261f);
  data[19].mBoundingSphere = Sphere(Vector3(-37.5668f, -5.98562f, 0.57241f), 2.00937f);
  data[20].mBoundingSphere = Sphere(Vector3(-5.99311f, -24.4871f, 3.7229f), 1.51719f);
  data[21].mBoundingSphere = Sphere(Vector3(-21.3854f, 21.7337f, 24.9624f), 0.840504f);
  data[22].mBoundingSphere = Sphere(Vector3(41.5507f, -5.51771f, -10.1684f), 1.49481f);
  data[23].mBoundingSphere = Sphere(Vector3(-9.81634f, -28.7164f, 24.8735f), 1.77523f);
  data[24].mBoundingSphere = Sphere(Vector3(-12.4865f, -38.9523f, 15.9363f), 3.31728f);
  data[25].mBoundingSphere = Sphere(Vector3(34.352f, -20.3184f, -13.5859f), 1.07071f);
  data[26].mBoundingSphere = Sphere(Vector3(-23.2236f, -27.7635f, -3.05411f), 1.45399f);
  data[27].mBoundingSphere = Sphere(Vector3(35.0422f, -17.4084f, -21.3328f), 1.35785f);
  data[28].mBoundingSphere = Sphere(Vector3(10.1903f, 12.821f, -36.1795f), 3.16849f);
  data[29].mBoundingSphere = Sphere(Vector3(-5.05263f, -3.86898f, -28.7189f), 2.27564f);
  data[30].mBoundingSphere = Sphere(Vector3(-7.12306f, -20.9689f, 39.8121f), 3.23923f);
  data[31].mBoundingSphere = Sphere(Vector3(-36.9905f, 25.8832f, 19.9662f), 1.07848f);
  data[32].mBoundingSphere = Sphere(Vector3(-24.7489f, -18.3264f, -19.2388f), 2.85584f);
  data[33].mBoundingSphere = Sphere(Vector3(19.936f, 14.6945f, 28.2391f), 3.22138f);
  data[34].mBoundingSphere = Sphere(Vector3(3.96314f, -41.3547f, 19.1602f), 0.490042f);
  data[35].mBoundingSphere = Sphere(Vector3(-15.1731f, -24.7534f, 36.1844f), 1.11698f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-5.56579f, 0.429889f, -12.7737f));
  ray.mDirection = Vector3(Vector3(0.464324f, 0.376554f, -0.80163f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest21(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mBoundingSphere = Sphere(Vector3(27.3775f, -6.47143f, 30.949f), 1.49191f);
  data[1].mBoundingSphere = Sphere(Vector3(19.3811f, -5.23385f, 24.1717f), 0.549419f);
  data[2].mBoundingSphere = Sphere(Vector3(-3.60997f, -11.1877f, 27.8571f), 0.537474f);
  data[3].mBoundingSphere = Sphere(Vector3(11.7712f, -23.5276f, 5.35781f), 2.14401f);
  data[4].mBoundingSphere = Sphere(Vector3(1.91556f, -44.9208f, -7.60539f), 3.08662f);
  data[5].mBoundingSphere = Sphere(Vector3(-8.6951f, 23.7146f, 20.9099f), 3.32842f);
  data[6].mBoundingSphere = Sphere(Vector3(-13.4534f, 2.6386f, 3.1308f), 3.89018f);
  data[7].mBoundingSphere = Sphere(Vector3(2.36403f, -47.5152f, -6.68417f), 3.64861f);
  data[8].mBoundingSphere = Sphere(Vector3(14.9579f, -37.3969f, -6.99534f), 0.419764f);
  data[9].mBoundingSphere = Sphere(Vector3(-6.66109f, -3.55399f, -28.4529f), 0.717112f);
  data[10].mBoundingSphere = Sphere(Vector3(25.2302f, -29.3356f, -10.6229f), 2.67956f);
  data[11].mBoundingSphere = Sphere(Vector3(-25.5732f, 0.941943f, -36.2428f), 2.16349f);
  data[12].mBoundingSphere = Sphere(Vector3(7.2061f, -4.23617f, 33.7319f), 1.69242f);
  data[13].mBoundingSphere = Sphere(Vector3(-48.308f, 7.95374f, -3.54589f), 3.85736f);
  data[14].mBoundingSphere = Sphere(Vector3(14.115f, 33.0272f, -29.8538f), 3.06215f);
  data[15].mBoundingSphere = Sphere(Vector3(-1.51509f, 22.8853f, 11.6142f), 2.80794f);
  data[16].mBoundingSphere = Sphere(Vector3(18.8403f, 33.7947f, 31.4379f), 0.209626f);
  data[17].mBoundingSphere = Sphere(Vector3(-19.5057f, -3.91505f, 21.4319f), 2.93876f);
  data[18].mBoundingSphere = Sphere(Vector3(-30.9224f, -25.5976f, -10.1509f), 1.2856f);
  data[19].mBoundingSphere = Sphere(Vector3(-3.1295f, -7.29355f, -40.6233f), 2.33629f);
  data[20].mBoundingSphere = Sphere(Vector3(33.1837f, 24.3513f, 27.8377f), 3.35602f);
  data[21].mBoundingSphere = Sphere(Vector3(-0.263955f, 36.4633f, -18.2371f), 3.77432f);
  data[22].mBoundingSphere = Sphere(Vector3(-6.71541f, 19.3776f, -9.57917f), 1.26461f);
  data[23].mBoundingSphere = Sphere(Vector3(24.9321f, -13.1156f, 18.6458f), 2.91336f);
  data[24].mBoundingSphere = Sphere(Vector3(11.3567f, -37.7165f, 5.55401f), 0.769878f);
  data[25].mBoundingSphere = Sphere(Vector3(6.68607f, 36.5223f, 17.8092f), 3.57485f);
  data[26].mBoundingSphere = Sphere(Vector3(-25.2928f, -8.38279f, 29.3301f), 1.75586f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-11.5603f, -0.419143f, 18.8636f));
  ray.mDirection = Vector3(Vector3(-0.256082f, 0.0259169f, -0.966308f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest22(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(52);
  data[0].mBoundingSphere = Sphere(Vector3(25.3793f, 15.7971f, -7.42543f), 1.88783f);
  data[1].mBoundingSphere = Sphere(Vector3(-41.1598f, 13.327f, -5.64164f), 0.409906f);
  data[2].mBoundingSphere = Sphere(Vector3(-5.0196f, -28.936f, -38.1908f), 1.51093f);
  data[3].mBoundingSphere = Sphere(Vector3(8.72034f, 0.817558f, -47.1991f), 2.26903f);
  data[4].mBoundingSphere = Sphere(Vector3(38.1157f, -9.58274f, 23.6163f), 3.54029f);
  data[5].mBoundingSphere = Sphere(Vector3(21.6104f, 30.9692f, -32.635f), 3.59584f);
  data[6].mBoundingSphere = Sphere(Vector3(-3.81176f, -38.1195f, -2.34149f), 1.35367f);
  data[7].mBoundingSphere = Sphere(Vector3(4.87983f, -14.2085f, -13.9602f), 1.72721f);
  data[8].mBoundingSphere = Sphere(Vector3(3.64391f, -14.4032f, 41.8512f), 2.30683f);
  data[9].mBoundingSphere = Sphere(Vector3(-44.3041f, 10.9446f, 4.91539f), 3.29467f);
  data[10].mBoundingSphere = Sphere(Vector3(-9.35147f, -34.9415f, -20.0653f), 0.91055f);
  data[11].mBoundingSphere = Sphere(Vector3(4.06546f, -34.1319f, 21.8097f), 2.38871f);
  data[12].mBoundingSphere = Sphere(Vector3(27.0491f, 9.24495f, 31.76f), 3.7829f);
  data[13].mBoundingSphere = Sphere(Vector3(7.60685f, 32.2984f, -34.1877f), 2.89944f);
  data[14].mBoundingSphere = Sphere(Vector3(-18.2483f, -19.942f, 22.0059f), 3.77676f);
  data[15].mBoundingSphere = Sphere(Vector3(41.7084f, -9.79141f, 14.4913f), 1.43056f);
  data[16].mBoundingSphere = Sphere(Vector3(18.6595f, -13.2844f, -34.0063f), 2.08208f);
  data[17].mBoundingSphere = Sphere(Vector3(12.3635f, -23.8592f, -11.2305f), 2.99001f);
  data[18].mBoundingSphere = Sphere(Vector3(-16.8857f, 2.31981f, 14.9919f), 2.30324f);
  data[19].mBoundingSphere = Sphere(Vector3(-8.39653f, 15.6883f, -46.5491f), 1.05424f);
  data[20].mBoundingSphere = Sphere(Vector3(6.49656f, -27.1636f, -29.1225f), 3.11132f);
  data[21].mBoundingSphere = Sphere(Vector3(30.9219f, -16.2137f, -10.6366f), 1.80839f);
  data[22].mBoundingSphere = Sphere(Vector3(24.3303f, -43.3877f, -4.99374f), 0.8717f);
  data[23].mBoundingSphere = Sphere(Vector3(-10.5887f, 21.3018f, 3.69175f), 1.36109f);
  data[24].mBoundingSphere = Sphere(Vector3(26.7064f, 15.6514f, 5.36433f), 2.24606f);
  data[25].mBoundingSphere = Sphere(Vector3(33.234f, -9.11852f, 10.1994f), 3.3341f);
  data[26].mBoundingSphere = Sphere(Vector3(-43.5108f, -3.28516f, -7.7987f), 1.16998f);
  data[27].mBoundingSphere = Sphere(Vector3(-17.5147f, -5.86461f, 3.80361f), 0.826936f);
  data[28].mBoundingSphere = Sphere(Vector3(-6.31922f, -28.8971f, -33.1995f), 3.80505f);
  data[29].mBoundingSphere = Sphere(Vector3(6.00979f, -9.88717f, 5.38733f), 2.55791f);
  data[30].mBoundingSphere = Sphere(Vector3(10.6776f, 34.571f, -32.5025f), 2.66646f);
  data[31].mBoundingSphere = Sphere(Vector3(-21.6985f, 19.7965f, -27.3442f), 0.577251f);
  data[32].mBoundingSphere = Sphere(Vector3(7.21221f, -39.7404f, 22.2362f), 2.52532f);
  data[33].mBoundingSphere = Sphere(Vector3(-42.7009f, -13.8531f, -8.26788f), 1.15849f);
  data[34].mBoundingSphere = Sphere(Vector3(1.25299f, 0.595732f, 25.0854f), 3.08557f);
  data[35].mBoundingSphere = Sphere(Vector3(-27.8944f, -14.993f, -27.1058f), 1.06212f);
  data[36].mBoundingSphere = Sphere(Vector3(18.7165f, 33.4368f, 29.8368f), 3.03721f);
  data[37].mBoundingSphere = Sphere(Vector3(1.91854f, -7.52871f, -29.6227f), 0.376275f);
  data[38].mBoundingSphere = Sphere(Vector3(-14.4158f, 10.9425f, -16.5511f), 2.68258f);
  data[39].mBoundingSphere = Sphere(Vector3(29.7763f, -16.2816f, 4.42331f), 2.53124f);
  data[40].mBoundingSphere = Sphere(Vector3(10.0836f, 35.6047f, -23.9107f), 1.33964f);
  data[41].mBoundingSphere = Sphere(Vector3(-40.2999f, -22.0108f, -12.5818f), 1.48901f);
  data[42].mBoundingSphere = Sphere(Vector3(2.15686f, 6.16065f, 43.1847f), 0.918552f);
  data[43].mBoundingSphere = Sphere(Vector3(17.8529f, -32.1975f, -10.3513f), 1.70877f);
  data[44].mBoundingSphere = Sphere(Vector3(-2.1713f, 38.1168f, 4.59686f), 0.474734f);
  data[45].mBoundingSphere = Sphere(Vector3(8.79888f, -6.56922f, 39.2433f), 2.48636f);
  data[46].mBoundingSphere = Sphere(Vector3(6.23813f, -8.91418f, -23.6093f), 0.735435f);
  data[47].mBoundingSphere = Sphere(Vector3(34.189f, -0.108172f, 34.5438f), 3.66879f);
  data[48].mBoundingSphere = Sphere(Vector3(-3.70372f, 3.93996f, -5.94356f), 3.4031f);
  data[49].mBoundingSphere = Sphere(Vector3(-7.51005f, 21.5503f, -18.859f), 2.34487f);
  data[50].mBoundingSphere = Sphere(Vector3(-4.7496f, -19.9013f, -14.8476f), 1.43114f);
  data[51].mBoundingSphere = Sphere(Vector3(38.3837f, 2.42103f, 15.4216f), 3.30963f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-5.09552f, 5.28894f, -6.94109f));
  ray.mDirection = Vector3(Vector3(-0.443367f, -0.149497f, 0.883785f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest23(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(42);
  data[0].mBoundingSphere = Sphere(Vector3(2.96575f, -26.2257f, 17.2972f), 0.965752f);
  data[1].mBoundingSphere = Sphere(Vector3(0.434976f, 19.3435f, 43.2727f), 3.06482f);
  data[2].mBoundingSphere = Sphere(Vector3(12.0085f, -11.6484f, -1.72098f), 3.07641f);
  data[3].mBoundingSphere = Sphere(Vector3(-42.3219f, 10.3947f, 5.62286f), 0.550462f);
  data[4].mBoundingSphere = Sphere(Vector3(7.11863f, 32.6878f, 31.554f), 0.536314f);
  data[5].mBoundingSphere = Sphere(Vector3(45.6706f, -9.93909f, -12.9595f), 2.3567f);
  data[6].mBoundingSphere = Sphere(Vector3(-5.41936f, 29.2701f, -4.96518f), 0.47311f);
  data[7].mBoundingSphere = Sphere(Vector3(-13.7111f, -36.356f, 26.6826f), 3.26011f);
  data[8].mBoundingSphere = Sphere(Vector3(-10.369f, -27.7843f, -2.04758f), 1.40679f);
  data[9].mBoundingSphere = Sphere(Vector3(-12.6343f, -9.87979f, -21.6819f), 1.96553f);
  data[10].mBoundingSphere = Sphere(Vector3(17.5592f, 5.20377f, 16.3946f), 2.76526f);
  data[11].mBoundingSphere = Sphere(Vector3(4.28191f, 2.86297f, 38.8675f), 0.408979f);
  data[12].mBoundingSphere = Sphere(Vector3(18.1197f, -26.9349f, -16.7699f), 1.57413f);
  data[13].mBoundingSphere = Sphere(Vector3(-43.9969f, 2.67768f, 21.6263f), 1.63444f);
  data[14].mBoundingSphere = Sphere(Vector3(-24.2699f, -16.8164f, -6.0133f), 2.92159f);
  data[15].mBoundingSphere = Sphere(Vector3(-6.8961f, -33.1775f, 35.4652f), 2.44635f);
  data[16].mBoundingSphere = Sphere(Vector3(32.6117f, 3.84792f, -12.791f), 2.39775f);
  data[17].mBoundingSphere = Sphere(Vector3(39.7129f, 14.5243f, 26.3873f), 3.63736f);
  data[18].mBoundingSphere = Sphere(Vector3(-4.75134f, 5.23046f, 5.76932f), 1.3103f);
  data[19].mBoundingSphere = Sphere(Vector3(42.9585f, 10.8353f, 5.87165f), 3.58981f);
  data[20].mBoundingSphere = Sphere(Vector3(32.5305f, -24.8949f, -26.731f), 1.47382f);
  data[21].mBoundingSphere = Sphere(Vector3(-34.7492f, 5.63239f, 34.7252f), 1.85408f);
  data[22].mBoundingSphere = Sphere(Vector3(-23.4098f, 9.68121f, 33.5189f), 2.37468f);
  data[23].mBoundingSphere = Sphere(Vector3(-8.017f, -4.70563f, 17.893f), 1.30009f);
  data[24].mBoundingSphere = Sphere(Vector3(26.4462f, 22.1627f, -15.5892f), 0.710849f);
  data[25].mBoundingSphere = Sphere(Vector3(-3.86288f, 20.4471f, 16.6252f), 1.24536f);
  data[26].mBoundingSphere = Sphere(Vector3(18.1168f, 26.1975f, 14.7186f), 3.70729f);
  data[27].mBoundingSphere = Sphere(Vector3(-40.7469f, -13.6436f, 9.3559f), 0.556725f);
  data[28].mBoundingSphere = Sphere(Vector3(20.2308f, -19.4069f, 7.30749f), 3.00463f);
  data[29].mBoundingSphere = Sphere(Vector3(12.9219f, -0.678304f, 10.6655f), 3.12802f);
  data[30].mBoundingSphere = Sphere(Vector3(1.14148f, -37.1358f, 14.293f), 0.325248f);
  data[31].mBoundingSphere = Sphere(Vector3(-14.7928f, 6.10767f, -28.2384f), 2.93215f);
  data[32].mBoundingSphere = Sphere(Vector3(-20.5786f, -18.7964f, -15.2633f), 1.31262f);
  data[33].mBoundingSphere = Sphere(Vector3(-2.6424f, -49.3885f, 0.215849f), 1.8491f);
  data[34].mBoundingSphere = Sphere(Vector3(41.3045f, -0.542571f, 21.7664f), 0.345659f);
  data[35].mBoundingSphere = Sphere(Vector3(-10.8102f, -18.1473f, 21.45f), 3.26742f);
  data[36].mBoundingSphere = Sphere(Vector3(-39.4729f, -21.51f, -20.9124f), 1.9297f);
  data[37].mBoundingSphere = Sphere(Vector3(20.3231f, -15.3928f, -37.6813f), 0.461977f);
  data[38].mBoundingSphere = Sphere(Vector3(5.18172f, -25.3811f, -4.50406f), 2.65996f);
  data[39].mBoundingSphere = Sphere(Vector3(7.76096f, 24.9747f, 9.27561f), 1.54676f);
  data[40].mBoundingSphere = Sphere(Vector3(-8.68253f, 1.76349f, 42.2351f), 2.16268f);
  data[41].mBoundingSphere = Sphere(Vector3(-13.0119f, -30.8959f, 0.21588f), 3.60118f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(9.37048f, -11.734f, 0.482818f));
  ray.mDirection = Vector3(Vector3(0.714052f, 0.560919f, -0.418928f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest24(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(40);
  data[0].mBoundingSphere = Sphere(Vector3(-25.8241f, 22.2253f, 0.554289f), 2.29651f);
  data[1].mBoundingSphere = Sphere(Vector3(-18.8687f, 10.4706f, 38.0424f), 1.01156f);
  data[2].mBoundingSphere = Sphere(Vector3(27.913f, 17.7402f, -7.82147f), 2.54469f);
  data[3].mBoundingSphere = Sphere(Vector3(36.9277f, 1.79645f, -6.1456f), 2.37873f);
  data[4].mBoundingSphere = Sphere(Vector3(-13.9984f, -19.7484f, -10.1899f), 1.17914f);
  data[5].mBoundingSphere = Sphere(Vector3(-28.2045f, -15.5241f, -27.9131f), 2.90686f);
  data[6].mBoundingSphere = Sphere(Vector3(-4.53062f, -16.6219f, 11.3071f), 0.707718f);
  data[7].mBoundingSphere = Sphere(Vector3(-36.6301f, 14.4459f, -13.9826f), 2.47279f);
  data[8].mBoundingSphere = Sphere(Vector3(35.6147f, -13.719f, -14.872f), 1.66053f);
  data[9].mBoundingSphere = Sphere(Vector3(-13.7751f, 30.6497f, 6.8304f), 2.27854f);
  data[10].mBoundingSphere = Sphere(Vector3(17.4933f, -0.451266f, 17.7144f), 3.6144f);
  data[11].mBoundingSphere = Sphere(Vector3(35.9089f, 22.2938f, 14.9261f), 0.413038f);
  data[12].mBoundingSphere = Sphere(Vector3(37.2683f, 1.69842f, -31.0041f), 2.89225f);
  data[13].mBoundingSphere = Sphere(Vector3(20.866f, 21.3405f, 19.1167f), 3.08952f);
  data[14].mBoundingSphere = Sphere(Vector3(4.46543f, -44.6998f, 7.04261f), 2.13705f);
  data[15].mBoundingSphere = Sphere(Vector3(-7.01431f, 46.6837f, -13.3022f), 2.15561f);
  data[16].mBoundingSphere = Sphere(Vector3(-48.6129f, -0.316935f, 5.88366f), 1.36144f);
  data[17].mBoundingSphere = Sphere(Vector3(-17.8188f, 7.49741f, 31.3355f), 2.48195f);
  data[18].mBoundingSphere = Sphere(Vector3(-9.70797f, 36.3853f, 19.9029f), 0.871468f);
  data[19].mBoundingSphere = Sphere(Vector3(10.1645f, -24.9537f, 30.2471f), 0.422663f);
  data[20].mBoundingSphere = Sphere(Vector3(30.6455f, 22.3084f, 26.1128f), 0.866134f);
  data[21].mBoundingSphere = Sphere(Vector3(-4.08401f, -34.2039f, 8.84697f), 0.752483f);
  data[22].mBoundingSphere = Sphere(Vector3(-43.4573f, 18.916f, 8.58317f), 1.51128f);
  data[23].mBoundingSphere = Sphere(Vector3(10.4034f, 12.0401f, 10.0607f), 3.67865f);
  data[24].mBoundingSphere = Sphere(Vector3(-18.2271f, -19.9572f, -2.12893f), 3.4895f);
  data[25].mBoundingSphere = Sphere(Vector3(-17.0607f, -34.1244f, -10.868f), 3.72712f);
  data[26].mBoundingSphere = Sphere(Vector3(4.57706f, -36.1247f, 0.316729f), 1.42337f);
  data[27].mBoundingSphere = Sphere(Vector3(-34.3034f, 16.8083f, -10.1352f), 0.504538f);
  data[28].mBoundingSphere = Sphere(Vector3(7.59062f, 23.5164f, -30.9952f), 0.575396f);
  data[29].mBoundingSphere = Sphere(Vector3(1.08645f, 33.0734f, -24.4793f), 2.33559f);
  data[30].mBoundingSphere = Sphere(Vector3(-10.6608f, -41.9188f, 5.28073f), 3.6224f);
  data[31].mBoundingSphere = Sphere(Vector3(-3.95062f, -35.0854f, -7.9676f), 3.77351f);
  data[32].mBoundingSphere = Sphere(Vector3(-5.05301f, 13.2749f, 9.5777f), 1.70356f);
  data[33].mBoundingSphere = Sphere(Vector3(25.3301f, -39.3574f, -10.1661f), 1.58759f);
  data[34].mBoundingSphere = Sphere(Vector3(-14.6698f, -15.8351f, -17.5391f), 3.94607f);
  data[35].mBoundingSphere = Sphere(Vector3(40.2988f, 26.5218f, 2.54622f), 3.62495f);
  data[36].mBoundingSphere = Sphere(Vector3(45.981f, -4.70254f, 17.983f), 2.86361f);
  data[37].mBoundingSphere = Sphere(Vector3(-3.04862f, 1.53094f, -40.4347f), 3.94677f);
  data[38].mBoundingSphere = Sphere(Vector3(30.2223f, -0.831824f, 19.8396f), 1.03046f);
  data[39].mBoundingSphere = Sphere(Vector3(-5.41516f, -9.85734f, -13.7688f), 0.240242f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-12.0718f, -13.9088f, -12.8717f));
  ray.mDirection = Vector3(Vector3(-0.807905f, -0.0232441f, -0.588855f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionRayCastFuzzTest25(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(32);
  data[0].mBoundingSphere = Sphere(Vector3(-44.7175f, -15.9427f, 1.58157f), 2.89828f);
  data[1].mBoundingSphere = Sphere(Vector3(-36.3783f, -21.8241f, 26.0934f), 1.22008f);
  data[2].mBoundingSphere = Sphere(Vector3(29.8113f, -21.8677f, -13.6038f), 2.714f);
  data[3].mBoundingSphere = Sphere(Vector3(6.54999f, -28.979f, 6.91797f), 0.344847f);
  data[4].mBoundingSphere = Sphere(Vector3(-19.3006f, 6.32703f, 20.3555f), 2.33571f);
  data[5].mBoundingSphere = Sphere(Vector3(-2.81776f, 8.14589f, -15.8964f), 0.81789f);
  data[6].mBoundingSphere = Sphere(Vector3(3.69901f, 2.16497f, -13.5008f), 3.21882f);
  data[7].mBoundingSphere = Sphere(Vector3(3.76015f, 18.2041f, 24.9841f), 3.95489f);
  data[8].mBoundingSphere = Sphere(Vector3(-11.2343f, 26.7755f, -4.24047f), 3.90003f);
  data[9].mBoundingSphere = Sphere(Vector3(7.3782f, 35.2762f, -18.4707f), 0.797247f);
  data[10].mBoundingSphere = Sphere(Vector3(-43.2271f, -4.21579f, 6.77877f), 1.08184f);
  data[11].mBoundingSphere = Sphere(Vector3(29.662f, -21.4882f, -25.5061f), 2.88541f);
  data[12].mBoundingSphere = Sphere(Vector3(-12.7814f, 37.1112f, 26.4495f), 0.690554f);
  data[13].mBoundingSphere = Sphere(Vector3(9.99608f, 31.5892f, 35.5779f), 3.20294f);
  data[14].mBoundingSphere = Sphere(Vector3(34.5344f, 1.6402f, 10.3858f), 0.910318f);
  data[15].mBoundingSphere = Sphere(Vector3(13.012f, -5.01801f, -6.94163f), 0.298575f);
  data[16].mBoundingSphere = Sphere(Vector3(-6.3981f, 21.33f, -15.858f), 0.391119f);
  data[17].mBoundingSphere = Sphere(Vector3(-19.8569f, -0.597979f, 19.786f), 1.98246f);
  data[18].mBoundingSphere = Sphere(Vector3(28.7891f, -18.7261f, 15.1227f), 1.23306f);
  data[19].mBoundingSphere = Sphere(Vector3(-23.2269f, -27.595f, -6.00707f), 0.996368f);
  data[20].mBoundingSphere = Sphere(Vector3(-27.973f, -3.1294f, 38.9542f), 2.94432f);
  data[21].mBoundingSphere = Sphere(Vector3(-15.1118f, 14.2672f, 29.6266f), 2.46107f);
  data[22].mBoundingSphere = Sphere(Vector3(-3.30882f, -19.7247f, -17.0965f), 2.57519f);
  data[23].mBoundingSphere = Sphere(Vector3(27.2386f, 20.8368f, 14.3164f), 0.496188f);
  data[24].mBoundingSphere = Sphere(Vector3(5.70227f, 9.16606f, -19.83f), 1.02652f);
  data[25].mBoundingSphere = Sphere(Vector3(-9.94894f, -33.4709f, 0.201411f), 2.81699f);
  data[26].mBoundingSphere = Sphere(Vector3(-1.81994f, -39.7253f, 4.97678f), 0.333366f);
  data[27].mBoundingSphere = Sphere(Vector3(7.40595f, -6.23547f, -44.4686f), 0.705399f);
  data[28].mBoundingSphere = Sphere(Vector3(7.75589f, 0.860891f, -45.7752f), 3.32354f);
  data[29].mBoundingSphere = Sphere(Vector3(-6.21222f, -5.0587f, -29.7937f), 2.15596f);
  data[30].mBoundingSphere = Sphere(Vector3(-23.5985f, -38.8826f, 5.21852f), 0.45096f);
  data[31].mBoundingSphere = Sphere(Vector3(-31.184f, -25.3439f, -21.6522f), 2.79692f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(4.86922f, 9.04562f, -18.3219f));
  ray.mDirection = Vector3(Vector3(0.0620407f, -0.257009f, -0.964415f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRaySphereTests", Application::mStatistics.mRaySphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(35);
  data[0].mBoundingSphere = Sphere(Vector3(-40.6788f, 20.1842f, 10.0033f), 1.48889f);
  data[1].mBoundingSphere = Sphere(Vector3(-37.9822f, -3.8293f, -27.189f), 3.05217f);
  data[2].mBoundingSphere = Sphere(Vector3(-21.2522f, -10.6417f, -29.8238f), 1.00681f);
  data[3].mBoundingSphere = Sphere(Vector3(1.40734f, -8.34536f, -37.4009f), 3.23112f);
  data[4].mBoundingSphere = Sphere(Vector3(-13.8617f, 12.937f, 28.4589f), 2.11351f);
  data[5].mBoundingSphere = Sphere(Vector3(-15.0252f, 9.1951f, -26.6559f), 1.3553f);
  data[6].mBoundingSphere = Sphere(Vector3(29.1962f, 22.7544f, 23.9902f), 3.89006f);
  data[7].mBoundingSphere = Sphere(Vector3(-18.4959f, -14.6588f, 27.1834f), 0.463601f);
  data[8].mBoundingSphere = Sphere(Vector3(15.778f, -0.346474f, -17.1926f), 0.318754f);
  data[9].mBoundingSphere = Sphere(Vector3(3.97459f, 4.91111f, -18.2996f), 2.92739f);
  data[10].mBoundingSphere = Sphere(Vector3(-26.0683f, 14.4135f, -34.9593f), 1.61449f);
  data[11].mBoundingSphere = Sphere(Vector3(18.4331f, -28.1758f, 34.4903f), 1.61843f);
  data[12].mBoundingSphere = Sphere(Vector3(-30.2984f, -25.7141f, 9.01221f), 2.82951f);
  data[13].mBoundingSphere = Sphere(Vector3(-9.36997f, -11.4224f, -38.5302f), 1.95208f);
  data[14].mBoundingSphere = Sphere(Vector3(35.3804f, 14.4691f, -4.73601f), 2.33385f);
  data[15].mBoundingSphere = Sphere(Vector3(-3.48489f, 28.8571f, -10.7596f), 2.60488f);
  data[16].mBoundingSphere = Sphere(Vector3(-12.8934f, -0.926247f, 6.58036f), 1.77151f);
  data[17].mBoundingSphere = Sphere(Vector3(-38.4573f, -19.6831f, 1.18045f), 3.308f);
  data[18].mBoundingSphere = Sphere(Vector3(-13.6149f, -8.27118f, -5.14756f), 2.69023f);
  data[19].mBoundingSphere = Sphere(Vector3(-42.4391f, 9.67575f, -9.50297f), 1.71469f);
  data[20].mBoundingSphere = Sphere(Vector3(18.1474f, 6.08225f, -0.120913f), 3.6471f);
  data[21].mBoundingSphere = Sphere(Vector3(-23.2216f, 5.21006f, 40.5587f), 2.14366f);
  data[22].mBoundingSphere = Sphere(Vector3(-15.6401f, -35.9171f, -6.77132f), 1.58932f);
  data[23].mBoundingSphere = Sphere(Vector3(41.1087f, -22.3452f, 2.77363f), 1.99684f);
  data[24].mBoundingSphere = Sphere(Vector3(6.60036f, -28.6144f, -21.4833f), 1.30937f);
  data[25].mBoundingSphere = Sphere(Vector3(13.0042f, -34.592f, -5.84045f), 1.45236f);
  data[26].mBoundingSphere = Sphere(Vector3(-11.6885f, 32.7699f, 25.6274f), 2.57577f);
  data[27].mBoundingSphere = Sphere(Vector3(14.0957f, 26.5999f, -23.4702f), 2.23284f);
  data[28].mBoundingSphere = Sphere(Vector3(-6.9253f, -4.49236f, -23.9677f), 2.93818f);
  data[29].mBoundingSphere = Sphere(Vector3(11.9668f, 40.0205f, -6.69683f), 3.04788f);
  data[30].mBoundingSphere = Sphere(Vector3(3.96702f, -20.2419f, 20.064f), 1.00785f);
  data[31].mBoundingSphere = Sphere(Vector3(41.8707f, -23.2612f, -4.71055f), 3.1119f);
  data[32].mBoundingSphere = Sphere(Vector3(11.8044f, -44.2936f, 15.3309f), 0.213684f);
  data[33].mBoundingSphere = Sphere(Vector3(-38.2953f, 3.79411f, -18.1491f), 2.33803f);
  data[34].mBoundingSphere = Sphere(Vector3(40.1409f, -10.9722f, 25.1429f), 1.63235f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-60.8324f, 57.6851f, 88.24f), Vector3(-8.42748f, 101.142f, -23.2433f), Vector3(-8.42748f, -23.8633f, -71.9713f), Vector3(-60.8324f, -67.3203f, 39.512f), Vector3(28.8177f, 9.91559f, 38.402f), Vector3(30.9882f, 11.7155f, 33.7846f), Vector3(30.9882f, 3.3761f, 30.5338f), Vector3(28.8177f, 1.57619f, 35.1513f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(60);
  data[0].mBoundingSphere = Sphere(Vector3(-15.6538f, -27.9841f, 23.3984f), 3.29119f);
  data[1].mBoundingSphere = Sphere(Vector3(-19.4662f, 32.3109f, 8.57204f), 3.15887f);
  data[2].mBoundingSphere = Sphere(Vector3(35.1317f, -8.43963f, -26.5631f), 0.78797f);
  data[3].mBoundingSphere = Sphere(Vector3(21.3594f, -11.1214f, 28.5557f), 1.75563f);
  data[4].mBoundingSphere = Sphere(Vector3(-8.55567f, 25.2498f, -39.3301f), 2.43115f);
  data[5].mBoundingSphere = Sphere(Vector3(-3.04367f, 14.8576f, 37.6966f), 3.03547f);
  data[6].mBoundingSphere = Sphere(Vector3(-4.14442f, -48.5883f, 5.0587f), 3.34082f);
  data[7].mBoundingSphere = Sphere(Vector3(8.97864f, 13.4579f, 14.8417f), 2.02885f);
  data[8].mBoundingSphere = Sphere(Vector3(-21.2318f, -12.671f, -0.254307f), 3.62739f);
  data[9].mBoundingSphere = Sphere(Vector3(-2.45501f, -10.0309f, 1.14117f), 0.842012f);
  data[10].mBoundingSphere = Sphere(Vector3(4.42291f, -31.8206f, 26.5015f), 0.805597f);
  data[11].mBoundingSphere = Sphere(Vector3(-39.0947f, 18.5278f, -22.6518f), 2.25882f);
  data[12].mBoundingSphere = Sphere(Vector3(-6.47844f, 37.0084f, -18.5416f), 3.58541f);
  data[13].mBoundingSphere = Sphere(Vector3(13.8514f, 13.9775f, 25.2237f), 1.91798f);
  data[14].mBoundingSphere = Sphere(Vector3(-2.52973f, -16.8146f, 40.8507f), 2.43521f);
  data[15].mBoundingSphere = Sphere(Vector3(30.5349f, 21.0493f, -7.68311f), 1.8658f);
  data[16].mBoundingSphere = Sphere(Vector3(40.8205f, 26.1087f, -12.2759f), 3.3232f);
  data[17].mBoundingSphere = Sphere(Vector3(-22.2681f, 19.4942f, 13.302f), 3.6834f);
  data[18].mBoundingSphere = Sphere(Vector3(-32.4333f, -4.90019f, -26.7377f), 3.0313f);
  data[19].mBoundingSphere = Sphere(Vector3(13.5288f, 30.0631f, -21.0413f), 3.98863f);
  data[20].mBoundingSphere = Sphere(Vector3(-11.0624f, 24.5133f, 1.96768f), 1.04554f);
  data[21].mBoundingSphere = Sphere(Vector3(-7.10387f, 11.2907f, -28.1315f), 3.71402f);
  data[22].mBoundingSphere = Sphere(Vector3(18.4302f, -2.06361f, -35.4557f), 2.4206f);
  data[23].mBoundingSphere = Sphere(Vector3(46.6187f, 4.42476f, 16.6223f), 0.758977f);
  data[24].mBoundingSphere = Sphere(Vector3(-39.1843f, 11.0547f, -5.40094f), 0.219599f);
  data[25].mBoundingSphere = Sphere(Vector3(-27.9297f, 9.74071f, -3.09601f), 0.216816f);
  data[26].mBoundingSphere = Sphere(Vector3(-21.0148f, 8.90386f, 6.95139f), 2.1294f);
  data[27].mBoundingSphere = Sphere(Vector3(21.2608f, -32.3625f, 10.8209f), 0.377319f);
  data[28].mBoundingSphere = Sphere(Vector3(20.1409f, -34.1003f, 30.4807f), 2.44971f);
  data[29].mBoundingSphere = Sphere(Vector3(-9.09743f, 6.36312f, -42.8785f), 3.90444f);
  data[30].mBoundingSphere = Sphere(Vector3(-18.9318f, 21.9739f, 8.12131f), 2.05866f);
  data[31].mBoundingSphere = Sphere(Vector3(-39.0716f, 9.15264f, -28.477f), 0.987555f);
  data[32].mBoundingSphere = Sphere(Vector3(2.56771f, 30.553f, 3.99628f), 0.351921f);
  data[33].mBoundingSphere = Sphere(Vector3(3.1821f, -33.1377f, 5.19161f), 0.470327f);
  data[34].mBoundingSphere = Sphere(Vector3(37.1787f, 1.90872f, -3.50679f), 0.958562f);
  data[35].mBoundingSphere = Sphere(Vector3(9.30403f, -12.8652f, 9.09628f), 2.55176f);
  data[36].mBoundingSphere = Sphere(Vector3(-20.1653f, -3.13771f, 36.3448f), 0.829719f);
  data[37].mBoundingSphere = Sphere(Vector3(-25.7997f, -13.5815f, 21.1715f), 0.463948f);
  data[38].mBoundingSphere = Sphere(Vector3(42.5682f, 2.3655f, -8.84052f), 0.704355f);
  data[39].mBoundingSphere = Sphere(Vector3(0.272471f, -1.9331f, -23.7649f), 3.5251f);
  data[40].mBoundingSphere = Sphere(Vector3(-4.2666f, 39.741f, 5.92018f), 2.74856f);
  data[41].mBoundingSphere = Sphere(Vector3(37.8026f, -1.61383f, -17.3396f), 1.7656f);
  data[42].mBoundingSphere = Sphere(Vector3(40.722f, 5.23294f, 25.3794f), 2.97076f);
  data[43].mBoundingSphere = Sphere(Vector3(-32.4324f, 16.2556f, -21.0673f), 1.33152f);
  data[44].mBoundingSphere = Sphere(Vector3(-22.0799f, 25.928f, 13.7806f), 1.21103f);
  data[45].mBoundingSphere = Sphere(Vector3(28.0032f, -19.1618f, 23.4458f), 1.46129f);
  data[46].mBoundingSphere = Sphere(Vector3(-9.70615f, 15.2059f, 40.9728f), 2.1069f);
  data[47].mBoundingSphere = Sphere(Vector3(42.012f, 14.9464f, -7.27627f), 0.438203f);
  data[48].mBoundingSphere = Sphere(Vector3(-19.0485f, -31.6313f, -32.2024f), 3.23193f);
  data[49].mBoundingSphere = Sphere(Vector3(-30.4575f, -12.7946f, -25.0837f), 3.91801f);
  data[50].mBoundingSphere = Sphere(Vector3(-46.1231f, -10.1349f, 13.5398f), 0.811743f);
  data[51].mBoundingSphere = Sphere(Vector3(-21.5501f, -10.9464f, -16.5091f), 1.43068f);
  data[52].mBoundingSphere = Sphere(Vector3(-35.0701f, -27.2082f, 22.2449f), 1.61298f);
  data[53].mBoundingSphere = Sphere(Vector3(4.29066f, 16.0258f, 12.1988f), 2.25847f);
  data[54].mBoundingSphere = Sphere(Vector3(23.5282f, 9.37022f, 22.0149f), 3.0088f);
  data[55].mBoundingSphere = Sphere(Vector3(10.8631f, 36.1275f, -21.8438f), 1.48773f);
  data[56].mBoundingSphere = Sphere(Vector3(1.8599f, -3.67335f, 12.9155f), 2.01818f);
  data[57].mBoundingSphere = Sphere(Vector3(-12.2326f, -30.6942f, -13.8372f), 1.63652f);
  data[58].mBoundingSphere = Sphere(Vector3(16.5213f, -13.0604f, -45.1976f), 2.92124f);
  data[59].mBoundingSphere = Sphere(Vector3(23.8369f, 13.1947f, -27.5803f), 2.45667f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(3.971f, -46.6626f, -18.4929f), Vector3(-29.4307f, -29.8088f, 43.7408f), Vector3(-29.4307f, 36.5549f, 25.7686f), Vector3(3.971f, 19.7011f, -36.4651f), Vector3(46.3189f, -0.983371f, 28.8659f), Vector3(42.0912f, 1.14983f, 36.7429f), Vector3(42.0912f, 6.29569f, 35.3493f), Vector3(46.3189f, 4.16249f, 27.4723f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(42);
  data[0].mBoundingSphere = Sphere(Vector3(4.78075f, 7.61621f, -47.838f), 2.89631f);
  data[1].mBoundingSphere = Sphere(Vector3(11.4842f, -38.6495f, -24.4988f), 3.85968f);
  data[2].mBoundingSphere = Sphere(Vector3(-7.74841f, -25.3192f, -2.88155f), 3.44647f);
  data[3].mBoundingSphere = Sphere(Vector3(-10.6156f, -19.6711f, -5.48511f), 1.49794f);
  data[4].mBoundingSphere = Sphere(Vector3(4.42309f, 18.4315f, -28.4159f), 2.13589f);
  data[5].mBoundingSphere = Sphere(Vector3(14.5115f, 0.792443f, 25.8144f), 1.50385f);
  data[6].mBoundingSphere = Sphere(Vector3(15.2171f, -12.7772f, 22.3633f), 3.7197f);
  data[7].mBoundingSphere = Sphere(Vector3(-30.4255f, 36.1755f, -7.17741f), 3.88101f);
  data[8].mBoundingSphere = Sphere(Vector3(4.38626f, 42.9903f, 19.5655f), 0.469747f);
  data[9].mBoundingSphere = Sphere(Vector3(-12.4824f, 16.4985f, -41.1058f), 2.59908f);
  data[10].mBoundingSphere = Sphere(Vector3(25.9008f, -0.921688f, -3.51607f), 3.24329f);
  data[11].mBoundingSphere = Sphere(Vector3(16.2198f, -7.27389f, -8.10737f), 1.70031f);
  data[12].mBoundingSphere = Sphere(Vector3(-0.706854f, -5.17641f, -26.6512f), 0.824732f);
  data[13].mBoundingSphere = Sphere(Vector3(-0.749799f, 36.2845f, 6.45623f), 1.47904f);
  data[14].mBoundingSphere = Sphere(Vector3(17.2292f, -0.368426f, 10.8282f), 3.34477f);
  data[15].mBoundingSphere = Sphere(Vector3(16.3615f, 31.8433f, -28.3568f), 0.337657f);
  data[16].mBoundingSphere = Sphere(Vector3(14.9804f, 31.05f, 26.0559f), 2.57229f);
  data[17].mBoundingSphere = Sphere(Vector3(-22.1999f, 17.6291f, -34.8078f), 0.916581f);
  data[18].mBoundingSphere = Sphere(Vector3(32.9582f, -19.7852f, 0.205305f), 1.08346f);
  data[19].mBoundingSphere = Sphere(Vector3(10.4244f, 29.9039f, -22.0181f), 1.50049f);
  data[20].mBoundingSphere = Sphere(Vector3(16.1264f, 29.2156f, -26.4618f), 3.90398f);
  data[21].mBoundingSphere = Sphere(Vector3(18.4744f, -28.5846f, -6.45209f), 3.0981f);
  data[22].mBoundingSphere = Sphere(Vector3(17.9388f, -8.33992f, 23.6399f), 3.02678f);
  data[23].mBoundingSphere = Sphere(Vector3(-5.87924f, -2.20857f, 24.0165f), 1.79772f);
  data[24].mBoundingSphere = Sphere(Vector3(-29.7863f, -3.08379f, -22.0295f), 0.405963f);
  data[25].mBoundingSphere = Sphere(Vector3(11.6038f, 23.2153f, -40.0158f), 0.598358f);
  data[26].mBoundingSphere = Sphere(Vector3(-46.9544f, -6.63431f, -11.1799f), 1.02397f);
  data[27].mBoundingSphere = Sphere(Vector3(-23.0882f, 19.9788f, -17.1022f), 2.71424f);
  data[28].mBoundingSphere = Sphere(Vector3(-29.816f, 25.8304f, -6.06223f), 2.63491f);
  data[29].mBoundingSphere = Sphere(Vector3(-16.2978f, -13.65f, -16.1494f), 1.55616f);
  data[30].mBoundingSphere = Sphere(Vector3(-37.9962f, -20.9421f, -14.0036f), 1.18215f);
  data[31].mBoundingSphere = Sphere(Vector3(-38.1199f, -2.81198f, 4.36175f), 1.58619f);
  data[32].mBoundingSphere = Sphere(Vector3(-38.2284f, 19.2524f, 9.07336f), 0.491897f);
  data[33].mBoundingSphere = Sphere(Vector3(14.8277f, 13.6666f, 27.3663f), 1.6487f);
  data[34].mBoundingSphere = Sphere(Vector3(-44.462f, -10.4064f, 8.50677f), 3.44068f);
  data[35].mBoundingSphere = Sphere(Vector3(-29.9677f, -17.1522f, 26.6725f), 1.57576f);
  data[36].mBoundingSphere = Sphere(Vector3(12.968f, -11.5229f, -7.80971f), 3.59828f);
  data[37].mBoundingSphere = Sphere(Vector3(-18.8337f, -6.98446f, -44.183f), 1.66714f);
  data[38].mBoundingSphere = Sphere(Vector3(-10.2561f, 0.639983f, -19.722f), 3.94619f);
  data[39].mBoundingSphere = Sphere(Vector3(4.35893f, 12.4657f, 24.2217f), 2.64651f);
  data[40].mBoundingSphere = Sphere(Vector3(-2.07949f, -35.0832f, -1.88075f), 1.86997f);
  data[41].mBoundingSphere = Sphere(Vector3(4.32847f, -15.8144f, 12.5669f), 2.29118f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-81.8643f, -12.6721f, 8.72603f), Vector3(14.2567f, -70.5252f, 68.9857f), Vector3(79.6266f, 38.0846f, 68.9857f), Vector3(-16.4944f, 95.9377f, 8.72603f), Vector3(27.4253f, -9.91242f, -38.8541f), Vector3(34.8995f, -14.411f, -34.1684f), Vector3(39.7053f, -6.42633f, -34.1684f), Vector3(32.2311f, -1.92775f, -38.8541f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(62);
  data[0].mBoundingSphere = Sphere(Vector3(15.5644f, -35.8843f, 6.41483f), 1.44912f);
  data[1].mBoundingSphere = Sphere(Vector3(7.70645f, 22.1754f, -36.3568f), 1.57506f);
  data[2].mBoundingSphere = Sphere(Vector3(38.3959f, -14.5456f, 6.01683f), 1.81929f);
  data[3].mBoundingSphere = Sphere(Vector3(-31.3744f, -13.7426f, 23.0739f), 1.91543f);
  data[4].mBoundingSphere = Sphere(Vector3(5.6594f, -20.6771f, -43.6626f), 1.82289f);
  data[5].mBoundingSphere = Sphere(Vector3(-31.9667f, 16.1759f, 25.331f), 1.84191f);
  data[6].mBoundingSphere = Sphere(Vector3(12.5089f, -9.30928f, 39.9566f), 2.46977f);
  data[7].mBoundingSphere = Sphere(Vector3(-7.28696f, -14.4572f, -38.895f), 2.2151f);
  data[8].mBoundingSphere = Sphere(Vector3(4.70118f, 7.02898f, -30.195f), 1.09065f);
  data[9].mBoundingSphere = Sphere(Vector3(0.590101f, 4.93812f, 38.6456f), 0.40202f);
  data[10].mBoundingSphere = Sphere(Vector3(14.968f, 23.5436f, 34.344f), 2.75228f);
  data[11].mBoundingSphere = Sphere(Vector3(38.9627f, -22.9247f, 19.7732f), 2.87915f);
  data[12].mBoundingSphere = Sphere(Vector3(-10.2469f, -15.2794f, -29.2582f), 3.6471f);
  data[13].mBoundingSphere = Sphere(Vector3(-34.6587f, 4.09956f, -5.44052f), 2.20884f);
  data[14].mBoundingSphere = Sphere(Vector3(17.1234f, 17.506f, -5.87071f), 3.4583f);
  data[15].mBoundingSphere = Sphere(Vector3(0.594756f, -19.8448f, 42.1327f), 1.99209f);
  data[16].mBoundingSphere = Sphere(Vector3(-3.40674f, 0.0653329f, -49.2946f), 1.09923f);
  data[17].mBoundingSphere = Sphere(Vector3(37.0653f, -25.2273f, 0.359881f), 2.39625f);
  data[18].mBoundingSphere = Sphere(Vector3(16.1617f, -3.53343f, -10.0747f), 0.428809f);
  data[19].mBoundingSphere = Sphere(Vector3(13.5079f, -21.9093f, -14.3463f), 3.25675f);
  data[20].mBoundingSphere = Sphere(Vector3(25.8299f, -5.9333f, 29.8669f), 3.14112f);
  data[21].mBoundingSphere = Sphere(Vector3(-9.11234f, -43.5882f, 0.97736f), 1.9544f);
  data[22].mBoundingSphere = Sphere(Vector3(2.7223f, 31.5938f, -38.3079f), 0.229688f);
  data[23].mBoundingSphere = Sphere(Vector3(-35.3735f, -28.3568f, -2.17059f), 1.26878f);
  data[24].mBoundingSphere = Sphere(Vector3(31.0415f, 9.56308f, -23.27f), 3.82871f);
  data[25].mBoundingSphere = Sphere(Vector3(1.40531f, 43.0317f, 16.4825f), 0.604157f);
  data[26].mBoundingSphere = Sphere(Vector3(-34.9359f, -3.41394f, 11.8229f), 1.6262f);
  data[27].mBoundingSphere = Sphere(Vector3(1.63831f, -0.767023f, 28.9007f), 0.992889f);
  data[28].mBoundingSphere = Sphere(Vector3(16.6848f, 7.55171f, -29.3052f), 1.05528f);
  data[29].mBoundingSphere = Sphere(Vector3(-32.8167f, -10.7857f, -12.4765f), 1.07233f);
  data[30].mBoundingSphere = Sphere(Vector3(36.4201f, 5.29914f, 11.1249f), 3.65824f);
  data[31].mBoundingSphere = Sphere(Vector3(-2.6509f, -14.6951f, 15.8543f), 3.03698f);
  data[32].mBoundingSphere = Sphere(Vector3(-11.7802f, 36.58f, -24.9743f), 0.82624f);
  data[33].mBoundingSphere = Sphere(Vector3(2.23789f, 0.865005f, -41.7391f), 1.96634f);
  data[34].mBoundingSphere = Sphere(Vector3(0.559568f, 22.229f, -33.1534f), 2.31507f);
  data[35].mBoundingSphere = Sphere(Vector3(-20.5046f, -9.76092f, 27.4017f), 0.326872f);
  data[36].mBoundingSphere = Sphere(Vector3(-29.9772f, -21.4156f, -24.6333f), 2.53402f);
  data[37].mBoundingSphere = Sphere(Vector3(17.955f, 38.0131f, 5.46106f), 2.04973f);
  data[38].mBoundingSphere = Sphere(Vector3(-41.5247f, -17.7254f, -12.7903f), 2.41121f);
  data[39].mBoundingSphere = Sphere(Vector3(-5.70256f, 6.40971f, 5.69009f), 1.38232f);
  data[40].mBoundingSphere = Sphere(Vector3(42.8391f, 6.95631f, 4.35153f), 3.23332f);
  data[41].mBoundingSphere = Sphere(Vector3(36.6943f, -15.6926f, -11.8889f), 0.716648f);
  data[42].mBoundingSphere = Sphere(Vector3(18.7095f, -18.6853f, -7.74354f), 2.86024f);
  data[43].mBoundingSphere = Sphere(Vector3(34.1051f, -19.1615f, -19.3918f), 0.391119f);
  data[44].mBoundingSphere = Sphere(Vector3(-34.3557f, 6.38309f, 21.028f), 1.91543f);
  data[45].mBoundingSphere = Sphere(Vector3(-16.051f, -9.43782f, -7.94601f), 2.26764f);
  data[46].mBoundingSphere = Sphere(Vector3(7.25631f, 36.2878f, 5.16683f), 0.950444f);
  data[47].mBoundingSphere = Sphere(Vector3(-24.0119f, -15.2253f, -13.9425f), 0.484359f);
  data[48].mBoundingSphere = Sphere(Vector3(-4.78642f, 25.3356f, 3.88248f), 3.78453f);
  data[49].mBoundingSphere = Sphere(Vector3(0.443629f, 18.0357f, -41.6636f), 1.18331f);
  data[50].mBoundingSphere = Sphere(Vector3(-20.7209f, 14.6236f, -15.9381f), 0.419764f);
  data[51].mBoundingSphere = Sphere(Vector3(16.1589f, -9.62886f, 37.8357f), 2.81188f);
  data[52].mBoundingSphere = Sphere(Vector3(12.4707f, -11.9813f, -43.7956f), 1.73127f);
  data[53].mBoundingSphere = Sphere(Vector3(-5.36344f, -0.884126f, -11.9894f), 1.60069f);
  data[54].mBoundingSphere = Sphere(Vector3(-29.1493f, -29.5219f, -2.96908f), 0.530979f);
  data[55].mBoundingSphere = Sphere(Vector3(2.34428f, 15.157f, 14.82f), 3.21639f);
  data[56].mBoundingSphere = Sphere(Vector3(-22.2446f, 16.8045f, 6.05902f), 3.40867f);
  data[57].mBoundingSphere = Sphere(Vector3(23.1213f, 28.5134f, 21.4326f), 2.58771f);
  data[58].mBoundingSphere = Sphere(Vector3(30.1029f, 24.1933f, -10.8559f), 0.346007f);
  data[59].mBoundingSphere = Sphere(Vector3(-2.83418f, 14.6325f, -25.0481f), 0.309128f);
  data[60].mBoundingSphere = Sphere(Vector3(-11.175f, 36.7682f, -15.6328f), 1.30694f);
  data[61].mBoundingSphere = Sphere(Vector3(-27.8328f, -8.321f, 11.9001f), 2.4177f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(20.1041f, 13.5037f, -64.6238f), Vector3(-25.0262f, -56.4566f, -32.1508f), Vector3(-25.0262f, -19.0143f, 48.5157f), Vector3(20.1041f, 50.9461f, 16.0428f), Vector3(28.0609f, -15.9407f, -6.81324f), Vector3(23.3735f, -23.2071f, -3.44044f), Vector3(23.3735f, -19.4804f, 4.58852f), Vector3(28.0609f, -12.2139f, 1.21571f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(61);
  data[0].mBoundingSphere = Sphere(Vector3(33.1719f, 22.7641f, -26.7511f), 0.408747f);
  data[1].mBoundingSphere = Sphere(Vector3(6.19569f, -14.451f, 41.4299f), 0.403296f);
  data[2].mBoundingSphere = Sphere(Vector3(-0.607668f, -4.37494f, -29.2225f), 0.274453f);
  data[3].mBoundingSphere = Sphere(Vector3(-0.495751f, 38.7298f, 26.0966f), 3.93958f);
  data[4].mBoundingSphere = Sphere(Vector3(10.9858f, 3.36829f, -19.7298f), 1.98142f);
  data[5].mBoundingSphere = Sphere(Vector3(13.4608f, 23.972f, -27.4293f), 0.830183f);
  data[6].mBoundingSphere = Sphere(Vector3(-27.1682f, -19.0802f, -32.1884f), 1.95753f);
  data[7].mBoundingSphere = Sphere(Vector3(15.6734f, -5.95824f, -32.9052f), 1.97968f);
  data[8].mBoundingSphere = Sphere(Vector3(-27.3395f, -15.9345f, -30.324f), 2.8614f);
  data[9].mBoundingSphere = Sphere(Vector3(39.2371f, 13.3602f, -0.418727f), 0.5137f);
  data[10].mBoundingSphere = Sphere(Vector3(17.5203f, -11.2154f, -25.3972f), 1.7823f);
  data[11].mBoundingSphere = Sphere(Vector3(34.1279f, -16.8971f, 1.48293f), 3.91615f);
  data[12].mBoundingSphere = Sphere(Vector3(22.9612f, -39.8817f, -17.2567f), 1.71399f);
  data[13].mBoundingSphere = Sphere(Vector3(-41.9156f, 24.5486f, -8.50472f), 2.04022f);
  data[14].mBoundingSphere = Sphere(Vector3(-0.789624f, 17.8341f, 2.78396f), 0.704007f);
  data[15].mBoundingSphere = Sphere(Vector3(1.06788f, -0.911072f, 22.0828f), 3.9964f);
  data[16].mBoundingSphere = Sphere(Vector3(-31.5335f, -35.8294f, 1.69805f), 0.477981f);
  data[17].mBoundingSphere = Sphere(Vector3(5.2518f, -1.58932f, -10.4601f), 3.31276f);
  data[18].mBoundingSphere = Sphere(Vector3(-18.1676f, -1.03927f, -18.961f), 0.338585f);
  data[19].mBoundingSphere = Sphere(Vector3(12.2321f, -29.3823f, 37.7985f), 0.572497f);
  data[20].mBoundingSphere = Sphere(Vector3(-12.6425f, -22.4089f, -5.61882f), 2.94003f);
  data[21].mBoundingSphere = Sphere(Vector3(2.38512f, 17.5293f, 39.4863f), 3.72585f);
  data[22].mBoundingSphere = Sphere(Vector3(18.1944f, -7.9134f, 33.1462f), 1.53725f);
  data[23].mBoundingSphere = Sphere(Vector3(21.1571f, 20.4677f, 16.8763f), 2.27587f);
  data[24].mBoundingSphere = Sphere(Vector3(-13.104f, -6.53336f, 32.6169f), 1.90987f);
  data[25].mBoundingSphere = Sphere(Vector3(11.0902f, -34.884f, 10.9909f), 2.74114f);
  data[26].mBoundingSphere = Sphere(Vector3(-18.7537f, 34.9915f, -25.013f), 2.96183f);
  data[27].mBoundingSphere = Sphere(Vector3(1.14538f, -4.14104f, 22.1041f), 3.79207f);
  data[28].mBoundingSphere = Sphere(Vector3(17.1897f, 9.4937f, -16.1858f), 0.595111f);
  data[29].mBoundingSphere = Sphere(Vector3(-22.5135f, 34.6952f, -20.3168f), 2.26218f);
  data[30].mBoundingSphere = Sphere(Vector3(11.4315f, 12.9163f, -19.7816f), 3.45969f);
  data[31].mBoundingSphere = Sphere(Vector3(-24.2038f, 2.63256f, -2.86768f), 3.4358f);
  data[32].mBoundingSphere = Sphere(Vector3(18.5524f, 19.8003f, 8.05495f), 3.57682f);
  data[33].mBoundingSphere = Sphere(Vector3(7.467f, -43.2165f, -22.0543f), 1.40887f);
  data[34].mBoundingSphere = Sphere(Vector3(-19.0746f, -9.59254f, -33.964f), 0.638832f);
  data[35].mBoundingSphere = Sphere(Vector3(-1.41894f, -2.13435f, 28.4672f), 1.7264f);
  data[36].mBoundingSphere = Sphere(Vector3(26.8018f, 0.521709f, -29.6425f), 3.98365f);
  data[37].mBoundingSphere = Sphere(Vector3(-13.8902f, 10.6404f, 27.084f), 2.69348f);
  data[38].mBoundingSphere = Sphere(Vector3(3.80517f, -34.7215f, 7.5777f), 0.842824f);
  data[39].mBoundingSphere = Sphere(Vector3(-6.05901f, -24.3117f, -14.7211f), 3.76238f);
  data[40].mBoundingSphere = Sphere(Vector3(-33.3126f, 12.7698f, -17.4318f), 1.06734f);
  data[41].mBoundingSphere = Sphere(Vector3(3.92399f, -0.446986f, -31.043f), 2.99442f);
  data[42].mBoundingSphere = Sphere(Vector3(17.054f, -20.5354f, 31.4417f), 2.52567f);
  data[43].mBoundingSphere = Sphere(Vector3(14.9712f, 10.7933f, -26.6841f), 2.59641f);
  data[44].mBoundingSphere = Sphere(Vector3(2.3563f, -13.9075f, -10.3161f), 2.5782f);
  data[45].mBoundingSphere = Sphere(Vector3(40.1936f, -16.3207f, -4.79109f), 3.53252f);
  data[46].mBoundingSphere = Sphere(Vector3(23.1355f, 31.5809f, -11.8309f), 2.42698f);
  data[47].mBoundingSphere = Sphere(Vector3(-44.6923f, 12.5994f, -13.0525f), 0.610535f);
  data[48].mBoundingSphere = Sphere(Vector3(25.4823f, 8.55146f, -34.2991f), 0.538981f);
  data[49].mBoundingSphere = Sphere(Vector3(-21.7378f, 13.1546f, 37.2134f), 0.844795f);
  data[50].mBoundingSphere = Sphere(Vector3(10.206f, 36.3291f, -8.49574f), 1.7467f);
  data[51].mBoundingSphere = Sphere(Vector3(-2.57359f, -15.0585f, -0.63041f), 0.491317f);
  data[52].mBoundingSphere = Sphere(Vector3(14.8172f, 19.7375f, 35.4311f), 0.220875f);
  data[53].mBoundingSphere = Sphere(Vector3(-25.3568f, 13.3297f, -2.65245f), 0.560668f);
  data[54].mBoundingSphere = Sphere(Vector3(20.9966f, 0.477184f, 24.6014f), 0.920756f);
  data[55].mBoundingSphere = Sphere(Vector3(-1.42882f, 9.83001f, -28.8941f), 3.80447f);
  data[56].mBoundingSphere = Sphere(Vector3(14.4309f, -9.28858f, 20.973f), 3.51803f);
  data[57].mBoundingSphere = Sphere(Vector3(24.3905f, -3.38659f, -29.4202f), 0.776141f);
  data[58].mBoundingSphere = Sphere(Vector3(30.3935f, 7.51131f, 36.2725f), 1.99545f);
  data[59].mBoundingSphere = Sphere(Vector3(44.3866f, 10.1242f, -7.66617f), 1.96948f);
  data[60].mBoundingSphere = Sphere(Vector3(-3.70332f, 32.4415f, -16.1943f), 3.72225f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-51.7127f, -97.8463f, -6.48696f), Vector3(63.0913f, -38.0422f, 56.1214f), Vector3(-3.36095f, 89.5238f, 56.1214f), Vector3(-118.165f, 29.7197f, -6.48696f), Vector3(0.00122213f, 5.05344f, -44.8805f), Vector3(7.23173f, 8.81999f, -40.9374f), Vector3(3.02737f, 16.8909f, -40.9374f), Vector3(-4.20313f, 13.1244f, -44.8805f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest6(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(39);
  data[0].mBoundingSphere = Sphere(Vector3(-28.8785f, 15.859f, 9.84905f), 3.5055f);
  data[1].mBoundingSphere = Sphere(Vector3(-1.9133f, 28.0832f, -35.985f), 3.95697f);
  data[2].mBoundingSphere = Sphere(Vector3(-22.0716f, -31.1758f, 10.047f), 2.81838f);
  data[3].mBoundingSphere = Sphere(Vector3(-17.459f, -37.2308f, 3.25673f), 3.81584f);
  data[4].mBoundingSphere = Sphere(Vector3(-32.1251f, 33.6273f, 0.120641f), 0.949632f);
  data[5].mBoundingSphere = Sphere(Vector3(40.6194f, -6.66784f, 27.2836f), 0.433448f);
  data[6].mBoundingSphere = Sphere(Vector3(-37.1478f, 12.3198f, -4.30784f), 2.2964f);
  data[7].mBoundingSphere = Sphere(Vector3(-14.2929f, -6.57008f, -23.9886f), 1.61484f);
  data[8].mBoundingSphere = Sphere(Vector3(-19.179f, -4.30693f, 30.6459f), 2.84528f);
  data[9].mBoundingSphere = Sphere(Vector3(-19.8594f, -2.83706f, -40.1309f), 0.824152f);
  data[10].mBoundingSphere = Sphere(Vector3(29.4918f, 9.12903f, 11.5631f), 1.70611f);
  data[11].mBoundingSphere = Sphere(Vector3(-13.1178f, -7.08642f, 25.629f), 3.20653f);
  data[12].mBoundingSphere = Sphere(Vector3(-7.80239f, 34.1694f, -9.36791f), 3.62054f);
  data[13].mBoundingSphere = Sphere(Vector3(-20.6286f, 32.7031f, 4.03263f), 0.783563f);
  data[14].mBoundingSphere = Sphere(Vector3(-17.3449f, -30.2674f, 32.0298f), 1.04566f);
  data[15].mBoundingSphere = Sphere(Vector3(-23.892f, -10.7173f, 34.5893f), 3.22509f);
  data[16].mBoundingSphere = Sphere(Vector3(14.2188f, 9.38906f, 37.5227f), 0.412458f);
  data[17].mBoundingSphere = Sphere(Vector3(-28.1f, -23.2884f, -15.4117f), 2.59421f);
  data[18].mBoundingSphere = Sphere(Vector3(-31.8158f, 13.9214f, -33.7114f), 1.35994f);
  data[19].mBoundingSphere = Sphere(Vector3(38.2242f, -11.3678f, -20.8624f), 1.26959f);
  data[20].mBoundingSphere = Sphere(Vector3(27.4742f, 36.4518f, 3.42677f), 1.14249f);
  data[21].mBoundingSphere = Sphere(Vector3(21.0785f, -16.0095f, 32.2962f), 0.44087f);
  data[22].mBoundingSphere = Sphere(Vector3(39.5434f, 2.3724f, 13.0482f), 1.41502f);
  data[23].mBoundingSphere = Sphere(Vector3(-11.2696f, 15.624f, 32.8579f), 2.37989f);
  data[24].mBoundingSphere = Sphere(Vector3(27.9179f, -2.63899f, 30.0954f), 2.1904f);
  data[25].mBoundingSphere = Sphere(Vector3(3.46176f, -42.2592f, 2.93274f), 3.68665f);
  data[26].mBoundingSphere = Sphere(Vector3(2.41991f, 9.7537f, -3.3999f), 1.97377f);
  data[27].mBoundingSphere = Sphere(Vector3(13.2156f, 27.1654f, 0.417682f), 2.31054f);
  data[28].mBoundingSphere = Sphere(Vector3(32.414f, 27.9563f, 18.5057f), 0.270394f);
  data[29].mBoundingSphere = Sphere(Vector3(-21.8848f, 15.8061f, -13.3044f), 3.14681f);
  data[30].mBoundingSphere = Sphere(Vector3(-27.521f, -33.8263f, -23.6455f), 2.47024f);
  data[31].mBoundingSphere = Sphere(Vector3(-13.402f, 38.4337f, -2.66276f), 3.20688f);
  data[32].mBoundingSphere = Sphere(Vector3(-12.273f, -13.859f, 30.6948f), 0.505582f);
  data[33].mBoundingSphere = Sphere(Vector3(-0.216826f, 18.0191f, -31.4427f), 1.96484f);
  data[34].mBoundingSphere = Sphere(Vector3(-13.8124f, 35.1867f, 14.5108f), 1.48518f);
  data[35].mBoundingSphere = Sphere(Vector3(-20.5719f, -29.9498f, -19.4904f), 2.67887f);
  data[36].mBoundingSphere = Sphere(Vector3(27.3843f, -28.2227f, 17.9479f), 1.70298f);
  data[37].mBoundingSphere = Sphere(Vector3(-8.81495f, -10.3071f, 16.1881f), 0.88666f);
  data[38].mBoundingSphere = Sphere(Vector3(-1.83044f, 32.0249f, -27.9251f), 1.02084f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-41.04f, -26.8453f, 4.17311f), Vector3(27.5862f, -49.0001f, 40.4492f), Vector3(53.812f, 32.2364f, 40.4492f), Vector3(-14.8142f, 54.3912f, 4.17311f), Vector3(22.0407f, -7.25372f, -18.5833f), Vector3(26.0163f, -8.53717f, -16.4818f), Vector3(28.8787f, 0.32959f, -16.4818f), Vector3(24.9032f, 1.61304f, -18.5833f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest7(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(73);
  data[0].mBoundingSphere = Sphere(Vector3(-3.92215f, 39.1475f, 16.1138f), 2.82684f);
  data[1].mBoundingSphere = Sphere(Vector3(-16.7537f, 42.1089f, -8.37571f), 1.40725f);
  data[2].mBoundingSphere = Sphere(Vector3(33.2309f, 16.9318f, 14.8695f), 0.751671f);
  data[3].mBoundingSphere = Sphere(Vector3(47.5674f, 3.09187f, 13.2624f), 3.71564f);
  data[4].mBoundingSphere = Sphere(Vector3(-18.8438f, -7.54862f, -6.11629f), 2.44426f);
  data[5].mBoundingSphere = Sphere(Vector3(44.7877f, -5.65067f, 3.37787f), 3.75066f);
  data[6].mBoundingSphere = Sphere(Vector3(23.0237f, -18.5693f, 23.0867f), 0.409558f);
  data[7].mBoundingSphere = Sphere(Vector3(1.51578f, 1.50861f, -37.2042f), 3.91314f);
  data[8].mBoundingSphere = Sphere(Vector3(6.35588f, -8.50718f, 41.2636f), 1.52937f);
  data[9].mBoundingSphere = Sphere(Vector3(-14.9627f, -7.57865f, -12.1715f), 2.61091f);
  data[10].mBoundingSphere = Sphere(Vector3(7.24741f, -1.53216f, 1.87913f), 2.79263f);
  data[11].mBoundingSphere = Sphere(Vector3(22.7724f, 23.4246f, -31.1376f), 0.627583f);
  data[12].mBoundingSphere = Sphere(Vector3(-1.43131f, 25.914f, -8.92444f), 1.70066f);
  data[13].mBoundingSphere = Sphere(Vector3(-9.41134f, 22.6741f, -9.95283f), 0.365374f);
  data[14].mBoundingSphere = Sphere(Vector3(-21.7706f, -22.0489f, 26.4139f), 3.34813f);
  data[15].mBoundingSphere = Sphere(Vector3(23.6686f, 14.0792f, -7.03044f), 1.76247f);
  data[16].mBoundingSphere = Sphere(Vector3(19.3729f, -28.0139f, -26.1346f), 1.37791f);
  data[17].mBoundingSphere = Sphere(Vector3(22.9808f, 28.152f, -31.1861f), 2.48659f);
  data[18].mBoundingSphere = Sphere(Vector3(12.9909f, 45.4712f, -6.17268f), 1.21196f);
  data[19].mBoundingSphere = Sphere(Vector3(13.3787f, -16.7533f, 8.31081f), 2.40286f);
  data[20].mBoundingSphere = Sphere(Vector3(0.0869381f, -5.1959f, 18.6208f), 1.95683f);
  data[21].mBoundingSphere = Sphere(Vector3(21.9951f, -26.4336f, -31.5996f), 0.916697f);
  data[22].mBoundingSphere = Sphere(Vector3(17.4995f, 35.3659f, -5.24926f), 1.58376f);
  data[23].mBoundingSphere = Sphere(Vector3(3.08019f, 14.6706f, -1.64348f), 2.39172f);
  data[24].mBoundingSphere = Sphere(Vector3(-16.8565f, 40.2403f, -10.254f), 2.5847f);
  data[25].mBoundingSphere = Sphere(Vector3(0.00735605f, 30.6903f, -12.1147f), 3.04301f);
  data[26].mBoundingSphere = Sphere(Vector3(-5.66485f, 44.2003f, -11.0896f), 2.90188f);
  data[27].mBoundingSphere = Sphere(Vector3(17.2235f, -2.17973f, -44.3335f), 1.10445f);
  data[28].mBoundingSphere = Sphere(Vector3(2.47f, 5.72169f, 31.685f), 2.53448f);
  data[29].mBoundingSphere = Sphere(Vector3(4.03929f, 10.6148f, 38.7309f), 3.6725f);
  data[30].mBoundingSphere = Sphere(Vector3(-14.324f, -10.6025f, -45.5087f), 3.0182f);
  data[31].mBoundingSphere = Sphere(Vector3(33.9343f, 34.9062f, -7.63827f), 3.62368f);
  data[32].mBoundingSphere = Sphere(Vector3(-28.3757f, 4.76142f, 37.6031f), 3.58088f);
  data[33].mBoundingSphere = Sphere(Vector3(13.5457f, -43.443f, -7.67426f), 2.60731f);
  data[34].mBoundingSphere = Sphere(Vector3(1.53961f, -5.22549f, 32.8297f), 1.5732f);
  data[35].mBoundingSphere = Sphere(Vector3(21.8924f, -10.1168f, 20.1953f), 0.314347f);
  data[36].mBoundingSphere = Sphere(Vector3(17.7262f, -22.7649f, -9.19854f), 0.974218f);
  data[37].mBoundingSphere = Sphere(Vector3(-37.9094f, -7.84363f, -4.56219f), 3.2194f);
  data[38].mBoundingSphere = Sphere(Vector3(24.6514f, 21.1461f, -13.804f), 2.37143f);
  data[39].mBoundingSphere = Sphere(Vector3(29.4633f, 16.1619f, -14.4358f), 3.39927f);
  data[40].mBoundingSphere = Sphere(Vector3(-12.932f, -44.2513f, -14.0351f), 1.01643f);
  data[41].mBoundingSphere = Sphere(Vector3(-6.78979f, 10.9305f, -29.6414f), 3.42571f);
  data[42].mBoundingSphere = Sphere(Vector3(-25.6497f, -12.6475f, -39.0042f), 0.555565f);
  data[43].mBoundingSphere = Sphere(Vector3(15.3923f, -44.7337f, -7.03995f), 3.73338f);
  data[44].mBoundingSphere = Sphere(Vector3(5.74339f, 28.5794f, -11.3152f), 0.635353f);
  data[45].mBoundingSphere = Sphere(Vector3(0.276578f, -3.47454f, -31.562f), 1.8629f);
  data[46].mBoundingSphere = Sphere(Vector3(20.192f, 11.1771f, -16.9325f), 3.98272f);
  data[47].mBoundingSphere = Sphere(Vector3(18.4548f, -0.571696f, 19.4475f), 3.57903f);
  data[48].mBoundingSphere = Sphere(Vector3(-39.4461f, -10.179f, 14.0495f), 1.16023f);
  data[49].mBoundingSphere = Sphere(Vector3(14.862f, 8.20438f, 1.25564f), 0.262856f);
  data[50].mBoundingSphere = Sphere(Vector3(-38.5554f, -12.4673f, 28.9609f), 1.39751f);
  data[51].mBoundingSphere = Sphere(Vector3(-6.70746f, 10.1145f, -44.1898f), 3.78093f);
  data[52].mBoundingSphere = Sphere(Vector3(31.1585f, -27.0721f, -4.1872f), 3.09613f);
  data[53].mBoundingSphere = Sphere(Vector3(-24.9313f, 13.7101f, 38.4883f), 2.02711f);
  data[54].mBoundingSphere = Sphere(Vector3(14.0121f, 2.67152f, 43.7215f), 2.80956f);
  data[55].mBoundingSphere = Sphere(Vector3(-35.1408f, 11.572f, 12.5115f), 2.34151f);
  data[56].mBoundingSphere = Sphere(Vector3(-4.34487f, -7.85545f, -44.9691f), 0.899533f);
  data[57].mBoundingSphere = Sphere(Vector3(12.4492f, -10.4328f, -43.5248f), 3.20247f);
  data[58].mBoundingSphere = Sphere(Vector3(22.5672f, -41.1076f, -4.03497f), 3.86617f);
  data[59].mBoundingSphere = Sphere(Vector3(34.351f, -9.53132f, 3.13776f), 0.595227f);
  data[60].mBoundingSphere = Sphere(Vector3(-24.3377f, -24.7151f, 4.68837f), 0.553014f);
  data[61].mBoundingSphere = Sphere(Vector3(-10.597f, -31.2938f, -31.1002f), 2.45504f);
  data[62].mBoundingSphere = Sphere(Vector3(-15.4424f, -19.4558f, -25.7138f), 3.42873f);
  data[63].mBoundingSphere = Sphere(Vector3(-8.24086f, -16.2488f, -46.4793f), 1.78439f);
  data[64].mBoundingSphere = Sphere(Vector3(30.6314f, -12.3764f, 34.7789f), 2.94061f);
  data[65].mBoundingSphere = Sphere(Vector3(-9.83369f, 42.28f, -5.70403f), 3.44659f);
  data[66].mBoundingSphere = Sphere(Vector3(-17.0527f, -32.6095f, 22.3273f), 2.14714f);
  data[67].mBoundingSphere = Sphere(Vector3(-9.86038f, -33.7888f, 18.6526f), 2.03338f);
  data[68].mBoundingSphere = Sphere(Vector3(-22.8285f, 26.6307f, 23.7079f), 2.42199f);
  data[69].mBoundingSphere = Sphere(Vector3(-41.1961f, 14.3321f, 6.05983f), 2.00821f);
  data[70].mBoundingSphere = Sphere(Vector3(1.21418f, -23.0671f, 0.157207f), 1.03522f);
  data[71].mBoundingSphere = Sphere(Vector3(-25.9178f, -10.6138f, -35.8627f), 0.324088f);
  data[72].mBoundingSphere = Sphere(Vector3(-7.75384f, 10.6334f, 36.7324f), 0.608447f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-154.709f, -108.944f, 144.303f), Vector3(58.3593f, -197.275f, -61.5633f), Vector3(175.547f, 85.4028f, -61.5633f), Vector3(-37.5212f, 173.734f, 144.303f), Vector3(-53.1238f, 10.9998f, -26.8408f), Vector3(-46.4003f, 8.21245f, -33.3371f), Vector3(-43.8729f, 14.309f, -33.3371f), Vector3(-50.5964f, 17.0963f, -26.8408f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest8(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(65);
  data[0].mBoundingSphere = Sphere(Vector3(25.8589f, -3.51974f, -10.2858f), 2.76909f);
  data[1].mBoundingSphere = Sphere(Vector3(3.63407f, 17.783f, 25.568f), 2.7539f);
  data[2].mBoundingSphere = Sphere(Vector3(-9.9054f, -13.5512f, -44.4831f), 3.50527f);
  data[3].mBoundingSphere = Sphere(Vector3(-2.62289f, 15.8216f, -11.9546f), 0.785882f);
  data[4].mBoundingSphere = Sphere(Vector3(4.0289f, -4.58397f, 13.33f), 2.33617f);
  data[5].mBoundingSphere = Sphere(Vector3(20.0797f, 1.41735f, -13.9511f), 2.91776f);
  data[6].mBoundingSphere = Sphere(Vector3(21.8876f, -39.3494f, -6.09451f), 1.61101f);
  data[7].mBoundingSphere = Sphere(Vector3(-34.2531f, 15.4203f, 28.4767f), 2.58389f);
  data[8].mBoundingSphere = Sphere(Vector3(16.0809f, -27.7587f, -11.4833f), 3.25048f);
  data[9].mBoundingSphere = Sphere(Vector3(-18.177f, 3.80454f, -38.3488f), 2.23876f);
  data[10].mBoundingSphere = Sphere(Vector3(25.0617f, -8.96481f, -29.7255f), 0.686843f);
  data[11].mBoundingSphere = Sphere(Vector3(3.08987f, 22.1057f, -17.3217f), 2.6842f);
  data[12].mBoundingSphere = Sphere(Vector3(10.246f, -12.9573f, 4.58921f), 3.57938f);
  data[13].mBoundingSphere = Sphere(Vector3(-11.5306f, 7.38276f, -13.571f), 2.37131f);
  data[14].mBoundingSphere = Sphere(Vector3(11.283f, -19.6673f, -7.31534f), 0.303214f);
  data[15].mBoundingSphere = Sphere(Vector3(9.76839f, -26.2594f, 10.1852f), 2.87833f);
  data[16].mBoundingSphere = Sphere(Vector3(5.80698f, -18.8012f, -3.29721f), 2.6152f);
  data[17].mBoundingSphere = Sphere(Vector3(31.3601f, -7.98669f, -32.5329f), 1.56277f);
  data[18].mBoundingSphere = Sphere(Vector3(-25.2657f, -6.21064f, -14.8625f), 1.49284f);
  data[19].mBoundingSphere = Sphere(Vector3(7.41427f, -3.75804f, 47.5239f), 1.78879f);
  data[20].mBoundingSphere = Sphere(Vector3(39.1345f, 9.75915f, 21.1213f), 1.34985f);
  data[21].mBoundingSphere = Sphere(Vector3(20.9437f, 36.0889f, 18.6602f), 2.72943f);
  data[22].mBoundingSphere = Sphere(Vector3(20.8252f, -8.75531f, -40.7327f), 3.4256f);
  data[23].mBoundingSphere = Sphere(Vector3(-38.9262f, -20.2728f, 0.4139f), 2.94397f);
  data[24].mBoundingSphere = Sphere(Vector3(28.9646f, 22.3072f, -21.5044f), 2.94989f);
  data[25].mBoundingSphere = Sphere(Vector3(-23.438f, -22.696f, 9.21341f), 2.53042f);
  data[26].mBoundingSphere = Sphere(Vector3(-22.3558f, 27.8356f, -29.8526f), 3.88322f);
  data[27].mBoundingSphere = Sphere(Vector3(-14.2841f, -12.4132f, -9.99169f), 3.85283f);
  data[28].mBoundingSphere = Sphere(Vector3(-10.4605f, 45.132f, -12.048f), 1.83124f);
  data[29].mBoundingSphere = Sphere(Vector3(11.4499f, 8.06917f, -39.9222f), 3.24353f);
  data[30].mBoundingSphere = Sphere(Vector3(9.76254f, 39.6743f, -16.9327f), 3.53484f);
  data[31].mBoundingSphere = Sphere(Vector3(-19.4134f, 18.7196f, -23.0644f), 0.280367f);
  data[32].mBoundingSphere = Sphere(Vector3(-3.26015f, 27.4831f, -5.81626f), 3.13475f);
  data[33].mBoundingSphere = Sphere(Vector3(18.5714f, 29.2116f, -9.39987f), 1.8397f);
  data[34].mBoundingSphere = Sphere(Vector3(-19.2407f, -16.6365f, 4.61936f), 2.61149f);
  data[35].mBoundingSphere = Sphere(Vector3(-5.88632f, 12.4962f, -19.7852f), 1.92274f);
  data[36].mBoundingSphere = Sphere(Vector3(0.663142f, -25.9479f, 4.85715f), 0.400513f);
  data[37].mBoundingSphere = Sphere(Vector3(11.4997f, -35.006f, 13.4409f), 1.85861f);
  data[38].mBoundingSphere = Sphere(Vector3(38.5947f, 2.07789f, 18.6163f), 1.38151f);
  data[39].mBoundingSphere = Sphere(Vector3(-13.2592f, -13.8155f, 44.5601f), 2.48137f);
  data[40].mBoundingSphere = Sphere(Vector3(12.7392f, 7.72745f, -4.54741f), 2.64373f);
  data[41].mBoundingSphere = Sphere(Vector3(38.6497f, 15.3323f, 8.39522f), 2.48276f);
  data[42].mBoundingSphere = Sphere(Vector3(3.40643f, -11.1579f, -19.9536f), 0.625147f);
  data[43].mBoundingSphere = Sphere(Vector3(13.3975f, -18.0113f, 43.2076f), 2.9391f);
  data[44].mBoundingSphere = Sphere(Vector3(23.5565f, -22.3728f, -12.289f), 0.62851f);
  data[45].mBoundingSphere = Sphere(Vector3(-26.433f, -37.7954f, 8.51805f), 2.81351f);
  data[46].mBoundingSphere = Sphere(Vector3(29.63f, -7.67326f, 26.4895f), 2.11003f);
  data[47].mBoundingSphere = Sphere(Vector3(-39.7999f, -6.58425f, 3.36403f), 0.634077f);
  data[48].mBoundingSphere = Sphere(Vector3(-25.0852f, -28.7574f, 0.609171f), 1.54444f);
  data[49].mBoundingSphere = Sphere(Vector3(-5.99527f, -3.90869f, 29.9029f), 2.34522f);
  data[50].mBoundingSphere = Sphere(Vector3(-11.0006f, -23.9584f, -33.134f), 1.46547f);
  data[51].mBoundingSphere = Sphere(Vector3(13.3067f, -42.6189f, 21.2006f), 1.13576f);
  data[52].mBoundingSphere = Sphere(Vector3(-22.313f, 21.1145f, -5.51795f), 2.88007f);
  data[53].mBoundingSphere = Sphere(Vector3(11.8069f, -27.6413f, -29.4473f), 1.44088f);
  data[54].mBoundingSphere = Sphere(Vector3(18.9605f, -2.6104f, -28.5025f), 3.8584f);
  data[55].mBoundingSphere = Sphere(Vector3(9.95972f, 3.31473f, -47.69f), 3.51942f);
  data[56].mBoundingSphere = Sphere(Vector3(-5.07508f, 32.4626f, -31.1373f), 0.498624f);
  data[57].mBoundingSphere = Sphere(Vector3(16.5435f, -45.5109f, 9.62671f), 1.80654f);
  data[58].mBoundingSphere = Sphere(Vector3(-11.3523f, 23.957f, -33.2189f), 1.66726f);
  data[59].mBoundingSphere = Sphere(Vector3(-27.5237f, -5.1629f, 11.9021f), 0.840852f);
  data[60].mBoundingSphere = Sphere(Vector3(-1.14748f, 43.4319f, 9.58203f), 0.51312f);
  data[61].mBoundingSphere = Sphere(Vector3(3.30503f, 21.1273f, -25.164f), 3.16699f);
  data[62].mBoundingSphere = Sphere(Vector3(-1.99687f, 36.1534f, 33.9235f), 1.55813f);
  data[63].mBoundingSphere = Sphere(Vector3(23.7518f, -5.4224f, 26.1982f), 3.41226f);
  data[64].mBoundingSphere = Sphere(Vector3(-20.1399f, -25.3243f, 0.113559f), 0.761296f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(15.0269f, 23.301f, 36.9641f), Vector3(-9.82888f, 40.0549f, -18.385f), Vector3(-9.82888f, -18.4855f, -36.1049f), Vector3(15.0269f, -35.2394f, 19.2442f), Vector3(20.2781f, 6.03296f, -2.37893f), Vector3(17.4771f, 7.92098f, -8.61628f), Vector3(17.4771f, 2.83663f, -10.1553f), Vector3(20.2781f, 0.948611f, -3.91794f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest9(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(31);
  data[0].mBoundingSphere = Sphere(Vector3(29.4754f, 13.3817f, 5.49623f), 1.27922f);
  data[1].mBoundingSphere = Sphere(Vector3(10.474f, 20.1089f, 36.9728f), 0.609955f);
  data[2].mBoundingSphere = Sphere(Vector3(15.8423f, -20.1374f, -0.604615f), 3.15342f);
  data[3].mBoundingSphere = Sphere(Vector3(-38.7646f, -1.81503f, 9.3937f), 1.36968f);
  data[4].mBoundingSphere = Sphere(Vector3(24.0893f, 35.2514f, -7.65282f), 0.816498f);
  data[5].mBoundingSphere = Sphere(Vector3(-4.15899f, 16.3403f, -6.69293f), 3.55943f);
  data[6].mBoundingSphere = Sphere(Vector3(-16.1462f, -14.4664f, -33.3428f), 3.93935f);
  data[7].mBoundingSphere = Sphere(Vector3(3.83936f, -0.17202f, 24.4955f), 1.09297f);
  data[8].mBoundingSphere = Sphere(Vector3(-8.80673f, 11.3796f, 9.54814f), 0.316434f);
  data[9].mBoundingSphere = Sphere(Vector3(19.6333f, -15.0249f, -43.0881f), 3.86814f);
  data[10].mBoundingSphere = Sphere(Vector3(-4.19468f, 15.5301f, 19.4598f), 1.30415f);
  data[11].mBoundingSphere = Sphere(Vector3(0.0746202f, 2.14615f, 36.6838f), 1.73997f);
  data[12].mBoundingSphere = Sphere(Vector3(28.0613f, 30.0525f, 6.30037f), 0.331394f);
  data[13].mBoundingSphere = Sphere(Vector3(15.9203f, 3.57352f, -33.7536f), 1.17044f);
  data[14].mBoundingSphere = Sphere(Vector3(27.644f, -8.69082f, 5.77951f), 0.286978f);
  data[15].mBoundingSphere = Sphere(Vector3(-27.5664f, 13.6583f, -33.7591f), 1.55303f);
  data[16].mBoundingSphere = Sphere(Vector3(-30.8352f, 12.7451f, -23.7863f), 3.38095f);
  data[17].mBoundingSphere = Sphere(Vector3(5.81258f, -36.7871f, 27.2941f), 2.41109f);
  data[18].mBoundingSphere = Sphere(Vector3(-4.2721f, -22.3779f, -14.7299f), 1.48136f);
  data[19].mBoundingSphere = Sphere(Vector3(-6.76203f, 24.8459f, -7.75485f), 3.47291f);
  data[20].mBoundingSphere = Sphere(Vector3(19.7046f, -26.5967f, -24.1275f), 1.12614f);
  data[21].mBoundingSphere = Sphere(Vector3(-6.56963f, 11.3179f, -15.6835f), 1.42024f);
  data[22].mBoundingSphere = Sphere(Vector3(33.5572f, -23.1043f, 20.8066f), 3.40983f);
  data[23].mBoundingSphere = Sphere(Vector3(-8.08495f, 21.8686f, 12.678f), 2.3131f);
  data[24].mBoundingSphere = Sphere(Vector3(-10.909f, -28.2998f, 28.4299f), 3.345f);
  data[25].mBoundingSphere = Sphere(Vector3(12.1261f, 41.806f, 22.8409f), 0.288485f);
  data[26].mBoundingSphere = Sphere(Vector3(23.699f, 21.4267f, 7.11746f), 1.09935f);
  data[27].mBoundingSphere = Sphere(Vector3(1.44614f, -10.2742f, -18.5048f), 2.33525f);
  data[28].mBoundingSphere = Sphere(Vector3(13.9737f, 18.2614f, 15.1396f), 2.30718f);
  data[29].mBoundingSphere = Sphere(Vector3(-6.13156f, 28.9966f, 39.059f), 0.342412f);
  data[30].mBoundingSphere = Sphere(Vector3(-33.5723f, 23.1859f, 6.29577f), 3.65638f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-28.3433f, -19.4934f, 48.7853f), Vector3(17.6628f, -31.0036f, 3.13146f), Vector3(33.7777f, 33.4074f, 3.13146f), Vector3(-12.2283f, 44.9177f, 48.7853f), Vector3(-36.562f, 13.1687f, -10.5423f), Vector3(-32.0566f, 12.0415f, -15.0132f), Vector3(-30.354f, 18.8467f, -15.0132f), Vector3(-34.8594f, 19.9739f, -10.5423f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest10(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(47);
  data[0].mBoundingSphere = Sphere(Vector3(-12.3023f, -16.5423f, -15.4208f), 3.49089f);
  data[1].mBoundingSphere = Sphere(Vector3(-40.1968f, -7.88377f, 8.96432f), 2.90536f);
  data[2].mBoundingSphere = Sphere(Vector3(-6.37864f, 25.3661f, 9.80817f), 1.14516f);
  data[3].mBoundingSphere = Sphere(Vector3(3.25252f, -7.95863f, -8.08619f), 3.57346f);
  data[4].mBoundingSphere = Sphere(Vector3(5.06868f, -24.6106f, 7.02706f), 3.19029f);
  data[5].mBoundingSphere = Sphere(Vector3(38.8201f, -7.42455f, 29.4803f), 2.50549f);
  data[6].mBoundingSphere = Sphere(Vector3(7.6935f, 20.1828f, 0.240616f), 1.12939f);
  data[7].mBoundingSphere = Sphere(Vector3(19.4587f, -24.0249f, 8.5828f), 3.35149f);
  data[8].mBoundingSphere = Sphere(Vector3(-36.9788f, -0.155995f, -17.6112f), 3.07432f);
  data[9].mBoundingSphere = Sphere(Vector3(10.4865f, 29.3557f, -9.74735f), 0.371636f);
  data[10].mBoundingSphere = Sphere(Vector3(-1.59075f, 7.18841f, 25.3522f), 3.24179f);
  data[11].mBoundingSphere = Sphere(Vector3(-4.5475f, 13.1546f, 47.0875f), 0.419764f);
  data[12].mBoundingSphere = Sphere(Vector3(-24.9832f, -2.335f, 9.36456f), 3.22451f);
  data[13].mBoundingSphere = Sphere(Vector3(10.8985f, -2.07573f, -5.79427f), 1.70147f);
  data[14].mBoundingSphere = Sphere(Vector3(-27.6865f, 3.01673f, -18.7107f), 1.43717f);
  data[15].mBoundingSphere = Sphere(Vector3(-30.7867f, 12.0324f, 13.5839f), 1.50826f);
  data[16].mBoundingSphere = Sphere(Vector3(25.7773f, -35.074f, 4.8912f), 3.93784f);
  data[17].mBoundingSphere = Sphere(Vector3(-19.2529f, -3.356f, -33.5005f), 2.52602f);
  data[18].mBoundingSphere = Sphere(Vector3(20.3508f, -37.6329f, 12.6236f), 3.42351f);
  data[19].mBoundingSphere = Sphere(Vector3(21.6077f, -29.8421f, 32.9167f), 2.51825f);
  data[20].mBoundingSphere = Sphere(Vector3(-12.7331f, 2.07891f, -33.579f), 2.4017f);
  data[21].mBoundingSphere = Sphere(Vector3(7.12935f, 20.5784f, 29.0791f), 1.58538f);
  data[22].mBoundingSphere = Sphere(Vector3(13.8455f, 12.6392f, -31.5916f), 0.736131f);
  data[23].mBoundingSphere = Sphere(Vector3(37.1521f, 3.9076f, -32.1994f), 0.397729f);
  data[24].mBoundingSphere = Sphere(Vector3(35.2097f, -20.8713f, 16.9123f), 0.768371f);
  data[25].mBoundingSphere = Sphere(Vector3(38.8387f, 6.98898f, 14.7629f), 0.804089f);
  data[26].mBoundingSphere = Sphere(Vector3(-31.1679f, -4.10548f, 36.0133f), 3.41354f);
  data[27].mBoundingSphere = Sphere(Vector3(43.7519f, -10.9017f, -19.8367f), 1.2159f);
  data[28].mBoundingSphere = Sphere(Vector3(33.6466f, -27.0945f, 20.7029f), 2.8309f);
  data[29].mBoundingSphere = Sphere(Vector3(-29.3756f, 16.7759f, -26.9752f), 1.9653f);
  data[30].mBoundingSphere = Sphere(Vector3(6.46862f, 26.3315f, -36.8368f), 2.47116f);
  data[31].mBoundingSphere = Sphere(Vector3(23.3893f, -27.9126f, 20.2313f), 1.63884f);
  data[32].mBoundingSphere = Sphere(Vector3(12.0515f, -4.77817f, -39.8693f), 3.09682f);
  data[33].mBoundingSphere = Sphere(Vector3(-3.87321f, -31.4146f, -18.8213f), 3.38617f);
  data[34].mBoundingSphere = Sphere(Vector3(37.4438f, -2.21041f, 4.4531f), 0.777996f);
  data[35].mBoundingSphere = Sphere(Vector3(-6.3056f, -12.8455f, -17.5219f), 0.80351f);
  data[36].mBoundingSphere = Sphere(Vector3(38.7995f, 7.7837f, -9.3008f), 2.46444f);
  data[37].mBoundingSphere = Sphere(Vector3(32.659f, -15.4662f, 24.8663f), 0.392743f);
  data[38].mBoundingSphere = Sphere(Vector3(4.74007f, -3.00236f, -41.603f), 2.13044f);
  data[39].mBoundingSphere = Sphere(Vector3(2.42233f, -12.8965f, -9.22655f), 0.794116f);
  data[40].mBoundingSphere = Sphere(Vector3(6.68542f, 22.8358f, 2.25316f), 1.09715f);
  data[41].mBoundingSphere = Sphere(Vector3(2.11155f, 6.17513f, -47.4179f), 0.995441f);
  data[42].mBoundingSphere = Sphere(Vector3(32.8254f, -23.982f, -27.7842f), 0.327567f);
  data[43].mBoundingSphere = Sphere(Vector3(-31.75f, -14.9502f, -31.1426f), 3.31577f);
  data[44].mBoundingSphere = Sphere(Vector3(18.5696f, 44.1041f, -13.9083f), 2.69858f);
  data[45].mBoundingSphere = Sphere(Vector3(-39.2025f, -16.3357f, -0.636465f), 3.56337f);
  data[46].mBoundingSphere = Sphere(Vector3(-25.9288f, 21.3801f, -33.0997f), 2.44635f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-27.5607f, -91.2463f, 64.32f), Vector3(113.762f, -41.9738f, 39.0131f), Vector3(64.9196f, 98.1169f, 39.0131f), Vector3(-76.4035f, 48.8444f, 64.32f), Vector3(4.78402f, -4.54378f, -13.4279f), Vector3(13.4883f, -1.50901f, -14.9866f), Vector3(11.5396f, 4.08039f, -14.9866f), Vector3(2.83528f, 1.04561f, -13.4279f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest11(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(31);
  data[0].mBoundingSphere = Sphere(Vector3(-23.9707f, -6.03385f, 18.5931f), 1.87334f);
  data[1].mBoundingSphere = Sphere(Vector3(27.0667f, 2.37536f, 34.0735f), 1.11918f);
  data[2].mBoundingSphere = Sphere(Vector3(20.4189f, 18.1084f, 9.37872f), 0.89443f);
  data[3].mBoundingSphere = Sphere(Vector3(2.98251f, -16.3626f, 20.7825f), 0.875295f);
  data[4].mBoundingSphere = Sphere(Vector3(21.4854f, 6.27779f, -12.6328f), 1.56868f);
  data[5].mBoundingSphere = Sphere(Vector3(-18.5475f, 14.7867f, -30.8783f), 1.03325f);
  data[6].mBoundingSphere = Sphere(Vector3(14.2432f, -10.0173f, 33.3335f), 1.04995f);
  data[7].mBoundingSphere = Sphere(Vector3(-12.3916f, 43.2634f, -19.9924f), 3.38373f);
  data[8].mBoundingSphere = Sphere(Vector3(-13.3764f, 15.1459f, -26.3048f), 1.47996f);
  data[9].mBoundingSphere = Sphere(Vector3(13.7725f, -17.6523f, -9.69378f), 1.44251f);
  data[10].mBoundingSphere = Sphere(Vector3(-7.23091f, 35.7154f, 22.2987f), 1.63154f);
  data[11].mBoundingSphere = Sphere(Vector3(1.86295f, -26.1251f, -17.9375f), 2.73117f);
  data[12].mBoundingSphere = Sphere(Vector3(-22.6335f, 26.3521f, -9.95035f), 0.426026f);
  data[13].mBoundingSphere = Sphere(Vector3(38.0248f, 3.42524f, 21.9342f), 2.1323f);
  data[14].mBoundingSphere = Sphere(Vector3(-39.9347f, 0.65095f, 14.4343f), 0.927018f);
  data[15].mBoundingSphere = Sphere(Vector3(-36.0917f, -14.9745f, 13.1497f), 1.31958f);
  data[16].mBoundingSphere = Sphere(Vector3(-7.64981f, -20.7283f, 15.0266f), 3.40786f);
  data[17].mBoundingSphere = Sphere(Vector3(-32.6484f, -11.5834f, -10.5971f), 2.06411f);
  data[18].mBoundingSphere = Sphere(Vector3(-25.6928f, -33.8648f, -21.6537f), 2.69441f);
  data[19].mBoundingSphere = Sphere(Vector3(4.051f, 18.7225f, 3.33551f), 3.8141f);
  data[20].mBoundingSphere = Sphere(Vector3(37.7429f, -18.1582f, -2.37235f), 1.18378f);
  data[21].mBoundingSphere = Sphere(Vector3(-24.7048f, 30.8573f, -18.2789f), 1.75064f);
  data[22].mBoundingSphere = Sphere(Vector3(10.6506f, -29.1776f, 29.952f), 3.33653f);
  data[23].mBoundingSphere = Sphere(Vector3(-45.2212f, 0.182098f, 3.56477f), 0.518455f);
  data[24].mBoundingSphere = Sphere(Vector3(-2.9091f, -6.14828f, 0.437025f), 3.04498f);
  data[25].mBoundingSphere = Sphere(Vector3(-23.5291f, -24.488f, 8.80869f), 1.83089f);
  data[26].mBoundingSphere = Sphere(Vector3(4.45845f, 6.46295f, 20.7208f), 1.87612f);
  data[27].mBoundingSphere = Sphere(Vector3(-32.3965f, -16.448f, -19.0329f), 3.95048f);
  data[28].mBoundingSphere = Sphere(Vector3(-4.01054f, -25.3035f, 9.35865f), 1.18957f);
  data[29].mBoundingSphere = Sphere(Vector3(20.6198f, 2.36485f, 40.408f), 1.64476f);
  data[30].mBoundingSphere = Sphere(Vector3(20.0099f, 14.385f, -26.4909f), 2.33072f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-53.4979f, 46.0129f, -44.6323f), Vector3(17.6526f, -52.0933f, -54.5665f), Vector3(17.6526f, -64.3078f, 66.058f), Vector3(-53.4979f, 33.7984f, 75.9922f), Vector3(33.9103f, 34.1569f, 10.6491f), Vector3(39.2984f, 26.7276f, 9.8968f), Vector3(39.2984f, 25.8358f, 18.704f), Vector3(33.9103f, 33.2651f, 19.4563f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest12(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(60);
  data[0].mBoundingSphere = Sphere(Vector3(20.4394f, -15.9612f, 24.847f), 3.63203f);
  data[1].mBoundingSphere = Sphere(Vector3(-11.3044f, 24.7954f, 7.59115f), 3.7175f);
  data[2].mBoundingSphere = Sphere(Vector3(-10.0107f, 17.6411f, 24.604f), 3.58564f);
  data[3].mBoundingSphere = Sphere(Vector3(-6.93196f, -28.608f, -22.0152f), 1.14527f);
  data[4].mBoundingSphere = Sphere(Vector3(-21.1725f, 3.86238f, -30.5767f), 3.26196f);
  data[5].mBoundingSphere = Sphere(Vector3(-10.555f, 46.1833f, 4.73823f), 0.483547f);
  data[6].mBoundingSphere = Sphere(Vector3(-19.6163f, 5.87687f, -2.60883f), 0.286978f);
  data[7].mBoundingSphere = Sphere(Vector3(17.8512f, 4.94211f, -0.988961f), 1.16499f);
  data[8].mBoundingSphere = Sphere(Vector3(-10.167f, 8.94193f, -16.0309f), 0.772314f);
  data[9].mBoundingSphere = Sphere(Vector3(-20.0517f, -9.61618f, -27.6822f), 0.249287f);
  data[10].mBoundingSphere = Sphere(Vector3(14.1974f, 11.0343f, 42.4792f), 2.94247f);
  data[11].mBoundingSphere = Sphere(Vector3(-8.47763f, 8.7054f, -10.7249f), 3.83892f);
  data[12].mBoundingSphere = Sphere(Vector3(15.6817f, 8.74739f, -1.60823f), 2.13682f);
  data[13].mBoundingSphere = Sphere(Vector3(-11.2738f, 22.9221f, 16.9583f), 2.86743f);
  data[14].mBoundingSphere = Sphere(Vector3(-29.7317f, 14.5329f, -5.36016f), 1.98791f);
  data[15].mBoundingSphere = Sphere(Vector3(0.0242999f, 12.3633f, 25.2604f), 0.666085f);
  data[16].mBoundingSphere = Sphere(Vector3(40.0469f, 13.6274f, -20.4315f), 1.37269f);
  data[17].mBoundingSphere = Sphere(Vector3(-22.4576f, -28.5181f, 15.0378f), 1.10237f);
  data[18].mBoundingSphere = Sphere(Vector3(3.80347f, -1.98596f, 23.7499f), 2.74056f);
  data[19].mBoundingSphere = Sphere(Vector3(-37.1171f, 2.63784f, 18.0784f), 2.89573f);
  data[20].mBoundingSphere = Sphere(Vector3(-33.3069f, 7.17153f, 3.7014f), 3.81549f);
  data[21].mBoundingSphere = Sphere(Vector3(4.57001f, 22.4068f, 17.5022f), 3.9063f);
  data[22].mBoundingSphere = Sphere(Vector3(33.4696f, 18.737f, -30.2413f), 3.07328f);
  data[23].mBoundingSphere = Sphere(Vector3(6.9426f, -22.4018f, 13.6705f), 0.200928f);
  data[24].mBoundingSphere = Sphere(Vector3(6.22789f, -24.7165f, -28.9281f), 3.79392f);
  data[25].mBoundingSphere = Sphere(Vector3(3.04999f, -1.34887f, 23.4652f), 2.69278f);
  data[26].mBoundingSphere = Sphere(Vector3(5.90739f, 0.0390809f, 33.7048f), 1.48936f);
  data[27].mBoundingSphere = Sphere(Vector3(-23.7013f, 16.6319f, 23.8081f), 2.95534f);
  data[28].mBoundingSphere = Sphere(Vector3(-26.3619f, 16.3912f, 35.2962f), 0.305301f);
  data[29].mBoundingSphere = Sphere(Vector3(-26.9722f, -1.65193f, -20.0314f), 2.21313f);
  data[30].mBoundingSphere = Sphere(Vector3(12.6447f, 1.53624f, 31.2632f), 1.39879f);
  data[31].mBoundingSphere = Sphere(Vector3(-21.4427f, -39.6067f, -19.2482f), 0.906259f);
  data[32].mBoundingSphere = Sphere(Vector3(-3.39055f, 24.9008f, 22.883f), 1.29035f);
  data[33].mBoundingSphere = Sphere(Vector3(33.7027f, 31.5695f, 4.15874f), 2.03036f);
  data[34].mBoundingSphere = Sphere(Vector3(-6.5969f, 11.4102f, -3.25795f), 3.99177f);
  data[35].mBoundingSphere = Sphere(Vector3(-1.28084f, -18.2329f, -6.10644f), 1.65125f);
  data[36].mBoundingSphere = Sphere(Vector3(-40.8113f, 4.54979f, -16.4032f), 1.30786f);
  data[37].mBoundingSphere = Sphere(Vector3(26.9449f, 3.00131f, -2.80574f), 0.794812f);
  data[38].mBoundingSphere = Sphere(Vector3(-22.4397f, -23.1845f, -9.4734f), 1.11443f);
  data[39].mBoundingSphere = Sphere(Vector3(13.1474f, 14.7692f, 34.1518f), 0.712009f);
  data[40].mBoundingSphere = Sphere(Vector3(7.82635f, -2.26073f, -31.6865f), 1.01017f);
  data[41].mBoundingSphere = Sphere(Vector3(12.0659f, 19.621f, 14.8408f), 0.518802f);
  data[42].mBoundingSphere = Sphere(Vector3(-3.29504f, -9.54939f, 33.855f), 2.34406f);
  data[43].mBoundingSphere = Sphere(Vector3(-20.9421f, 14.6179f, -42.2674f), 1.0104f);
  data[44].mBoundingSphere = Sphere(Vector3(30.6123f, 4.99499f, -26.923f), 3.81804f);
  data[45].mBoundingSphere = Sphere(Vector3(10.4807f, -15.9533f, 30.9966f), 3.25188f);
  data[46].mBoundingSphere = Sphere(Vector3(30.3448f, 15.1329f, -6.46091f), 1.26368f);
  data[47].mBoundingSphere = Sphere(Vector3(-3.21001f, -30.904f, 35.0015f), 1.94245f);
  data[48].mBoundingSphere = Sphere(Vector3(38.1676f, 20.35f, 15.2652f), 1.19526f);
  data[49].mBoundingSphere = Sphere(Vector3(-2.90592f, 8.47963f, -46.4335f), 3.95558f);
  data[50].mBoundingSphere = Sphere(Vector3(-8.30012f, -11.4285f, -47.8226f), 2.53692f);
  data[51].mBoundingSphere = Sphere(Vector3(-34.8659f, -19.6814f, 17.1391f), 3.65383f);
  data[52].mBoundingSphere = Sphere(Vector3(14.7505f, 26.796f, -29.016f), 3.52464f);
  data[53].mBoundingSphere = Sphere(Vector3(-15.2443f, 16.9833f, 36.2758f), 2.37862f);
  data[54].mBoundingSphere = Sphere(Vector3(-11.7069f, 32.062f, 2.64647f), 3.38373f);
  data[55].mBoundingSphere = Sphere(Vector3(-12.5548f, 41.8844f, -22.894f), 3.71506f);
  data[56].mBoundingSphere = Sphere(Vector3(-19.6143f, -30.2401f, -27.1857f), 2.58157f);
  data[57].mBoundingSphere = Sphere(Vector3(36.8458f, 15.499f, 0.167129f), 3.53171f);
  data[58].mBoundingSphere = Sphere(Vector3(-17.7997f, -3.54069f, -18.7116f), 1.65438f);
  data[59].mBoundingSphere = Sphere(Vector3(-1.47597f, -34.8477f, 27.5121f), 1.39589f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-68.3336f, 19.3717f, 23.1596f), Vector3(-0.0397873f, -45.59f, 30.6361f), Vector3(65.2209f, 23.0181f, 30.6361f), Vector3(-3.0729f, 87.9798f, 23.1596f), Vector3(-5.06734f, 18.6688f, -15.859f), Vector3(0.972916f, 12.9232f, -15.1977f), Vector3(6.83142f, 19.0822f, -15.1977f), Vector3(0.791162f, 24.8278f, -15.859f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest13(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(67);
  data[0].mBoundingSphere = Sphere(Vector3(-6.42902f, -10.4568f, 48.0395f), 1.83889f);
  data[1].mBoundingSphere = Sphere(Vector3(33.2641f, -15.6514f, 11.596f), 3.98782f);
  data[2].mBoundingSphere = Sphere(Vector3(15.0647f, -11.1575f, 19.4271f), 3.0451f);
  data[3].mBoundingSphere = Sphere(Vector3(31.1765f, -27.7771f, 3.16555f), 3.85249f);
  data[4].mBoundingSphere = Sphere(Vector3(-36.3641f, 22.7653f, 15.3258f), 0.719199f);
  data[5].mBoundingSphere = Sphere(Vector3(23.664f, -28.1307f, 8.9105f), 0.881674f);
  data[6].mBoundingSphere = Sphere(Vector3(-6.96376f, -12.1736f, 28.2195f), 3.79438f);
  data[7].mBoundingSphere = Sphere(Vector3(-19.324f, 38.1381f, 10.3293f), 1.44807f);
  data[8].mBoundingSphere = Sphere(Vector3(8.47921f, 0.52666f, 36.1285f), 2.20733f);
  data[9].mBoundingSphere = Sphere(Vector3(22.4414f, 12.813f, 1.23089f), 2.76225f);
  data[10].mBoundingSphere = Sphere(Vector3(-0.718539f, 34.452f, 8.83402f), 1.88621f);
  data[11].mBoundingSphere = Sphere(Vector3(-7.59336f, -22.9293f, -2.5731f), 3.3973f);
  data[12].mBoundingSphere = Sphere(Vector3(20.826f, -13.7291f, -21.2327f), 3.21152f);
  data[13].mBoundingSphere = Sphere(Vector3(-36.0031f, -6.60351f, 8.16399f), 2.88784f);
  data[14].mBoundingSphere = Sphere(Vector3(44.1953f, 6.66426f, -1.31412f), 2.7532f);
  data[15].mBoundingSphere = Sphere(Vector3(-6.7496f, 6.556f, -0.839832f), 1.80457f);
  data[16].mBoundingSphere = Sphere(Vector3(-11.4386f, -20.9646f, -32.1061f), 3.08198f);
  data[17].mBoundingSphere = Sphere(Vector3(3.98262f, -17.4336f, 23.2887f), 2.30301f);
  data[18].mBoundingSphere = Sphere(Vector3(35.8753f, 6.29958f, 4.9278f), 0.256825f);
  data[19].mBoundingSphere = Sphere(Vector3(37.2849f, -14.3049f, 14.2016f), 1.54792f);
  data[20].mBoundingSphere = Sphere(Vector3(13.9211f, 11.6936f, 20.0377f), 2.18588f);
  data[21].mBoundingSphere = Sphere(Vector3(7.27132f, 31.6062f, 26.8311f), 0.812555f);
  data[22].mBoundingSphere = Sphere(Vector3(9.6938f, 9.13974f, 36.4241f), 1.86336f);
  data[23].mBoundingSphere = Sphere(Vector3(-13.6653f, 32.8162f, -13.0064f), 3.6529f);
  data[24].mBoundingSphere = Sphere(Vector3(-28.7231f, 18.2203f, -1.21221f), 0.481808f);
  data[25].mBoundingSphere = Sphere(Vector3(11.4359f, 5.81854f, 11.9192f), 3.15678f);
  data[26].mBoundingSphere = Sphere(Vector3(18.7978f, 11.7556f, -0.771143f), 0.618073f);
  data[27].mBoundingSphere = Sphere(Vector3(25.3357f, -25.6941f, 2.066f), 3.86826f);
  data[28].mBoundingSphere = Sphere(Vector3(1.58803f, 30.9612f, -4.4923f), 3.69569f);
  data[29].mBoundingSphere = Sphere(Vector3(-11.7635f, -17.3389f, -31.3068f), 2.38662f);
  data[30].mBoundingSphere = Sphere(Vector3(6.03563f, -34.8128f, -25.1126f), 0.320609f);
  data[31].mBoundingSphere = Sphere(Vector3(-29.2244f, -20.1831f, 31.255f), 2.64083f);
  data[32].mBoundingSphere = Sphere(Vector3(30.3237f, -21.8702f, -13.5723f), 2.89469f);
  data[33].mBoundingSphere = Sphere(Vector3(-9.28309f, 7.50917f, 27.1636f), 1.23851f);
  data[34].mBoundingSphere = Sphere(Vector3(9.34654f, 37.2744f, -29.3739f), 2.70009f);
  data[35].mBoundingSphere = Sphere(Vector3(15.42f, 25.6448f, 37.5033f), 3.69059f);
  data[36].mBoundingSphere = Sphere(Vector3(-17.0394f, 8.76231f, 2.24489f), 3.46317f);
  data[37].mBoundingSphere = Sphere(Vector3(34.0729f, -0.617492f, 22.3946f), 3.1097f);
  data[38].mBoundingSphere = Sphere(Vector3(-1.59237f, -8.84659f, -18.8453f), 2.18959f);
  data[39].mBoundingSphere = Sphere(Vector3(15.2213f, 10.8894f, -27.1961f), 1.18517f);
  data[40].mBoundingSphere = Sphere(Vector3(-4.72104f, -25.1747f, 27.2535f), 0.877035f);
  data[41].mBoundingSphere = Sphere(Vector3(-31.0812f, -18.1473f, -8.66902f), 3.03234f);
  data[42].mBoundingSphere = Sphere(Vector3(44.1297f, 21.9334f, 6.45394f), 3.50168f);
  data[43].mBoundingSphere = Sphere(Vector3(24.1663f, -21.0213f, -32.0996f), 1.11582f);
  data[44].mBoundingSphere = Sphere(Vector3(-0.761908f, -1.93658f, 45.6463f), 2.0793f);
  data[45].mBoundingSphere = Sphere(Vector3(9.33271f, -35.456f, 25.9272f), 1.44981f);
  data[46].mBoundingSphere = Sphere(Vector3(-23.5689f, -14.2195f, -8.21719f), 1.20303f);
  data[47].mBoundingSphere = Sphere(Vector3(34.3051f, 24.3835f, 25.5034f), 0.871468f);
  data[48].mBoundingSphere = Sphere(Vector3(-11.2736f, 14.6366f, -6.14722f), 1.2544f);
  data[49].mBoundingSphere = Sphere(Vector3(27.1975f, -18.1773f, 22.2442f), 2.79078f);
  data[50].mBoundingSphere = Sphere(Vector3(-1.87812f, 23.5086f, -1.12045f), 1.09007f);
  data[51].mBoundingSphere = Sphere(Vector3(-36.9877f, -4.97313f, -25.5676f), 3.01425f);
  data[52].mBoundingSphere = Sphere(Vector3(28.4091f, -4.05012f, 1.31415f), 1.20384f);
  data[53].mBoundingSphere = Sphere(Vector3(48.1485f, -1.84281f, 5.59734f), 2.64442f);
  data[54].mBoundingSphere = Sphere(Vector3(8.00037f, -5.01814f, -22.5975f), 3.56326f);
  data[55].mBoundingSphere = Sphere(Vector3(-1.82469f, 10.0818f, -27.2662f), 2.454f);
  data[56].mBoundingSphere = Sphere(Vector3(3.24557f, 8.71454f, -19.3903f), 0.520774f);
  data[57].mBoundingSphere = Sphere(Vector3(37.4485f, 4.35311f, -11.9477f), 1.5354f);
  data[58].mBoundingSphere = Sphere(Vector3(-4.24656f, 31.7335f, 31.3076f), 2.202f);
  data[59].mBoundingSphere = Sphere(Vector3(44.3608f, -12.4646f, 5.50211f), 0.224122f);
  data[60].mBoundingSphere = Sphere(Vector3(16.3232f, 17.3277f, 40.2806f), 3.56546f);
  data[61].mBoundingSphere = Sphere(Vector3(11.8306f, -2.29324f, -26.8868f), 3.49912f);
  data[62].mBoundingSphere = Sphere(Vector3(9.07189f, 11.0396f, -40.3678f), 1.34045f);
  data[63].mBoundingSphere = Sphere(Vector3(-5.05246f, -38.8315f, 10.2548f), 2.05576f);
  data[64].mBoundingSphere = Sphere(Vector3(-41.5336f, -9.01793f, -18.2106f), 3.83927f);
  data[65].mBoundingSphere = Sphere(Vector3(32.3188f, -2.56794f, 26.1781f), 3.25628f);
  data[66].mBoundingSphere = Sphere(Vector3(-46.8296f, 0.727412f, 13.162f), 3.24225f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-31.1368f, 92.9894f, 52.3529f), Vector3(-50.0227f, 64.3677f, -111.845f), Vector3(-50.0227f, -103.795f, -82.5318f), Vector3(-31.1368f, -75.1729f, 81.6657f), Vector3(57.8392f, -2.30056f, -23.8096f), Vector3(57.1469f, -3.34974f, -29.8285f), Vector3(57.1469f, -12.3212f, -28.2647f), Vector3(57.8392f, -11.2721f, -22.2457f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest14(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(35);
  data[0].mBoundingSphere = Sphere(Vector3(9.34149f, -33.7233f, -34.3768f), 0.683596f);
  data[1].mBoundingSphere = Sphere(Vector3(-11.9133f, 41.5334f, 10.5424f), 1.90024f);
  data[2].mBoundingSphere = Sphere(Vector3(29.9367f, -9.16617f, -29.0495f), 0.50477f);
  data[3].mBoundingSphere = Sphere(Vector3(19.977f, -8.54786f, -34.347f), 3.18693f);
  data[4].mBoundingSphere = Sphere(Vector3(-18.9499f, 43.7471f, -2.8905f), 3.03733f);
  data[5].mBoundingSphere = Sphere(Vector3(34.9647f, 6.20881f, 8.6527f), 1.36133f);
  data[6].mBoundingSphere = Sphere(Vector3(-1.06442f, 13.7897f, 18.5577f), 1.86046f);
  data[7].mBoundingSphere = Sphere(Vector3(20.4275f, 38.2467f, -23.5932f), 1.05145f);
  data[8].mBoundingSphere = Sphere(Vector3(-16.9448f, 31.2842f, 22.3589f), 0.69067f);
  data[9].mBoundingSphere = Sphere(Vector3(15.4623f, -34.0799f, -17.9441f), 1.47347f);
  data[10].mBoundingSphere = Sphere(Vector3(-23.0391f, 22.1221f, 25.2547f), 3.77722f);
  data[11].mBoundingSphere = Sphere(Vector3(-45.2437f, -1.10202f, -2.05316f), 1.31517f);
  data[12].mBoundingSphere = Sphere(Vector3(18.6804f, -13.24f, 15.2052f), 1.07314f);
  data[13].mBoundingSphere = Sphere(Vector3(2.76898f, 14.4068f, -46.2441f), 2.19434f);
  data[14].mBoundingSphere = Sphere(Vector3(-10.2142f, 3.54913f, 2.18817f), 1.38243f);
  data[15].mBoundingSphere = Sphere(Vector3(1.52176f, -1.18647f, 31.8423f), 3.093f);
  data[16].mBoundingSphere = Sphere(Vector3(14.3298f, 24.3043f, -19.2769f), 3.27959f);
  data[17].mBoundingSphere = Sphere(Vector3(43.471f, 2.84235f, 0.466682f), 0.965172f);
  data[18].mBoundingSphere = Sphere(Vector3(-11.7817f, 0.669439f, -39.5485f), 2.60673f);
  data[19].mBoundingSphere = Sphere(Vector3(-24.436f, 38.3306f, -7.25027f), 1.32143f);
  data[20].mBoundingSphere = Sphere(Vector3(11.5194f, -4.56719f, 17.7856f), 2.34452f);
  data[21].mBoundingSphere = Sphere(Vector3(10.0739f, -24.5692f, 18.2005f), 0.786462f);
  data[22].mBoundingSphere = Sphere(Vector3(7.17616f, 1.64696f, 46.9278f), 2.05819f);
  data[23].mBoundingSphere = Sphere(Vector3(-18.6059f, 0.528164f, 12.9926f), 2.43359f);
  data[24].mBoundingSphere = Sphere(Vector3(-14.1772f, 16.8238f, 29.7611f), 1.11825f);
  data[25].mBoundingSphere = Sphere(Vector3(-2.23762f, -10.7138f, -1.81725f), 3.09265f);
  data[26].mBoundingSphere = Sphere(Vector3(-4.25026f, -40.9955f, 21.1304f), 0.49758f);
  data[27].mBoundingSphere = Sphere(Vector3(-6.80728f, 22.0025f, 10.5565f), 2.03395f);
  data[28].mBoundingSphere = Sphere(Vector3(-45.4042f, -1.31503f, 8.84222f), 3.14124f);
  data[29].mBoundingSphere = Sphere(Vector3(36.0019f, -21.285f, 9.36111f), 0.626887f);
  data[30].mBoundingSphere = Sphere(Vector3(18.293f, -1.38998f, 17.8967f), 1.5136f);
  data[31].mBoundingSphere = Sphere(Vector3(-34.9499f, -23.0928f, -0.0396311f), 0.57354f);
  data[32].mBoundingSphere = Sphere(Vector3(32.4931f, 1.79313f, 36.0971f), 1.71886f);
  data[33].mBoundingSphere = Sphere(Vector3(-17.9312f, 41.746f, -18.284f), 0.716764f);
  data[34].mBoundingSphere = Sphere(Vector3(-21.7991f, -11.9713f, 1.18461f), 0.597546f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-39.1491f, 36.6877f, -79.2336f), Vector3(-4.21863f, -86.9219f, -64.1839f), Vector3(-4.21863f, -71.5281f, 62.2528f), Vector3(-39.1491f, 52.0815f, 47.2031f), Vector3(12.872f, -3.70568f, -13.572f), Vector3(15.2305f, -12.0518f, -12.5559f), Vector3(15.2305f, -11.2332f, -5.83177f), Vector3(12.872f, -2.88701f, -6.84793f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest15(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(58);
  data[0].mBoundingSphere = Sphere(Vector3(25.0304f, 14.779f, -34.1992f), 3.21117f);
  data[1].mBoundingSphere = Sphere(Vector3(-9.07809f, -17.1749f, -19.1794f), 3.37944f);
  data[2].mBoundingSphere = Sphere(Vector3(-10.56f, 17.8439f, 9.29266f), 2.97215f);
  data[3].mBoundingSphere = Sphere(Vector3(7.65509f, 9.08233f, -24.8757f), 0.99718f);
  data[4].mBoundingSphere = Sphere(Vector3(21.669f, 32.4254f, -26.9861f), 0.333598f);
  data[5].mBoundingSphere = Sphere(Vector3(5.87664f, -23.2472f, -29.7711f), 0.743089f);
  data[6].mBoundingSphere = Sphere(Vector3(-7.77493f, 23.0327f, -17.3469f), 0.853609f);
  data[7].mBoundingSphere = Sphere(Vector3(-31.1392f, -22.0569f, 0.453051f), 1.16012f);
  data[8].mBoundingSphere = Sphere(Vector3(5.22866f, -29.8185f, 32.9857f), 1.98606f);
  data[9].mBoundingSphere = Sphere(Vector3(-25.1086f, 0.770589f, -1.89823f), 3.64884f);
  data[10].mBoundingSphere = Sphere(Vector3(-24.4312f, -37.7616f, -9.93687f), 2.7735f);
  data[11].mBoundingSphere = Sphere(Vector3(-28.7664f, 0.452349f, -19.424f), 3.39835f);
  data[12].mBoundingSphere = Sphere(Vector3(-46.4376f, -8.84912f, 1.83796f), 2.61543f);
  data[13].mBoundingSphere = Sphere(Vector3(-28.1305f, 6.69217f, -34.9311f), 3.59155f);
  data[14].mBoundingSphere = Sphere(Vector3(-19.7233f, -6.92113f, -18.2206f), 0.5108f);
  data[15].mBoundingSphere = Sphere(Vector3(-31.6909f, 6.47465f, 22.2544f), 3.48567f);
  data[16].mBoundingSphere = Sphere(Vector3(13.6961f, 21.5979f, -17.1272f), 2.37653f);
  data[17].mBoundingSphere = Sphere(Vector3(13.3796f, -32.0521f, -0.217301f), 2.16767f);
  data[18].mBoundingSphere = Sphere(Vector3(-29.3962f, 33.8432f, -10.0394f), 2.23969f);
  data[19].mBoundingSphere = Sphere(Vector3(-24.004f, -33.1314f, 9.87085f), 2.78463f);
  data[20].mBoundingSphere = Sphere(Vector3(-9.32347f, -32.6936f, -18.1095f), 1.90627f);
  data[21].mBoundingSphere = Sphere(Vector3(2.33735f, 31.3376f, -26.2425f), 2.04949f);
  data[22].mBoundingSphere = Sphere(Vector3(10.9384f, -23.5546f, -3.03469f), 0.703659f);
  data[23].mBoundingSphere = Sphere(Vector3(17.18f, -36.4628f, 8.11221f), 3.02144f);
  data[24].mBoundingSphere = Sphere(Vector3(-27.0575f, -25.7423f, 27.9629f), 0.898953f);
  data[25].mBoundingSphere = Sphere(Vector3(31.9259f, 33.2844f, 0.150607f), 1.76084f);
  data[26].mBoundingSphere = Sphere(Vector3(9.82229f, 10.2796f, 17.8335f), 2.19167f);
  data[27].mBoundingSphere = Sphere(Vector3(-38.0548f, -3.10082f, 15.1614f), 1.06073f);
  data[28].mBoundingSphere = Sphere(Vector3(30.5559f, -21.9842f, -2.78654f), 0.481576f);
  data[29].mBoundingSphere = Sphere(Vector3(-8.95922f, -25.2252f, -20.6615f), 1.85142f);
  data[30].mBoundingSphere = Sphere(Vector3(22.7889f, 17.5301f, -37.7168f), 2.3124f);
  data[31].mBoundingSphere = Sphere(Vector3(17.7139f, 24.0639f, 2.21011f), 2.6813f);
  data[32].mBoundingSphere = Sphere(Vector3(1.22002f, 4.27968f, -36.7211f), 1.78856f);
  data[33].mBoundingSphere = Sphere(Vector3(4.94433f, 3.57896f, -35.8042f), 3.47222f);
  data[34].mBoundingSphere = Sphere(Vector3(-4.35936f, 18.2817f, 20.0441f), 3.5694f);
  data[35].mBoundingSphere = Sphere(Vector3(17.3292f, 26.633f, -31.527f), 2.15004f);
  data[36].mBoundingSphere = Sphere(Vector3(28.2768f, -2.11587f, 39.4764f), 0.736247f);
  data[37].mBoundingSphere = Sphere(Vector3(-30.8238f, -15.0008f, -12.316f), 3.15029f);
  data[38].mBoundingSphere = Sphere(Vector3(8.33754f, 4.02303f, -36.6075f), 2.53611f);
  data[39].mBoundingSphere = Sphere(Vector3(38.3156f, 29.8262f, -3.45104f), 3.59805f);
  data[40].mBoundingSphere = Sphere(Vector3(-6.81437f, -6.05848f, -34.5962f), 1.799f);
  data[41].mBoundingSphere = Sphere(Vector3(-35.9786f, -9.66786f, 31.8874f), 2.76399f);
  data[42].mBoundingSphere = Sphere(Vector3(11.1544f, -20.2449f, -40.7137f), 3.63121f);
  data[43].mBoundingSphere = Sphere(Vector3(3.7238f, -8.64431f, -38.5298f), 0.594647f);
  data[44].mBoundingSphere = Sphere(Vector3(-29.2509f, 0.465583f, -26.0636f), 1.38325f);
  data[45].mBoundingSphere = Sphere(Vector3(0.454554f, -7.14665f, -16.5237f), 0.517875f);
  data[46].mBoundingSphere = Sphere(Vector3(27.411f, 6.92499f, 24.1125f), 2.49285f);
  data[47].mBoundingSphere = Sphere(Vector3(-17.9086f, 0.467133f, 1.05538f), 1.32317f);
  data[48].mBoundingSphere = Sphere(Vector3(7.93079f, 29.6673f, 23.3282f), 1.60289f);
  data[49].mBoundingSphere = Sphere(Vector3(-10.9192f, 5.51484f, -25.6748f), 0.917508f);
  data[50].mBoundingSphere = Sphere(Vector3(-8.89576f, 6.11848f, -31.6187f), 3.55456f);
  data[51].mBoundingSphere = Sphere(Vector3(20.1186f, -22.092f, 4.36362f), 0.555449f);
  data[52].mBoundingSphere = Sphere(Vector3(-16.0633f, -14.0786f, 4.44162f), 1.25452f);
  data[53].mBoundingSphere = Sphere(Vector3(-6.58425f, 16.9835f, -34.084f), 1.94489f);
  data[54].mBoundingSphere = Sphere(Vector3(18.6009f, -2.02858f, 41.0444f), 3.41934f);
  data[55].mBoundingSphere = Sphere(Vector3(-7.34702f, 34.098f, -32.2937f), 1.0271f);
  data[56].mBoundingSphere = Sphere(Vector3(29.259f, -0.389954f, -37.2561f), 1.99186f);
  data[57].mBoundingSphere = Sphere(Vector3(14.4026f, -13.848f, -40.3554f), 1.23283f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(7.88315f, 48.4427f, 60.4418f), Vector3(-74.7533f, 12.5294f, 6.4649f), Vector3(-32.9196f, -83.7299f, 6.4649f), Vector3(49.7169f, -47.8166f, 60.4418f), Vector3(28.0024f, 2.45997f, -37.433f), Vector3(24.3433f, 0.869761f, -39.8231f), Vector3(26.1664f, -3.32509f, -39.8231f), Vector3(29.8255f, -1.73488f, -37.433f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest16(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(53);
  data[0].mBoundingSphere = Sphere(Vector3(33.4333f, -24.5345f, 19.1969f), 3.70984f);
  data[1].mBoundingSphere = Sphere(Vector3(26.6813f, 22.9497f, 20.3247f), 0.323856f);
  data[2].mBoundingSphere = Sphere(Vector3(-40.3674f, -18.2474f, 3.71059f), 0.536198f);
  data[3].mBoundingSphere = Sphere(Vector3(25.2698f, -7.14746f, -31.5156f), 0.786114f);
  data[4].mBoundingSphere = Sphere(Vector3(31.41f, -1.87234f, -38.1455f), 2.7953f);
  data[5].mBoundingSphere = Sphere(Vector3(5.36512f, -30.805f, 14.1372f), 0.250331f);
  data[6].mBoundingSphere = Sphere(Vector3(10.0657f, -20.6806f, -10.3803f), 3.93703f);
  data[7].mBoundingSphere = Sphere(Vector3(12.2145f, -28.2499f, -13.7171f), 0.946269f);
  data[8].mBoundingSphere = Sphere(Vector3(21.0841f, -26.1648f, 22.2759f), 3.87092f);
  data[9].mBoundingSphere = Sphere(Vector3(-7.25504f, 31.2202f, -22.5906f), 2.01053f);
  data[10].mBoundingSphere = Sphere(Vector3(-1.47778f, -31.594f, -26.3573f), 0.905332f);
  data[11].mBoundingSphere = Sphere(Vector3(-20.7352f, -31.9413f, -23.7258f), 0.214844f);
  data[12].mBoundingSphere = Sphere(Vector3(6.65767f, -19.9818f, 13.7375f), 1.26333f);
  data[13].mBoundingSphere = Sphere(Vector3(22.0649f, 5.89055f, -23.0986f), 0.668056f);
  data[14].mBoundingSphere = Sphere(Vector3(21.3142f, -0.41489f, 17.7194f), 0.571221f);
  data[15].mBoundingSphere = Sphere(Vector3(-6.12542f, -23.5183f, 26.6394f), 3.29316f);
  data[16].mBoundingSphere = Sphere(Vector3(34.8165f, 2.75968f, 3.59925f), 1.92448f);
  data[17].mBoundingSphere = Sphere(Vector3(-1.80976f, -44.7582f, -21.9061f), 3.07989f);
  data[18].mBoundingSphere = Sphere(Vector3(-38.4476f, 10.3709f, 25.0415f), 2.12685f);
  data[19].mBoundingSphere = Sphere(Vector3(14.0161f, -40.8614f, 8.51515f), 0.312491f);
  data[20].mBoundingSphere = Sphere(Vector3(4.13806f, 13.2982f, -28.4056f), 3.10552f);
  data[21].mBoundingSphere = Sphere(Vector3(41.1103f, 4.39567f, -6.53148f), 1.7714f);
  data[22].mBoundingSphere = Sphere(Vector3(20.6965f, -38.202f, 11.604f), 2.90118f);
  data[23].mBoundingSphere = Sphere(Vector3(39.7988f, 2.11976f, -7.76091f), 1.51093f);
  data[24].mBoundingSphere = Sphere(Vector3(2.37871f, 13.2956f, 12.0058f), 0.432289f);
  data[25].mBoundingSphere = Sphere(Vector3(32.3924f, 7.21223f, 1.45879f), 2.01134f);
  data[26].mBoundingSphere = Sphere(Vector3(-4.45655f, 39.3748f, -29.8446f), 2.63549f);
  data[27].mBoundingSphere = Sphere(Vector3(-0.486902f, 8.46175f, 47.8624f), 3.50678f);
  data[28].mBoundingSphere = Sphere(Vector3(-12.4716f, -32.7458f, -26.517f), 3.5803f);
  data[29].mBoundingSphere = Sphere(Vector3(15.3561f, 19.6432f, 19.5323f), 3.28678f);
  data[30].mBoundingSphere = Sphere(Vector3(31.6953f, 2.59793f, 4.78662f), 3.95837f);
  data[31].mBoundingSphere = Sphere(Vector3(24.2686f, -4.16082f, 32.3819f), 1.17438f);
  data[32].mBoundingSphere = Sphere(Vector3(-25.727f, -25.8767f, -13.8736f), 2.54944f);
  data[33].mBoundingSphere = Sphere(Vector3(-15.0605f, 0.809391f, 21.5442f), 3.57822f);
  data[34].mBoundingSphere = Sphere(Vector3(35.0613f, 1.64501f, -16.8154f), 1.46013f);
  data[35].mBoundingSphere = Sphere(Vector3(-15.857f, -33.5133f, 9.32568f), 3.31925f);
  data[36].mBoundingSphere = Sphere(Vector3(41.8999f, 14.231f, -11.7885f), 2.33954f);
  data[37].mBoundingSphere = Sphere(Vector3(-8.00371f, -10.4161f, 44.5462f), 3.63435f);
  data[38].mBoundingSphere = Sphere(Vector3(-31.9611f, -4.99196f, -5.65958f), 1.16847f);
  data[39].mBoundingSphere = Sphere(Vector3(-23.0577f, -29.8177f, 22.0709f), 2.75228f);
  data[40].mBoundingSphere = Sphere(Vector3(-23.7175f, -30.465f, 10.5132f), 0.624799f);
  data[41].mBoundingSphere = Sphere(Vector3(5.44041f, 35.6272f, 30.4151f), 3.64722f);
  data[42].mBoundingSphere = Sphere(Vector3(11.1353f, -40.1392f, 21.7734f), 2.02305f);
  data[43].mBoundingSphere = Sphere(Vector3(-26.9111f, 0.500602f, -38.1882f), 3.36541f);
  data[44].mBoundingSphere = Sphere(Vector3(-26.0202f, 38.9445f, 12.9099f), 3.42931f);
  data[45].mBoundingSphere = Sphere(Vector3(-8.61148f, -1.31965f, -31.6926f), 3.72759f);
  data[46].mBoundingSphere = Sphere(Vector3(-19.1179f, -18.2096f, 21.0369f), 3.95083f);
  data[47].mBoundingSphere = Sphere(Vector3(21.8098f, -30.5383f, 25.0042f), 1.60649f);
  data[48].mBoundingSphere = Sphere(Vector3(18.1501f, -2.06044f, -9.19512f), 2.80121f);
  data[49].mBoundingSphere = Sphere(Vector3(8.20107f, 8.95705f, -26.3426f), 0.579223f);
  data[50].mBoundingSphere = Sphere(Vector3(30.5471f, 4.34297f, -28.6807f), 0.740422f);
  data[51].mBoundingSphere = Sphere(Vector3(20.6834f, -10.4887f, -4.12703f), 2.15433f);
  data[52].mBoundingSphere = Sphere(Vector3(14.8246f, -9.40187f, 37.1022f), 3.88902f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-23.0999f, -31.2134f, 14.5288f), Vector3(24.7837f, -60.7892f, -11.589f), Vector3(55.0672f, -11.76f, -11.589f), Vector3(7.18357f, 17.8159f, 14.5288f), Vector3(4.02978f, -16.751f, -15.209f), Vector3(10.9166f, -21.0047f, -18.9654f), Vector3(13.2842f, -17.1715f, -18.9654f), Vector3(6.39737f, -12.9178f, -15.209f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest17(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(74);
  data[0].mBoundingSphere = Sphere(Vector3(11.643f, 23.1602f, -38.2147f), 0.659474f);
  data[1].mBoundingSphere = Sphere(Vector3(-5.7881f, 42.2061f, 5.76347f), 1.66227f);
  data[2].mBoundingSphere = Sphere(Vector3(-35.3717f, -22.9355f, -13.351f), 3.52359f);
  data[3].mBoundingSphere = Sphere(Vector3(-21.5005f, -0.453573f, 34.3409f), 1.94756f);
  data[4].mBoundingSphere = Sphere(Vector3(-4.92123f, -16.4753f, -18.4799f), 3.52615f);
  data[5].mBoundingSphere = Sphere(Vector3(-15.4081f, -5.6973f, 29.2991f), 3.3595f);
  data[6].mBoundingSphere = Sphere(Vector3(12.7321f, -2.38449f, 4.04313f), 2.11131f);
  data[7].mBoundingSphere = Sphere(Vector3(32.0557f, 24.1632f, 7.75989f), 2.28816f);
  data[8].mBoundingSphere = Sphere(Vector3(-6.66371f, -10.7644f, 1.01124f), 1.44007f);
  data[9].mBoundingSphere = Sphere(Vector3(22.5482f, 15.8711f, 25.3423f), 1.8745f);
  data[10].mBoundingSphere = Sphere(Vector3(-36.8469f, 10.0756f, 15.7366f), 1.37687f);
  data[11].mBoundingSphere = Sphere(Vector3(4.93282f, 12.1767f, -2.25915f), 3.53403f);
  data[12].mBoundingSphere = Sphere(Vector3(-14.4503f, -26.2684f, -29.5335f), 0.750743f);
  data[13].mBoundingSphere = Sphere(Vector3(0.347586f, -24.087f, 27.0623f), 2.75657f);
  data[14].mBoundingSphere = Sphere(Vector3(30.4609f, 19.7637f, -30.3915f), 2.8933f);
  data[15].mBoundingSphere = Sphere(Vector3(-21.4536f, -7.37617f, 8.36754f), 0.580267f);
  data[16].mBoundingSphere = Sphere(Vector3(-45.1473f, 9.32311f, -6.11255f), 2.64895f);
  data[17].mBoundingSphere = Sphere(Vector3(42.163f, 7.45369f, -6.54192f), 0.340672f);
  data[18].mBoundingSphere = Sphere(Vector3(-23.1302f, -15.4108f, -15.196f), 0.462905f);
  data[19].mBoundingSphere = Sphere(Vector3(6.87504f, 20.7936f, -12.4984f), 1.09529f);
  data[20].mBoundingSphere = Sphere(Vector3(24.901f, 6.07798f, -30.0708f), 1.74217f);
  data[21].mBoundingSphere = Sphere(Vector3(11.5793f, 41.7706f, -20.9357f), 2.9224f);
  data[22].mBoundingSphere = Sphere(Vector3(-17.9899f, 1.04987f, -18.3568f), 1.49249f);
  data[23].mBoundingSphere = Sphere(Vector3(-36.7011f, 6.89897f, -20.7294f), 1.29546f);
  data[24].mBoundingSphere = Sphere(Vector3(-3.24249f, -32.3638f, 25.1731f), 3.63005f);
  data[25].mBoundingSphere = Sphere(Vector3(-19.8597f, 3.42649f, -10.327f), 0.932585f);
  data[26].mBoundingSphere = Sphere(Vector3(2.16292f, 43.8116f, 22.3978f), 2.76805f);
  data[27].mBoundingSphere = Sphere(Vector3(18.509f, 34.5111f, 11.3225f), 3.52023f);
  data[28].mBoundingSphere = Sphere(Vector3(-15.068f, 10.6169f, 3.6465f), 0.67861f);
  data[29].mBoundingSphere = Sphere(Vector3(28.4473f, 6.14517f, 33.0918f), 3.51281f);
  data[30].mBoundingSphere = Sphere(Vector3(-20.197f, 23.3608f, -20.2193f), 0.429621f);
  data[31].mBoundingSphere = Sphere(Vector3(-8.95083f, -25.3401f, 22.1262f), 3.40693f);
  data[32].mBoundingSphere = Sphere(Vector3(-30.9976f, -1.65397f, 15.4404f), 0.996136f);
  data[33].mBoundingSphere = Sphere(Vector3(0.165357f, 30.5255f, 31.429f), 2.89016f);
  data[34].mBoundingSphere = Sphere(Vector3(-30.8579f, -10.4444f, 23.5025f), 3.74718f);
  data[35].mBoundingSphere = Sphere(Vector3(12.6162f, 17.2216f, -8.72217f), 3.66601f);
  data[36].mBoundingSphere = Sphere(Vector3(-1.62157f, 20.2484f, -18.3319f), 0.407355f);
  data[37].mBoundingSphere = Sphere(Vector3(0.493479f, -27.8943f, 36.1003f), 3.35242f);
  data[38].mBoundingSphere = Sphere(Vector3(12.4299f, -30.4982f, -33.403f), 3.2942f);
  data[39].mBoundingSphere = Sphere(Vector3(-41.4408f, 6.35866f, -12.644f), 1.25614f);
  data[40].mBoundingSphere = Sphere(Vector3(-1.58639f, -42.68f, -20.5606f), 3.82906f);
  data[41].mBoundingSphere = Sphere(Vector3(-26.9481f, -14.7452f, -23.8312f), 0.822413f);
  data[42].mBoundingSphere = Sphere(Vector3(-26.3583f, -14.0503f, -23.9368f), 3.72411f);
  data[43].mBoundingSphere = Sphere(Vector3(-40.1682f, -22.6847f, 3.25033f), 1.15884f);
  data[44].mBoundingSphere = Sphere(Vector3(35.1825f, 5.77535f, -4.45752f), 1.04438f);
  data[45].mBoundingSphere = Sphere(Vector3(-5.19849f, 20.3265f, -24.8887f), 0.43426f);
  data[46].mBoundingSphere = Sphere(Vector3(16.4618f, -24.8182f, 8.95458f), 3.34419f);
  data[47].mBoundingSphere = Sphere(Vector3(-27.8315f, 6.71696f, -5.64357f), 3.55386f);
  data[48].mBoundingSphere = Sphere(Vector3(-11.926f, 36.2921f, 9.23694f), 3.2789f);
  data[49].mBoundingSphere = Sphere(Vector3(28.8451f, 19.2705f, 28.4186f), 3.70717f);
  data[50].mBoundingSphere = Sphere(Vector3(-8.867f, 44.498f, 16.92f), 0.291269f);
  data[51].mBoundingSphere = Sphere(Vector3(-12.9691f, 25.5595f, -35.8064f), 2.39358f);
  data[52].mBoundingSphere = Sphere(Vector3(22.9941f, 0.659356f, -41.9507f), 3.77444f);
  data[53].mBoundingSphere = Sphere(Vector3(29.105f, -4.1949f, 28.4527f), 3.32076f);
  data[54].mBoundingSphere = Sphere(Vector3(-17.9724f, 18.512f, 0.246471f), 2.50665f);
  data[55].mBoundingSphere = Sphere(Vector3(-2.95916f, -13.0514f, -41.1287f), 2.979f);
  data[56].mBoundingSphere = Sphere(Vector3(19.0388f, -7.03357f, 24.8331f), 2.96485f);
  data[57].mBoundingSphere = Sphere(Vector3(17.3113f, -33.1737f, 28.0928f), 0.690554f);
  data[58].mBoundingSphere = Sphere(Vector3(-18.9568f, -3.54087f, -40.3722f), 3.51037f);
  data[59].mBoundingSphere = Sphere(Vector3(-21.5485f, -26.0438f, -9.56654f), 1.53389f);
  data[60].mBoundingSphere = Sphere(Vector3(-31.9613f, 18.1633f, 17.3041f), 3.25083f);
  data[61].mBoundingSphere = Sphere(Vector3(-9.09951f, -3.17353f, 15.241f), 0.742509f);
  data[62].mBoundingSphere = Sphere(Vector3(8.04353f, 42.7335f, 3.14939f), 3.7771f);
  data[63].mBoundingSphere = Sphere(Vector3(-12.1873f, -35.5409f, 30.372f), 2.77988f);
  data[64].mBoundingSphere = Sphere(Vector3(-24.3888f, 35.5651f, -20.5735f), 3.77479f);
  data[65].mBoundingSphere = Sphere(Vector3(5.56241f, 29.0309f, 16.7316f), 2.88808f);
  data[66].mBoundingSphere = Sphere(Vector3(19.8015f, 13.639f, -25.6523f), 1.71086f);
  data[67].mBoundingSphere = Sphere(Vector3(12.0824f, 34.1743f, -33.9372f), 3.31206f);
  data[68].mBoundingSphere = Sphere(Vector3(-22.1275f, 18.1604f, -38.1166f), 2.79588f);
  data[69].mBoundingSphere = Sphere(Vector3(17.3084f, 28.5618f, 15.5364f), 3.39916f);
  data[70].mBoundingSphere = Sphere(Vector3(31.8757f, 27.5027f, 6.74961f), 3.62008f);
  data[71].mBoundingSphere = Sphere(Vector3(-1.02432f, 4.95665f, 6.69557f), 1.57309f);
  data[72].mBoundingSphere = Sphere(Vector3(13.5573f, 8.00132f, -40.4401f), 3.86524f);
  data[73].mBoundingSphere = Sphere(Vector3(28.5336f, 27.3192f, 28.015f), 1.58341f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(0.526158f, -51.9333f, -4.26679f), Vector3(-9.70994f, -12.5393f, 66.3503f), Vector3(-9.70994f, 58.7894f, 26.5594f), Vector3(0.526158f, 19.3954f, -44.0578f), Vector3(24.1163f, 2.36422f, 13.566f), Vector3(23.6081f, 4.3198f, 17.0715f), Vector3(23.6081f, 8.00139f, 15.0177f), Vector3(24.1163f, 6.04582f, 11.5122f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest18(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(25);
  data[0].mBoundingSphere = Sphere(Vector3(-33.5487f, -28.5612f, -9.92538f), 3.45981f);
  data[1].mBoundingSphere = Sphere(Vector3(39.9808f, 1.53788f, -2.54861f), 0.900577f);
  data[2].mBoundingSphere = Sphere(Vector3(-31.1105f, 13.3223f, -32.7016f), 1.13878f);
  data[3].mBoundingSphere = Sphere(Vector3(21.9083f, -18.0403f, 6.13646f), 0.754222f);
  data[4].mBoundingSphere = Sphere(Vector3(34.8169f, 23.4245f, -2.81222f), 1.28583f);
  data[5].mBoundingSphere = Sphere(Vector3(-30.0585f, 21.1101f, -20.0722f), 1.37988f);
  data[6].mBoundingSphere = Sphere(Vector3(18.2525f, -3.90262f, -38.0956f), 1.08775f);
  data[7].mBoundingSphere = Sphere(Vector3(-27.0597f, -13.1177f, 33.3684f), 2.28178f);
  data[8].mBoundingSphere = Sphere(Vector3(13.9022f, 5.26356f, 33.7492f), 2.45829f);
  data[9].mBoundingSphere = Sphere(Vector3(-7.00325f, -37.4635f, -14.4565f), 3.89737f);
  data[10].mBoundingSphere = Sphere(Vector3(-25.0343f, -21.5957f, 14.3773f), 1.2457f);
  data[11].mBoundingSphere = Sphere(Vector3(22.4701f, 27.1417f, -8.49416f), 3.6943f);
  data[12].mBoundingSphere = Sphere(Vector3(4.30282f, -5.34178f, -47.9646f), 1.61681f);
  data[13].mBoundingSphere = Sphere(Vector3(27.9867f, -22.9646f, 23.5342f), 2.24085f);
  data[14].mBoundingSphere = Sphere(Vector3(20.5674f, -25.6139f, -24.9542f), 2.41596f);
  data[15].mBoundingSphere = Sphere(Vector3(-3.81666f, -28.7305f, 29.3089f), 0.252767f);
  data[16].mBoundingSphere = Sphere(Vector3(-29.1689f, -1.65738f, -22.1269f), 1.09761f);
  data[17].mBoundingSphere = Sphere(Vector3(4.90086f, 7.45367f, 19.6368f), 1.81373f);
  data[18].mBoundingSphere = Sphere(Vector3(-15.8751f, -22.4142f, -26.1566f), 3.83613f);
  data[19].mBoundingSphere = Sphere(Vector3(-35.5434f, -25.9626f, -19.6632f), 0.971435f);
  data[20].mBoundingSphere = Sphere(Vector3(-10.5447f, 27.6385f, 12.7751f), 3.80842f);
  data[21].mBoundingSphere = Sphere(Vector3(-11.5087f, -39.806f, 5.84526f), 1.10932f);
  data[22].mBoundingSphere = Sphere(Vector3(33.3623f, 9.47095f, 28.3881f), 3.65278f);
  data[23].mBoundingSphere = Sphere(Vector3(3.52504f, -31.7715f, -35.7788f), 2.49204f);
  data[24].mBoundingSphere = Sphere(Vector3(-41.6566f, 10.6813f, -12.1589f), 2.30301f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-18.8897f, 32.0175f, 166.385f), Vector3(-54.2724f, 157.09f, -49.7706f), Vector3(-54.2724f, -59.7419f, -175.234f), Vector3(-18.8897f, -184.814f, 40.9221f), Vector3(44.7528f, -7.2621f, -8.82495f), Vector3(43.528f, -2.93272f, -16.3072f), Vector3(43.528f, -9.0067f, -19.8217f), Vector3(44.7528f, -13.3361f, -12.3395f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest19(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(31);
  data[0].mBoundingSphere = Sphere(Vector3(-19.2456f, 18.9172f, -11.2174f), 0.973406f);
  data[1].mBoundingSphere = Sphere(Vector3(28.3935f, -18.4378f, -20.1243f), 1.4461f);
  data[2].mBoundingSphere = Sphere(Vector3(-25.4125f, -36.2918f, -7.02994f), 2.26079f);
  data[3].mBoundingSphere = Sphere(Vector3(34.6822f, -4.04503f, 33.5798f), 0.398077f);
  data[4].mBoundingSphere = Sphere(Vector3(-31.0728f, 35.8985f, 14.111f), 1.85374f);
  data[5].mBoundingSphere = Sphere(Vector3(-33.7709f, 17.7943f, -23.5507f), 2.45574f);
  data[6].mBoundingSphere = Sphere(Vector3(24.7651f, 21.8443f, -27.3506f), 1.52264f);
  data[7].mBoundingSphere = Sphere(Vector3(-36.0081f, -13.0013f, 21.2964f), 0.507553f);
  data[8].mBoundingSphere = Sphere(Vector3(-5.61944f, -0.927432f, 12.1002f), 1.47231f);
  data[9].mBoundingSphere = Sphere(Vector3(12.3576f, 38.3102f, -25.635f), 3.13266f);
  data[10].mBoundingSphere = Sphere(Vector3(20.5407f, 16.2441f, -12.6528f), 1.72257f);
  data[11].mBoundingSphere = Sphere(Vector3(29.4233f, -31.318f, -10.416f), 2.01783f);
  data[12].mBoundingSphere = Sphere(Vector3(2.79745f, -38.5016f, 21.2071f), 3.96382f);
  data[13].mBoundingSphere = Sphere(Vector3(-16.3008f, -9.30082f, -28.7524f), 0.651588f);
  data[14].mBoundingSphere = Sphere(Vector3(24.1648f, -13.2132f, -37.5382f), 2.4867f);
  data[15].mBoundingSphere = Sphere(Vector3(-7.65199f, 21.7294f, 42.7876f), 1.69149f);
  data[16].mBoundingSphere = Sphere(Vector3(-10.7368f, 41.7149f, -8.52136f), 2.18878f);
  data[17].mBoundingSphere = Sphere(Vector3(16.9842f, 1.54634f, 31.8525f), 2.40726f);
  data[18].mBoundingSphere = Sphere(Vector3(3.53726f, 36.6885f, -27.5886f), 2.85421f);
  data[19].mBoundingSphere = Sphere(Vector3(-29.9214f, 21.628f, -27.0396f), 1.9987f);
  data[20].mBoundingSphere = Sphere(Vector3(3.79463f, -20.6386f, 20.8032f), 2.9093f);
  data[21].mBoundingSphere = Sphere(Vector3(10.7377f, 19.4619f, 27.2494f), 1.78903f);
  data[22].mBoundingSphere = Sphere(Vector3(0.188055f, 2.33977f, 39.3988f), 3.65336f);
  data[23].mBoundingSphere = Sphere(Vector3(24.7968f, -0.887163f, -18.6967f), 2.09229f);
  data[24].mBoundingSphere = Sphere(Vector3(-15.7276f, 3.24468f, -16.3358f), 2.56348f);
  data[25].mBoundingSphere = Sphere(Vector3(39.3744f, 20.2431f, 4.23895f), 3.3566f);
  data[26].mBoundingSphere = Sphere(Vector3(0.125361f, -37.9f, -11.5434f), 2.27575f);
  data[27].mBoundingSphere = Sphere(Vector3(-7.63653f, 12.648f, 11.6149f), 3.98214f);
  data[28].mBoundingSphere = Sphere(Vector3(-7.77482f, 28.1409f, -38.8011f), 1.04032f);
  data[29].mBoundingSphere = Sphere(Vector3(2.01575f, 25.6337f, 12.7112f), 2.41411f);
  data[30].mBoundingSphere = Sphere(Vector3(-21.9732f, 27.6404f, -25.4983f), 2.65208f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-155.165f, -30.546f, -15.6689f), Vector3(4.68864f, -138.094f, 101.341f), Vector3(133.64f, 53.5716f, 101.341f), Vector3(-26.2141f, 161.12f, -15.6689f), Vector3(17.8502f, -13.572f, -23.2478f), Vector3(20.749f, -15.5223f, -21.1259f), Vector3(26.1533f, -7.48967f, -21.1259f), Vector3(23.2545f, -5.53936f, -23.2478f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest20(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(49);
  data[0].mBoundingSphere = Sphere(Vector3(-10.8146f, -36.7701f, -19.084f), 0.288833f);
  data[1].mBoundingSphere = Sphere(Vector3(27.2191f, -4.81725f, 31.4067f), 2.47383f);
  data[2].mBoundingSphere = Sphere(Vector3(-7.30961f, 5.91977f, -13.121f), 3.38025f);
  data[3].mBoundingSphere = Sphere(Vector3(37.7927f, -17.6055f, 12.876f), 3.98086f);
  data[4].mBoundingSphere = Sphere(Vector3(15.7641f, -32.2938f, -27.2771f), 1.06201f);
  data[5].mBoundingSphere = Sphere(Vector3(-0.853749f, -5.94568f, -44.3846f), 2.9543f);
  data[6].mBoundingSphere = Sphere(Vector3(-6.54777f, 11.0641f, -1.658f), 2.25395f);
  data[7].mBoundingSphere = Sphere(Vector3(-38.5625f, -15.3448f, 9.42047f), 2.5535f);
  data[8].mBoundingSphere = Sphere(Vector3(9.84677f, -0.475239f, 21.8727f), 0.499667f);
  data[9].mBoundingSphere = Sphere(Vector3(0.207276f, -18.5563f, 46.2572f), 1.19792f);
  data[10].mBoundingSphere = Sphere(Vector3(-18.7567f, 11.5183f, 36.2256f), 2.4823f);
  data[11].mBoundingSphere = Sphere(Vector3(14.1544f, 17.7316f, 38.7517f), 3.26892f);
  data[12].mBoundingSphere = Sphere(Vector3(-1.40447f, -9.29888f, 11.8315f), 1.91323f);
  data[13].mBoundingSphere = Sphere(Vector3(-18.1532f, -15.4725f, 33.8494f), 1.78717f);
  data[14].mBoundingSphere = Sphere(Vector3(-18.5453f, -29.0781f, 18.1153f), 1.39809f);
  data[15].mBoundingSphere = Sphere(Vector3(-8.05915f, -46.0383f, 10.0968f), 1.46535f);
  data[16].mBoundingSphere = Sphere(Vector3(-2.02971f, -34.1324f, -17.1389f), 2.4758f);
  data[17].mBoundingSphere = Sphere(Vector3(-38.4431f, 3.11762f, -3.39244f), 2.33501f);
  data[18].mBoundingSphere = Sphere(Vector3(-31.3095f, -33.5635f, 0.999004f), 1.83391f);
  data[19].mBoundingSphere = Sphere(Vector3(-4.41239f, 40.1555f, 13.0821f), 0.949284f);
  data[20].mBoundingSphere = Sphere(Vector3(-37.2985f, -21.1868f, -5.39248f), 1.29789f);
  data[21].mBoundingSphere = Sphere(Vector3(5.37891f, -20.644f, 17.0497f), 1.56033f);
  data[22].mBoundingSphere = Sphere(Vector3(45.9535f, 6.17413f, 3.78931f), 1.19677f);
  data[23].mBoundingSphere = Sphere(Vector3(-10.9653f, 37.981f, -23.0355f), 3.07096f);
  data[24].mBoundingSphere = Sphere(Vector3(-0.590134f, 29.948f, 36.4408f), 3.70207f);
  data[25].mBoundingSphere = Sphere(Vector3(5.73585f, -18.2478f, 24.6546f), 3.56291f);
  data[26].mBoundingSphere = Sphere(Vector3(-8.67647f, 29.5004f, 29.2487f), 3.34338f);
  data[27].mBoundingSphere = Sphere(Vector3(-15.4597f, 0.462589f, 13.9649f), 3.39846f);
  data[28].mBoundingSphere = Sphere(Vector3(23.5478f, -39.7466f, -5.75569f), 2.69789f);
  data[29].mBoundingSphere = Sphere(Vector3(-1.20208f, 8.28124f, -0.651395f), 3.09833f);
  data[30].mBoundingSphere = Sphere(Vector3(-14.455f, 36.6995f, -15.801f), 3.85515f);
  data[31].mBoundingSphere = Sphere(Vector3(-25.7266f, 31.6828f, -22.1336f), 3.59352f);
  data[32].mBoundingSphere = Sphere(Vector3(28.5383f, 25.2407f, -12.7257f), 2.25708f);
  data[33].mBoundingSphere = Sphere(Vector3(16.292f, 9.97681f, -12.2597f), 1.25313f);
  data[34].mBoundingSphere = Sphere(Vector3(21.2003f, -8.73653f, 20.6933f), 1.91288f);
  data[35].mBoundingSphere = Sphere(Vector3(6.44875f, -20.6681f, 28.9825f), 0.486215f);
  data[36].mBoundingSphere = Sphere(Vector3(10.9404f, 43.3139f, -9.01133f), 2.58864f);
  data[37].mBoundingSphere = Sphere(Vector3(2.73739f, -3.68304f, -24.6374f), 2.11966f);
  data[38].mBoundingSphere = Sphere(Vector3(-13.1925f, -37.5316f, -7.09752f), 0.772198f);
  data[39].mBoundingSphere = Sphere(Vector3(1.80397f, -10.7856f, 7.19534f), 1.74994f);
  data[40].mBoundingSphere = Sphere(Vector3(9.61272f, 25.8713f, -36.0026f), 0.613318f);
  data[41].mBoundingSphere = Sphere(Vector3(-25.5885f, -6.04078f, 21.5283f), 1.87113f);
  data[42].mBoundingSphere = Sphere(Vector3(-28.7182f, 30.9161f, -18.9962f), 0.638136f);
  data[43].mBoundingSphere = Sphere(Vector3(29.2624f, -13.9127f, 12.7263f), 3.57659f);
  data[44].mBoundingSphere = Sphere(Vector3(-8.58442f, -39.3278f, 22.114f), 1.83936f);
  data[45].mBoundingSphere = Sphere(Vector3(4.06884f, 2.97266f, -21.8512f), 0.636628f);
  data[46].mBoundingSphere = Sphere(Vector3(-11.9843f, -13.2794f, -23.7029f), 2.94073f);
  data[47].mBoundingSphere = Sphere(Vector3(16.5945f, 43.5582f, -17.6179f), 2.55107f);
  data[48].mBoundingSphere = Sphere(Vector3(-30.7951f, -35.031f, 3.59919f), 1.83692f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-124.911f, -35.9222f, 6.64405f), Vector3(6.80828f, -111.195f, 86.7315f), Vector3(90.4189f, 35.1146f, 86.7315f), Vector3(-41.3004f, 110.387f, 6.64405f), Vector3(5.10756f, -16.4689f, -14.5491f), Vector3(11.8268f, -20.3087f, -10.4637f), Vector3(14.662f, -15.3474f, -10.4637f), Vector3(7.94277f, -11.5076f, -14.5491f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest21(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mBoundingSphere = Sphere(Vector3(-6.33161f, 36.1289f, -32.1465f), 0.728361f);
  data[1].mBoundingSphere = Sphere(Vector3(6.09256f, -2.44671f, 37.7741f), 3.52023f);
  data[2].mBoundingSphere = Sphere(Vector3(41.5385f, 14.1794f, -13.703f), 1.54572f);
  data[3].mBoundingSphere = Sphere(Vector3(-20.0507f, 28.1378f, 28.635f), 2.21638f);
  data[4].mBoundingSphere = Sphere(Vector3(-16.6411f, 8.99386f, -34.8964f), 1.60498f);
  data[5].mBoundingSphere = Sphere(Vector3(-10.8851f, -33.4702f, 16.5408f), 0.409095f);
  data[6].mBoundingSphere = Sphere(Vector3(22.4402f, -15.3047f, -3.05055f), 3.05878f);
  data[7].mBoundingSphere = Sphere(Vector3(-1.20872f, 24.4361f, -34.5647f), 0.563103f);
  data[8].mBoundingSphere = Sphere(Vector3(2.56949f, 35.6478f, -17.0687f), 0.389496f);
  data[9].mBoundingSphere = Sphere(Vector3(16.4559f, 25.6229f, -2.49247f), 1.3691f);
  data[10].mBoundingSphere = Sphere(Vector3(-18.2599f, 26.9032f, 12.2532f), 3.52151f);
  data[11].mBoundingSphere = Sphere(Vector3(7.83132f, 23.3995f, -25.661f), 3.99385f);
  data[12].mBoundingSphere = Sphere(Vector3(30.1933f, -13.9598f, 28.8782f), 0.60694f);
  data[13].mBoundingSphere = Sphere(Vector3(1.69167f, 24.5868f, -25.0569f), 3.60361f);
  data[14].mBoundingSphere = Sphere(Vector3(-2.04789f, -8.3397f, 36.0897f), 1.08891f);
  data[15].mBoundingSphere = Sphere(Vector3(0.757586f, 34.275f, -32.5658f), 0.363866f);
  data[16].mBoundingSphere = Sphere(Vector3(-1.69071f, 41.0343f, -0.853729f), 3.23692f);
  data[17].mBoundingSphere = Sphere(Vector3(35.1003f, -11.3836f, 11.4038f), 3.31392f);
  data[18].mBoundingSphere = Sphere(Vector3(-15.1772f, 3.57372f, 29.0584f), 3.9586f);
  data[19].mBoundingSphere = Sphere(Vector3(22.3091f, 23.054f, -38.2842f), 0.514744f);
  data[20].mBoundingSphere = Sphere(Vector3(-21.741f, -31.7692f, 0.692096f), 1.4875f);
  data[21].mBoundingSphere = Sphere(Vector3(-34.4477f, -3.33288f, -3.53867f), 1.87473f);
  data[22].mBoundingSphere = Sphere(Vector3(-14.1043f, 42.0222f, -13.2478f), 2.34406f);
  data[23].mBoundingSphere = Sphere(Vector3(-26.7355f, 40.165f, -9.04432f), 2.64802f);
  data[24].mBoundingSphere = Sphere(Vector3(-24.1483f, 25.3942f, -27.801f), 2.17208f);
  data[25].mBoundingSphere = Sphere(Vector3(-6.01117f, 0.153336f, -3.53698f), 0.608679f);
  data[26].mBoundingSphere = Sphere(Vector3(-6.99372f, 22.4525f, 39.7049f), 1.25104f);
  data[27].mBoundingSphere = Sphere(Vector3(-7.49798f, 25.2429f, -2.80032f), 2.3008f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-89.6871f, -93.2409f, -7.99577f), Vector3(38.0086f, -78.5461f, 123.468f), Vector3(38.0086f, 107.546f, 102.667f), Vector3(-89.6871f, 92.8516f, -28.7968f), Vector3(41.8153f, -4.95542f, -20.8857f), Vector3(45.6487f, -4.51429f, -16.9392f), Vector3(45.6487f, 4.34014f, -17.9289f), Vector3(41.8153f, 3.89901f, -21.8754f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest22(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mBoundingSphere = Sphere(Vector3(-36.0248f, 31.0525f, -2.3004f), 2.67666f);
  data[1].mBoundingSphere = Sphere(Vector3(-26.0466f, -34.2901f, -3.21944f), 2.462f);
  data[2].mBoundingSphere = Sphere(Vector3(-4.79903f, 37.5018f, -11.1634f), 3.84205f);
  data[3].mBoundingSphere = Sphere(Vector3(-20.1822f, -18.4273f, -10.4788f), 2.69765f);
  data[4].mBoundingSphere = Sphere(Vector3(1.49577f, 14.4679f, -37.972f), 3.17116f);
  data[5].mBoundingSphere = Sphere(Vector3(24.083f, 20.451f, 26.5515f), 3.71123f);
  data[6].mBoundingSphere = Sphere(Vector3(-3.86272f, -22.3689f, 23.2491f), 1.0576f);
  data[7].mBoundingSphere = Sphere(Vector3(-14.6385f, -7.75988f, 15.5957f), 3.25791f);
  data[8].mBoundingSphere = Sphere(Vector3(-12.2812f, -11.3742f, -24.5623f), 2.90953f);
  data[9].mBoundingSphere = Sphere(Vector3(7.88131f, 32.649f, -7.78519f), 0.522629f);
  data[10].mBoundingSphere = Sphere(Vector3(45.7411f, 6.78078f, 10.3985f), 2.59734f);
  data[11].mBoundingSphere = Sphere(Vector3(-13.6467f, -5.5245f, -3.5139f), 0.706095f);
  data[12].mBoundingSphere = Sphere(Vector3(-8.30541f, -14.7148f, 13.6303f), 0.579571f);
  data[13].mBoundingSphere = Sphere(Vector3(-3.09441f, -46.6054f, 10.9192f), 1.08636f);
  data[14].mBoundingSphere = Sphere(Vector3(25.7241f, -8.1849f, 4.00693f), 3.50121f);
  data[15].mBoundingSphere = Sphere(Vector3(-7.40905f, 39.3418f, 24.3562f), 0.35598f);
  data[16].mBoundingSphere = Sphere(Vector3(-28.3925f, -19.2887f, -9.86038f), 1.46756f);
  data[17].mBoundingSphere = Sphere(Vector3(-38.5022f, -29.7292f, 8.23448f), 0.833662f);
  data[18].mBoundingSphere = Sphere(Vector3(27.6734f, -12.0488f, -0.527887f), 2.7946f);
  data[19].mBoundingSphere = Sphere(Vector3(15.8598f, 15.9368f, -14.808f), 3.55073f);
  data[20].mBoundingSphere = Sphere(Vector3(16.84f, -32.8365f, -1.89794f), 0.832038f);
  data[21].mBoundingSphere = Sphere(Vector3(27.9533f, -6.57359f, 7.7141f), 3.81294f);
  data[22].mBoundingSphere = Sphere(Vector3(13.2782f, 27.8074f, 0.845764f), 2.06364f);
  data[23].mBoundingSphere = Sphere(Vector3(-7.75093f, 25.0186f, -35.3317f), 2.4373f);
  data[24].mBoundingSphere = Sphere(Vector3(21.147f, 20.8221f, -35.8236f), 1.4802f);
  data[25].mBoundingSphere = Sphere(Vector3(-6.89036f, 10.9188f, 31.7479f), 2.26392f);
  data[26].mBoundingSphere = Sphere(Vector3(8.39692f, -33.3247f, 29.3338f), 0.22992f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-45.5346f, 31.0618f, -23.2166f), Vector3(-2.21943f, -5.52127f, -77.5021f), Vector3(-2.21943f, -70.4003f, -33.7799f), Vector3(-45.5346f, -33.8172f, 20.5055f), Vector3(17.5228f, -0.590452f, -4.58303f), Vector3(20.3766f, -3.00069f, -8.15956f), Vector3(20.3766f, -7.07489f, -5.41395f), Vector3(17.5228f, -4.66465f, -1.83741f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest23(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(44);
  data[0].mBoundingSphere = Sphere(Vector3(3.36778f, -33.7776f, 15.7664f), 1.70356f);
  data[1].mBoundingSphere = Sphere(Vector3(41.2831f, -23.3822f, 6.03849f), 2.8701f);
  data[2].mBoundingSphere = Sphere(Vector3(13.5291f, 34.6701f, -33.0425f), 3.69755f);
  data[3].mBoundingSphere = Sphere(Vector3(24.2884f, -4.82415f, 23.9847f), 1.48901f);
  data[4].mBoundingSphere = Sphere(Vector3(-25.8508f, 6.19698f, 11.9096f), 1.2602f);
  data[5].mBoundingSphere = Sphere(Vector3(26.8455f, -8.81463f, -16.5799f), 3.96904f);
  data[6].mBoundingSphere = Sphere(Vector3(3.52868f, -17.0341f, 10.8328f), 1.19375f);
  data[7].mBoundingSphere = Sphere(Vector3(-8.35001f, -4.05573f, 26.7739f), 2.03187f);
  data[8].mBoundingSphere = Sphere(Vector3(-10.5844f, 3.57795f, 30.0514f), 2.08289f);
  data[9].mBoundingSphere = Sphere(Vector3(4.69092f, -11.893f, -39.9097f), 3.88994f);
  data[10].mBoundingSphere = Sphere(Vector3(-15.7261f, 3.44293f, -9.61286f), 2.50363f);
  data[11].mBoundingSphere = Sphere(Vector3(-38.1413f, -19.2085f, 11.5069f), 3.74127f);
  data[12].mBoundingSphere = Sphere(Vector3(-8.82217f, 35.1975f, 5.49142f), 0.206494f);
  data[13].mBoundingSphere = Sphere(Vector3(-45.6237f, -4.33474f, -18.2019f), 3.04127f);
  data[14].mBoundingSphere = Sphere(Vector3(-10.521f, -23.4093f, -6.02696f), 1.27586f);
  data[15].mBoundingSphere = Sphere(Vector3(44.8224f, -15.7914f, 8.81651f), 3.74869f);
  data[16].mBoundingSphere = Sphere(Vector3(-8.99739f, -35.2368f, 3.05288f), 1.26252f);
  data[17].mBoundingSphere = Sphere(Vector3(35.085f, -26.8285f, -22.6399f), 3.94665f);
  data[18].mBoundingSphere = Sphere(Vector3(7.76295f, -11.1067f, 46.1365f), 2.8933f);
  data[19].mBoundingSphere = Sphere(Vector3(-8.98735f, 40.5391f, -6.98678f), 3.43859f);
  data[20].mBoundingSphere = Sphere(Vector3(3.25238f, 16.7829f, 40.5633f), 1.95394f);
  data[21].mBoundingSphere = Sphere(Vector3(3.34874f, 19.5828f, 25.9537f), 0.319681f);
  data[22].mBoundingSphere = Sphere(Vector3(19.6268f, -4.06283f, 41.3295f), 2.14784f);
  data[23].mBoundingSphere = Sphere(Vector3(-44.4494f, 17.7664f, 8.25268f), 1.32282f);
  data[24].mBoundingSphere = Sphere(Vector3(-3.42158f, -32.1021f, -37.7808f), 1.93005f);
  data[25].mBoundingSphere = Sphere(Vector3(10.1705f, -18.3674f, -18.1616f), 0.339628f);
  data[26].mBoundingSphere = Sphere(Vector3(-7.10908f, 47.3144f, -1.91289f), 2.71528f);
  data[27].mBoundingSphere = Sphere(Vector3(31.7649f, 36.7336f, 11.2951f), 1.1164f);
  data[28].mBoundingSphere = Sphere(Vector3(14.2184f, 44.1367f, 12.4819f), 0.461861f);
  data[29].mBoundingSphere = Sphere(Vector3(-1.15902f, -24.7791f, -20.0974f), 0.525529f);
  data[30].mBoundingSphere = Sphere(Vector3(14.6339f, -22.7188f, -28.2378f), 2.43034f);
  data[31].mBoundingSphere = Sphere(Vector3(-25.5024f, -19.5436f, -25.885f), 0.811628f);
  data[32].mBoundingSphere = Sphere(Vector3(5.24891f, 39.4251f, 3.89916f), 0.71688f);
  data[33].mBoundingSphere = Sphere(Vector3(-5.44952f, 17.602f, -10.7283f), 1.41201f);
  data[34].mBoundingSphere = Sphere(Vector3(1.26632f, 5.76688f, -43.628f), 1.36191f);
  data[35].mBoundingSphere = Sphere(Vector3(12.3415f, 35.8897f, -18.6463f), 0.753758f);
  data[36].mBoundingSphere = Sphere(Vector3(-6.11782f, -23.5076f, 0.319534f), 2.63387f);
  data[37].mBoundingSphere = Sphere(Vector3(2.28832f, -15.0046f, -41.7722f), 0.423707f);
  data[38].mBoundingSphere = Sphere(Vector3(15.2503f, 3.81856f, 11.2218f), 2.28758f);
  data[39].mBoundingSphere = Sphere(Vector3(44.0049f, 6.46305f, -21.2744f), 0.315738f);
  data[40].mBoundingSphere = Sphere(Vector3(-31.3974f, 12.1879f, 29.7022f), 3.39811f);
  data[41].mBoundingSphere = Sphere(Vector3(33.9863f, 2.99576f, 12.8727f), 3.75078f);
  data[42].mBoundingSphere = Sphere(Vector3(-4.96202f, -9.57353f, 29.4636f), 3.56917f);
  data[43].mBoundingSphere = Sphere(Vector3(-30.53f, -13.4146f, -36.0664f), 2.17347f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-23.142f, -34.5889f, 27.9484f), Vector3(2.76399f, 13.1633f, 60.7937f), Vector3(2.76399f, 51.1616f, 5.54983f), Vector3(-23.142f, 3.40939f, -27.2955f), Vector3(22.5348f, -7.7407f, 10.3391f), Vector3(24.182f, -4.70452f, 12.4275f), Vector3(24.182f, -0.395863f, 6.16334f), Vector3(22.5348f, -3.43205f, 4.07497f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest24(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(32);
  data[0].mBoundingSphere = Sphere(Vector3(7.92863f, -4.10898f, -46.5013f), 3.28319f);
  data[1].mBoundingSphere = Sphere(Vector3(-22.9152f, -22.6454f, 10.4193f), 2.6479f);
  data[2].mBoundingSphere = Sphere(Vector3(10.0787f, -37.8768f, 5.8821f), 1.06062f);
  data[3].mBoundingSphere = Sphere(Vector3(-36.5957f, 12.5196f, 28.6212f), 2.78823f);
  data[4].mBoundingSphere = Sphere(Vector3(17.1005f, 5.16071f, -7.17738f), 3.51548f);
  data[5].mBoundingSphere = Sphere(Vector3(19.2087f, -23.366f, -0.667583f), 1.6429f);
  data[6].mBoundingSphere = Sphere(Vector3(-23.7178f, -11.1514f, -42.0665f), 3.35857f);
  data[7].mBoundingSphere = Sphere(Vector3(35.7735f, 31.9962f, -2.63609f), 2.12627f);
  data[8].mBoundingSphere = Sphere(Vector3(-11.9246f, 32.065f, -7.31225f), 2.53413f);
  data[9].mBoundingSphere = Sphere(Vector3(1.32303f, 33.114f, 7.51788f), 0.74796f);
  data[10].mBoundingSphere = Sphere(Vector3(20.597f, 11.9281f, 29.575f), 2.91243f);
  data[11].mBoundingSphere = Sphere(Vector3(8.5343f, 14.9092f, 15.9982f), 1.34358f);
  data[12].mBoundingSphere = Sphere(Vector3(37.9907f, 12.4338f, 26.2853f), 1.258f);
  data[13].mBoundingSphere = Sphere(Vector3(-11.2638f, 2.49997f, -6.38358f), 2.68014f);
  data[14].mBoundingSphere = Sphere(Vector3(-0.923585f, -36.8299f, 0.981903f), 3.67285f);
  data[15].mBoundingSphere = Sphere(Vector3(-0.578564f, -38.8039f, -14.8133f), 1.73603f);
  data[16].mBoundingSphere = Sphere(Vector3(8.16622f, -31.6398f, 5.4608f), 2.51372f);
  data[17].mBoundingSphere = Sphere(Vector3(-13.3109f, -21.0574f, -19.9224f), 1.25742f);
  data[18].mBoundingSphere = Sphere(Vector3(11.0307f, 33.7529f, -9.69583f), 3.18589f);
  data[19].mBoundingSphere = Sphere(Vector3(-27.0862f, -2.3483f, -24.4914f), 2.58783f);
  data[20].mBoundingSphere = Sphere(Vector3(-17.4234f, 31.8029f, -29.2336f), 2.01018f);
  data[21].mBoundingSphere = Sphere(Vector3(-37.1942f, -8.83331f, -16.7575f), 2.77431f);
  data[22].mBoundingSphere = Sphere(Vector3(-22.7128f, 8.90698f, -3.71985f), 2.56695f);
  data[23].mBoundingSphere = Sphere(Vector3(1.09641f, -25.0348f, -39.8523f), 3.54714f);
  data[24].mBoundingSphere = Sphere(Vector3(21.1643f, -17.8541f, 22.4693f), 2.11351f);
  data[25].mBoundingSphere = Sphere(Vector3(-28.4305f, -0.223518f, -15.6011f), 1.77615f);
  data[26].mBoundingSphere = Sphere(Vector3(28.6459f, -10.7516f, 26.3514f), 1.2769f);
  data[27].mBoundingSphere = Sphere(Vector3(-28.2559f, -5.07621f, 26.7528f), 3.20062f);
  data[28].mBoundingSphere = Sphere(Vector3(5.03328f, 34.4654f, -28.3876f), 2.82255f);
  data[29].mBoundingSphere = Sphere(Vector3(5.01899f, -25.846f, -29.3443f), 2.43486f);
  data[30].mBoundingSphere = Sphere(Vector3(10.7066f, -48.492f, 1.58455f), 3.29629f);
  data[31].mBoundingSphere = Sphere(Vector3(1.33465f, -15.6294f, 31.6283f), 1.44865f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(1.09873f, -74.1972f, 65.5745f), Vector3(-24.5682f, 25.209f, 72.6188f), Vector3(-24.5682f, 32.6688f, -32.649f), Vector3(1.09873f, -66.7375f, -39.6933f), Vector3(23.6097f, -14.2301f, 20.4756f), Vector3(22.4978f, -9.92381f, 20.7808f), Vector3(22.4978f, -9.42321f, 13.7166f), Vector3(23.6097f, -13.7295f, 13.4114f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionFrustumCastFuzzTest25(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mBoundingSphere = Sphere(Vector3(12.3431f, -10.2916f, -43.0183f), 0.291037f);
  data[1].mBoundingSphere = Sphere(Vector3(17.8116f, 15.2079f, -18.8203f), 3.5607f);
  data[2].mBoundingSphere = Sphere(Vector3(-31.1692f, 5.95817f, 3.16212f), 2.96288f);
  data[3].mBoundingSphere = Sphere(Vector3(6.72989f, -29.3558f, -5.7346f), 2.20374f);
  data[4].mBoundingSphere = Sphere(Vector3(-20.1867f, 5.20089f, -28.8682f), 1.54688f);
  data[5].mBoundingSphere = Sphere(Vector3(21.1417f, -14.5741f, 3.31796f), 2.80597f);
  data[6].mBoundingSphere = Sphere(Vector3(-37.3987f, 11.9904f, -3.93294f), 1.3691f);
  data[7].mBoundingSphere = Sphere(Vector3(-22.4043f, 19.1701f, -3.72702f), 3.37828f);
  data[8].mBoundingSphere = Sphere(Vector3(-4.9198f, 31.1561f, -24.3962f), 1.67885f);
  data[9].mBoundingSphere = Sphere(Vector3(6.80663f, 23.2168f, 8.34387f), 1.85965f);
  data[10].mBoundingSphere = Sphere(Vector3(7.14534f, 10.0212f, 47.4881f), 1.60197f);
  data[11].mBoundingSphere = Sphere(Vector3(22.4189f, 12.1861f, 22.9823f), 3.25686f);
  data[12].mBoundingSphere = Sphere(Vector3(34.8263f, -10.3282f, -2.38083f), 0.867757f);
  data[13].mBoundingSphere = Sphere(Vector3(-12.7392f, 26.2438f, -19.2194f), 2.55965f);
  data[14].mBoundingSphere = Sphere(Vector3(-29.7562f, -23.6576f, 31.0871f), 2.91127f);
  data[15].mBoundingSphere = Sphere(Vector3(6.02838f, -25.2918f, -27.9942f), 0.430317f);
  data[16].mBoundingSphere = Sphere(Vector3(-24.0545f, -18.2444f, 37.4615f), 1.35066f);
  data[17].mBoundingSphere = Sphere(Vector3(21.6969f, -6.15485f, 23.4251f), 2.26868f);
  data[18].mBoundingSphere = Sphere(Vector3(-4.85046f, -6.72464f, -34.7238f), 3.03977f);
  data[19].mBoundingSphere = Sphere(Vector3(24.7909f, 30.789f, -17.1302f), 0.651704f);
  data[20].mBoundingSphere = Sphere(Vector3(-29.0907f, 11.5887f, -6.51359f), 0.295096f);
  data[21].mBoundingSphere = Sphere(Vector3(13.129f, -25.9424f, -25.098f), 1.94872f);
  data[22].mBoundingSphere = Sphere(Vector3(-21.687f, -5.49882f, -19.9887f), 2.49876f);
  data[23].mBoundingSphere = Sphere(Vector3(25.244f, 19.5035f, 33.2336f), 2.11108f);
  data[24].mBoundingSphere = Sphere(Vector3(-10.7599f, 6.2051f, -42.8064f), 1.67491f);
  data[25].mBoundingSphere = Sphere(Vector3(-2.01845f, 8.3231f, 10.5346f), 2.83682f);
  data[26].mBoundingSphere = Sphere(Vector3(-29.5889f, -16.2492f, 1.20509f), 1.24292f);
  data[27].mBoundingSphere = Sphere(Vector3(-6.31784f, -4.05883f, -27.7706f), 3.51072f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-52.6887f, 58.183f, 18.2189f), Vector3(-52.0938f, -1.19485f, -71.0995f), Vector3(-52.0938f, -93.619f, -9.65696f), Vector3(-52.6887f, -34.2411f, 79.6614f), Vector3(24.0041f, -12.0222f, 4.38909f), Vector3(24.0353f, -15.144f, -0.306862f), Vector3(24.0353f, -22.9445f, 4.87876f), Vector3(24.0041f, -19.8226f, 9.57471f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumSphereTests", Application::mStatistics.mFrustumSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(51);
  data[0].mBoundingSphere = Sphere(Vector3(0, -0, 0), 2.50758f);
  data[1].mBoundingSphere = Sphere(Vector3(2.69624f, 19.4254f, 37.3266f), 0.59859f);
  data[2].mBoundingSphere = Sphere(Vector3(-17.5457f, -15.1591f, -39.0424f), 0.817658f);
  data[3].mBoundingSphere = Sphere(Vector3(27.8845f, -22.305f, -6.40712f), 1.47973f);
  data[4].mBoundingSphere = Sphere(Vector3(-11.8679f, -4.96141f, -13.527f), 2.52068f);
  data[5].mBoundingSphere = Sphere(Vector3(-27.6664f, -19.8129f, -33.8513f), 2.26845f);
  data[6].mBoundingSphere = Sphere(Vector3(2.3407f, -29.4768f, 10.9676f), 3.87208f);
  data[7].mBoundingSphere = Sphere(Vector3(-14.3804f, 37.4119f, 24.0843f), 2.05274f);
  data[8].mBoundingSphere = Sphere(Vector3(-16.4982f, 1.58027f, -19.3367f), 2.55072f);
  data[9].mBoundingSphere = Sphere(Vector3(-1.73636f, -36.522f, -2.07099f), 3.13277f);
  data[10].mBoundingSphere = Sphere(Vector3(32.6371f, 11.2948f, 22.9751f), 3.73072f);
  data[11].mBoundingSphere = Sphere(Vector3(1.10207f, 40.3932f, 1.63285f), 1.17995f);
  data[12].mBoundingSphere = Sphere(Vector3(3.67683f, -33.3144f, -0.490012f), 1.92633f);
  data[13].mBoundingSphere = Sphere(Vector3(2.95695f, -19.4389f, -20.6844f), 0.569829f);
  data[14].mBoundingSphere = Sphere(Vector3(11.7022f, -3.32931f, 44.9942f), 3.2143f);
  data[15].mBoundingSphere = Sphere(Vector3(36.8277f, 1.91903f, -28.8203f), 1.69126f);
  data[16].mBoundingSphere = Sphere(Vector3(17.7058f, 24.0818f, 19.0838f), 0.428694f);
  data[17].mBoundingSphere = Sphere(Vector3(-41.0813f, -26.8734f, -6.01176f), 2.02966f);
  data[18].mBoundingSphere = Sphere(Vector3(-15.7179f, 14.3788f, 12.1571f), 3.93332f);
  data[19].mBoundingSphere = Sphere(Vector3(-48.1695f, 1.24723f, -9.77584f), 3.42548f);
  data[20].mBoundingSphere = Sphere(Vector3(-27.3352f, -25.5117f, -9.25006f), 2.56672f);
  data[21].mBoundingSphere = Sphere(Vector3(-30.1807f, -0.723544f, 32.8346f), 2.70832f);
  data[22].mBoundingSphere = Sphere(Vector3(-11.9258f, 31.9933f, 0.532535f), 2.9638f);
  data[23].mBoundingSphere = Sphere(Vector3(7.67931f, -14.2594f, -42.675f), 3.70509f);
  data[24].mBoundingSphere = Sphere(Vector3(35.033f, 10.3165f, 26.9304f), 2.85189f);
  data[25].mBoundingSphere = Sphere(Vector3(16.1442f, -22.5596f, -17.0795f), 1.22355f);
  data[26].mBoundingSphere = Sphere(Vector3(-25.5479f, 19.8757f, 24.4525f), 0.921683f);
  data[27].mBoundingSphere = Sphere(Vector3(31.4708f, -5.47642f, -9.33483f), 1.61159f);
  data[28].mBoundingSphere = Sphere(Vector3(13.491f, -45.2442f, 15.6148f), 1.47359f);
  data[29].mBoundingSphere = Sphere(Vector3(-10.1644f, -10.2274f, 11.3755f), 3.88994f);
  data[30].mBoundingSphere = Sphere(Vector3(-32.2222f, -32.2732f, -9.70014f), 2.43858f);
  data[31].mBoundingSphere = Sphere(Vector3(-18.3609f, 20.9918f, -25.3397f), 2.26102f);
  data[32].mBoundingSphere = Sphere(Vector3(-11.3878f, 12.6137f, 21.0738f), 0.974102f);
  data[33].mBoundingSphere = Sphere(Vector3(30.3302f, 26.7945f, -6.83283f), 2.393f);
  data[34].mBoundingSphere = Sphere(Vector3(38.615f, -22.3331f, -7.93274f), 1.43578f);
  data[35].mBoundingSphere = Sphere(Vector3(-26.5758f, -6.18249f, 28.4558f), 2.07779f);
  data[36].mBoundingSphere = Sphere(Vector3(18.4839f, 0.643561f, 16.9532f), 2.92322f);
  data[37].mBoundingSphere = Sphere(Vector3(-21.0953f, -0.98367f, 3.85015f), 0.864974f);
  data[38].mBoundingSphere = Sphere(Vector3(0.295875f, -23.2894f, -2.33097f), 0.600446f);
  data[39].mBoundingSphere = Sphere(Vector3(-2.41517f, -46.4778f, 12.2318f), 0.670492f);
  data[40].mBoundingSphere = Sphere(Vector3(-15.4214f, 25.4093f, -6.80134f), 0.793304f);
  data[41].mBoundingSphere = Sphere(Vector3(-31.217f, -4.9739f, 12.2939f), 1.15977f);
  data[42].mBoundingSphere = Sphere(Vector3(11.6021f, -32.8158f, 16.3092f), 0.459542f);
  data[43].mBoundingSphere = Sphere(Vector3(-39.8255f, -21.6229f, 2.11414f), 1.30682f);
  data[44].mBoundingSphere = Sphere(Vector3(28.0209f, -2.24267f, -39.5012f), 3.23506f);
  data[45].mBoundingSphere = Sphere(Vector3(8.59975f, 2.75263f, 48.3893f), 3.3276f);
  data[46].mBoundingSphere = Sphere(Vector3(-28.9072f, -11.3874f, -34.2429f), 3.65534f);
  data[47].mBoundingSphere = Sphere(Vector3(-28.4112f, -26.091f, 9.53762f), 3.78835f);
  data[48].mBoundingSphere = Sphere(Vector3(8.01055f, 31.6377f, -14.8529f), 0.351109f);
  data[49].mBoundingSphere = Sphere(Vector3(-0.805364f, -21.7799f, 27.6817f), 2.2899f);
  data[50].mBoundingSphere = Sphere(Vector3(25.1418f, -8.98801f, -0.649624f), 0.220179f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(44);
  data[0].mBoundingSphere = Sphere(Vector3(-20.7831f, -27.668f, -20.6765f), 1.14156f);
  data[1].mBoundingSphere = Sphere(Vector3(-8.76888f, -7.3873f, 0.43807f), 3.82848f);
  data[2].mBoundingSphere = Sphere(Vector3(0.417869f, -18.9054f, 21.103f), 2.2899f);
  data[3].mBoundingSphere = Sphere(Vector3(-29.6923f, 24.1032f, 3.07364f), 2.08591f);
  data[4].mBoundingSphere = Sphere(Vector3(-8.46492f, 39.9178f, 16.5213f), 1.17635f);
  data[5].mBoundingSphere = Sphere(Vector3(1.5702f, 39.4902f, -23.3753f), 0.463601f);
  data[6].mBoundingSphere = Sphere(Vector3(-20.3992f, -16.263f, -28.7692f), 0.895706f);
  data[7].mBoundingSphere = Sphere(Vector3(15.7331f, 41.1786f, 11.7435f), 2.44519f);
  data[8].mBoundingSphere = Sphere(Vector3(35.3538f, -18.5894f, -24.5802f), 3.18658f);
  data[9].mBoundingSphere = Sphere(Vector3(5.10703f, -42.6675f, 21.2762f), 2.38743f);
  data[10].mBoundingSphere = Sphere(Vector3(25.9566f, 35.8337f, 17.7928f), 2.03419f);
  data[11].mBoundingSphere = Sphere(Vector3(-34.9518f, 5.87176f, -4.04872f), 3.11062f);
  data[12].mBoundingSphere = Sphere(Vector3(41.0155f, -13.3716f, -4.87181f), 2.4475f);
  data[13].mBoundingSphere = Sphere(Vector3(-10.7542f, 14.3741f, -30.1695f), 1.66297f);
  data[14].mBoundingSphere = Sphere(Vector3(11.9479f, -12.9642f, -33.2487f), 3.61162f);
  data[15].mBoundingSphere = Sphere(Vector3(-7.37611f, -26.4997f, -9.47454f), 0.260768f);
  data[16].mBoundingSphere = Sphere(Vector3(-38.0721f, -30.8694f, 6.69876f), 3.41505f);
  data[17].mBoundingSphere = Sphere(Vector3(31.7552f, -15.9352f, -33.4664f), 0.603113f);
  data[18].mBoundingSphere = Sphere(Vector3(-7.54443f, 4.04762f, -21.5565f), 1.55221f);
  data[19].mBoundingSphere = Sphere(Vector3(-14.3896f, 5.43076f, 42.9536f), 0.561711f);
  data[20].mBoundingSphere = Sphere(Vector3(-20.527f, -21.7442f, 13.796f), 1.20094f);
  data[21].mBoundingSphere = Sphere(Vector3(16.4986f, -37.8987f, 19.9986f), 0.845723f);
  data[22].mBoundingSphere = Sphere(Vector3(-3.1885f, 28.2197f, 22.2938f), 1.67433f);
  data[23].mBoundingSphere = Sphere(Vector3(41.315f, -17.4256f, -5.81908f), 2.64152f);
  data[24].mBoundingSphere = Sphere(Vector3(12.0309f, -15.408f, 33.6222f), 1.04832f);
  data[25].mBoundingSphere = Sphere(Vector3(-9.02641f, 10.4972f, -0.510316f), 3.82778f);
  data[26].mBoundingSphere = Sphere(Vector3(-6.97218f, 27.4371f, -39.1691f), 1.16406f);
  data[27].mBoundingSphere = Sphere(Vector3(6.39157f, -41.3249f, -10.2947f), 1.36515f);
  data[28].mBoundingSphere = Sphere(Vector3(22.8323f, -25.988f, -8.03217f), 3.60558f);
  data[29].mBoundingSphere = Sphere(Vector3(-32.7575f, -11.6221f, -15.4106f), 3.66113f);
  data[30].mBoundingSphere = Sphere(Vector3(-18.2342f, 10.3577f, -11.4617f), 0.451192f);
  data[31].mBoundingSphere = Sphere(Vector3(-25.1954f, 0.415525f, -26.8746f), 3.50979f);
  data[32].mBoundingSphere = Sphere(Vector3(-29.4415f, -20.5758f, -4.54009f), 1.60208f);
  data[33].mBoundingSphere = Sphere(Vector3(-10.1875f, -12.6152f, -8.97727f), 2.80701f);
  data[34].mBoundingSphere = Sphere(Vector3(-2.15903f, 46.7348f, -4.97522f), 3.68363f);
  data[35].mBoundingSphere = Sphere(Vector3(1.69086f, 11.2609f, 10.3807f), 1.63989f);
  data[36].mBoundingSphere = Sphere(Vector3(23.2434f, -3.11835f, 16.2766f), 3.12326f);
  data[37].mBoundingSphere = Sphere(Vector3(4.61505f, -34.2623f, 29.5668f), 1.15165f);
  data[38].mBoundingSphere = Sphere(Vector3(-10.6721f, -43.7867f, 19.4454f), 0.202667f);
  data[39].mBoundingSphere = Sphere(Vector3(-6.98336f, 29.3109f, 3.24353f), 1.18169f);
  data[40].mBoundingSphere = Sphere(Vector3(-30.5262f, -9.33709f, 6.16672f), 1.68535f);
  data[41].mBoundingSphere = Sphere(Vector3(-16.0548f, -12.5447f, 44.6584f), 0.280483f);
  data[42].mBoundingSphere = Sphere(Vector3(-20.9322f, -17.1525f, -41.5921f), 3.01831f);
  data[43].mBoundingSphere = Sphere(Vector3(25.3246f, -41.9894f, -8.93663f), 1.89908f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(59);
  data[0].mBoundingSphere = Sphere(Vector3(-17.6507f, -26.7832f, 26.507f), 1.04647f);
  data[1].mBoundingSphere = Sphere(Vector3(0.533833f, 8.36776f, 37.392f), 3.29316f);
  data[2].mBoundingSphere = Sphere(Vector3(5.32213f, -25.373f, 39.0891f), 2.91336f);
  data[3].mBoundingSphere = Sphere(Vector3(5.34033f, -49.4296f, 1.76269f), 1.42755f);
  data[4].mBoundingSphere = Sphere(Vector3(10.0903f, 17.1288f, -39.7279f), 3.80239f);
  data[5].mBoundingSphere = Sphere(Vector3(-33.8963f, 10.0206f, 32.3029f), 1.68558f);
  data[6].mBoundingSphere = Sphere(Vector3(30.227f, 26.2932f, 27.2853f), 0.49584f);
  data[7].mBoundingSphere = Sphere(Vector3(-29.7167f, -3.45723f, 22.7302f), 0.238386f);
  data[8].mBoundingSphere = Sphere(Vector3(-27.577f, -27.9617f, 11.0878f), 1.41247f);
  data[9].mBoundingSphere = Sphere(Vector3(-13.4385f, 13.5063f, -29.868f), 2.88228f);
  data[10].mBoundingSphere = Sphere(Vector3(13.5729f, 32.7268f, -27.2636f), 2.27784f);
  data[11].mBoundingSphere = Sphere(Vector3(-18.5055f, 0.223564f, 0.684442f), 3.79636f);
  data[12].mBoundingSphere = Sphere(Vector3(-9.37229f, -27.469f, 19.1307f), 2.17092f);
  data[13].mBoundingSphere = Sphere(Vector3(-30.4494f, 18.4663f, -31.6645f), 0.877035f);
  data[14].mBoundingSphere = Sphere(Vector3(-9.17861f, -1.25381f, 5.2163f), 2.94513f);
  data[15].mBoundingSphere = Sphere(Vector3(9.061f, -24.3578f, 32.9414f), 2.0466f);
  data[16].mBoundingSphere = Sphere(Vector3(-9.23612f, -15.5659f, -1.10182f), 3.42444f);
  data[17].mBoundingSphere = Sphere(Vector3(1.52551f, -15.5418f, 4.33638f), 3.53577f);
  data[18].mBoundingSphere = Sphere(Vector3(25.2972f, 12.731f, 31.7855f), 3.57427f);
  data[19].mBoundingSphere = Sphere(Vector3(25.7406f, 31.4343f, -19.2148f), 0.94337f);
  data[20].mBoundingSphere = Sphere(Vector3(9.25773f, 3.95075f, 2.80253f), 3.44763f);
  data[21].mBoundingSphere = Sphere(Vector3(35.6751f, 8.0509f, -27.0974f), 2.66994f);
  data[22].mBoundingSphere = Sphere(Vector3(0.753447f, -0.830862f, 16.0216f), 0.706442f);
  data[23].mBoundingSphere = Sphere(Vector3(-36.3239f, 20.707f, -16.0317f), 3.92532f);
  data[24].mBoundingSphere = Sphere(Vector3(-12.4158f, 31.5578f, -22.4027f), 1.91764f);
  data[25].mBoundingSphere = Sphere(Vector3(15.9083f, -19.3892f, 39.3462f), 1.11303f);
  data[26].mBoundingSphere = Sphere(Vector3(-13.5671f, -11.5637f, 5.39971f), 2.02375f);
  data[27].mBoundingSphere = Sphere(Vector3(-1.40605f, 1.02539f, -16.0893f), 0.989178f);
  data[28].mBoundingSphere = Sphere(Vector3(-16.15f, 36.1749f, -11.3396f), 0.389496f);
  data[29].mBoundingSphere = Sphere(Vector3(-35.4394f, -7.38218f, -17.0486f), 1.79517f);
  data[30].mBoundingSphere = Sphere(Vector3(-18.5786f, 31.1476f, 4.64539f), 0.222962f);
  data[31].mBoundingSphere = Sphere(Vector3(-15.3191f, 32.0736f, 34.439f), 3.3668f);
  data[32].mBoundingSphere = Sphere(Vector3(21.4905f, 22.4049f, -2.43198f), 2.77118f);
  data[33].mBoundingSphere = Sphere(Vector3(-21.5304f, -24.0142f, -8.96693f), 0.617609f);
  data[34].mBoundingSphere = Sphere(Vector3(23.6989f, 0.356758f, 24.5661f), 3.89145f);
  data[35].mBoundingSphere = Sphere(Vector3(-5.29328f, -0.344571f, -32.191f), 2.19805f);
  data[36].mBoundingSphere = Sphere(Vector3(-39.1954f, -9.73841f, -12.7962f), 0.597778f);
  data[37].mBoundingSphere = Sphere(Vector3(-11.5091f, -15.5753f, 30.9489f), 2.12824f);
  data[38].mBoundingSphere = Sphere(Vector3(13.0576f, 16.3448f, -24.8407f), 3.78163f);
  data[39].mBoundingSphere = Sphere(Vector3(44.7878f, 5.11053f, -10.2112f), 3.20723f);
  data[40].mBoundingSphere = Sphere(Vector3(-5.15287f, -26.7133f, -5.76533f), 3.9078f);
  data[41].mBoundingSphere = Sphere(Vector3(-29.6504f, -20.8575f, 3.45521f), 0.996368f);
  data[42].mBoundingSphere = Sphere(Vector3(-39.1394f, 5.95178f, 1.90756f), 3.68607f);
  data[43].mBoundingSphere = Sphere(Vector3(0.925778f, 14.2112f, 10.2351f), 0.577599f);
  data[44].mBoundingSphere = Sphere(Vector3(22.1123f, -32.7342f, 11.4295f), 3.71692f);
  data[45].mBoundingSphere = Sphere(Vector3(-22.2594f, -34.1601f, 26.3492f), 1.48785f);
  data[46].mBoundingSphere = Sphere(Vector3(-5.87855f, -1.35094f, 42.979f), 1.91277f);
  data[47].mBoundingSphere = Sphere(Vector3(-12.5492f, -3.34634f, -46.5792f), 0.226441f);
  data[48].mBoundingSphere = Sphere(Vector3(-3.28295f, -14.2014f, 19.966f), 2.89399f);
  data[49].mBoundingSphere = Sphere(Vector3(6.43693f, -24.2093f, -18.5606f), 2.7401f);
  data[50].mBoundingSphere = Sphere(Vector3(-10.0413f, 33.7579f, -15.3686f), 3.16003f);
  data[51].mBoundingSphere = Sphere(Vector3(4.13253f, -3.61426f, -28.5382f), 1.27992f);
  data[52].mBoundingSphere = Sphere(Vector3(-15.1669f, 14.248f, 36.3197f), 1.43543f);
  data[53].mBoundingSphere = Sphere(Vector3(-30.9572f, 34.3691f, 13.9466f), 3.03675f);
  data[54].mBoundingSphere = Sphere(Vector3(6.97011f, -24.6473f, -20.5992f), 3.79114f);
  data[55].mBoundingSphere = Sphere(Vector3(-12.3698f, 3.60271f, 31.7099f), 0.348094f);
  data[56].mBoundingSphere = Sphere(Vector3(6.06173f, -43.1257f, 1.12876f), 0.74019f);
  data[57].mBoundingSphere = Sphere(Vector3(6.49584f, -27.772f, -18.9256f), 0.283151f);
  data[58].mBoundingSphere = Sphere(Vector3(1.98334f, -46.9332f, 0.594995f), 3.70961f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(68);
  data[0].mBoundingSphere = Sphere(Vector3(17.3076f, 28.7092f, 31.4705f), 2.44646f);
  data[1].mBoundingSphere = Sphere(Vector3(12.9982f, -4.87007f, -44.7332f), 2.15166f);
  data[2].mBoundingSphere = Sphere(Vector3(4.6693f, 14.0051f, 39.7934f), 1.48785f);
  data[3].mBoundingSphere = Sphere(Vector3(18.1767f, -34.6536f, 22.1064f), 2.51419f);
  data[4].mBoundingSphere = Sphere(Vector3(-14.9257f, -20.1343f, 24.9194f), 1.75609f);
  data[5].mBoundingSphere = Sphere(Vector3(13.5456f, -17.4234f, -2.33049f), 2.70867f);
  data[6].mBoundingSphere = Sphere(Vector3(-22.1853f, -7.16451f, -16.4603f), 0.647645f);
  data[7].mBoundingSphere = Sphere(Vector3(41.4061f, 10.216f, 11.0077f), 0.668984f);
  data[8].mBoundingSphere = Sphere(Vector3(14.9609f, 3.08501f, 28.763f), 2.57484f);
  data[9].mBoundingSphere = Sphere(Vector3(-29.5057f, 18.205f, 10.3378f), 2.1243f);
  data[10].mBoundingSphere = Sphere(Vector3(-6.8904f, -29.7027f, 9.62012f), 3.06853f);
  data[11].mBoundingSphere = Sphere(Vector3(23.794f, -1.12094f, -36.8079f), 2.08869f);
  data[12].mBoundingSphere = Sphere(Vector3(7.31243f, 35.9232f, 30.3584f), 1.85513f);
  data[13].mBoundingSphere = Sphere(Vector3(21.2048f, -25.5236f, 14.7705f), 2.92658f);
  data[14].mBoundingSphere = Sphere(Vector3(18.1722f, -37.9627f, 7.30442f), 3.10912f);
  data[15].mBoundingSphere = Sphere(Vector3(-12.2924f, 13.6682f, -33.0667f), 0.591864f);
  data[16].mBoundingSphere = Sphere(Vector3(6.34402f, 32.7701f, -31.504f), 2.88031f);
  data[17].mBoundingSphere = Sphere(Vector3(-40.5959f, 9.12457f, 20.1314f), 3.64351f);
  data[18].mBoundingSphere = Sphere(Vector3(-19.5154f, 9.81422f, 20.5449f), 1.69625f);
  data[19].mBoundingSphere = Sphere(Vector3(10.6946f, 19.003f, -33.4723f), 1.43427f);
  data[20].mBoundingSphere = Sphere(Vector3(9.03134f, -37.8263f, 18.5953f), 0.539561f);
  data[21].mBoundingSphere = Sphere(Vector3(20.0958f, 22.0839f, 38.273f), 3.07722f);
  data[22].mBoundingSphere = Sphere(Vector3(18.8426f, 20.3199f, 36.3682f), 3.00034f);
  data[23].mBoundingSphere = Sphere(Vector3(-28.9205f, 34.574f, -16.9597f), 2.78382f);
  data[24].mBoundingSphere = Sphere(Vector3(43.1961f, 9.09739f, -2.77396f), 0.803162f);
  data[25].mBoundingSphere = Sphere(Vector3(31.0723f, 7.5843f, 12.73f), 0.779852f);
  data[26].mBoundingSphere = Sphere(Vector3(0.824102f, 3.51117f, -36.8285f), 3.51003f);
  data[27].mBoundingSphere = Sphere(Vector3(-35.0704f, 2.92535f, 24.7567f), 3.79531f);
  data[28].mBoundingSphere = Sphere(Vector3(30.2838f, 10.859f, 16.3689f), 2.19689f);
  data[29].mBoundingSphere = Sphere(Vector3(0.140955f, 22.1077f, 31.9421f), 1.32816f);
  data[30].mBoundingSphere = Sphere(Vector3(0.323738f, 31.1196f, -12.8976f), 3.90711f);
  data[31].mBoundingSphere = Sphere(Vector3(-10.5056f, 37.0004f, -7.84322f), 1.28583f);
  data[32].mBoundingSphere = Sphere(Vector3(-40.6022f, -16.6546f, -23.5016f), 3.87765f);
  data[33].mBoundingSphere = Sphere(Vector3(-12.2494f, 16.8663f, 25.6963f), 3.39846f);
  data[34].mBoundingSphere = Sphere(Vector3(-0.484971f, -5.31258f, 32.7596f), 1.94211f);
  data[35].mBoundingSphere = Sphere(Vector3(-17.838f, 21.35f, -27.9542f), 1.60962f);
  data[36].mBoundingSphere = Sphere(Vector3(-32.8381f, -0.0440757f, -3.82492f), 2.30799f);
  data[37].mBoundingSphere = Sphere(Vector3(43.0358f, 19.7475f, 4.86204f), 0.241169f);
  data[38].mBoundingSphere = Sphere(Vector3(-6.3804f, -37.4192f, -8.98698f), 0.508713f);
  data[39].mBoundingSphere = Sphere(Vector3(-6.37141f, -33.4789f, -26.8946f), 2.13288f);
  data[40].mBoundingSphere = Sphere(Vector3(-10.9863f, -22.1335f, -8.57728f), 3.13161f);
  data[41].mBoundingSphere = Sphere(Vector3(9.521f, -6.95598f, 1.86648f), 2.95719f);
  data[42].mBoundingSphere = Sphere(Vector3(-24.3943f, 10.8809f, -39.5724f), 0.519034f);
  data[43].mBoundingSphere = Sphere(Vector3(-6.60698f, 0.618785f, -40.0837f), 3.10912f);
  data[44].mBoundingSphere = Sphere(Vector3(-13.2403f, 11.7262f, 18.1682f), 2.64767f);
  data[45].mBoundingSphere = Sphere(Vector3(-5.87949f, -48.686f, 1.71767f), 2.97134f);
  data[46].mBoundingSphere = Sphere(Vector3(7.08943f, -6.11684f, -12.5477f), 1.37861f);
  data[47].mBoundingSphere = Sphere(Vector3(-47.4174f, 7.75107f, -0.0659842f), 0.55371f);
  data[48].mBoundingSphere = Sphere(Vector3(17.6891f, 3.23218f, 21.6092f), 3.4866f);
  data[49].mBoundingSphere = Sphere(Vector3(-26.5361f, 5.48513f, 39.1233f), 2.90837f);
  data[50].mBoundingSphere = Sphere(Vector3(-17.8468f, -3.20267f, 39.6808f), 1.46106f);
  data[51].mBoundingSphere = Sphere(Vector3(11.1283f, -18.6528f, -24.0353f), 1.91926f);
  data[52].mBoundingSphere = Sphere(Vector3(0.0276968f, -27.513f, -6.94253f), 3.68433f);
  data[53].mBoundingSphere = Sphere(Vector3(-22.8558f, -34.6959f, -6.73473f), 1.86754f);
  data[54].mBoundingSphere = Sphere(Vector3(14.306f, -19.2944f, 21.2383f), 2.38349f);
  data[55].mBoundingSphere = Sphere(Vector3(-7.94228f, -15.068f, -40.8843f), 3.77073f);
  data[56].mBoundingSphere = Sphere(Vector3(40.8413f, 13.5926f, 1.25242f), 0.957982f);
  data[57].mBoundingSphere = Sphere(Vector3(10.0414f, 8.91546f, 27.6109f), 3.49785f);
  data[58].mBoundingSphere = Sphere(Vector3(41.4087f, 6.2603f, 16.4933f), 1.88157f);
  data[59].mBoundingSphere = Sphere(Vector3(-11.2763f, -20.3046f, -19.6707f), 3.65951f);
  data[60].mBoundingSphere = Sphere(Vector3(-22.003f, 12.0284f, 19.7292f), 0.780316f);
  data[61].mBoundingSphere = Sphere(Vector3(-35.7465f, -11.6576f, 24.6887f), 1.27261f);
  data[62].mBoundingSphere = Sphere(Vector3(-47.9682f, -3.46447f, -13.3906f), 1.88424f);
  data[63].mBoundingSphere = Sphere(Vector3(-9.55193f, -41.1043f, -6.39164f), 0.599866f);
  data[64].mBoundingSphere = Sphere(Vector3(34.808f, -9.43565f, -22.1149f), 1.65508f);
  data[65].mBoundingSphere = Sphere(Vector3(14.9876f, 35.6731f, 13.3388f), 1.76514f);
  data[66].mBoundingSphere = Sphere(Vector3(-10.4696f, -35.572f, 22.5235f), 1.38846f);
  data[67].mBoundingSphere = Sphere(Vector3(-43.6877f, -6.7892f, 21.7591f), 3.14275f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(29);
  data[0].mBoundingSphere = Sphere(Vector3(6.56411f, -31.8098f, 22.8017f), 0.211017f);
  data[1].mBoundingSphere = Sphere(Vector3(42.1225f, 22.6353f, 5.65031f), 3.60118f);
  data[2].mBoundingSphere = Sphere(Vector3(-0.489213f, -12.0418f, -12.4454f), 0.895242f);
  data[3].mBoundingSphere = Sphere(Vector3(13.67f, 33.8939f, 27.838f), 2.00427f);
  data[4].mBoundingSphere = Sphere(Vector3(3.8792f, -28.9251f, 11.1965f), 3.7197f);
  data[5].mBoundingSphere = Sphere(Vector3(39.284f, 13.9249f, 20.6536f), 0.498276f);
  data[6].mBoundingSphere = Sphere(Vector3(-40.1796f, -15.2874f, -0.384425f), 1.1026f);
  data[7].mBoundingSphere = Sphere(Vector3(26.8027f, -19.6292f, 30.1057f), 2.76561f);
  data[8].mBoundingSphere = Sphere(Vector3(-2.11505f, -20.2491f, 29.7563f), 1.84863f);
  data[9].mBoundingSphere = Sphere(Vector3(-35.1095f, 26.5021f, 21.9704f), 0.262856f);
  data[10].mBoundingSphere = Sphere(Vector3(-24.0719f, -41.5434f, 4.68326f), 3.01947f);
  data[11].mBoundingSphere = Sphere(Vector3(-45.0416f, -8.73535f, -9.14478f), 0.380682f);
  data[12].mBoundingSphere = Sphere(Vector3(-6.1161f, 5.09858f, -43.3975f), 2.17973f);
  data[13].mBoundingSphere = Sphere(Vector3(-39.23f, -22.1647f, -16.1092f), 3.77629f);
  data[14].mBoundingSphere = Sphere(Vector3(-12.8916f, -17.7219f, -16.4346f), 0.619001f);
  data[15].mBoundingSphere = Sphere(Vector3(0.3994f, 14.2382f, -32.5659f), 3.08244f);
  data[16].mBoundingSphere = Sphere(Vector3(34.2354f, 20.6413f, -19.9085f), 1.34706f);
  data[17].mBoundingSphere = Sphere(Vector3(29.8448f, -33.23f, -10.2675f), 2.99141f);
  data[18].mBoundingSphere = Sphere(Vector3(-37.074f, -6.71914f, -27.7179f), 1.86522f);
  data[19].mBoundingSphere = Sphere(Vector3(13.6352f, -39.0903f, -5.95995f), 0.912638f);
  data[20].mBoundingSphere = Sphere(Vector3(-13.968f, 7.26434f, 31.303f), 0.712705f);
  data[21].mBoundingSphere = Sphere(Vector3(9.78712f, -5.61292f, 19.1222f), 0.407587f);
  data[22].mBoundingSphere = Sphere(Vector3(-33.5027f, 28.8225f, -20.2459f), 2.58725f);
  data[23].mBoundingSphere = Sphere(Vector3(13.8422f, 31.3357f, -0.228963f), 0.39715f);
  data[24].mBoundingSphere = Sphere(Vector3(25.0497f, -24.2799f, -16.5968f), 3.04151f);
  data[25].mBoundingSphere = Sphere(Vector3(-23.9491f, 10.6878f, -10.1029f), 1.94605f);
  data[26].mBoundingSphere = Sphere(Vector3(42.9249f, -0.234586f, -18.7414f), 2.15422f);
  data[27].mBoundingSphere = Sphere(Vector3(9.87626f, 40.5721f, 5.4138f), 2.22078f);
  data[28].mBoundingSphere = Sphere(Vector3(-32.715f, 16.3972f, 18.6601f), 1.57587f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest6(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mBoundingSphere = Sphere(Vector3(-11.6476f, 30.164f, 2.11529f), 1.31134f);
  data[1].mBoundingSphere = Sphere(Vector3(1.4927f, -11.0498f, 47.9365f), 1.94802f);
  data[2].mBoundingSphere = Sphere(Vector3(25.4996f, -34.724f, -9.22234f), 3.99153f);
  data[3].mBoundingSphere = Sphere(Vector3(6.80252f, -33.0934f, 27.9508f), 1.88841f);
  data[4].mBoundingSphere = Sphere(Vector3(0.972099f, 3.61971f, -20.7456f), 2.81107f);
  data[5].mBoundingSphere = Sphere(Vector3(11.4824f, 17.7289f, -24.9036f), 2.65869f);
  data[6].mBoundingSphere = Sphere(Vector3(30.392f, -12.3611f, -37.5504f), 1.10631f);
  data[7].mBoundingSphere = Sphere(Vector3(-31.151f, -17.608f, 15.8679f), 2.61798f);
  data[8].mBoundingSphere = Sphere(Vector3(29.174f, 4.46213f, 37.9857f), 1.64441f);
  data[9].mBoundingSphere = Sphere(Vector3(-10.485f, -15.0351f, -8.56476f), 1.52322f);
  data[10].mBoundingSphere = Sphere(Vector3(-13.0218f, 10.4717f, -42.1945f), 0.700644f);
  data[11].mBoundingSphere = Sphere(Vector3(40.967f, -6.75717f, -2.65756f), 3.39371f);
  data[12].mBoundingSphere = Sphere(Vector3(-42.3965f, -16.3453f, 9.55804f), 3.51095f);
  data[13].mBoundingSphere = Sphere(Vector3(-13.0101f, 16.8644f, -8.93964f), 2.75112f);
  data[14].mBoundingSphere = Sphere(Vector3(-29.2843f, 21.8942f, -6.53029f), 0.298575f);
  data[15].mBoundingSphere = Sphere(Vector3(17.7643f, 22.8951f, 3.69183f), 3.63411f);
  data[16].mBoundingSphere = Sphere(Vector3(8.76321f, 2.10162f, -15.5691f), 1.67793f);
  data[17].mBoundingSphere = Sphere(Vector3(-17.438f, -46.1846f, 3.99802f), 2.98851f);
  data[18].mBoundingSphere = Sphere(Vector3(25.8046f, -24.9636f, 9.18732f), 0.429969f);
  data[19].mBoundingSphere = Sphere(Vector3(26.3324f, -13.6531f, 3.31092f), 3.032f);
  data[20].mBoundingSphere = Sphere(Vector3(-2.60305f, -28.6972f, 32.3709f), 0.256362f);
  data[21].mBoundingSphere = Sphere(Vector3(16.4224f, 5.53565f, -41.376f), 3.19389f);
  data[22].mBoundingSphere = Sphere(Vector3(29.7834f, 26.3419f, -22.5543f), 1.30555f);
  data[23].mBoundingSphere = Sphere(Vector3(-32.8436f, 21.6378f, -21.9402f), 2.03013f);
  data[24].mBoundingSphere = Sphere(Vector3(-14.0243f, -10.4141f, -4.23183f), 3.27565f);
  data[25].mBoundingSphere = Sphere(Vector3(-28.985f, 21.9402f, 12.0541f), 1.5129f);
  data[26].mBoundingSphere = Sphere(Vector3(-27.2691f, 25.4012f, -25.1168f), 3.29177f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest7(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(71);
  data[0].mBoundingSphere = Sphere(Vector3(7.07211f, 20.6303f, 2.25967f), 3.44902f);
  data[1].mBoundingSphere = Sphere(Vector3(-16.6163f, 6.16939f, 31.6956f), 0.895822f);
  data[2].mBoundingSphere = Sphere(Vector3(25.2249f, -22.5179f, -14.4509f), 3.65464f);
  data[3].mBoundingSphere = Sphere(Vector3(-0.0494022f, 11.845f, 14.8693f), 0.204871f);
  data[4].mBoundingSphere = Sphere(Vector3(4.0198f, 27.9756f, 26.36f), 2.39752f);
  data[5].mBoundingSphere = Sphere(Vector3(9.23842f, -24.0691f, 18.1852f), 1.94756f);
  data[6].mBoundingSphere = Sphere(Vector3(2.92828f, -9.10191f, -16.3535f), 1.30241f);
  data[7].mBoundingSphere = Sphere(Vector3(11.343f, -12.5326f, -26.8689f), 0.253346f);
  data[8].mBoundingSphere = Sphere(Vector3(33.5358f, 9.15294f, 27.2367f), 3.95906f);
  data[9].mBoundingSphere = Sphere(Vector3(20.1096f, 12.3783f, -29.2951f), 2.14969f);
  data[10].mBoundingSphere = Sphere(Vector3(-21.8484f, -23.2777f, 12.4282f), 0.381262f);
  data[11].mBoundingSphere = Sphere(Vector3(-35.8744f, 7.42975f, -12.3499f), 3.70787f);
  data[12].mBoundingSphere = Sphere(Vector3(26.7089f, -7.32271f, 6.19328f), 3.24063f);
  data[13].mBoundingSphere = Sphere(Vector3(23.9285f, -19.8273f, -34.5268f), 2.76399f);
  data[14].mBoundingSphere = Sphere(Vector3(0.475821f, -20.805f, 40.0302f), 2.87486f);
  data[15].mBoundingSphere = Sphere(Vector3(6.48702f, -19.3705f, -15.9672f), 2.61578f);
  data[16].mBoundingSphere = Sphere(Vector3(16.1028f, -34.1427f, -25.3734f), 0.671072f);
  data[17].mBoundingSphere = Sphere(Vector3(19.4361f, 1.47309f, 7.0029f), 2.89272f);
  data[18].mBoundingSphere = Sphere(Vector3(31.7935f, -24.9555f, 3.31563f), 3.02562f);
  data[19].mBoundingSphere = Sphere(Vector3(-27.2002f, -25.7492f, 29.4073f), 0.4026f);
  data[20].mBoundingSphere = Sphere(Vector3(-19.7234f, -22.813f, 4.22381f), 2.4758f);
  data[21].mBoundingSphere = Sphere(Vector3(29.2287f, 12.9332f, -14.8663f), 3.75298f);
  data[22].mBoundingSphere = Sphere(Vector3(-0.639446f, -24.742f, -21.8881f), 3.01019f);
  data[23].mBoundingSphere = Sphere(Vector3(-11.8524f, 33.8019f, -33.6213f), 0.946385f);
  data[24].mBoundingSphere = Sphere(Vector3(6.60285f, 18.6758f, 6.28734f), 2.1512f);
  data[25].mBoundingSphere = Sphere(Vector3(36.16f, 27.7055f, -9.43116f), 1.55233f);
  data[26].mBoundingSphere = Sphere(Vector3(-31.0731f, -22.3519f, 12.7169f), 2.01412f);
  data[27].mBoundingSphere = Sphere(Vector3(-13.2735f, 1.59068f, -15.3547f), 1.45283f);
  data[28].mBoundingSphere = Sphere(Vector3(-4.80408f, -13.5015f, 4.88854f), 3.74057f);
  data[29].mBoundingSphere = Sphere(Vector3(1.75526f, 31.614f, -7.4166f), 3.16374f);
  data[30].mBoundingSphere = Sphere(Vector3(20.3747f, -4.54876f, -28.3069f), 0.506974f);
  data[31].mBoundingSphere = Sphere(Vector3(-24.8006f, -39.1338f, 12.3269f), 0.530515f);
  data[32].mBoundingSphere = Sphere(Vector3(-19.2308f, 21.4659f, -34.413f), 3.3087f);
  data[33].mBoundingSphere = Sphere(Vector3(-8.6805f, 41.2461f, 23.4549f), 3.80007f);
  data[34].mBoundingSphere = Sphere(Vector3(2.37447f, 7.2893f, 18.9657f), 0.71746f);
  data[35].mBoundingSphere = Sphere(Vector3(21.8019f, -29.8204f, 23.133f), 2.46571f);
  data[36].mBoundingSphere = Sphere(Vector3(7.50587f, 5.2189f, 32.446f), 0.816382f);
  data[37].mBoundingSphere = Sphere(Vector3(-20.716f, 28.767f, -27.9311f), 2.68942f);
  data[38].mBoundingSphere = Sphere(Vector3(27.2466f, 29.4053f, -24.3933f), 3.30789f);
  data[39].mBoundingSphere = Sphere(Vector3(10.2257f, 25.1037f, 40.3386f), 2.49726f);
  data[40].mBoundingSphere = Sphere(Vector3(15.3389f, 5.95934f, 11.808f), 0.596735f);
  data[41].mBoundingSphere = Sphere(Vector3(-29.305f, 0.112382f, 22.2511f), 3.55061f);
  data[42].mBoundingSphere = Sphere(Vector3(-12.4952f, -27.2412f, 2.81203f), 0.249751f);
  data[43].mBoundingSphere = Sphere(Vector3(-8.12928f, -3.35642f, 9.9797f), 2.49204f);
  data[44].mBoundingSphere = Sphere(Vector3(-8.14136f, 14.1127f, 11.0735f), 0.428578f);
  data[45].mBoundingSphere = Sphere(Vector3(-18.378f, 23.1362f, -32.3231f), 3.66705f);
  data[46].mBoundingSphere = Sphere(Vector3(-42.7577f, 1.30403f, -23.0842f), 1.89862f);
  data[47].mBoundingSphere = Sphere(Vector3(0.914803f, 11.6048f, 45.3251f), 3.81943f);
  data[48].mBoundingSphere = Sphere(Vector3(-6.79201f, -1.43112f, -44.7028f), 3.41261f);
  data[49].mBoundingSphere = Sphere(Vector3(-2.3243f, -24.2782f, -8.67504f), 1.96275f);
  data[50].mBoundingSphere = Sphere(Vector3(-29.8734f, -12.0735f, 10.2498f), 3.26904f);
  data[51].mBoundingSphere = Sphere(Vector3(-28.3028f, 3.37528f, -16.7008f), 0.226441f);
  data[52].mBoundingSphere = Sphere(Vector3(-37.4911f, 17.6535f, -2.5506f), 3.24584f);
  data[53].mBoundingSphere = Sphere(Vector3(-2.91531f, 42.194f, -19.4237f), 3.27704f);
  data[54].mBoundingSphere = Sphere(Vector3(2.76402f, -4.37165f, 22.654f), 3.50921f);
  data[55].mBoundingSphere = Sphere(Vector3(9.63227f, 23.2126f, -2.03532f), 1.11338f);
  data[56].mBoundingSphere = Sphere(Vector3(-33.1407f, -17.8948f, -22.1396f), 3.69697f);
  data[57].mBoundingSphere = Sphere(Vector3(39.2251f, 0.567916f, 22.1363f), 3.63922f);
  data[58].mBoundingSphere = Sphere(Vector3(34.8614f, -30.0672f, 17.6171f), 2.57681f);
  data[59].mBoundingSphere = Sphere(Vector3(-34.8438f, -0.547915f, -12.3317f), 1.60765f);
  data[60].mBoundingSphere = Sphere(Vector3(33.6829f, -12.6864f, 8.16732f), 3.8809f);
  data[61].mBoundingSphere = Sphere(Vector3(35.8114f, 22.8373f, -7.57759f), 2.14378f);
  data[62].mBoundingSphere = Sphere(Vector3(-24.4285f, 3.29403f, -5.37175f), 1.71318f);
  data[63].mBoundingSphere = Sphere(Vector3(-25.3976f, 8.33113f, 6.64463f), 2.03964f);
  data[64].mBoundingSphere = Sphere(Vector3(-13.1434f, -1.47292f, -12.5124f), 2.53425f);
  data[65].mBoundingSphere = Sphere(Vector3(-14.761f, 21.4195f, -32.2586f), 1.42592f);
  data[66].mBoundingSphere = Sphere(Vector3(1.19018f, 15.3613f, -12.4987f), 3.91882f);
  data[67].mBoundingSphere = Sphere(Vector3(-17.3786f, -6.07962f, -11.1708f), 0.817542f);
  data[68].mBoundingSphere = Sphere(Vector3(18.5242f, -4.93008f, 31.2177f), 2.29002f);
  data[69].mBoundingSphere = Sphere(Vector3(19.9967f, -13.6382f, 30.2143f), 0.535502f);
  data[70].mBoundingSphere = Sphere(Vector3(-0.718205f, 16.8044f, 4.00665f), 3.02794f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest8(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(31);
  data[0].mBoundingSphere = Sphere(Vector3(32.5867f, -35.6729f, 10.4661f), 2.23018f);
  data[1].mBoundingSphere = Sphere(Vector3(-20.4303f, 38.0323f, 10.5941f), 0.779736f);
  data[2].mBoundingSphere = Sphere(Vector3(-9.71204f, 29.0653f, 16.7936f), 3.55792f);
  data[3].mBoundingSphere = Sphere(Vector3(-9.36902f, 23.1339f, 17.3394f), 2.98746f);
  data[4].mBoundingSphere = Sphere(Vector3(9.32263f, 16.9664f, 11.691f), 1.3125f);
  data[5].mBoundingSphere = Sphere(Vector3(10.3892f, -16.9965f, 37.0668f), 3.15817f);
  data[6].mBoundingSphere = Sphere(Vector3(-18.0643f, -27.9442f, 1.12276f), 3.79357f);
  data[7].mBoundingSphere = Sphere(Vector3(4.13031f, 4.77268f, -17.3514f), 1.71585f);
  data[8].mBoundingSphere = Sphere(Vector3(22.8544f, -18.7606f, -3.94279f), 1.47533f);
  data[9].mBoundingSphere = Sphere(Vector3(13.9555f, -3.13533f, -37.514f), 1.1578f);
  data[10].mBoundingSphere = Sphere(Vector3(8.56053f, 9.68735f, -18.8076f), 2.64709f);
  data[11].mBoundingSphere = Sphere(Vector3(-26.8467f, 26.9512f, -10.2527f), 1.08149f);
  data[12].mBoundingSphere = Sphere(Vector3(15.3485f, 18.062f, -2.87459f), 3.02782f);
  data[13].mBoundingSphere = Sphere(Vector3(-3.09557f, -2.52176f, 7.46413f), 3.18716f);
  data[14].mBoundingSphere = Sphere(Vector3(-29.5848f, -16.5585f, 13.1039f), 3.35567f);
  data[15].mBoundingSphere = Sphere(Vector3(27.4648f, 25.8156f, 25.9582f), 3.45494f);
  data[16].mBoundingSphere = Sphere(Vector3(-13.7337f, -22.502f, 11.707f), 2.75355f);
  data[17].mBoundingSphere = Sphere(Vector3(-7.35956f, -33.9036f, -10.167f), 1.89746f);
  data[18].mBoundingSphere = Sphere(Vector3(8.42333f, -23.666f, -18.6567f), 2.06828f);
  data[19].mBoundingSphere = Sphere(Vector3(20.9134f, -39.1384f, -3.27676f), 3.28736f);
  data[20].mBoundingSphere = Sphere(Vector3(-24.2038f, 2.48238f, -5.26568f), 1.98583f);
  data[21].mBoundingSphere = Sphere(Vector3(25.5046f, -16.9117f, 18.4987f), 1.25869f);
  data[22].mBoundingSphere = Sphere(Vector3(16.3601f, 42.1636f, -12.4012f), 3.52116f);
  data[23].mBoundingSphere = Sphere(Vector3(15.6969f, -6.14699f, 30.7519f), 2.78591f);
  data[24].mBoundingSphere = Sphere(Vector3(-17.1346f, -1.26727f, -33.9885f), 3.28261f);
  data[25].mBoundingSphere = Sphere(Vector3(36.3027f, 26.6187f, 0.834053f), 1.83425f);
  data[26].mBoundingSphere = Sphere(Vector3(-18.6758f, 32.561f, 32.0139f), 2.51245f);
  data[27].mBoundingSphere = Sphere(Vector3(-33.3288f, -2.22734f, -24.7808f), 0.988714f);
  data[28].mBoundingSphere = Sphere(Vector3(11.6603f, 23.0624f, 12.3632f), 3.30128f);
  data[29].mBoundingSphere = Sphere(Vector3(5.17821f, 6.32113f, -47.4155f), 1.25545f);
  data[30].mBoundingSphere = Sphere(Vector3(-24.057f, -33.815f, -20.9078f), 3.37782f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest9(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mBoundingSphere = Sphere(Vector3(33.5559f, 6.33108f, -4.72272f), 0.327567f);
  data[1].mBoundingSphere = Sphere(Vector3(29.5759f, 10.001f, -26.3738f), 3.23668f);
  data[2].mBoundingSphere = Sphere(Vector3(45.171f, -17.2411f, 5.05461f), 2.49656f);
  data[3].mBoundingSphere = Sphere(Vector3(19.7827f, -32.4339f, -13.4826f), 0.693454f);
  data[4].mBoundingSphere = Sphere(Vector3(24.3399f, -21.1395f, 24.9785f), 1.73765f);
  data[5].mBoundingSphere = Sphere(Vector3(19.9922f, -39.8255f, -21.2446f), 2.88495f);
  data[6].mBoundingSphere = Sphere(Vector3(5.38026f, 1.14066f, -0.424739f), 0.21438f);
  data[7].mBoundingSphere = Sphere(Vector3(46.6406f, -0.7379f, 12.9305f), 1.03162f);
  data[8].mBoundingSphere = Sphere(Vector3(-29.3422f, -10.3977f, -11.5072f), 0.563567f);
  data[9].mBoundingSphere = Sphere(Vector3(24.8466f, -33.1901f, -12.97f), 3.817f);
  data[10].mBoundingSphere = Sphere(Vector3(-21.411f, 11.5984f, 20.1325f), 0.566582f);
  data[11].mBoundingSphere = Sphere(Vector3(-1.46509f, 36.0628f, -33.7018f), 0.944646f);
  data[12].mBoundingSphere = Sphere(Vector3(-16.1674f, 28.4651f, 10.5733f), 1.59605f);
  data[13].mBoundingSphere = Sphere(Vector3(-33.4041f, 13.359f, 2.4906f), 1.27342f);
  data[14].mBoundingSphere = Sphere(Vector3(2.5042f, -28.4877f, -25.9408f), 0.436116f);
  data[15].mBoundingSphere = Sphere(Vector3(32.8749f, 25.6417f, -14.2402f), 1.12475f);
  data[16].mBoundingSphere = Sphere(Vector3(13.0782f, 16.9965f, -13.1106f), 2.47893f);
  data[17].mBoundingSphere = Sphere(Vector3(-9.51962f, -17.7377f, -34.5655f), 0.566814f);
  data[18].mBoundingSphere = Sphere(Vector3(12.7891f, 20.2965f, 30.3463f), 3.0959f);
  data[19].mBoundingSphere = Sphere(Vector3(-7.66647f, -8.31696f, 6.09385f), 3.07316f);
  data[20].mBoundingSphere = Sphere(Vector3(19.136f, 35.7955f, -3.97417f), 1.78346f);
  data[21].mBoundingSphere = Sphere(Vector3(42.0223f, 11.6686f, -10.7863f), 2.35589f);
  data[22].mBoundingSphere = Sphere(Vector3(6.50318f, -43.9411f, -11.3785f), 3.48451f);
  data[23].mBoundingSphere = Sphere(Vector3(18.9171f, 23.5864f, -25.2533f), 1.97493f);
  data[24].mBoundingSphere = Sphere(Vector3(-33.1409f, 7.3422f, 14.7047f), 3.284f);
  data[25].mBoundingSphere = Sphere(Vector3(29.9816f, 16.8372f, -23.0283f), 3.12094f);
  data[26].mBoundingSphere = Sphere(Vector3(-16.0512f, 4.68496f, -23.6918f), 3.88055f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest10(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(38);
  data[0].mBoundingSphere = Sphere(Vector3(-17.9757f, -27.4478f, 4.7874f), 2.31541f);
  data[1].mBoundingSphere = Sphere(Vector3(-15.1949f, -11.9622f, -9.92967f), 3.20966f);
  data[2].mBoundingSphere = Sphere(Vector3(30.5511f, -6.17163f, 23.3368f), 3.02655f);
  data[3].mBoundingSphere = Sphere(Vector3(32.5524f, 27.0997f, 22.062f), 2.25917f);
  data[4].mBoundingSphere = Sphere(Vector3(31.0759f, -3.73318f, 31.5856f), 3.58599f);
  data[5].mBoundingSphere = Sphere(Vector3(24.7767f, 8.84679f, 35.9126f), 3.47315f);
  data[6].mBoundingSphere = Sphere(Vector3(-17.6691f, 18.019f, 36.1227f), 1.68686f);
  data[7].mBoundingSphere = Sphere(Vector3(-2.74073f, 4.33757f, 24.7537f), 2.23203f);
  data[8].mBoundingSphere = Sphere(Vector3(-28.4171f, 16.5261f, 26.323f), 3.93865f);
  data[9].mBoundingSphere = Sphere(Vector3(-24.9958f, 20.2352f, 3.71386f), 3.61208f);
  data[10].mBoundingSphere = Sphere(Vector3(-27.3364f, 30.2092f, 10.4499f), 2.36876f);
  data[11].mBoundingSphere = Sphere(Vector3(17.0693f, 15.6181f, 28.6284f), 3.87417f);
  data[12].mBoundingSphere = Sphere(Vector3(30.898f, -1.74671f, 20.7914f), 2.7009f);
  data[13].mBoundingSphere = Sphere(Vector3(17.6463f, -1.16739f, 38.0546f), 0.929337f);
  data[14].mBoundingSphere = Sphere(Vector3(4.64944f, 15.7803f, 17.8892f), 1.80596f);
  data[15].mBoundingSphere = Sphere(Vector3(0.075686f, 5.78292f, -40.318f), 3.37886f);
  data[16].mBoundingSphere = Sphere(Vector3(12.1283f, -17.9395f, -43.9507f), 1.73104f);
  data[17].mBoundingSphere = Sphere(Vector3(2.42845f, 30.882f, 23.8983f), 3.92821f);
  data[18].mBoundingSphere = Sphere(Vector3(-18.0082f, -7.73611f, -27.6648f), 3.30035f);
  data[19].mBoundingSphere = Sphere(Vector3(19.7873f, -23.2314f, -1.77153f), 0.777184f);
  data[20].mBoundingSphere = Sphere(Vector3(7.30257f, -9.74698f, -47.3246f), 2.09345f);
  data[21].mBoundingSphere = Sphere(Vector3(8.0202f, 14.1492f, 32.2282f), 2.38558f);
  data[22].mBoundingSphere = Sphere(Vector3(7.40406f, 14.6511f, -3.44452f), 1.99719f);
  data[23].mBoundingSphere = Sphere(Vector3(23.9325f, 7.58962f, -33.1926f), 0.411762f);
  data[24].mBoundingSphere = Sphere(Vector3(-0.237271f, 40.2389f, -20.8646f), 0.733116f);
  data[25].mBoundingSphere = Sphere(Vector3(43.2083f, 23.9067f, -4.61192f), 2.02874f);
  data[26].mBoundingSphere = Sphere(Vector3(-36.048f, 14.5288f, 13.163f), 0.559972f);
  data[27].mBoundingSphere = Sphere(Vector3(-45.1377f, 6.97907f, 1.53555f), 3.81294f);
  data[28].mBoundingSphere = Sphere(Vector3(-3.59277f, 42.4089f, 24.5475f), 2.35102f);
  data[29].mBoundingSphere = Sphere(Vector3(19.6855f, 34.4053f, 25.8503f), 2.2093f);
  data[30].mBoundingSphere = Sphere(Vector3(23.6665f, 8.62988f, 8.39798f), 2.04602f);
  data[31].mBoundingSphere = Sphere(Vector3(38.4356f, 3.71501f, -19.9481f), 2.57217f);
  data[32].mBoundingSphere = Sphere(Vector3(-5.60989f, -34.3704f, 35.0282f), 0.87889f);
  data[33].mBoundingSphere = Sphere(Vector3(9.31767f, 11.0377f, 13.8233f), 3.97866f);
  data[34].mBoundingSphere = Sphere(Vector3(-21.3867f, -29.3527f, -28.2832f), 2.78034f);
  data[35].mBoundingSphere = Sphere(Vector3(-8.68399f, 9.11103f, 35.8513f), 1.61901f);
  data[36].mBoundingSphere = Sphere(Vector3(-12.3958f, -41.732f, 6.24524f), 2.75459f);
  data[37].mBoundingSphere = Sphere(Vector3(22.4476f, -32.4866f, -25.2314f), 2.9623f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest11(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(38);
  data[0].mBoundingSphere = Sphere(Vector3(-2.69487f, -22.9054f, -42.3021f), 1.76386f);
  data[1].mBoundingSphere = Sphere(Vector3(-17.0537f, -9.90015f, -21.67f), 2.47557f);
  data[2].mBoundingSphere = Sphere(Vector3(-27.7331f, -14.4299f, -29.487f), 1.08219f);
  data[3].mBoundingSphere = Sphere(Vector3(-33.0039f, 2.53005f, -16.9044f), 3.84437f);
  data[4].mBoundingSphere = Sphere(Vector3(4.74532f, 25.3714f, -0.166213f), 2.81304f);
  data[5].mBoundingSphere = Sphere(Vector3(-32.4979f, 30.5758f, 7.81233f), 2.00763f);
  data[6].mBoundingSphere = Sphere(Vector3(-25.6231f, -35.885f, -21.1315f), 0.286166f);
  data[7].mBoundingSphere = Sphere(Vector3(0.777061f, -0.697698f, 47.2519f), 0.378942f);
  data[8].mBoundingSphere = Sphere(Vector3(-2.87856f, 14.1067f, -1.30726f), 1.45144f);
  data[9].mBoundingSphere = Sphere(Vector3(-25.7312f, -24.4054f, -13.8649f), 2.86801f);
  data[10].mBoundingSphere = Sphere(Vector3(29.8457f, -28.8288f, -11.1443f), 3.12384f);
  data[11].mBoundingSphere = Sphere(Vector3(11.3182f, 34.8587f, -24.2113f), 2.61357f);
  data[12].mBoundingSphere = Sphere(Vector3(-13.2935f, -10.4365f, -18.3584f), 1.80573f);
  data[13].mBoundingSphere = Sphere(Vector3(-11.2327f, 20.6626f, 34.1048f), 3.49263f);
  data[14].mBoundingSphere = Sphere(Vector3(11.6966f, 48.5356f, 2.43003f), 3.08233f);
  data[15].mBoundingSphere = Sphere(Vector3(37.1252f, 13.2559f, -13.8551f), 2.20397f);
  data[16].mBoundingSphere = Sphere(Vector3(-8.25364f, 17.0447f, 3.04695f), 2.99291f);
  data[17].mBoundingSphere = Sphere(Vector3(14.31f, 14.0308f, -29.1156f), 3.12651f);
  data[18].mBoundingSphere = Sphere(Vector3(23.9646f, -27.606f, 23.4745f), 2.17695f);
  data[19].mBoundingSphere = Sphere(Vector3(-21.8959f, 3.7778f, 32.9414f), 1.35286f);
  data[20].mBoundingSphere = Sphere(Vector3(-13.0895f, -12.8563f, 15.7499f), 3.3951f);
  data[21].mBoundingSphere = Sphere(Vector3(17.4827f, -26.6448f, 27.7524f), 2.29837f);
  data[22].mBoundingSphere = Sphere(Vector3(19.8179f, -11.2799f, -19.7126f), 3.82558f);
  data[23].mBoundingSphere = Sphere(Vector3(-21.3429f, -1.79265f, 23.9636f), 1.88424f);
  data[24].mBoundingSphere = Sphere(Vector3(-4.4627f, 3.47187f, -47.6791f), 1.1346f);
  data[25].mBoundingSphere = Sphere(Vector3(16.5251f, 30.4885f, -0.159813f), 3.29629f);
  data[26].mBoundingSphere = Sphere(Vector3(17.5156f, -4.32158f, 45.0334f), 1.92367f);
  data[27].mBoundingSphere = Sphere(Vector3(23.6427f, -18.7564f, 3.88442f), 1.91868f);
  data[28].mBoundingSphere = Sphere(Vector3(23.9828f, -41.5823f, -2.49822f), 2.14923f);
  data[29].mBoundingSphere = Sphere(Vector3(-1.09527f, 12.0747f, 34.3525f), 3.0422f);
  data[30].mBoundingSphere = Sphere(Vector3(-6.88793f, -26.7188f, 9.69783f), 0.319681f);
  data[31].mBoundingSphere = Sphere(Vector3(-20.3007f, -17.3702f, 39.6477f), 3.94816f);
  data[32].mBoundingSphere = Sphere(Vector3(10.8344f, 5.6439f, 25.8005f), 1.66656f);
  data[33].mBoundingSphere = Sphere(Vector3(-11.8617f, 12.0225f, 10.267f), 1.16684f);
  data[34].mBoundingSphere = Sphere(Vector3(-20.9154f, -22.0368f, -20.9468f), 1.88992f);
  data[35].mBoundingSphere = Sphere(Vector3(-33.9827f, -18.6452f, 3.86004f), 3.91117f);
  data[36].mBoundingSphere = Sphere(Vector3(5.59918f, -10.8054f, 3.2833f), 3.68004f);
  data[37].mBoundingSphere = Sphere(Vector3(-30.1118f, 5.47521f, -33.227f), 0.485055f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest12(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mBoundingSphere = Sphere(Vector3(8.47303f, 16.4827f, -7.18822f), 3.67749f);
  data[1].mBoundingSphere = Sphere(Vector3(33.423f, -19.8209f, 22.9979f), 1.36167f);
  data[2].mBoundingSphere = Sphere(Vector3(38.4018f, -0.51917f, 6.61628f), 1.12568f);
  data[3].mBoundingSphere = Sphere(Vector3(-16.2933f, 12.0505f, 29.7919f), 1.89665f);
  data[4].mBoundingSphere = Sphere(Vector3(-24.9788f, -34.269f, -21.3539f), 1.73951f);
  data[5].mBoundingSphere = Sphere(Vector3(-18.506f, 28.081f, -28.4f), 2.11328f);
  data[6].mBoundingSphere = Sphere(Vector3(-1.89127f, 44.4512f, -6.07503f), 1.18088f);
  data[7].mBoundingSphere = Sphere(Vector3(-4.53208f, 35.3618f, 4.3882f), 0.990338f);
  data[8].mBoundingSphere = Sphere(Vector3(-5.17701f, -21.4012f, -44.5497f), 2.0459f);
  data[9].mBoundingSphere = Sphere(Vector3(-10.4791f, 26.9379f, 16.8919f), 2.48879f);
  data[10].mBoundingSphere = Sphere(Vector3(-17.2947f, 15.5733f, -19.4949f), 2.00485f);
  data[11].mBoundingSphere = Sphere(Vector3(-13.5901f, 3.39871f, -45.1457f), 1.0794f);
  data[12].mBoundingSphere = Sphere(Vector3(24.6821f, -9.26388f, 7.24867f), 3.31717f);
  data[13].mBoundingSphere = Sphere(Vector3(30.8787f, -0.630685f, 18.997f), 3.84553f);
  data[14].mBoundingSphere = Sphere(Vector3(-12.5239f, 23.9715f, -8.38303f), 1.92112f);
  data[15].mBoundingSphere = Sphere(Vector3(45.8036f, -7.22149f, 13.5152f), 1.75887f);
  data[16].mBoundingSphere = Sphere(Vector3(2.72986f, -6.29378f, -1.84665f), 1.6988f);
  data[17].mBoundingSphere = Sphere(Vector3(33.7216f, -28.7474f, -10.0318f), 0.333946f);
  data[18].mBoundingSphere = Sphere(Vector3(2.22691f, 38.8961f, -7.08542f), 0.715604f);
  data[19].mBoundingSphere = Sphere(Vector3(-29.3347f, 14.1997f, -22.193f), 3.25419f);
  data[20].mBoundingSphere = Sphere(Vector3(-11.3308f, 23.9948f, -32.8673f), 2.63573f);
  data[21].mBoundingSphere = Sphere(Vector3(-26.5464f, 22.679f, 33.0596f), 2.17382f);
  data[22].mBoundingSphere = Sphere(Vector3(18.7601f, 15.5994f, 26.8808f), 3.9114f);
  data[23].mBoundingSphere = Sphere(Vector3(-5.39927f, -10.1677f, -11.1848f), 3.09659f);
  data[24].mBoundingSphere = Sphere(Vector3(-22.6619f, -14.7314f, -10.3516f), 2.34765f);
  data[25].mBoundingSphere = Sphere(Vector3(-39.3322f, 12.5937f, -1.37837f), 1.92703f);
  data[26].mBoundingSphere = Sphere(Vector3(-34.8024f, 35.0049f, -7.14647f), 0.442958f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest13(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(32);
  data[0].mBoundingSphere = Sphere(Vector3(-1.07721f, 21.6094f, -43.5651f), 1.00043f);
  data[1].mBoundingSphere = Sphere(Vector3(10.0629f, -3.29986f, 11.6083f), 3.78186f);
  data[2].mBoundingSphere = Sphere(Vector3(-41.1747f, -11.5992f, -12.3091f), 0.537706f);
  data[3].mBoundingSphere = Sphere(Vector3(-1.74383f, 16.0399f, -9.53822f), 1.50154f);
  data[4].mBoundingSphere = Sphere(Vector3(5.57637f, 8.07685f, 34.6258f), 3.46248f);
  data[5].mBoundingSphere = Sphere(Vector3(-0.305638f, 26.2359f, -41.1932f), 1.17392f);
  data[6].mBoundingSphere = Sphere(Vector3(19.3881f, -7.25146f, -5.75779f), 1.29198f);
  data[7].mBoundingSphere = Sphere(Vector3(-5.71062f, 30.7116f, -17.6444f), 1.91393f);
  data[8].mBoundingSphere = Sphere(Vector3(-2.14794f, -47.0822f, 2.08624f), 1.48472f);
  data[9].mBoundingSphere = Sphere(Vector3(-11.584f, 19.1114f, 7.75574f), 3.9412f);
  data[10].mBoundingSphere = Sphere(Vector3(-29.8046f, 18.4131f, -13.4697f), 0.260884f);
  data[11].mBoundingSphere = Sphere(Vector3(17.7407f, 20.4285f, 24.042f), 3.48787f);
  data[12].mBoundingSphere = Sphere(Vector3(35.4968f, 2.82046f, -4.31188f), 3.39869f);
  data[13].mBoundingSphere = Sphere(Vector3(-18.0333f, 23.9498f, -26.2791f), 1.48321f);
  data[14].mBoundingSphere = Sphere(Vector3(9.90886f, 8.31362f, 22.2464f), 3.80517f);
  data[15].mBoundingSphere = Sphere(Vector3(29.3232f, -2.29031f, 29.9614f), 3.21175f);
  data[16].mBoundingSphere = Sphere(Vector3(10.2215f, 33.8289f, -6.11066f), 3.26289f);
  data[17].mBoundingSphere = Sphere(Vector3(20.8549f, -26.3112f, -11.3949f), 1.3466f);
  data[18].mBoundingSphere = Sphere(Vector3(-2.09742f, 20.9752f, 25.6601f), 2.35055f);
  data[19].mBoundingSphere = Sphere(Vector3(6.57839f, 21.9847f, -1.60417f), 3.15852f);
  data[20].mBoundingSphere = Sphere(Vector3(-20.9838f, 9.6019f, -20.4514f), 0.339164f);
  data[21].mBoundingSphere = Sphere(Vector3(-35.9541f, 14.6032f, -24.3407f), 3.09903f);
  data[22].mBoundingSphere = Sphere(Vector3(2.70531f, -10.2938f, 30.3162f), 1.26345f);
  data[23].mBoundingSphere = Sphere(Vector3(22.0371f, 0.0781757f, -18.4657f), 3.35973f);
  data[24].mBoundingSphere = Sphere(Vector3(-19.7983f, 44.5531f, 8.71989f), 3.36715f);
  data[25].mBoundingSphere = Sphere(Vector3(-19.8441f, 28.5604f, -9.63569f), 2.60488f);
  data[26].mBoundingSphere = Sphere(Vector3(24.5556f, -14.4416f, -20.7287f), 2.32504f);
  data[27].mBoundingSphere = Sphere(Vector3(15.5318f, 6.6952f, -46.9675f), 2.28086f);
  data[28].mBoundingSphere = Sphere(Vector3(-26.4565f, -20.1622f, 33.0214f), 0.638484f);
  data[29].mBoundingSphere = Sphere(Vector3(28.8337f, 24.5424f, 31.3913f), 3.89969f);
  data[30].mBoundingSphere = Sphere(Vector3(5.13683f, -13.4913f, 33.6079f), 0.406775f);
  data[31].mBoundingSphere = Sphere(Vector3(9.10554f, 18.966f, 8.30312f), 1.0968f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest14(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(31);
  data[0].mBoundingSphere = Sphere(Vector3(-32.0252f, -7.89826f, 3.02146f), 1.61623f);
  data[1].mBoundingSphere = Sphere(Vector3(24.2241f, -15.5199f, -33.106f), 0.51138f);
  data[2].mBoundingSphere = Sphere(Vector3(-24.9047f, -31.0215f, 19.7809f), 2.35369f);
  data[3].mBoundingSphere = Sphere(Vector3(-2.04725f, 14.1994f, -32.0211f), 3.36773f);
  data[4].mBoundingSphere = Sphere(Vector3(27.1269f, 12.8464f, 9.8799f), 2.59432f);
  data[5].mBoundingSphere = Sphere(Vector3(-1.3804f, -7.49573f, 6.27007f), 0.299966f);
  data[6].mBoundingSphere = Sphere(Vector3(17.0737f, 1.03419f, 36.3536f), 3.96254f);
  data[7].mBoundingSphere = Sphere(Vector3(-10.6794f, -17.2513f, -31.2592f), 2.05355f);
  data[8].mBoundingSphere = Sphere(Vector3(15.1652f, -0.0363499f, 45.1696f), 0.737059f);
  data[9].mBoundingSphere = Sphere(Vector3(-38.4574f, -17.5887f, -16.1102f), 3.90108f);
  data[10].mBoundingSphere = Sphere(Vector3(-28.1886f, 23.4257f, 14.986f), 1.24176f);
  data[11].mBoundingSphere = Sphere(Vector3(44.2945f, -0.310022f, 3.95629f), 0.620508f);
  data[12].mBoundingSphere = Sphere(Vector3(26.4933f, -14.4008f, -30.5624f), 2.20953f);
  data[13].mBoundingSphere = Sphere(Vector3(-2.45772f, -45.9367f, 4.55259f), 3.84738f);
  data[14].mBoundingSphere = Sphere(Vector3(-42.2244f, 18.9991f, 5.59517f), 3.52232f);
  data[15].mBoundingSphere = Sphere(Vector3(26.7944f, 15.4555f, 29.6569f), 1.00136f);
  data[16].mBoundingSphere = Sphere(Vector3(-5.19424f, -14.7321f, -30.0673f), 2.52613f);
  data[17].mBoundingSphere = Sphere(Vector3(8.52597f, 29.3312f, -24.3455f), 3.99003f);
  data[18].mBoundingSphere = Sphere(Vector3(-2.45721f, 2.64324f, 44.3401f), 2.12105f);
  data[19].mBoundingSphere = Sphere(Vector3(-12.6903f, -39.5101f, 21.947f), 1.48449f);
  data[20].mBoundingSphere = Sphere(Vector3(12.1896f, 6.73221f, 38.0492f), 2.22589f);
  data[21].mBoundingSphere = Sphere(Vector3(3.58655f, 19.9805f, 17.7156f), 0.973406f);
  data[22].mBoundingSphere = Sphere(Vector3(-15.1249f, -17.0531f, -6.16197f), 1.21787f);
  data[23].mBoundingSphere = Sphere(Vector3(0.698765f, 45.4056f, -7.4417f), 0.989178f);
  data[24].mBoundingSphere = Sphere(Vector3(-20.575f, 29.9174f, 10.3159f), 3.54783f);
  data[25].mBoundingSphere = Sphere(Vector3(26.1376f, -3.51174f, -39.1907f), 3.71077f);
  data[26].mBoundingSphere = Sphere(Vector3(-18.7301f, 0.668315f, -25.7961f), 3.12953f);
  data[27].mBoundingSphere = Sphere(Vector3(-21.7204f, 27.1084f, 15.3042f), 3.34059f);
  data[28].mBoundingSphere = Sphere(Vector3(26.666f, -17.4691f, -4.52305f), 3.30511f);
  data[29].mBoundingSphere = Sphere(Vector3(10.0205f, 40.9254f, 20.9759f), 3.45784f);
  data[30].mBoundingSphere = Sphere(Vector3(-14.2256f, -25.5227f, 19.7274f), 1.18447f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest15(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(30);
  data[0].mBoundingSphere = Sphere(Vector3(-13.3388f, -4.87409f, 3.41875f), 1.96762f);
  data[1].mBoundingSphere = Sphere(Vector3(15.4671f, -26.4297f, -22.9504f), 3.17255f);
  data[2].mBoundingSphere = Sphere(Vector3(-18.5127f, -19.1565f, -22.0217f), 1.46361f);
  data[3].mBoundingSphere = Sphere(Vector3(-7.33224f, 33.1938f, 18.2531f), 3.78847f);
  data[4].mBoundingSphere = Sphere(Vector3(-11.8262f, -28.1712f, 2.6383f), 2.96717f);
  data[5].mBoundingSphere = Sphere(Vector3(-32.1539f, -18.2564f, 17.2192f), 2.8766f);
  data[6].mBoundingSphere = Sphere(Vector3(16.0932f, 2.9629f, 6.20451f), 0.563335f);
  data[7].mBoundingSphere = Sphere(Vector3(12.9298f, -16.2934f, -29.3138f), 2.35751f);
  data[8].mBoundingSphere = Sphere(Vector3(-33.1781f, -11.2936f, -22.0111f), 0.953807f);
  data[9].mBoundingSphere = Sphere(Vector3(-9.50535f, 1.53695f, 31.4213f), 1.93109f);
  data[10].mBoundingSphere = Sphere(Vector3(12.2553f, -32.8483f, 35.2155f), 3.87661f);
  data[11].mBoundingSphere = Sphere(Vector3(21.9626f, 30.7398f, -24.89f), 1.58527f);
  data[12].mBoundingSphere = Sphere(Vector3(14.1712f, 26.3261f, -37.032f), 3.90282f);
  data[13].mBoundingSphere = Sphere(Vector3(16.0449f, 41.2809f, 19.5128f), 2.67968f);
  data[14].mBoundingSphere = Sphere(Vector3(10.3943f, 14.9814f, -29.252f), 2.20756f);
  data[15].mBoundingSphere = Sphere(Vector3(15.4621f, -21.5889f, -23.5806f), 3.80413f);
  data[16].mBoundingSphere = Sphere(Vector3(13.4636f, -30.9107f, 0.694689f), 1.71643f);
  data[17].mBoundingSphere = Sphere(Vector3(17.0854f, -36.4432f, 27.1183f), 2.81223f);
  data[18].mBoundingSphere = Sphere(Vector3(-20.7266f, 40.5202f, 17.9004f), 0.826008f);
  data[19].mBoundingSphere = Sphere(Vector3(20.5219f, -27.7889f, -23.9875f), 1.23028f);
  data[20].mBoundingSphere = Sphere(Vector3(-11.2113f, -12.2944f, 13.1391f), 0.900229f);
  data[21].mBoundingSphere = Sphere(Vector3(-43.7437f, 4.94466f, -6.09111f), 3.44044f);
  data[22].mBoundingSphere = Sphere(Vector3(-3.67691f, 31.9924f, -37.3588f), 0.941746f);
  data[23].mBoundingSphere = Sphere(Vector3(5.07078f, -3.4243f, -13.7341f), 3.03942f);
  data[24].mBoundingSphere = Sphere(Vector3(-6.84552f, 48.5332f, 5.25789f), 2.23748f);
  data[25].mBoundingSphere = Sphere(Vector3(25.6422f, -7.04084f, -9.93f), 1.97214f);
  data[26].mBoundingSphere = Sphere(Vector3(0.874712f, 19.1332f, -34.0604f), 3.98005f);
  data[27].mBoundingSphere = Sphere(Vector3(1.8416f, 14.25f, 13.419f), 1.6407f);
  data[28].mBoundingSphere = Sphere(Vector3(-48.8965f, -3.7578f, 7.48978f), 1.2638f);
  data[29].mBoundingSphere = Sphere(Vector3(-12.2043f, 31.8601f, 14.8715f), 3.98713f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest16(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(31);
  data[0].mBoundingSphere = Sphere(Vector3(29.8964f, 11.2144f, -37.3389f), 1.83854f);
  data[1].mBoundingSphere = Sphere(Vector3(-27.575f, -2.91901f, 32.894f), 0.6829f);
  data[2].mBoundingSphere = Sphere(Vector3(-1.99579f, -8.58836f, 35.1625f), 2.07107f);
  data[3].mBoundingSphere = Sphere(Vector3(3.25759f, 6.09078f, -5.54067f), 0.393207f);
  data[4].mBoundingSphere = Sphere(Vector3(25.4223f, -6.95949f, -3.49156f), 1.70274f);
  data[5].mBoundingSphere = Sphere(Vector3(20.3554f, -6.61883f, 16.9052f), 3.99965f);
  data[6].mBoundingSphere = Sphere(Vector3(-8.53332f, 24.9475f, -37.8432f), 1.95521f);
  data[7].mBoundingSphere = Sphere(Vector3(0.37816f, 31.6791f, -26.1048f), 2.89596f);
  data[8].mBoundingSphere = Sphere(Vector3(23.7558f, -15.4457f, -17.9272f), 0.964244f);
  data[9].mBoundingSphere = Sphere(Vector3(-2.33489f, 41.1275f, 15.7053f), 2.67655f);
  data[10].mBoundingSphere = Sphere(Vector3(7.00901f, -4.31992f, -24.0522f), 1.39577f);
  data[11].mBoundingSphere = Sphere(Vector3(15.4224f, -17.2249f, 7.31402f), 1.53865f);
  data[12].mBoundingSphere = Sphere(Vector3(20.1471f, -17.5523f, -7.39789f), 1.43497f);
  data[13].mBoundingSphere = Sphere(Vector3(-12.287f, -20.2274f, -33.6542f), 1.45921f);
  data[14].mBoundingSphere = Sphere(Vector3(-40.9018f, 23.006f, -14.9381f), 3.35149f);
  data[15].mBoundingSphere = Sphere(Vector3(11.7338f, 8.29286f, 21.0935f), 2.74787f);
  data[16].mBoundingSphere = Sphere(Vector3(20.8628f, -42.8846f, -12.9115f), 1.63896f);
  data[17].mBoundingSphere = Sphere(Vector3(-1.39036f, -30.6052f, 32.8149f), 0.97387f);
  data[18].mBoundingSphere = Sphere(Vector3(12.3039f, -2.75186f, 12.3498f), 3.93053f);
  data[19].mBoundingSphere = Sphere(Vector3(-7.14846f, -17.6315f, -33.7057f), 1.46872f);
  data[20].mBoundingSphere = Sphere(Vector3(6.61042f, 48.1681f, 7.96442f), 1.08752f);
  data[21].mBoundingSphere = Sphere(Vector3(23.5617f, 10.1566f, -24.2819f), 2.00299f);
  data[22].mBoundingSphere = Sphere(Vector3(-15.3686f, -9.45392f, 7.71554f), 0.465688f);
  data[23].mBoundingSphere = Sphere(Vector3(-12.2776f, -27.374f, -39.8639f), 0.63918f);
  data[24].mBoundingSphere = Sphere(Vector3(9.1695f, -19.0898f, -10.8209f), 0.75399f);
  data[25].mBoundingSphere = Sphere(Vector3(13.3672f, -35.5576f, 6.25651f), 2.1592f);
  data[26].mBoundingSphere = Sphere(Vector3(14.8537f, -23.2751f, 2.64532f), 3.38976f);
  data[27].mBoundingSphere = Sphere(Vector3(12.3202f, 3.89144f, -29.4906f), 0.266103f);
  data[28].mBoundingSphere = Sphere(Vector3(22.2155f, 29.7229f, 24.1264f), 3.54864f);
  data[29].mBoundingSphere = Sphere(Vector3(-28.6089f, 25.3472f, -12.3832f), 3.96185f);
  data[30].mBoundingSphere = Sphere(Vector3(-35.5686f, 19.8092f, 15.8646f), 2.50955f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest17(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(60);
  data[0].mBoundingSphere = Sphere(Vector3(-41.1529f, 19.2429f, -9.80222f), 2.44495f);
  data[1].mBoundingSphere = Sphere(Vector3(-23.9417f, -22.2075f, 30.3804f), 1.60115f);
  data[2].mBoundingSphere = Sphere(Vector3(10.426f, 7.08149f, 39.5625f), 0.658431f);
  data[3].mBoundingSphere = Sphere(Vector3(3.42137f, -32.0128f, -7.26321f), 2.49123f);
  data[4].mBoundingSphere = Sphere(Vector3(19.1752f, 13.497f, -36.0653f), 2.26578f);
  data[5].mBoundingSphere = Sphere(Vector3(30.435f, 11.3899f, -26.4764f), 1.74322f);
  data[6].mBoundingSphere = Sphere(Vector3(10.594f, -10.5885f, -20.7107f), 3.07537f);
  data[7].mBoundingSphere = Sphere(Vector3(-10.0891f, 0.0270844f, -32.005f), 2.1621f);
  data[8].mBoundingSphere = Sphere(Vector3(20.7557f, 35.0032f, 1.102f), 3.54076f);
  data[9].mBoundingSphere = Sphere(Vector3(8.36185f, -1.14633f, 19.1069f), 0.873788f);
  data[10].mBoundingSphere = Sphere(Vector3(33.3354f, -15.3893f, 9.99034f), 2.00612f);
  data[11].mBoundingSphere = Sphere(Vector3(3.12938f, 42.7297f, -19.6203f), 0.858596f);
  data[12].mBoundingSphere = Sphere(Vector3(-22.6299f, 13.2303f, 26.9513f), 1.72779f);
  data[13].mBoundingSphere = Sphere(Vector3(26.8171f, -0.08999f, -18.6036f), 2.06016f);
  data[14].mBoundingSphere = Sphere(Vector3(-8.66462f, 20.4747f, 7.64175f), 1.26971f);
  data[15].mBoundingSphere = Sphere(Vector3(5.66874f, 15.576f, -33.1924f), 2.46826f);
  data[16].mBoundingSphere = Sphere(Vector3(19.3774f, 9.70061f, -23.169f), 2.47522f);
  data[17].mBoundingSphere = Sphere(Vector3(-11.4268f, 20.047f, -23.0217f), 1.57842f);
  data[18].mBoundingSphere = Sphere(Vector3(-7.9758f, 15.6295f, -14.4933f), 1.81245f);
  data[19].mBoundingSphere = Sphere(Vector3(44.4182f, -3.60647f, -13.026f), 2.42466f);
  data[20].mBoundingSphere = Sphere(Vector3(-37.0931f, 18.3873f, -13.9263f), 3.09636f);
  data[21].mBoundingSphere = Sphere(Vector3(-30.4404f, 19.3014f, -26.6932f), 0.788781f);
  data[22].mBoundingSphere = Sphere(Vector3(18.3355f, 23.538f, -19.9119f), 2.18356f);
  data[23].mBoundingSphere = Sphere(Vector3(-5.14658f, 43.1733f, 7.87944f), 3.38339f);
  data[24].mBoundingSphere = Sphere(Vector3(-39.631f, 12.4051f, 6.4788f), 0.64463f);
  data[25].mBoundingSphere = Sphere(Vector3(-31.9169f, -2.15143f, -22.0828f), 2.81049f);
  data[26].mBoundingSphere = Sphere(Vector3(-9.19503f, 2.75091f, 38.439f), 2.8098f);
  data[27].mBoundingSphere = Sphere(Vector3(-18.9315f, 25.9203f, 4.17957f), 0.495724f);
  data[28].mBoundingSphere = Sphere(Vector3(-34.0203f, 13.3865f, -31.4145f), 3.7894f);
  data[29].mBoundingSphere = Sphere(Vector3(-22.0356f, 19.7507f, 1.86496f), 1.59651f);
  data[30].mBoundingSphere = Sphere(Vector3(11.8927f, 4.75746f, 30.2735f), 2.67075f);
  data[31].mBoundingSphere = Sphere(Vector3(20.4235f, -39.7113f, 17.4144f), 0.885385f);
  data[32].mBoundingSphere = Sphere(Vector3(-27.4804f, -27.0529f, 31.3074f), 2.88924f);
  data[33].mBoundingSphere = Sphere(Vector3(10.1037f, -10.2624f, -16.0627f), 1.40922f);
  data[34].mBoundingSphere = Sphere(Vector3(-16.6097f, -2.66934f, -32.624f), 3.57393f);
  data[35].mBoundingSphere = Sphere(Vector3(5.06254f, 14.5226f, -39.8465f), 1.32201f);
  data[36].mBoundingSphere = Sphere(Vector3(10.5052f, -34.0822f, 12.2148f), 0.868685f);
  data[37].mBoundingSphere = Sphere(Vector3(-28.2374f, -8.51282f, 16.4306f), 2.09449f);
  data[38].mBoundingSphere = Sphere(Vector3(9.83843f, -43.6447f, 21.7439f), 3.0291f);
  data[39].mBoundingSphere = Sphere(Vector3(-49.7985f, 0.401058f, 3.54558f), 3.8969f);
  data[40].mBoundingSphere = Sphere(Vector3(40.2607f, -13.9937f, -1.69629f), 2.29245f);
  data[41].mBoundingSphere = Sphere(Vector3(-1.44599f, 3.43158f, -46.6267f), 3.35764f);
  data[42].mBoundingSphere = Sphere(Vector3(3.05159f, -16.2984f, -29.7215f), 2.32446f);
  data[43].mBoundingSphere = Sphere(Vector3(15.5778f, -7.88834f, -35.9931f), 1.29743f);
  data[44].mBoundingSphere = Sphere(Vector3(20.8394f, -21.961f, 18.7655f), 2.4402f);
  data[45].mBoundingSphere = Sphere(Vector3(44.6746f, 16.4945f, 3.39933f), 1.4374f);
  data[46].mBoundingSphere = Sphere(Vector3(4.55898f, 2.28667f, 36.1121f), 3.20027f);
  data[47].mBoundingSphere = Sphere(Vector3(-33.0835f, 9.96686f, 0.849115f), 3.8831f);
  data[48].mBoundingSphere = Sphere(Vector3(9.95931f, -25.7993f, 28.5831f), 2.9819f);
  data[49].mBoundingSphere = Sphere(Vector3(-0.494605f, 27.8069f, -33.954f), 0.98222f);
  data[50].mBoundingSphere = Sphere(Vector3(-38.8678f, 3.21958f, -13.6594f), 0.724882f);
  data[51].mBoundingSphere = Sphere(Vector3(-21.1753f, 4.35585f, -42.6516f), 2.15943f);
  data[52].mBoundingSphere = Sphere(Vector3(22.3078f, 9.42397f, -33.7364f), 1.05296f);
  data[53].mBoundingSphere = Sphere(Vector3(-10.4989f, -7.77432f, 8.03798f), 0.323972f);
  data[54].mBoundingSphere = Sphere(Vector3(-3.04767f, -12.8684f, 25.6791f), 2.76944f);
  data[55].mBoundingSphere = Sphere(Vector3(-19.6363f, 17.0247f, -28.6332f), 1.45376f);
  data[56].mBoundingSphere = Sphere(Vector3(-15.468f, -16.1727f, 29.114f), 1.12881f);
  data[57].mBoundingSphere = Sphere(Vector3(-18.1673f, -23.8127f, 38.4473f), 3.35381f);
  data[58].mBoundingSphere = Sphere(Vector3(20.7084f, -6.81274f, 21.664f), 3.88264f);
  data[59].mBoundingSphere = Sphere(Vector3(-10.3919f, 45.6307f, 13.7762f), 3.38965f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest18(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(36);
  data[0].mBoundingSphere = Sphere(Vector3(-3.61077f, -10.2347f, -32.0815f), 1.84376f);
  data[1].mBoundingSphere = Sphere(Vector3(-28.4344f, 27.1667f, -28.0624f), 1.63513f);
  data[2].mBoundingSphere = Sphere(Vector3(0.0630817f, -10.8752f, -8.09251f), 0.436f);
  data[3].mBoundingSphere = Sphere(Vector3(-8.31752f, 11.5127f, 3.56205f), 0.926554f);
  data[4].mBoundingSphere = Sphere(Vector3(-5.92786f, -5.69411f, 34.5035f), 3.74684f);
  data[5].mBoundingSphere = Sphere(Vector3(-14.6609f, -36.2806f, -0.285425f), 1.17021f);
  data[6].mBoundingSphere = Sphere(Vector3(-1.62855f, -3.14205f, -1.52472f), 2.34232f);
  data[7].mBoundingSphere = Sphere(Vector3(0.0388654f, -47.6952f, 2.84197f), 0.90278f);
  data[8].mBoundingSphere = Sphere(Vector3(-14.0727f, -6.25757f, 14.854f), 2.91139f);
  data[9].mBoundingSphere = Sphere(Vector3(8.53212f, 30.4157f, 31.4734f), 3.09404f);
  data[10].mBoundingSphere = Sphere(Vector3(-12.2299f, 20.5755f, -40.7358f), 0.730332f);
  data[11].mBoundingSphere = Sphere(Vector3(-6.62739f, -18.3689f, 16.0259f), 3.9993f);
  data[12].mBoundingSphere = Sphere(Vector3(-27.0228f, -19.2893f, 20.5167f), 3.90305f);
  data[13].mBoundingSphere = Sphere(Vector3(-38.556f, -23.1406f, -8.73604f), 3.38675f);
  data[14].mBoundingSphere = Sphere(Vector3(5.81357f, -4.78529f, -3.40797f), 2.97494f);
  data[15].mBoundingSphere = Sphere(Vector3(28.9391f, -27.6862f, -21.5835f), 1.93979f);
  data[16].mBoundingSphere = Sphere(Vector3(26.3982f, 23.693f, -3.95284f), 3.72411f);
  data[17].mBoundingSphere = Sphere(Vector3(8.77642f, 43.9335f, -12.5568f), 1.03441f);
  data[18].mBoundingSphere = Sphere(Vector3(16.9992f, 19.75f, 32.072f), 1.52519f);
  data[19].mBoundingSphere = Sphere(Vector3(34.5295f, 9.94553f, -16.0784f), 1.09146f);
  data[20].mBoundingSphere = Sphere(Vector3(-44.4658f, 7.54901f, -21.4797f), 3.68966f);
  data[21].mBoundingSphere = Sphere(Vector3(18.8079f, -23.7661f, -28.0413f), 2.30405f);
  data[22].mBoundingSphere = Sphere(Vector3(4.99586f, 6.04868f, -46.8473f), 0.980132f);
  data[23].mBoundingSphere = Sphere(Vector3(-19.6523f, -16.3764f, -29.7668f), 3.93993f);
  data[24].mBoundingSphere = Sphere(Vector3(-35.3922f, -26.5985f, -1.48033f), 2.30115f);
  data[25].mBoundingSphere = Sphere(Vector3(0.613627f, 8.51316f, 0.944776f), 2.21846f);
  data[26].mBoundingSphere = Sphere(Vector3(10.8238f, -13.4215f, -14.7676f), 3.36332f);
  data[27].mBoundingSphere = Sphere(Vector3(-9.37471f, 34.187f, 33.3909f), 1.96379f);
  data[28].mBoundingSphere = Sphere(Vector3(-18.1408f, -22.8196f, -25.5658f), 3.32297f);
  data[29].mBoundingSphere = Sphere(Vector3(-9.02269f, -39.8656f, 27.0274f), 0.231312f);
  data[30].mBoundingSphere = Sphere(Vector3(4.92242f, -48.7077f, -8.93159f), 0.997644f);
  data[31].mBoundingSphere = Sphere(Vector3(-5.14623f, -42.2736f, 7.99633f), 2.71064f);
  data[32].mBoundingSphere = Sphere(Vector3(-39.4815f, -16.6211f, 2.88923f), 1.05563f);
  data[33].mBoundingSphere = Sphere(Vector3(28.7264f, -30.2028f, 11.9482f), 0.702152f);
  data[34].mBoundingSphere = Sphere(Vector3(-34.1682f, 3.8092f, -10.7237f), 3.581f);
  data[35].mBoundingSphere = Sphere(Vector3(33.2779f, 28.9135f, 13.8559f), 3.67076f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest19(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(57);
  data[0].mBoundingSphere = Sphere(Vector3(19.8823f, 1.74871f, 26.2706f), 2.74149f);
  data[1].mBoundingSphere = Sphere(Vector3(-25.1273f, 35.305f, -2.93602f), 1.64105f);
  data[2].mBoundingSphere = Sphere(Vector3(21.9559f, -22.4811f, -36.4688f), 2.37352f);
  data[3].mBoundingSphere = Sphere(Vector3(-1.50612f, 13.149f, -30.9305f), 0.475546f);
  data[4].mBoundingSphere = Sphere(Vector3(21.5196f, 21.0836f, 16.0745f), 1.09181f);
  data[5].mBoundingSphere = Sphere(Vector3(2.8773f, -2.75166f, -4.81797f), 3.03316f);
  data[6].mBoundingSphere = Sphere(Vector3(-13.7874f, 2.76457f, 43.7163f), 1.39705f);
  data[7].mBoundingSphere = Sphere(Vector3(33.9154f, 18.4773f, -2.84479f), 0.318986f);
  data[8].mBoundingSphere = Sphere(Vector3(31.6422f, -16.63f, 1.1843f), 2.7234f);
  data[9].mBoundingSphere = Sphere(Vector3(-25.3433f, 11.0661f, 26.7577f), 2.84215f);
  data[10].mBoundingSphere = Sphere(Vector3(11.6663f, -35.6746f, -2.05001f), 1.5717f);
  data[11].mBoundingSphere = Sphere(Vector3(7.0893f, 40.7973f, -14.7348f), 2.03523f);
  data[12].mBoundingSphere = Sphere(Vector3(7.88795f, -15.2294f, -46.4051f), 1.6189f);
  data[13].mBoundingSphere = Sphere(Vector3(-29.3916f, -25.4037f, -25.3551f), 2.45214f);
  data[14].mBoundingSphere = Sphere(Vector3(-21.3765f, 20.9795f, 13.2819f), 3.40055f);
  data[15].mBoundingSphere = Sphere(Vector3(39.0005f, -7.94858f, 12.6362f), 3.13799f);
  data[16].mBoundingSphere = Sphere(Vector3(18.6514f, -28.7858f, -25.3494f), 3.97031f);
  data[17].mBoundingSphere = Sphere(Vector3(-2.29595f, 24.6802f, 12.7788f), 0.375463f);
  data[18].mBoundingSphere = Sphere(Vector3(5.84152f, 5.03622f, 16.7427f), 2.73279f);
  data[19].mBoundingSphere = Sphere(Vector3(-22.58f, -31.1408f, -7.66681f), 0.406195f);
  data[20].mBoundingSphere = Sphere(Vector3(9.51191f, 28.6766f, -20.8665f), 2.05321f);
  data[21].mBoundingSphere = Sphere(Vector3(22.3099f, 19.58f, 33.285f), 0.32664f);
  data[22].mBoundingSphere = Sphere(Vector3(24.6661f, -6.34739f, 23.3308f), 2.63955f);
  data[23].mBoundingSphere = Sphere(Vector3(-12.542f, 45.059f, 17.0236f), 1.75922f);
  data[24].mBoundingSphere = Sphere(Vector3(39.384f, -6.5271f, 11.534f), 1.30253f);
  data[25].mBoundingSphere = Sphere(Vector3(-19.4642f, 15.8376f, -8.2885f), 0.298343f);
  data[26].mBoundingSphere = Sphere(Vector3(-30.0663f, -4.57797f, -5.48038f), 2.48821f);
  data[27].mBoundingSphere = Sphere(Vector3(3.2373f, 35.7276f, 23.2279f), 3.93169f);
  data[28].mBoundingSphere = Sphere(Vector3(-7.51446f, -31.012f, 3.20336f), 1.78705f);
  data[29].mBoundingSphere = Sphere(Vector3(-23.4538f, 7.64869f, -29.8481f), 0.635701f);
  data[30].mBoundingSphere = Sphere(Vector3(-4.62078f, -13.2268f, -5.92851f), 2.21754f);
  data[31].mBoundingSphere = Sphere(Vector3(1.2756f, -37.7292f, -9.97775f), 0.547911f);
  data[32].mBoundingSphere = Sphere(Vector3(13.7984f, 5.03153f, 5.04929f), 2.4845f);
  data[33].mBoundingSphere = Sphere(Vector3(-31.2848f, 23.5398f, 6.24955f), 0.711661f);
  data[34].mBoundingSphere = Sphere(Vector3(-5.33689f, 32.0405f, 31.2377f), 2.81304f);
  data[35].mBoundingSphere = Sphere(Vector3(-15.2467f, -42.335f, 11.0058f), 1.59825f);
  data[36].mBoundingSphere = Sphere(Vector3(-26.7275f, 29.6504f, -4.05194f), 1.75655f);
  data[37].mBoundingSphere = Sphere(Vector3(-7.85502f, -38.3441f, 13.982f), 3.20212f);
  data[38].mBoundingSphere = Sphere(Vector3(-29.3629f, -20.0633f, -28.8076f), 2.98143f);
  data[39].mBoundingSphere = Sphere(Vector3(32.312f, 19.4648f, -20.5152f), 3.51281f);
  data[40].mBoundingSphere = Sphere(Vector3(-11.2712f, 14.7796f, -9.70741f), 1.62412f);
  data[41].mBoundingSphere = Sphere(Vector3(5.47351f, -4.116f, 24.2433f), 3.16026f);
  data[42].mBoundingSphere = Sphere(Vector3(25.1719f, 32.1993f, -6.77039f), 3.42618f);
  data[43].mBoundingSphere = Sphere(Vector3(5.17514f, -31.8412f, 21.5353f), 1.03673f);
  data[44].mBoundingSphere = Sphere(Vector3(-12.2214f, -34.0986f, -0.936638f), 0.641615f);
  data[45].mBoundingSphere = Sphere(Vector3(19.1437f, 6.07096f, 28.1773f), 3.69245f);
  data[46].mBoundingSphere = Sphere(Vector3(8.89585f, 25.6296f, 12.9024f), 3.52197f);
  data[47].mBoundingSphere = Sphere(Vector3(44.6183f, 14.1402f, 0.00142843f), 2.90617f);
  data[48].mBoundingSphere = Sphere(Vector3(-10.2183f, -17.5416f, 4.46259f), 1.97307f);
  data[49].mBoundingSphere = Sphere(Vector3(-37.6493f, -8.95666f, 22.5359f), 1.23225f);
  data[50].mBoundingSphere = Sphere(Vector3(-17.5907f, 7.68095f, -2.27521f), 1.79019f);
  data[51].mBoundingSphere = Sphere(Vector3(-1.62784f, 42.2667f, 22.9849f), 1.92158f);
  data[52].mBoundingSphere = Sphere(Vector3(2.48161f, -34.7069f, -7.74472f), 2.46594f);
  data[53].mBoundingSphere = Sphere(Vector3(-25.571f, -19.6273f, 33.6415f), 1.21671f);
  data[54].mBoundingSphere = Sphere(Vector3(-28.0855f, -13.7148f, -14.7791f), 3.97379f);
  data[55].mBoundingSphere = Sphere(Vector3(-15.1235f, 6.29517f, 23.0449f), 2.02433f);
  data[56].mBoundingSphere = Sphere(Vector3(-4.51902f, 9.27329f, 42.562f), 0.726737f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest20(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(30);
  data[0].mBoundingSphere = Sphere(Vector3(-7.7449f, 28.5437f, 26.2115f), 1.66726f);
  data[1].mBoundingSphere = Sphere(Vector3(-21.0008f, -16.6375f, -28.6768f), 2.66553f);
  data[2].mBoundingSphere = Sphere(Vector3(0.0707304f, -24.1882f, 29.5773f), 0.380334f);
  data[3].mBoundingSphere = Sphere(Vector3(-26.2257f, 30.7845f, -16.1204f), 1.01933f);
  data[4].mBoundingSphere = Sphere(Vector3(11.5629f, -17.8008f, 0.328477f), 1.90616f);
  data[5].mBoundingSphere = Sphere(Vector3(29.8249f, 36.0679f, 2.83469f), 3.84228f);
  data[6].mBoundingSphere = Sphere(Vector3(-5.96455f, 17.2537f, 37.4045f), 3.49588f);
  data[7].mBoundingSphere = Sphere(Vector3(18.2718f, -9.85485f, -38.8216f), 2.03859f);
  data[8].mBoundingSphere = Sphere(Vector3(23.3575f, 30.561f, 6.56526f), 3.54563f);
  data[9].mBoundingSphere = Sphere(Vector3(-27.0977f, 13.8166f, -31.1473f), 1.38139f);
  data[10].mBoundingSphere = Sphere(Vector3(-18.6039f, -16.2928f, -14.3563f), 2.08695f);
  data[11].mBoundingSphere = Sphere(Vector3(-19.6668f, -20.1178f, -28.6389f), 1.38939f);
  data[12].mBoundingSphere = Sphere(Vector3(-3.42749f, 36.3151f, -24.922f), 3.65128f);
  data[13].mBoundingSphere = Sphere(Vector3(-17.2753f, 11.8673f, -7.3968f), 3.17916f);
  data[14].mBoundingSphere = Sphere(Vector3(12.4588f, 24.5131f, 20.5983f), 3.50979f);
  data[15].mBoundingSphere = Sphere(Vector3(-8.11979f, 22.3708f, -10.2364f), 0.692642f);
  data[16].mBoundingSphere = Sphere(Vector3(-7.03556f, 43.9529f, 5.44003f), 2.88842f);
  data[17].mBoundingSphere = Sphere(Vector3(-5.82432f, 2.12318f, 35.1505f), 0.899881f);
  data[18].mBoundingSphere = Sphere(Vector3(12.1511f, -33.6281f, -31.0871f), 3.75762f);
  data[19].mBoundingSphere = Sphere(Vector3(-37.5647f, -4.73572f, -11.1088f), 0.775329f);
  data[20].mBoundingSphere = Sphere(Vector3(14.9533f, -11.3573f, 22.3435f), 2.19701f);
  data[21].mBoundingSphere = Sphere(Vector3(37.1882f, -9.33441f, 12.7055f), 0.851289f);
  data[22].mBoundingSphere = Sphere(Vector3(-3.70671f, 19.4771f, 4.79664f), 3.13567f);
  data[23].mBoundingSphere = Sphere(Vector3(7.88937f, 21.7946f, -7.32269f), 2.14482f);
  data[24].mBoundingSphere = Sphere(Vector3(4.78409f, 4.2872f, 2.78642f), 3.2666f);
  data[25].mBoundingSphere = Sphere(Vector3(13.5942f, 3.76353f, 4.18638f), 1.65972f);
  data[26].mBoundingSphere = Sphere(Vector3(26.5884f, -7.77435f, -21.2998f), 2.93655f);
  data[27].mBoundingSphere = Sphere(Vector3(2.6811f, 43.7417f, 13.4271f), 1.66459f);
  data[28].mBoundingSphere = Sphere(Vector3(11.6406f, -27.3535f, 37.8183f), 1.41108f);
  data[29].mBoundingSphere = Sphere(Vector3(22.5908f, 12.2067f, -23.5958f), 2.34464f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest21(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(59);
  data[0].mBoundingSphere = Sphere(Vector3(-44.2257f, -18.8985f, 0.371356f), 0.530168f);
  data[1].mBoundingSphere = Sphere(Vector3(-20.105f, -19.2087f, -34.0145f), 3.40368f);
  data[2].mBoundingSphere = Sphere(Vector3(33.5015f, 26.7981f, -21.6323f), 1.93051f);
  data[3].mBoundingSphere = Sphere(Vector3(37.1811f, 24.6543f, 17.4954f), 3.10471f);
  data[4].mBoundingSphere = Sphere(Vector3(-33.4637f, -16.8126f, -11.0629f), 0.561132f);
  data[5].mBoundingSphere = Sphere(Vector3(-26.2793f, -14.8676f, -11.2214f), 2.27483f);
  data[6].mBoundingSphere = Sphere(Vector3(0.541932f, -47.6977f, -3.64563f), 3.67134f);
  data[7].mBoundingSphere = Sphere(Vector3(0.0604208f, -16.369f, -29.5409f), 0.319102f);
  data[8].mBoundingSphere = Sphere(Vector3(-13.8409f, 2.38257f, -13.534f), 3.27113f);
  data[9].mBoundingSphere = Sphere(Vector3(-10.9757f, 6.91227f, -21.507f), 3.02411f);
  data[10].mBoundingSphere = Sphere(Vector3(32.1578f, 24.2595f, -11.4417f), 0.965984f);
  data[11].mBoundingSphere = Sphere(Vector3(43.304f, 21.203f, 0.704917f), 1.07871f);
  data[12].mBoundingSphere = Sphere(Vector3(23.3957f, 34.0398f, 1.41896f), 0.965172f);
  data[13].mBoundingSphere = Sphere(Vector3(-12.2015f, -11.8016f, 31.3446f), 0.370708f);
  data[14].mBoundingSphere = Sphere(Vector3(40.0572f, 6.05598f, -19.257f), 1.66517f);
  data[15].mBoundingSphere = Sphere(Vector3(27.8722f, 26.8194f, -6.07132f), 1.45747f);
  data[16].mBoundingSphere = Sphere(Vector3(9.86394f, -12.3229f, 39.6848f), 1.0082f);
  data[17].mBoundingSphere = Sphere(Vector3(-2.14451f, -22.2205f, -18.2204f), 0.411994f);
  data[18].mBoundingSphere = Sphere(Vector3(-48.608f, -11.3669f, -1.90419f), 0.415937f);
  data[19].mBoundingSphere = Sphere(Vector3(2.62616f, -15.5911f, 30.1213f), 3.44462f);
  data[20].mBoundingSphere = Sphere(Vector3(2.10771f, -7.64313f, -27.9231f), 3.49854f);
  data[21].mBoundingSphere = Sphere(Vector3(22.9664f, -18.5887f, 28.9913f), 2.09797f);
  data[22].mBoundingSphere = Sphere(Vector3(-38.663f, 13.709f, -20.5934f), 1.937f);
  data[23].mBoundingSphere = Sphere(Vector3(-12.4048f, 16.3243f, -39.5534f), 0.219251f);
  data[24].mBoundingSphere = Sphere(Vector3(2.79508f, -27.4471f, -9.38345f), 1.74345f);
  data[25].mBoundingSphere = Sphere(Vector3(-27.8103f, 1.8157f, 37.2438f), 1.50606f);
  data[26].mBoundingSphere = Sphere(Vector3(33.7707f, -7.66879f, -27.0469f), 2.4932f);
  data[27].mBoundingSphere = Sphere(Vector3(3.84518f, 38.0483f, 19.7257f), 3.22659f);
  data[28].mBoundingSphere = Sphere(Vector3(6.07017f, -17.2217f, 17.1913f), 1.7344f);
  data[29].mBoundingSphere = Sphere(Vector3(8.87051f, -26.4708f, -9.62802f), 3.7168f);
  data[30].mBoundingSphere = Sphere(Vector3(-8.63085f, 13.7997f, -26.1114f), 1.77117f);
  data[31].mBoundingSphere = Sphere(Vector3(-12.7852f, 0.866738f, -33.9953f), 0.850941f);
  data[32].mBoundingSphere = Sphere(Vector3(5.81385f, -32.2818f, 29.3245f), 3.62205f);
  data[33].mBoundingSphere = Sphere(Vector3(-33.1072f, -24.792f, -15.0633f), 0.488186f);
  data[34].mBoundingSphere = Sphere(Vector3(-31.7804f, 5.30139f, -21.9786f), 3.35405f);
  data[35].mBoundingSphere = Sphere(Vector3(-23.3278f, -0.666687f, -12.5268f), 0.692758f);
  data[36].mBoundingSphere = Sphere(Vector3(23.6168f, 4.86989f, -27.6342f), 2.19063f);
  data[37].mBoundingSphere = Sphere(Vector3(9.4023f, -32.982f, -11.9221f), 1.13124f);
  data[38].mBoundingSphere = Sphere(Vector3(-39.191f, -14.4571f, -1.29969f), 3.79601f);
  data[39].mBoundingSphere = Sphere(Vector3(-18.4073f, -14.2412f, -37.4031f), 3.44253f);
  data[40].mBoundingSphere = Sphere(Vector3(23.181f, 0.673614f, -21.4602f), 2.53344f);
  data[41].mBoundingSphere = Sphere(Vector3(28.3315f, 5.59896f, -18.1896f), 2.58447f);
  data[42].mBoundingSphere = Sphere(Vector3(-16.2757f, -36.1024f, -5.09968f), 0.698325f);
  data[43].mBoundingSphere = Sphere(Vector3(-20.4317f, -42.9683f, 9.5756f), 3.35532f);
  data[44].mBoundingSphere = Sphere(Vector3(14.9866f, -19.4689f, -23.8253f), 1.52786f);
  data[45].mBoundingSphere = Sphere(Vector3(-27.4379f, 41.0322f, -6.0911f), 1.28919f);
  data[46].mBoundingSphere = Sphere(Vector3(-41.5373f, 4.79208f, -3.58223f), 0.783447f);
  data[47].mBoundingSphere = Sphere(Vector3(14.3284f, -38.36f, 5.55531f), 3.9274f);
  data[48].mBoundingSphere = Sphere(Vector3(24.0988f, 14.6181f, -22.286f), 3.51037f);
  data[49].mBoundingSphere = Sphere(Vector3(1.74104f, -18.0581f, -46.3965f), 1.26449f);
  data[50].mBoundingSphere = Sphere(Vector3(-1.0687f, -18.6349f, 21.7402f), 1.37037f);
  data[51].mBoundingSphere = Sphere(Vector3(33.5001f, -31.1873f, -5.1745f), 3.16965f);
  data[52].mBoundingSphere = Sphere(Vector3(16.9698f, 34.6458f, -9.86148f), 1.7511f);
  data[53].mBoundingSphere = Sphere(Vector3(25.964f, -7.47303f, 34.6037f), 3.18218f);
  data[54].mBoundingSphere = Sphere(Vector3(20.2351f, 3.93848f, -26.4188f), 2.24943f);
  data[55].mBoundingSphere = Sphere(Vector3(4.74065f, 45.2602f, 4.08423f), 1.68326f);
  data[56].mBoundingSphere = Sphere(Vector3(6.59492f, 19.457f, 41.168f), 1.72965f);
  data[57].mBoundingSphere = Sphere(Vector3(16.4454f, -31.8562f, 28.0043f), 1.04171f);
  data[58].mBoundingSphere = Sphere(Vector3(-12.2858f, 22.5175f, 13.8536f), 2.35763f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest22(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(65);
  data[0].mBoundingSphere = Sphere(Vector3(-18.4349f, 33.5727f, 24.8786f), 1.71933f);
  data[1].mBoundingSphere = Sphere(Vector3(-39.7946f, 25.372f, 13.1243f), 2.50398f);
  data[2].mBoundingSphere = Sphere(Vector3(-41.0019f, -10.7316f, -10.4455f), 2.85166f);
  data[3].mBoundingSphere = Sphere(Vector3(-1.86378f, 5.95127f, -25.7888f), 2.86569f);
  data[4].mBoundingSphere = Sphere(Vector3(31.2624f, -0.17085f, 26.6069f), 2.53576f);
  data[5].mBoundingSphere = Sphere(Vector3(36.8401f, -12.0963f, -12.6256f), 1.28873f);
  data[6].mBoundingSphere = Sphere(Vector3(45.4843f, 2.09033f, 4.17084f), 1.55593f);
  data[7].mBoundingSphere = Sphere(Vector3(-20.3812f, -17.9254f, 1.30782f), 3.17325f);
  data[8].mBoundingSphere = Sphere(Vector3(38.562f, -10.2789f, -0.11327f), 3.93482f);
  data[9].mBoundingSphere = Sphere(Vector3(-19.8379f, 12.2137f, -6.43713f), 0.717808f);
  data[10].mBoundingSphere = Sphere(Vector3(14.6547f, -8.17452f, 4.16811f), 2.69789f);
  data[11].mBoundingSphere = Sphere(Vector3(-28.2269f, 5.32844f, 36.8507f), 1.67259f);
  data[12].mBoundingSphere = Sphere(Vector3(-12.7871f, 21.6165f, 42.6023f), 2.21382f);
  data[13].mBoundingSphere = Sphere(Vector3(9.67124f, 28.787f, -18.2629f), 3.46596f);
  data[14].mBoundingSphere = Sphere(Vector3(25.0346f, -28.4947f, -21.5895f), 1.10909f);
  data[15].mBoundingSphere = Sphere(Vector3(-16.6637f, -35.7487f, -30.1102f), 3.90722f);
  data[16].mBoundingSphere = Sphere(Vector3(-23.9182f, 40.1521f, 5.83437f), 0.357604f);
  data[17].mBoundingSphere = Sphere(Vector3(14.2521f, 39.897f, -13.0219f), 2.86372f);
  data[18].mBoundingSphere = Sphere(Vector3(5.16853f, -10.0307f, 26.0043f), 2.34592f);
  data[19].mBoundingSphere = Sphere(Vector3(6.4315f, -7.74141f, 13.7176f), 2.51361f);
  data[20].mBoundingSphere = Sphere(Vector3(18.1274f, -18.8263f, -13.896f), 0.91287f);
  data[21].mBoundingSphere = Sphere(Vector3(-16.0557f, 11.433f, -44.1709f), 2.3727f);
  data[22].mBoundingSphere = Sphere(Vector3(7.0992f, -21.389f, -13.066f), 0.36433f);
  data[23].mBoundingSphere = Sphere(Vector3(8.33443f, 2.59389f, -40.1484f), 0.496884f);
  data[24].mBoundingSphere = Sphere(Vector3(19.2956f, 45.8776f, -2.94423f), 2.66356f);
  data[25].mBoundingSphere = Sphere(Vector3(-37.0756f, -12.446f, 22.0323f), 0.860103f);
  data[26].mBoundingSphere = Sphere(Vector3(-35.0878f, 15.9663f, 22.7747f), 0.794928f);
  data[27].mBoundingSphere = Sphere(Vector3(-17.383f, 31.1595f, -31.4249f), 0.305649f);
  data[28].mBoundingSphere = Sphere(Vector3(-36.4197f, 5.40251f, -17.1491f), 1.10538f);
  data[29].mBoundingSphere = Sphere(Vector3(-1.26206f, -24.0206f, -31.1764f), 0.674319f);
  data[30].mBoundingSphere = Sphere(Vector3(-23.0665f, -23.9238f, -10.6068f), 2.41782f);
  data[31].mBoundingSphere = Sphere(Vector3(-34.8232f, 6.57363f, 26.6947f), 0.50651f);
  data[32].mBoundingSphere = Sphere(Vector3(-30.2063f, -3.62578f, 8.77306f), 0.321537f);
  data[33].mBoundingSphere = Sphere(Vector3(26.0674f, 9.24007f, -36.2353f), 0.519382f);
  data[34].mBoundingSphere = Sphere(Vector3(11.0561f, 28.0781f, -15.3407f), 1.43752f);
  data[35].mBoundingSphere = Sphere(Vector3(-39.2569f, -6.47123f, -25.6589f), 3.85968f);
  data[36].mBoundingSphere = Sphere(Vector3(-8.70906f, 29.0142f, -8.22205f), 2.05738f);
  data[37].mBoundingSphere = Sphere(Vector3(15.563f, 34.7614f, -30.6542f), 3.5302f);
  data[38].mBoundingSphere = Sphere(Vector3(-31.1195f, 12.6674f, -17.6037f), 3.3588f);
  data[39].mBoundingSphere = Sphere(Vector3(-35.8211f, 4.09781f, 27.507f), 2.5934f);
  data[40].mBoundingSphere = Sphere(Vector3(-34.4765f, -32.8007f, -11.0775f), 2.39509f);
  data[41].mBoundingSphere = Sphere(Vector3(43.8885f, 16.7612f, -10.6296f), 2.54759f);
  data[42].mBoundingSphere = Sphere(Vector3(20.2666f, -34.6767f, 16.305f), 0.66017f);
  data[43].mBoundingSphere = Sphere(Vector3(4.93938f, -5.22725f, -22.7977f), 1.67967f);
  data[44].mBoundingSphere = Sphere(Vector3(2.37635f, -36.1577f, 24.4062f), 3.62889f);
  data[45].mBoundingSphere = Sphere(Vector3(-41.4418f, 7.67499f, -3.49642f), 3.39301f);
  data[46].mBoundingSphere = Sphere(Vector3(-32.4978f, -25.8372f, 11.5823f), 3.67076f);
  data[47].mBoundingSphere = Sphere(Vector3(-31.3694f, 23.2941f, 13.5287f), 0.30878f);
  data[48].mBoundingSphere = Sphere(Vector3(15.5628f, 6.41333f, 31.7042f), 3.34059f);
  data[49].mBoundingSphere = Sphere(Vector3(-4.20288f, -12.6831f, 43.6015f), 2.54422f);
  data[50].mBoundingSphere = Sphere(Vector3(-14.9035f, 14.2445f, -32.8202f), 3.04324f);
  data[51].mBoundingSphere = Sphere(Vector3(-17.623f, -8.38917f, 26.0112f), 3.76435f);
  data[52].mBoundingSphere = Sphere(Vector3(-21.5045f, -11.6383f, 10.6544f), 2.4736f);
  data[53].mBoundingSphere = Sphere(Vector3(24.7155f, 26.9419f, -0.355955f), 2.80945f);
  data[54].mBoundingSphere = Sphere(Vector3(2.00475f, -8.06051f, 27.5796f), 0.630714f);
  data[55].mBoundingSphere = Sphere(Vector3(-16.5862f, 37.2285f, -5.52665f), 1.09796f);
  data[56].mBoundingSphere = Sphere(Vector3(-16.8986f, -45.4936f, -6.21309f), 2.00867f);
  data[57].mBoundingSphere = Sphere(Vector3(30.1149f, -23.5075f, 11.6012f), 2.40297f);
  data[58].mBoundingSphere = Sphere(Vector3(28.7951f, 26.9311f, -6.08623f), 2.36053f);
  data[59].mBoundingSphere = Sphere(Vector3(-29.34f, -25.6158f, 9.06921f), 3.60524f);
  data[60].mBoundingSphere = Sphere(Vector3(-0.772138f, -18.3971f, -12.6788f), 3.4387f);
  data[61].mBoundingSphere = Sphere(Vector3(-39.4749f, 6.54605f, -19.9817f), 3.01993f);
  data[62].mBoundingSphere = Sphere(Vector3(27.4428f, -14.8897f, 16.9717f), 3.50968f);
  data[63].mBoundingSphere = Sphere(Vector3(32.1708f, 28.3985f, 5.90515f), 3.49959f);
  data[64].mBoundingSphere = Sphere(Vector3(-5.77437f, -7.60494f, 13.7457f), 1.64371f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest23(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(73);
  data[0].mBoundingSphere = Sphere(Vector3(41.1016f, 17.6241f, 15.1909f), 2.55687f);
  data[1].mBoundingSphere = Sphere(Vector3(15.3035f, 1.48509f, -20.5123f), 1.43126f);
  data[2].mBoundingSphere = Sphere(Vector3(-21.1155f, 15.5109f, -18.9078f), 1.42302f);
  data[3].mBoundingSphere = Sphere(Vector3(8.5752f, 1.83521f, -12.0096f), 0.922147f);
  data[4].mBoundingSphere = Sphere(Vector3(4.32165f, -1.51977f, 21.5841f), 1.18238f);
  data[5].mBoundingSphere = Sphere(Vector3(13.3112f, -34.5412f, 25.3036f), 3.74626f);
  data[6].mBoundingSphere = Sphere(Vector3(-30.6611f, -24.2524f, -29.8774f), 1.37617f);
  data[7].mBoundingSphere = Sphere(Vector3(-44.9003f, 13.4423f, 4.55133f), 1.56022f);
  data[8].mBoundingSphere = Sphere(Vector3(12.938f, -3.93161f, 4.91971f), 1.96043f);
  data[9].mBoundingSphere = Sphere(Vector3(8.3138f, 0.740863f, -31.731f), 2.47406f);
  data[10].mBoundingSphere = Sphere(Vector3(-21.7394f, -4.34605f, -1.25436f), 3.67586f);
  data[11].mBoundingSphere = Sphere(Vector3(13.135f, -23.8611f, 41.5664f), 0.308896f);
  data[12].mBoundingSphere = Sphere(Vector3(-5.26007f, 22.9142f, -40.8704f), 3.19517f);
  data[13].mBoundingSphere = Sphere(Vector3(42.7534f, 6.7658f, 8.75082f), 3.23135f);
  data[14].mBoundingSphere = Sphere(Vector3(17.7258f, 14.6705f, -22.7439f), 2.04312f);
  data[15].mBoundingSphere = Sphere(Vector3(25.6022f, 23.7249f, -34.7045f), 3.96138f);
  data[16].mBoundingSphere = Sphere(Vector3(-15.4083f, -2.19215f, -24.6636f), 2.69348f);
  data[17].mBoundingSphere = Sphere(Vector3(2.22029f, -20.7746f, -20.6626f), 1.75621f);
  data[18].mBoundingSphere = Sphere(Vector3(-21.5117f, 4.38638f, 42.9693f), 3.23958f);
  data[19].mBoundingSphere = Sphere(Vector3(-17.1057f, -16.5071f, -42.9255f), 3.96938f);
  data[20].mBoundingSphere = Sphere(Vector3(1.96123f, 42.5416f, -22.0854f), 2.04022f);
  data[21].mBoundingSphere = Sphere(Vector3(-8.92541f, 17.7248f, -12.719f), 3.38339f);
  data[22].mBoundingSphere = Sphere(Vector3(-41.0097f, -12.0039f, -17.6724f), 0.94163f);
  data[23].mBoundingSphere = Sphere(Vector3(-29.7538f, -25.3798f, -0.0131286f), 3.51907f);
  data[24].mBoundingSphere = Sphere(Vector3(-2.22385f, -3.18499f, -36.9073f), 3.27275f);
  data[25].mBoundingSphere = Sphere(Vector3(-31.3488f, -13.3533f, -1.19974f), 0.718619f);
  data[26].mBoundingSphere = Sphere(Vector3(-8.24154f, -45.8372f, 3.75447f), 2.81652f);
  data[27].mBoundingSphere = Sphere(Vector3(15.2654f, -4.13183f, -2.23291f), 2.80516f);
  data[28].mBoundingSphere = Sphere(Vector3(10.1429f, 41.9475f, 4.35116f), 1.75621f);
  data[29].mBoundingSphere = Sphere(Vector3(1.04298f, -13.6312f, 7.49055f), 0.714792f);
  data[30].mBoundingSphere = Sphere(Vector3(-20.5065f, 7.96475f, 33.5394f), 0.596155f);
  data[31].mBoundingSphere = Sphere(Vector3(-0.338213f, -24.2428f, -36.3124f), 3.30673f);
  data[32].mBoundingSphere = Sphere(Vector3(-1.21761f, 32.7585f, -21.3372f), 1.85849f);
  data[33].mBoundingSphere = Sphere(Vector3(3.63352f, 25.0823f, -23.3475f), 2.3458f);
  data[34].mBoundingSphere = Sphere(Vector3(17.7563f, -29.2755f, 29.3255f), 0.953111f);
  data[35].mBoundingSphere = Sphere(Vector3(19.9842f, -11.5324f, -36.4441f), 0.661678f);
  data[36].mBoundingSphere = Sphere(Vector3(-25.7082f, -24.6282f, 1.0881f), 2.22519f);
  data[37].mBoundingSphere = Sphere(Vector3(39.7132f, -19.9477f, -13.962f), 0.882138f);
  data[38].mBoundingSphere = Sphere(Vector3(-12.7282f, 16.011f, 22.8763f), 3.17499f);
  data[39].mBoundingSphere = Sphere(Vector3(12.9529f, -13.7817f, 1.34772f), 0.341832f);
  data[40].mBoundingSphere = Sphere(Vector3(-1.35077f, 8.95496f, -7.2914f), 3.85469f);
  data[41].mBoundingSphere = Sphere(Vector3(23.301f, 18.9707f, -0.964253f), 3.56604f);
  data[42].mBoundingSphere = Sphere(Vector3(-8.24571f, 6.93576f, -32.6351f), 3.4394f);
  data[43].mBoundingSphere = Sphere(Vector3(24.544f, 20.0611f, -21.6375f), 2.92832f);
  data[44].mBoundingSphere = Sphere(Vector3(7.41381f, -3.54582f, -1.17791f), 2.97308f);
  data[45].mBoundingSphere = Sphere(Vector3(18.1589f, -8.00172f, -2.51814f), 3.48567f);
  data[46].mBoundingSphere = Sphere(Vector3(26.4382f, -23.601f, 17.9432f), 2.8897f);
  data[47].mBoundingSphere = Sphere(Vector3(22.7912f, -29.2001f, 11.2381f), 0.78565f);
  data[48].mBoundingSphere = Sphere(Vector3(-5.08196f, -10.9078f, 34.7074f), 2.90918f);
  data[49].mBoundingSphere = Sphere(Vector3(15.3721f, 10.1761f, 25.6424f), 2.85108f);
  data[50].mBoundingSphere = Sphere(Vector3(5.20313f, -0.521044f, -17.363f), 0.508945f);
  data[51].mBoundingSphere = Sphere(Vector3(-13.8265f, -27.9362f, -20.9413f), 1.33779f);
  data[52].mBoundingSphere = Sphere(Vector3(-20.6549f, -20.3961f, -20.4819f), 3.16965f);
  data[53].mBoundingSphere = Sphere(Vector3(-40.7861f, 17.3732f, 3.0636f), 2.06886f);
  data[54].mBoundingSphere = Sphere(Vector3(-24.9833f, -32.0911f, 16.3635f), 1.19595f);
  data[55].mBoundingSphere = Sphere(Vector3(36.6582f, 30.8886f, -13.9257f), 0.942674f);
  data[56].mBoundingSphere = Sphere(Vector3(-43.4273f, 5.07763f, -15.4531f), 3.71355f);
  data[57].mBoundingSphere = Sphere(Vector3(-15.8145f, -10.7969f, -45.7783f), 0.216932f);
  data[58].mBoundingSphere = Sphere(Vector3(-1.70521f, 24.6799f, -7.74253f), 1.03939f);
  data[59].mBoundingSphere = Sphere(Vector3(-12.1158f, 43.5278f, 10.4163f), 0.567046f);
  data[60].mBoundingSphere = Sphere(Vector3(7.00699f, 48.8314f, -5.99513f), 1.62806f);
  data[61].mBoundingSphere = Sphere(Vector3(-34.669f, -29.6644f, -16.2662f), 3.1199f);
  data[62].mBoundingSphere = Sphere(Vector3(-12.2742f, 44.7942f, 11.5428f), 2.99326f);
  data[63].mBoundingSphere = Sphere(Vector3(-11.2908f, -5.90782f, 8.85974f), 2.46177f);
  data[64].mBoundingSphere = Sphere(Vector3(-5.96669f, -25.0011f, 9.53928f), 3.00312f);
  data[65].mBoundingSphere = Sphere(Vector3(-26.6709f, -10.97f, 9.08043f), 1.02316f);
  data[66].mBoundingSphere = Sphere(Vector3(26.3893f, -22.2618f, -24.955f), 2.1519f);
  data[67].mBoundingSphere = Sphere(Vector3(6.25855f, 10.2036f, -19.5707f), 3.03652f);
  data[68].mBoundingSphere = Sphere(Vector3(-7.21883f, 27.4572f, -9.21999f), 0.605896f);
  data[69].mBoundingSphere = Sphere(Vector3(11.1947f, 22.4506f, 9.42411f), 3.26973f);
  data[70].mBoundingSphere = Sphere(Vector3(-5.83587f, -0.451876f, -12.1654f), 1.42465f);
  data[71].mBoundingSphere = Sphere(Vector3(-4.23301f, -23.2105f, -19.6645f), 0.935136f);
  data[72].mBoundingSphere = Sphere(Vector3(-12.9882f, 4.95313f, -27.1704f), 0.956822f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest24(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(42);
  data[0].mBoundingSphere = Sphere(Vector3(7.75305f, -34.5791f, -34.5822f), 1.87345f);
  data[1].mBoundingSphere = Sphere(Vector3(-8.93181f, -8.91854f, -15.915f), 1.8825f);
  data[2].mBoundingSphere = Sphere(Vector3(-17.1835f, -32.2846f, -16.7128f), 3.30963f);
  data[3].mBoundingSphere = Sphere(Vector3(-19.0653f, -44.2458f, -2.44242f), 2.35809f);
  data[4].mBoundingSphere = Sphere(Vector3(-8.57288f, 30.937f, -35.3369f), 0.774517f);
  data[5].mBoundingSphere = Sphere(Vector3(25.5716f, 7.48237f, -30.1153f), 3.84854f);
  data[6].mBoundingSphere = Sphere(Vector3(15.2617f, -0.332208f, -9.46507f), 0.934208f);
  data[7].mBoundingSphere = Sphere(Vector3(-28.1244f, 3.76496f, -15.3148f), 0.813483f);
  data[8].mBoundingSphere = Sphere(Vector3(2.93887f, 15.7297f, -44.2118f), 2.3153f);
  data[9].mBoundingSphere = Sphere(Vector3(-18.7531f, 3.87261f, -35.5983f), 2.91545f);
  data[10].mBoundingSphere = Sphere(Vector3(-2.40429f, 33.1343f, -27.198f), 1.73174f);
  data[11].mBoundingSphere = Sphere(Vector3(-27.1046f, -5.81976f, 33.66f), 0.833778f);
  data[12].mBoundingSphere = Sphere(Vector3(17.9763f, 32.1144f, 12.4936f), 3.08813f);
  data[13].mBoundingSphere = Sphere(Vector3(-4.7487f, -13.5263f, -13.8263f), 2.85491f);
  data[14].mBoundingSphere = Sphere(Vector3(1.91827f, -21.1705f, -5.39387f), 1.9566f);
  data[15].mBoundingSphere = Sphere(Vector3(26.4382f, 9.30879f, 19.6833f), 1.6371f);
  data[16].mBoundingSphere = Sphere(Vector3(6.61579f, -27.6154f, -0.968586f), 2.92925f);
  data[17].mBoundingSphere = Sphere(Vector3(-38.0946f, 2.12789f, -13.8813f), 0.350298f);
  data[18].mBoundingSphere = Sphere(Vector3(21.3865f, 35.5214f, -20.8468f), 1.34486f);
  data[19].mBoundingSphere = Sphere(Vector3(-42.797f, -2.95903f, 13.8194f), 3.19111f);
  data[20].mBoundingSphere = Sphere(Vector3(-32.9946f, 23.9073f, 21.3982f), 1.59257f);
  data[21].mBoundingSphere = Sphere(Vector3(12.4749f, 32.5945f, -13.5838f), 0.672231f);
  data[22].mBoundingSphere = Sphere(Vector3(27.3436f, 21.0672f, 12.7954f), 3.58796f);
  data[23].mBoundingSphere = Sphere(Vector3(-3.8473f, 31.7049f, 2.53137f), 2.88796f);
  data[24].mBoundingSphere = Sphere(Vector3(-15.8039f, -16.7153f, 2.10291f), 3.02597f);
  data[25].mBoundingSphere = Sphere(Vector3(-21.8261f, 32.8989f, 27.2239f), 2.95337f);
  data[26].mBoundingSphere = Sphere(Vector3(14.5508f, -22.038f, 23.2703f), 1.60823f);
  data[27].mBoundingSphere = Sphere(Vector3(1.46927f, 5.76106f, 45.6854f), 3.61962f);
  data[28].mBoundingSphere = Sphere(Vector3(23.6237f, 3.22935f, -35.8387f), 0.645326f);
  data[29].mBoundingSphere = Sphere(Vector3(-15.6417f, 33.1239f, -4.17552f), 0.663417f);
  data[30].mBoundingSphere = Sphere(Vector3(28.4334f, -29.7002f, 7.68873f), 0.834126f);
  data[31].mBoundingSphere = Sphere(Vector3(-16.3133f, 20.1137f, -20.3462f), 2.85247f);
  data[32].mBoundingSphere = Sphere(Vector3(-12.6282f, -23.5732f, 8.9804f), 0.610071f);
  data[33].mBoundingSphere = Sphere(Vector3(27.9367f, -8.53625f, -22.1731f), 1.08451f);
  data[34].mBoundingSphere = Sphere(Vector3(-25.0325f, -7.15556f, 0.883257f), 0.674667f);
  data[35].mBoundingSphere = Sphere(Vector3(-15.4948f, -0.552873f, -37.1326f), 0.702615f);
  data[36].mBoundingSphere = Sphere(Vector3(15.0615f, -21.0636f, 26.7496f), 3.29792f);
  data[37].mBoundingSphere = Sphere(Vector3(23.9785f, 33.4662f, -23.2809f), 2.98538f);
  data[38].mBoundingSphere = Sphere(Vector3(-1.42185f, -4.52494f, -45.5776f), 2.59502f);
  data[39].mBoundingSphere = Sphere(Vector3(20.4988f, -33.9437f, -15.2458f), 0.410834f);
  data[40].mBoundingSphere = Sphere(Vector3(-28.1368f, -26.5949f, 14.1658f), 3.77977f);
  data[41].mBoundingSphere = Sphere(Vector3(-41.5291f, -7.94678f, -24.3355f), 0.89733f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

void SphereSpatialPartitionSelfQueryFuzzTest25(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mBoundingSphere = Sphere(Vector3(15.3516f, 37.9164f, 21.7173f), 3.29073f);
  data[1].mBoundingSphere = Sphere(Vector3(-16.6094f, -0.391814f, -8.71492f), 2.51813f);
  data[2].mBoundingSphere = Sphere(Vector3(18.5878f, 19.5356f, 41.6782f), 1.65612f);
  data[3].mBoundingSphere = Sphere(Vector3(22.7061f, 18.6315f, -28.0229f), 0.898257f);
  data[4].mBoundingSphere = Sphere(Vector3(35.9152f, 0.230713f, -17.5943f), 1.76734f);
  data[5].mBoundingSphere = Sphere(Vector3(-39.9507f, 26.5183f, 14.1351f), 3.38281f);
  data[6].mBoundingSphere = Sphere(Vector3(9.7112f, -9.94728f, -36.1083f), 2.20895f);
  data[7].mBoundingSphere = Sphere(Vector3(18.2049f, 6.59882f, -5.98027f), 3.95268f);
  data[8].mBoundingSphere = Sphere(Vector3(-10.9452f, -3.98993f, -35.0112f), 1.17891f);
  data[9].mBoundingSphere = Sphere(Vector3(-15.522f, 23.8506f, -16.7847f), 1.31494f);
  data[10].mBoundingSphere = Sphere(Vector3(26.5303f, 37.5882f, 4.28267f), 1.60846f);
  data[11].mBoundingSphere = Sphere(Vector3(5.51348f, -19.8891f, 11.3759f), 3.31195f);
  data[12].mBoundingSphere = Sphere(Vector3(-3.12375f, -33.2332f, 21.496f), 3.45911f);
  data[13].mBoundingSphere = Sphere(Vector3(41.8168f, -24.8529f, -2.5853f), 3.30429f);
  data[14].mBoundingSphere = Sphere(Vector3(17.851f, 23.468f, 25.2992f), 2.19272f);
  data[15].mBoundingSphere = Sphere(Vector3(30.753f, 10.8744f, 11.9084f), 0.729752f);
  data[16].mBoundingSphere = Sphere(Vector3(34.111f, -17.6945f, -1.46347f), 1.01887f);
  data[17].mBoundingSphere = Sphere(Vector3(-21.3853f, 17.8971f, -25.4553f), 1.23689f);
  data[18].mBoundingSphere = Sphere(Vector3(-28.9385f, 39.3832f, -3.27221f), 2.71493f);
  data[19].mBoundingSphere = Sphere(Vector3(3.09653f, 0.811417f, -32.2733f), 3.99362f);
  data[20].mBoundingSphere = Sphere(Vector3(-17.4403f, -19.3401f, -4.59785f), 3.82245f);
  data[21].mBoundingSphere = Sphere(Vector3(-13.2077f, 32.0981f, 17.5703f), 2.77048f);
  data[22].mBoundingSphere = Sphere(Vector3(8.8168f, 26.8391f, -4.67077f), 2.61845f);
  data[23].mBoundingSphere = Sphere(Vector3(38.3229f, 12.7462f, -26.0876f), 0.799799f);
  data[24].mBoundingSphere = Sphere(Vector3(20.5243f, 20.9427f, -17.8918f), 1.86139f);
  data[25].mBoundingSphere = Sphere(Vector3(22.3172f, 26.6435f, -17.9301f), 1.40911f);
  data[26].mBoundingSphere = Sphere(Vector3(-8.09812f, -20.8528f, -28.1493f), 2.5121f);
  data[27].mBoundingSphere = Sphere(Vector3(23.9629f, 18.2946f, 6.43806f), 1.02919f);

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingSphereSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mSphereSphereTests", Application::mStatistics.mSphereSphereTests);
  }
}

// Medium BoundingAabbSpatialPartition insertion/update/removal test
void BoundingAabbSpatialPartitionStructure1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(5);
  data[0].mAabb = Aabb(Vector3(-1, -2.5f, -4.5f), Vector3(0, 0.5f, 2.5f));
  data[1].mAabb = Aabb(Vector3(1, -4.75f, 3.25f), Vector3(4.5f, -1.25f, 8.75f));
  data[2].mAabb = Aabb(Vector3(-2, 2, -7.5f), Vector3(2, 3.5f, -1.5f));
  data[3].mAabb = Aabb(Vector3(-3.5f, 2, -10.25f), Vector3(-0.5f, 6, -5.75f));
  data[4].mAabb = Aabb(Vector3(1.5f, 4.75f, -9.75f), Vector3(3, 5.25f, -6.25f));
  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);

  // Remove object number 4
  spatialPartition.RemoveProxy(proxies[4]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);

  // Update object number 0
  data[0].mAabb = Aabb(Vector3(-2, -10.5f, 5.25f), Vector3(2.5f, -4.5f, 5.75f));
  spatialPartition.UpdateProxy(proxies[0], data[0]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);

  // Update object number 3
  data[3].mAabb = Aabb(Vector3(-3.75f, 2.75f, -3.5f), Vector3(-0.75f, 4.25f, 0));
  spatialPartition.UpdateProxy(proxies[3], data[3]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);

  // Remove object number 2
  spatialPartition.RemoveProxy(proxies[2]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);

  // Update object number 1
  data[1].mAabb = Aabb(Vector3(-2.5f, -7.75f, -5.5f), Vector3(2, -5.75f, -4.5f));
  spatialPartition.UpdateProxy(proxies[1], data[1]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);

  // Update object number 0
  data[0].mAabb = Aabb(Vector3(0.75f, 2, -3.75f), Vector3(2.75f, 7.5f, -0.25f));
  spatialPartition.UpdateProxy(proxies[0], data[0]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);

  // Remove object number 3
  spatialPartition.RemoveProxy(proxies[3]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);

  // Update object number 1
  data[1].mAabb = Aabb(Vector3(-8, -2, -9.5f), Vector3(-2, 2, -7));
  spatialPartition.UpdateProxy(proxies[1], data[1]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);

  // Remove object number 0
  spatialPartition.RemoveProxy(proxies[0]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);

  // Remove object number 1
  spatialPartition.RemoveProxy(proxies[1]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);

}

void BoundingAabbSpatialPartitionRayCastTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(3);
  data[0].mAabb = Aabb(Vector3(-1, -1, -1), Vector3(1, 1, 1));
  data[1].mAabb = Aabb(Vector3(2, 2, 2), Vector3(3, 3, 3));
  data[2].mAabb = Aabb(Vector3(-3, -1, -1), Vector3(-2, 1, 1));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;


  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  Ray ray;
  ray.mStart = Vector3(Vector3(0, 0, 0));
  ray.mDirection = Vector3(Vector3(1, 0, 0));

  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void BoundingAabbSpatialPartitionRayCastTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(8);
  data[0].mAabb = Aabb(Vector3(-0.5f, -1.75f, -2.25f), Vector3(1.5f, 3.25f, -0.75f));
  data[1].mAabb = Aabb(Vector3(-3.75f, 0.25f, -10.25f), Vector3(-1.75f, 1.75f, -3.25f));
  data[2].mAabb = Aabb(Vector3(-8.75f, -1.75f, 0.75f), Vector3(-4.25f, 3.75f, 4.25f));
  data[3].mAabb = Aabb(Vector3(-6.25f, -7.25f, -8.75f), Vector3(-2.75f, -2.75f, -5.25f));
  data[4].mAabb = Aabb(Vector3(-0.5f, -4.5f, -5.25f), Vector3(6, -4, -3.25f));
  data[5].mAabb = Aabb(Vector3(-5.25f, -4.25f, -2.5f), Vector3(-2.75f, 1.25f, -1));
  data[6].mAabb = Aabb(Vector3(-6.75f, -0.75f, -8), Vector3(-6.75f, 1.25f, -4.5f));
  data[7].mAabb = Aabb(Vector3(-7.25f, 0, -9.5f), Vector3(-2.75f, 4, -7));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;


  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  Ray ray;
  ray.mStart = Vector3(Vector3(0.25f, -1.5f, -1));
  ray.mDirection = Vector3(Vector3(-0.485071f, 0.485071f, -0.727607f));

  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void BoundingAabbSpatialPartitionFrustumCastTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(5);
  data[0].mAabb = Aabb(Vector3(-3.75f, 4, -5.25f), Vector3(-3.25f, 7.5f, 0.75f));
  data[1].mAabb = Aabb(Vector3(-0.25f, 1.75f, -0.25f), Vector3(6.25f, 2.75f, 1.75f));
  data[2].mAabb = Aabb(Vector3(-7.5f, -9.25f, 0.25f), Vector3(-2, -5.25f, 0.25f));
  data[3].mAabb = Aabb(Vector3(4.75f, -3.75f, -6.5f), Vector3(4.75f, 1.75f, -2));
  data[4].mAabb = Aabb(Vector3(1.25f, -1.25f, -4.25f), Vector3(2.25f, 3.25f, 0.75f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  Frustum frustum;
  frustum.Set(Vector3(-5.83007f, -13.0648f, -0.797914f), Vector3(11.8711f, -13.0648f, -0.797914f), Vector3(11.8711f, 4.03263f, -0.797914f), Vector3(-5.83007f, 4.03263f, -0.797914f), Vector3(1.08651f, -6.14827f, -6.19643f), Vector3(4.95449f, -6.14827f, -6.19643f), Vector3(4.95449f, -2.88394f, -6.19643f), Vector3(1.08651f, -2.88394f, -6.19643f));

  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void BoundingAabbSpatialPartitionFrustumCastTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(8);
  data[0].mAabb = Aabb(Vector3(-3.5f, -4, 1), Vector3(2.5f, 1.5f, 1));
  data[1].mAabb = Aabb(Vector3(-4.75f, 0.75f, 3.5f), Vector3(-1.75f, 3.25f, 9.5f));
  data[2].mAabb = Aabb(Vector3(-2.5f, -9.75f, -0.75f), Vector3(-2, -5.75f, 4.75f));
  data[3].mAabb = Aabb(Vector3(1, -0.75f, 4.5f), Vector3(2.5f, 5.25f, 9));
  data[4].mAabb = Aabb(Vector3(-4.75f, 3.25f, 4.5f), Vector3(-3.25f, 9.25f, 7));
  data[5].mAabb = Aabb(Vector3(-1.5f, 2.5f, 0.75f), Vector3(-1, 5, 7.25f));
  data[6].mAabb = Aabb(Vector3(-1.25f, -0.75f, 4.5f), Vector3(3.25f, 2.25f, 6.5f));
  data[7].mAabb = Aabb(Vector3(-4, -3.25f, -2), Vector3(2, -2.25f, -1));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  Frustum frustum;
  frustum.Set(Vector3(-7.61802f, -5.29559f, 11.3224f), Vector3(11.0155f, -5.29559f, 11.3224f), Vector3(11.0155f, 13.9286f, 11.3224f), Vector3(-7.61802f, 13.9286f, 11.3224f), Vector3(-0.625411f, 1.69702f, 3.63787f), Vector3(4.02286f, 1.69702f, 3.63787f), Vector3(4.02286f, 6.93601f, 3.63787f), Vector3(-0.625411f, 6.93601f, 3.63787f));

  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void TestBoundingAabbSpatialPartitionSelfQuery1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(3);
  data[0].mAabb = Aabb(Vector3(-2, -1, -1), Vector3(2, 1, 1));
  data[1].mAabb = Aabb(Vector3(-2.5, -1.25f, -1), Vector3(-1.5, 1.25f, 1));
  data[2].mAabb = Aabb(Vector3(1.5, -1.5f, -1), Vector3(2.5, 1.5f, 1));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void BoundingAabbSpatialPartitionSelfQuery2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(8);
  data[0].mAabb = Aabb(Vector3(-2.75f, -1.5f, -1.5f), Vector3(-1.25f, -0.5f, 0.5f));
  data[1].mAabb = Aabb(Vector3(-0.75f, 6.5f, -6), Vector3(5.25f, 7, -3));
  data[2].mAabb = Aabb(Vector3(-8.5f, -1.5f, 0), Vector3(-4, 1.5f, 0));
  data[3].mAabb = Aabb(Vector3(-1.5f, 4, 4.75f), Vector3(-1, 9, 5.25f));
  data[4].mAabb = Aabb(Vector3(1, 1.75f, -6.5f), Vector3(5, 3.25f, -3));
  data[5].mAabb = Aabb(Vector3(0, 0, -2.25f), Vector3(2.5f, 6, -1.75f));
  data[6].mAabb = Aabb(Vector3(-8.5f, -5, -4), Vector3(-7, -3, -3.5f));
  data[7].mAabb = Aabb(Vector3(1.25f, -4.25f, 2), Vector3(2.75f, -3.75f, 3.5f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);

  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionStructureFuzzTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mAabb = Aabb(Vector3(8.24046f, 62.115f, -47.514f), Vector3(15.9862f, 65.7863f, -44.1914f));
  data[1].mAabb = Aabb(Vector3(6.94307f, -46.9453f, 20.3042f), Vector3(13.8133f, -40.5835f, 20.7304f));
  data[2].mAabb = Aabb(Vector3(-46.2474f, -15.2402f, 7.74045f), Vector3(-42.1311f, -10.5553f, 10.4371f));
  data[3].mAabb = Aabb(Vector3(-1.49339f, 14.5689f, -55.154f), Vector3(0.688606f, 16.8036f, -47.639f));
  data[4].mAabb = Aabb(Vector3(11.9187f, -23.0718f, 16.0709f), Vector3(12.9252f, -18.8074f, 16.6068f));
  data[5].mAabb = Aabb(Vector3(20.5042f, -55.8954f, -28.6125f), Vector3(22.9564f, -50.7408f, -24.6745f));
  data[6].mAabb = Aabb(Vector3(-12.3818f, 19.2744f, 90.7911f), Vector3(-5.21497f, 26.4531f, 98.067f));
  data[7].mAabb = Aabb(Vector3(-7.12306f, -13.6493f, 30.583f), Vector3(0.206859f, -9.29608f, 31.0415f));
  data[8].mAabb = Aabb(Vector3(-36.3659f, 70.3832f, -13.7931f), Vector3(-33.9749f, 78.132f, -6.75214f));
  data[9].mAabb = Aabb(Vector3(37.1108f, 27.7927f, 36.2366f), Vector3(44.0887f, 33.0248f, 40.0375f));
  data[10].mAabb = Aabb(Vector3(-43.6403f, -31.8124f, 73.4688f), Vector3(-40.2241f, -27.809f, 75.0971f));
  data[11].mAabb = Aabb(Vector3(-67.842f, 1.63719f, 23.473f), Vector3(-61.1008f, 9.24289f, 24.6477f));
  data[12].mAabb = Aabb(Vector3(21.4079f, -39.9807f, -46.173f), Vector3(28.8097f, -33.2945f, -44.633f));
  data[13].mAabb = Aabb(Vector3(56.7571f, 51.9024f, 38.0519f), Vector3(60.614f, 58.1243f, 45.2107f));
  data[14].mAabb = Aabb(Vector3(15.0127f, -42.5641f, -56.8148f), Vector3(15.8713f, -38.6425f, -51.1836f));
  data[15].mAabb = Aabb(Vector3(24.1455f, -7.16797f, -96.5728f), Vector3(31.3103f, -0.488641f, -92.9693f));
  data[16].mAabb = Aabb(Vector3(-45.3146f, 29.4351f, 9.04092f), Vector3(-40.0293f, 35.1918f, 16.1765f));
  data[17].mAabb = Aabb(Vector3(91.5668f, -19.2772f, -21.4255f), Vector3(96.1515f, -18.8312f, -19.204f));
  data[18].mAabb = Aabb(Vector3(30.5041f, -11.5053f, -37.8216f), Vector3(35.8785f, -3.71639f, -30.9901f));
  data[19].mAabb = Aabb(Vector3(8.69987f, -68.0967f, 59.2551f), Vector3(16.0196f, -61.9968f, 66.5741f));
  data[20].mAabb = Aabb(Vector3(-29.6442f, 56.1396f, -1.58309f), Vector3(-24.9901f, 61.8343f, 1.1268f));
  data[21].mAabb = Aabb(Vector3(-1.4562f, 7.3045f, -86.5713f), Vector3(5.69351f, 13.8015f, -84.6328f));
  data[22].mAabb = Aabb(Vector3(-53.7418f, -34.2637f, -74.1035f), Vector3(-52.5175f, -27.9963f, -68.7971f));
  data[23].mAabb = Aabb(Vector3(-32.1644f, 34.8103f, -76.9026f), Vector3(-25.9865f, 37.7939f, -76.0283f));
  data[24].mAabb = Aabb(Vector3(-34.2149f, -0.504411f, 7.5752f), Vector3(-27.361f, 6.67661f, 10.0365f));
  data[25].mAabb = Aabb(Vector3(-45.6392f, 54.8391f, 59.0832f), Vector3(-44.6482f, 56.0036f, 64.1003f));
  data[26].mAabb = Aabb(Vector3(13.7112f, 18.5719f, -1.46693f), Vector3(14.6068f, 23.6625f, 4.80279f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(29);
  data[0].mAabb = Aabb(Vector3(72.0635f, 22.0088f, 57.3656f), Vector3(77.0016f, 28.9073f, 62.0862f));
  data[1].mAabb = Aabb(Vector3(44.483f, -64.8126f, 9.34907f), Vector3(48.7638f, -57.6291f, 16.8414f));
  data[2].mAabb = Aabb(Vector3(56.9453f, -53.763f, -24.8492f), Vector3(57.4575f, -50.2705f, -17.5304f));
  data[3].mAabb = Aabb(Vector3(47.5556f, 18.1326f, 28.6638f), Vector3(49.4328f, 24.1618f, 29.9642f));
  data[4].mAabb = Aabb(Vector3(-74.2136f, 2.13321f, 32.0942f), Vector3(-67.0991f, 8.67244f, 36.3342f));
  data[5].mAabb = Aabb(Vector3(35.836f, -75.0315f, 5.63317f), Vector3(41.2682f, -72.9307f, 10.5481f));
  data[6].mAabb = Aabb(Vector3(57.5693f, 51.5211f, -14.7613f), Vector3(58.8734f, 57.9713f, -12.9886f));
  data[7].mAabb = Aabb(Vector3(-46.2649f, 54.417f, 29.668f), Vector3(-40.5695f, 56.1126f, 36.4714f));
  data[8].mAabb = Aabb(Vector3(-37.4733f, 73.6356f, 41.1419f), Vector3(-33.0649f, 75.2965f, 44.7074f));
  data[9].mAabb = Aabb(Vector3(19.6021f, -64.9261f, 11.022f), Vector3(25.5881f, -63.676f, 13.2968f));
  data[10].mAabb = Aabb(Vector3(-26.8591f, -66.1367f, -57.6626f), Vector3(-23.6778f, -62.243f, -56.1674f));
  data[11].mAabb = Aabb(Vector3(15.5218f, -32.763f, -48.856f), Vector3(16.0971f, -30.9224f, -46.6293f));
  data[12].mAabb = Aabb(Vector3(87.4122f, -31.6307f, 21.7042f), Vector3(88.2246f, -29.6431f, 28.9233f));
  data[13].mAabb = Aabb(Vector3(-49.3064f, -35.323f, 60.8771f), Vector3(-45.8121f, -33.7095f, 62.5847f));
  data[14].mAabb = Aabb(Vector3(-13.2859f, -79.0663f, 59.4484f), Vector3(-8.09839f, -71.4993f, 64.8748f));
  data[15].mAabb = Aabb(Vector3(65.1888f, 19.3662f, 8.7136f), Vector3(70.1647f, 27.0694f, 12.7254f));
  data[16].mAabb = Aabb(Vector3(47.7681f, 42.6454f, 16.5035f), Vector3(48.4849f, 48.2457f, 18.9075f));
  data[17].mAabb = Aabb(Vector3(-76.6206f, 32.8146f, -43.7854f), Vector3(-74.0705f, 39.4165f, -41.5704f));
  data[18].mAabb = Aabb(Vector3(-10.9723f, 6.40695f, -101.439f), Vector3(-3.9251f, 7.93047f, -96.1139f));
  data[19].mAabb = Aabb(Vector3(67.1725f, 3.22189f, 5.33234f), Vector3(73.9692f, 6.16976f, 11.6023f));
  data[20].mAabb = Aabb(Vector3(7.306f, -36.5568f, 16.85f), Vector3(12.268f, -33.3763f, 23.9209f));
  data[21].mAabb = Aabb(Vector3(52.5023f, 70.9769f, -23.5712f), Vector3(54.078f, 75.8635f, -21.2069f));
  data[22].mAabb = Aabb(Vector3(11.699f, 46.1397f, -49.0026f), Vector3(19.2906f, 53.7874f, -46.993f));
  data[23].mAabb = Aabb(Vector3(-52.2974f, 63.7603f, -8.23082f), Vector3(-50.355f, 68.9345f, -7.16794f));
  data[24].mAabb = Aabb(Vector3(54.1948f, 27.5526f, 52.4619f), Vector3(58.233f, 33.559f, 53.5912f));
  data[25].mAabb = Aabb(Vector3(-16.3294f, -17.075f, 36.9063f), Vector3(-9.16666f, -13.6918f, 44.6484f));
  data[26].mAabb = Aabb(Vector3(-24.9096f, -70.8232f, -36.8278f), Vector3(-16.9752f, -63.1001f, -33.2794f));
  data[27].mAabb = Aabb(Vector3(40.6939f, -51.3168f, -2.81436f), Vector3(47.9322f, -46.9443f, 0.613158f));
  data[28].mAabb = Aabb(Vector3(-40.2033f, 52.2188f, -68.5089f), Vector3(-33.7635f, 58.7177f, -61.6955f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(22);
  data[0].mAabb = Aabb(Vector3(-41.0183f, 11.535f, 24.6207f), Vector3(-33.034f, 16.6891f, 31.04f));
  data[1].mAabb = Aabb(Vector3(68.0163f, -2.73092f, -4.92924f), Vector3(71.2715f, 2.66415f, -2.67836f));
  data[2].mAabb = Aabb(Vector3(-10.8939f, -61.9092f, -1.00733f), Vector3(-9.76186f, -56.7575f, 3.66571f));
  data[3].mAabb = Aabb(Vector3(38.0435f, -34.9602f, 74.2427f), Vector3(38.5586f, -28.3643f, 78.6184f));
  data[4].mAabb = Aabb(Vector3(32.8467f, -3.76768f, -43.2486f), Vector3(38.0876f, -1.38969f, -42.3019f));
  data[5].mAabb = Aabb(Vector3(-23.6258f, 0.496865f, 69.2726f), Vector3(-15.7849f, 6.17839f, 76.0072f));
  data[6].mAabb = Aabb(Vector3(50.4362f, -4.95916f, -67.6847f), Vector3(58.2367f, -3.25635f, -61.2754f));
  data[7].mAabb = Aabb(Vector3(-25.461f, 57.7794f, -7.24083f), Vector3(-22.4656f, 60.4304f, -6.77542f));
  data[8].mAabb = Aabb(Vector3(-8.9897f, -17.8249f, -2.64995f), Vector3(-3.19175f, -13.5605f, 4.49906f));
  data[9].mAabb = Aabb(Vector3(-16.398f, -73.3712f, -4.93878f), Vector3(-13.9107f, -70.9174f, -3.83739f));
  data[10].mAabb = Aabb(Vector3(52.2283f, 46.3175f, -56.5023f), Vector3(57.2177f, 47.4203f, -55.184f));
  data[11].mAabb = Aabb(Vector3(-62.3032f, 33.1027f, -27.3995f), Vector3(-58.5449f, 38.173f, -22.2182f));
  data[12].mAabb = Aabb(Vector3(29.6248f, 18.1181f, -32.2606f), Vector3(34.7988f, 19.3065f, -30.7587f));
  data[13].mAabb = Aabb(Vector3(-1.91667f, -19.3073f, 55.2959f), Vector3(3.9678f, -16.0433f, 62.733f));
  data[14].mAabb = Aabb(Vector3(15.776f, -47.8547f, 45.5534f), Vector3(21.2094f, -40.6996f, 49.5195f));
  data[15].mAabb = Aabb(Vector3(-49.2109f, -33.524f, -19.9095f), Vector3(-41.3663f, -31.4993f, -13.7866f));
  data[16].mAabb = Aabb(Vector3(-24.2482f, -16.153f, 59.4878f), Vector3(-17.9513f, -8.30186f, 65.7422f));
  data[17].mAabb = Aabb(Vector3(-8.38161f, 5.43601f, -99.6417f), Vector3(-7.15776f, 6.94283f, -95.797f));
  data[18].mAabb = Aabb(Vector3(-64.5305f, 26.1883f, -21.1653f), Vector3(-59.7325f, 33.6096f, -14.7715f));
  data[19].mAabb = Aabb(Vector3(-33.3935f, -51.0965f, 58.181f), Vector3(-32.5797f, -48.0157f, 65.6373f));
  data[20].mAabb = Aabb(Vector3(61.9472f, 66.6826f, 29.9358f), Vector3(66.9313f, 67.1137f, 34.3064f));
  data[21].mAabb = Aabb(Vector3(-28.1863f, 39.5415f, 29.2958f), Vector3(-27.4163f, 42.6515f, 33.2763f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(21);
  data[0].mAabb = Aabb(Vector3(-20.2085f, -49.0684f, 53.7789f), Vector3(-16.2605f, -41.5293f, 55.2092f));
  data[1].mAabb = Aabb(Vector3(-7.26859f, 68.956f, 39.9983f), Vector3(-3.60588f, 76.2782f, 47.5451f));
  data[2].mAabb = Aabb(Vector3(-15.3597f, 18.4794f, 44.6628f), Vector3(-12.4726f, 25.9075f, 48.7504f));
  data[3].mAabb = Aabb(Vector3(65.5007f, 50.6632f, 10.9024f), Vector3(70.2742f, 51.3969f, 12.0453f));
  data[4].mAabb = Aabb(Vector3(51.3382f, 1.61612f, 21.5026f), Vector3(54.4811f, 7.22087f, 25.9601f));
  data[5].mAabb = Aabb(Vector3(-68.2347f, 60.4937f, 8.9282f), Vector3(-60.767f, 67.0872f, 10.9182f));
  data[6].mAabb = Aabb(Vector3(-46.5511f, 77.7058f, -23.2002f), Vector3(-43.3433f, 80.567f, -15.6458f));
  data[7].mAabb = Aabb(Vector3(-83.3727f, -12.4629f, 26.3572f), Vector3(-76.0149f, -10.4004f, 26.7593f));
  data[8].mAabb = Aabb(Vector3(21.701f, 31.6254f, 33.8421f), Vector3(24.5025f, 38.2066f, 39.6394f));
  data[9].mAabb = Aabb(Vector3(29.9831f, 44.4864f, 76.3416f), Vector3(30.4121f, 47.8689f, 83.6064f));
  data[10].mAabb = Aabb(Vector3(-99.3019f, -9.60979f, 11.4985f), Vector3(-95.6874f, -8.6522f, 18.1148f));
  data[11].mAabb = Aabb(Vector3(12.5114f, 10.8888f, 25.7292f), Vector3(16.1344f, 17.8629f, 27.513f));
  data[12].mAabb = Aabb(Vector3(-31.952f, 43.7757f, 42.7832f), Vector3(-25.2678f, 47.0908f, 49.7128f));
  data[13].mAabb = Aabb(Vector3(-18.7742f, 60.1949f, -35.5961f), Vector3(-13.3423f, 63.8952f, -33.8493f));
  data[14].mAabb = Aabb(Vector3(77.4321f, -6.62607f, -26.1709f), Vector3(84.5446f, 0.177807f, -21.6598f));
  data[15].mAabb = Aabb(Vector3(-8.61123f, 32.1395f, 56.4908f), Vector3(-7.49199f, 37.3984f, 62.6895f));
  data[16].mAabb = Aabb(Vector3(42.7736f, 12.8911f, -12.3668f), Vector3(48.6146f, 14.0208f, -9.1132f));
  data[17].mAabb = Aabb(Vector3(38.4042f, -18.9212f, -68.1169f), Vector3(43.3797f, -16.2586f, -63.0704f));
  data[18].mAabb = Aabb(Vector3(-1.93581f, 14.9703f, 5.39025f), Vector3(-0.743728f, 15.7483f, 8.93676f));
  data[19].mAabb = Aabb(Vector3(-91.6322f, -37.3873f, 5.75523f), Vector3(-87.4084f, -36.4144f, 8.86639f));
  data[20].mAabb = Aabb(Vector3(-19.8948f, 49.9303f, 79.8102f), Vector3(-17.2034f, 56.3271f, 82.9863f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mAabb = Aabb(Vector3(41.7431f, 64.8037f, -15.9888f), Vector3(46.392f, 67.1358f, -10.2852f));
  data[1].mAabb = Aabb(Vector3(-30.1566f, 23.114f, 2.86495f), Vector3(-26.557f, 30.6775f, 4.87555f));
  data[2].mAabb = Aabb(Vector3(-77.9747f, -36.9421f, -12.6302f), Vector3(-71.503f, -33.3026f, -8.39037f));
  data[3].mAabb = Aabb(Vector3(-32.007f, -83.5331f, 11.194f), Vector3(-31.1522f, -77.1822f, 19.1608f));
  data[4].mAabb = Aabb(Vector3(-59.0897f, 60.4527f, 4.27047f), Vector3(-52.6792f, 63.0619f, 7.86592f));
  data[5].mAabb = Aabb(Vector3(52.3557f, 13.1241f, 33.0177f), Vector3(57.8756f, 19.4745f, 39.72f));
  data[6].mAabb = Aabb(Vector3(-73.1027f, 23.1171f, 28.6889f), Vector3(-66.1119f, 25.525f, 32.5291f));
  data[7].mAabb = Aabb(Vector3(27.3323f, 77.678f, -31.8172f), Vector3(27.8135f, 79.5448f, -24.0137f));
  data[8].mAabb = Aabb(Vector3(-4.22552f, -6.74244f, 30.3525f), Vector3(-0.29886f, -3.79643f, 32.6375f));
  data[9].mAabb = Aabb(Vector3(14.5214f, 73.6665f, 15.4533f), Vector3(17.3923f, 76.4736f, 22.1001f));
  data[10].mAabb = Aabb(Vector3(47.4936f, 5.85583f, 63.3622f), Vector3(49.6744f, 10.8035f, 70.2851f));
  data[11].mAabb = Aabb(Vector3(-32.7681f, 28.4808f, 11.0717f), Vector3(-31.457f, 30.0695f, 13.9957f));
  data[12].mAabb = Aabb(Vector3(-15.4095f, 37.5269f, 82.1822f), Vector3(-7.59458f, 40.5773f, 88.9583f));
  data[13].mAabb = Aabb(Vector3(49.9155f, 56.1589f, 59.781f), Vector3(55.0747f, 63.0192f, 60.9114f));
  data[14].mAabb = Aabb(Vector3(32.3944f, 16.7991f, -75.0485f), Vector3(35.384f, 23.4483f, -71.6307f));
  data[15].mAabb = Aabb(Vector3(-4.87599f, -30.0687f, 58.2573f), Vector3(-2.66778f, -27.8234f, 66.2394f));
  data[16].mAabb = Aabb(Vector3(-57.3818f, -23.8239f, -41.1423f), Vector3(-50.8962f, -22.0285f, -34.6179f));
  data[17].mAabb = Aabb(Vector3(-33.2555f, -47.1316f, 51.4947f), Vector3(-28.1446f, -43.4067f, 59.0153f));
  data[18].mAabb = Aabb(Vector3(-55.0219f, -15.4113f, 39.8729f), Vector3(-48.3275f, -8.54786f, 46.3973f));
  data[19].mAabb = Aabb(Vector3(-83.2384f, 35.7973f, 8.7266f), Vector3(-77.4527f, 41.265f, 13.5989f));
  data[20].mAabb = Aabb(Vector3(-45.6556f, -39.509f, -78.2238f), Vector3(-39.4019f, -33.4113f, -76.216f));
  data[21].mAabb = Aabb(Vector3(38.3135f, -57.959f, 13.928f), Vector3(41.1821f, -55.0381f, 19.3497f));
  data[22].mAabb = Aabb(Vector3(34.5835f, -75.9356f, -26.8296f), Vector3(37.8679f, -70.9822f, -23.0745f));
  data[23].mAabb = Aabb(Vector3(-32.3458f, 88.4191f, 12.4481f), Vector3(-27.2703f, 92.9985f, 17.6105f));
  data[24].mAabb = Aabb(Vector3(-49.4021f, -9.6265f, -35.0167f), Vector3(-45.4095f, -3.08424f, -33.1687f));
  data[25].mAabb = Aabb(Vector3(0.782026f, 8.58254f, 5.86941f), Vector3(1.51625f, 9.41836f, 9.25565f));
  data[26].mAabb = Aabb(Vector3(23.8936f, -13.5471f, -10.626f), Vector3(29.4895f, -12.4515f, -2.89457f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest6(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(16);
  data[0].mAabb = Aabb(Vector3(-22.8968f, -31.0179f, 28.5005f), Vector3(-16.3613f, -23.9406f, 32.7852f));
  data[1].mAabb = Aabb(Vector3(-18.5998f, 79.5139f, 24.167f), Vector3(-15.24f, 85.1924f, 27.7156f));
  data[2].mAabb = Aabb(Vector3(-18.7779f, 54.1364f, -70.7344f), Vector3(-17.539f, 61.9058f, -70.0326f));
  data[3].mAabb = Aabb(Vector3(63.8121f, 9.61842f, -1.50315f), Vector3(65.6439f, 11.1482f, 4.15657f));
  data[4].mAabb = Aabb(Vector3(-58.246f, -53.6177f, -24.67f), Vector3(-52.8349f, -46.9871f, -16.9963f));
  data[5].mAabb = Aabb(Vector3(30.5008f, 0.638317f, -55.7743f), Vector3(37.2544f, 3.80491f, -50.2716f));
  data[6].mAabb = Aabb(Vector3(-36.5958f, 27.2575f, -53.6602f), Vector3(-34.0501f, 34.9963f, -52.5725f));
  data[7].mAabb = Aabb(Vector3(-53.1861f, -3.22198f, -46.3307f), Vector3(-45.6152f, 3.3546f, -41.9988f));
  data[8].mAabb = Aabb(Vector3(58.2669f, 14.9566f, 59.9261f), Vector3(64.5077f, 17.0644f, 67.4084f));
  data[9].mAabb = Aabb(Vector3(-32.9612f, -72.2911f, 31.0943f), Vector3(-28.9859f, -67.9078f, 38.4764f));
  data[10].mAabb = Aabb(Vector3(66.3196f, 24.7043f, -47.298f), Vector3(71.3517f, 31.5358f, -46.4299f));
  data[11].mAabb = Aabb(Vector3(-57.5116f, 69.3877f, -37.715f), Vector3(-52.6725f, 76.4801f, -32.9406f));
  data[12].mAabb = Aabb(Vector3(34.3992f, -21.6344f, -19.3017f), Vector3(34.8059f, -14.5344f, -11.9796f));
  data[13].mAabb = Aabb(Vector3(-49.5293f, 14.7537f, 77.6853f), Vector3(-42.3768f, 17.4773f, 78.1576f));
  data[14].mAabb = Aabb(Vector3(-50.9655f, 60.13f, 6.49502f), Vector3(-43.3676f, 62.3923f, 10.3521f));
  data[15].mAabb = Aabb(Vector3(-68.143f, 21.4444f, 34.3447f), Vector3(-66.8598f, 26.1332f, 38.8434f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest7(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(17);
  data[0].mAabb = Aabb(Vector3(-28.4776f, 59.7699f, 12.6642f), Vector3(-24.7924f, 67.2605f, 18.9648f));
  data[1].mAabb = Aabb(Vector3(-57.6167f, 49.6883f, 12.4888f), Vector3(-50.4396f, 55.9147f, 14.0321f));
  data[2].mAabb = Aabb(Vector3(-28.8514f, -49.3781f, -3.79327f), Vector3(-25.6702f, -47.5656f, 1.90912f));
  data[3].mAabb = Aabb(Vector3(30.9349f, 10.4772f, 30.6808f), Vector3(36.4478f, 14.0351f, 37.9027f));
  data[4].mAabb = Aabb(Vector3(5.27721f, -78.9329f, 54.4259f), Vector3(8.23922f, -73.1577f, 56.3608f));
  data[5].mAabb = Aabb(Vector3(-62.1396f, 13.0216f, 24.0263f), Vector3(-54.9924f, 20.0238f, 25.904f));
  data[6].mAabb = Aabb(Vector3(-21.1763f, 1.04021f, 45.0963f), Vector3(-16.8948f, 1.45274f, 47.604f));
  data[7].mAabb = Aabb(Vector3(-20.3097f, 95.5365f, 6.36214f), Vector3(-19.5669f, 97.7996f, 8.67635f));
  data[8].mAabb = Aabb(Vector3(28.8981f, 44.4315f, 13.1996f), Vector3(36.6305f, 47.4341f, 14.2201f));
  data[9].mAabb = Aabb(Vector3(30.8206f, 9.3623f, 51.3446f), Vector3(37.4431f, 12.5166f, 56.2999f));
  data[10].mAabb = Aabb(Vector3(16.4845f, -13.2449f, 9.36964f), Vector3(22.4413f, -8.86132f, 10.2317f));
  data[11].mAabb = Aabb(Vector3(-84.1586f, -13.7089f, -45.4924f), Vector3(-82.9255f, -10.0622f, -42.1472f));
  data[12].mAabb = Aabb(Vector3(-7.89418f, 28.4971f, 57.1739f), Vector3(-1.35981f, 34.2385f, 63.6765f));
  data[13].mAabb = Aabb(Vector3(-12.929f, 62.011f, -15.1659f), Vector3(-6.83137f, 68.482f, -11.1655f));
  data[14].mAabb = Aabb(Vector3(-30.0833f, 49.198f, -16.5022f), Vector3(-25.0732f, 56.5727f, -9.65771f));
  data[15].mAabb = Aabb(Vector3(-78.8476f, 20.7875f, -1.24424f), Vector3(-74.1376f, 26.263f, 4.93317f));
  data[16].mAabb = Aabb(Vector3(-19.0189f, 34.3359f, -29.6275f), Vector3(-12.3938f, 37.6894f, -27.931f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest8(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mAabb = Aabb(Vector3(-48.8571f, -12.1368f, 44.3869f), Vector3(-40.893f, -6.02044f, 50.8733f));
  data[1].mAabb = Aabb(Vector3(-43.9047f, -58.6036f, 21.122f), Vector3(-42.1193f, -53.9728f, 24.7293f));
  data[2].mAabb = Aabb(Vector3(-13.6446f, -37.7845f, -7.91765f), Vector3(-9.02907f, -31.2583f, -2.32914f));
  data[3].mAabb = Aabb(Vector3(-51.1789f, 42.3286f, 66.7087f), Vector3(-48.183f, 47.2125f, 74.0978f));
  data[4].mAabb = Aabb(Vector3(-28.1134f, -50.9297f, -47.4051f), Vector3(-24.5061f, -50.2597f, -40.1926f));
  data[5].mAabb = Aabb(Vector3(-26.4576f, 56.9501f, 32.3621f), Vector3(-25.5147f, 60.9183f, 33.6029f));
  data[6].mAabb = Aabb(Vector3(-16.8351f, 37.7873f, 40.3085f), Vector3(-10.6888f, 40.805f, 41.3853f));
  data[7].mAabb = Aabb(Vector3(19.0587f, -15.8038f, -61.687f), Vector3(20.0306f, -12.5482f, -60.6626f));
  data[8].mAabb = Aabb(Vector3(-11.3875f, 14.6273f, 90.2075f), Vector3(-9.36093f, 19.251f, 97.5131f));
  data[9].mAabb = Aabb(Vector3(24.8746f, 69.8657f, -54.1503f), Vector3(30.1022f, 74.8579f, -53.5884f));
  data[10].mAabb = Aabb(Vector3(-3.5296f, -35.07f, -42.5338f), Vector3(3.29493f, -33.8745f, -36.0642f));
  data[11].mAabb = Aabb(Vector3(-87.7719f, -2.3324f, -50.3154f), Vector3(-83.3389f, -0.522429f, -48.164f));
  data[12].mAabb = Aabb(Vector3(-73.2493f, 16.9501f, 9.09656f), Vector3(-66.7106f, 19.3668f, 10.9738f));
  data[13].mAabb = Aabb(Vector3(1.0394f, 32.4494f, -26.4863f), Vector3(4.38899f, 34.4479f, -25.8829f));
  data[14].mAabb = Aabb(Vector3(31.1809f, 55.6103f, -34.3821f), Vector3(37.279f, 58.8901f, -28.5672f));
  data[15].mAabb = Aabb(Vector3(72.8459f, -59.8027f, 20.0633f), Vector3(77.4756f, -55.0068f, 23.2813f));
  data[16].mAabb = Aabb(Vector3(-86.4068f, 1.00841f, -39.9805f), Vector3(-84.4678f, 1.80967f, -36.3235f));
  data[17].mAabb = Aabb(Vector3(-8.2616f, -26.6548f, 23.6485f), Vector3(-7.08622f, -23.2913f, 28.3564f));
  data[18].mAabb = Aabb(Vector3(0.651916f, 63.279f, 30.2547f), Vector3(7.3229f, 69.7529f, 37.0143f));
  data[19].mAabb = Aabb(Vector3(32.3533f, -68.5999f, -16.0164f), Vector3(32.8672f, -62.8912f, -8.93299f));
  data[20].mAabb = Aabb(Vector3(13.0403f, -51.5103f, -68.7851f), Vector3(19.8827f, -50.4882f, -63.9434f));
  data[21].mAabb = Aabb(Vector3(-40.3877f, -62.8207f, -28.8653f), Vector3(-38.2825f, -56.0073f, -25.3501f));
  data[22].mAabb = Aabb(Vector3(-13.9297f, -22.2283f, -62.1872f), Vector3(-9.31392f, -20.0057f, -57.4108f));
  data[23].mAabb = Aabb(Vector3(23.0441f, 35.8771f, 31.8297f), Vector3(27.3349f, 36.913f, 32.809f));
  data[24].mAabb = Aabb(Vector3(22.2871f, 16.3413f, 10.3f), Vector3(23.8577f, 18.6926f, 14.7984f));
  data[25].mAabb = Aabb(Vector3(-42.8153f, -48.7422f, -73.7527f), Vector3(-35.416f, -42.6963f, -73.0486f));
  data[26].mAabb = Aabb(Vector3(-27.2779f, -80.0978f, -1.87372f), Vector3(-20.2386f, -73.2767f, 3.46638f));
  data[27].mAabb = Aabb(Vector3(18.6922f, 13.0722f, 75.7245f), Vector3(24.8111f, 18.0252f, 79.3517f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest9(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(19);
  data[0].mAabb = Aabb(Vector3(39.2709f, 44.4116f, 19.6266f), Vector3(45.8414f, 47.1268f, 20.8331f));
  data[1].mAabb = Aabb(Vector3(-1.76482f, 27.4941f, 48.9723f), Vector3(4.13426f, 32.9731f, 50.6468f));
  data[2].mAabb = Aabb(Vector3(-42.1718f, -40.3379f, -20.6904f), Vector3(-40.4017f, -35.0846f, -20.2612f));
  data[3].mAabb = Aabb(Vector3(21.6f, 1.65985f, -48.9466f), Vector3(25.7667f, 4.75964f, -47.4651f));
  data[4].mAabb = Aabb(Vector3(8.9106f, 8.62634f, 29.6374f), Vector3(9.51355f, 15.7306f, 35.1499f));
  data[5].mAabb = Aabb(Vector3(-79.1696f, 37.1236f, -10.4126f), Vector3(-78.6963f, 44.1336f, -4.27299f));
  data[6].mAabb = Aabb(Vector3(39.9923f, 29.3337f, -77.2209f), Vector3(44.2794f, 30.8575f, -73.0586f));
  data[7].mAabb = Aabb(Vector3(1.35282f, -18.221f, -33.5427f), Vector3(6.26522f, -12.3838f, -29.1004f));
  data[8].mAabb = Aabb(Vector3(-22.6133f, 45.418f, 12.6176f), Vector3(-21.7151f, 51.469f, 14.8755f));
  data[9].mAabb = Aabb(Vector3(9.22268f, -48.3228f, 40.6534f), Vector3(14.6233f, -41.5008f, 45.3461f));
  data[10].mAabb = Aabb(Vector3(-5.63644f, 11.2539f, -85.6069f), Vector3(-3.67548f, 16.2451f, -83.9567f));
  data[11].mAabb = Aabb(Vector3(86.727f, -38.5038f, -25.334f), Vector3(91.6258f, -31.6953f, -22.3521f));
  data[12].mAabb = Aabb(Vector3(-81.2443f, -13.0872f, -14.2432f), Vector3(-73.6813f, -5.56939f, -10.7345f));
  data[13].mAabb = Aabb(Vector3(-41.1278f, 87.0468f, -2.76177f), Vector3(-33.6629f, 89.7801f, 5.00605f));
  data[14].mAabb = Aabb(Vector3(-14.0815f, -55.7255f, 16.8556f), Vector3(-11.7195f, -50.2221f, 17.7323f));
  data[15].mAabb = Aabb(Vector3(-52.6216f, -56.8717f, -43.0924f), Vector3(-48.4189f, -54.4433f, -40.3709f));
  data[16].mAabb = Aabb(Vector3(-72.3403f, -11.5148f, 60.6938f), Vector3(-67.2957f, -4.92037f, 64.5905f));
  data[17].mAabb = Aabb(Vector3(-13.3367f, 82.1625f, -3.71901f), Vector3(-6.96472f, 90.1082f, 3.48079f));
  data[18].mAabb = Aabb(Vector3(-7.09989f, 46.0518f, 37.6975f), Vector3(0.498852f, 48.694f, 38.2684f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest10(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(23);
  data[0].mAabb = Aabb(Vector3(-15.7777f, -48.0711f, 28.8808f), Vector3(-15.1576f, -45.7648f, 35.9549f));
  data[1].mAabb = Aabb(Vector3(-27.8592f, -56.6351f, 30.7174f), Vector3(-24.4592f, -53.7188f, 37.3098f));
  data[2].mAabb = Aabb(Vector3(91.8143f, 3.85713f, 5.43014f), Vector3(98.2963f, 7.3656f, 7.80071f));
  data[3].mAabb = Aabb(Vector3(41.2391f, 32.1343f, 75.1773f), Vector3(44.4409f, 37.5134f, 75.7098f));
  data[4].mAabb = Aabb(Vector3(-7.6361f, -5.98391f, -10.675f), Vector3(-2.4071f, -3.82f, -4.71215f));
  data[5].mAabb = Aabb(Vector3(-1.43766f, -70.9161f, -65.0643f), Vector3(1.49653f, -65.5465f, -59.6481f));
  data[6].mAabb = Aabb(Vector3(8.38615f, -5.28429f, -59.1035f), Vector3(12.962f, -1.55339f, -56.025f));
  data[7].mAabb = Aabb(Vector3(88.4939f, 20.6242f, -39.4657f), Vector3(89.1072f, 24.6067f, -33.5327f));
  data[8].mAabb = Aabb(Vector3(-40.31f, -20.5381f, -81.9597f), Vector3(-35.1227f, -13.9263f, -80.843f));
  data[9].mAabb = Aabb(Vector3(54.6711f, -54.5253f, 53.9724f), Vector3(59.1507f, -46.9641f, 61.6333f));
  data[10].mAabb = Aabb(Vector3(-50.9562f, 34.0707f, 17.1323f), Vector3(-47.7444f, 39.075f, 22.086f));
  data[11].mAabb = Aabb(Vector3(-34.3582f, -5.95335f, -22.8438f), Vector3(-29.6351f, -4.58291f, -21.7494f));
  data[12].mAabb = Aabb(Vector3(-31.4325f, -31.1454f, 37.6143f), Vector3(-25.0046f, -27.0308f, 38.3622f));
  data[13].mAabb = Aabb(Vector3(19.6987f, 52.5164f, 69.2879f), Vector3(23.0509f, 59.7603f, 69.85f));
  data[14].mAabb = Aabb(Vector3(-62.3298f, -31.8972f, -65.6926f), Vector3(-56.5173f, -29.9986f, -63.5236f));
  data[15].mAabb = Aabb(Vector3(45.9652f, -5.15955f, -19.2251f), Vector3(53.8828f, 1.29967f, -18.1854f));
  data[16].mAabb = Aabb(Vector3(-2.89111f, 75.3915f, -55.6033f), Vector3(4.85747f, 77.085f, -51.6513f));
  data[17].mAabb = Aabb(Vector3(42.0275f, 10.4389f, -86.0215f), Vector3(47.0311f, 17.3534f, -82.3446f));
  data[18].mAabb = Aabb(Vector3(1.87216f, -67.8521f, 32.1544f), Vector3(9.75155f, -65.5518f, 35.2533f));
  data[19].mAabb = Aabb(Vector3(-16.0239f, 60.2536f, -13.1189f), Vector3(-14.4227f, 65.715f, -6.8703f));
  data[20].mAabb = Aabb(Vector3(-43.4033f, 20.8007f, 70.2943f), Vector3(-39.1775f, 27.8838f, 71.3275f));
  data[21].mAabb = Aabb(Vector3(52.2032f, -27.3476f, 64.022f), Vector3(58.0761f, -24.4893f, 66.9652f));
  data[22].mAabb = Aabb(Vector3(-27.0623f, -9.53912f, -82.574f), Vector3(-20.4825f, -3.29537f, -79.9511f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest11(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(17);
  data[0].mAabb = Aabb(Vector3(61.3656f, 49.6641f, 9.8377f), Vector3(65.9742f, 53.3623f, 14.1863f));
  data[1].mAabb = Aabb(Vector3(50.1726f, -83.7854f, -10.95f), Vector3(54.4109f, -82.4017f, -4.20202f));
  data[2].mAabb = Aabb(Vector3(-25.6215f, -52.3294f, 62.914f), Vector3(-20.0768f, -48.8304f, 70.3501f));
  data[3].mAabb = Aabb(Vector3(-76.1898f, 31.6752f, 26.2581f), Vector3(-75.2953f, 36.4513f, 31.8067f));
  data[4].mAabb = Aabb(Vector3(-66.7671f, 17.4779f, 69.2585f), Vector3(-61.3472f, 20.5295f, 70.1555f));
  data[5].mAabb = Aabb(Vector3(22.9757f, 69.9055f, -0.445433f), Vector3(28.7697f, 75.2127f, 0.318482f));
  data[6].mAabb = Aabb(Vector3(-56.357f, -36.9552f, 13.853f), Vector3(-48.5843f, -33.3127f, 16.0225f));
  data[7].mAabb = Aabb(Vector3(25.9188f, 71.4514f, 8.06599f), Vector3(28.0017f, 76.0019f, 9.70339f));
  data[8].mAabb = Aabb(Vector3(-43.3367f, 17.2739f, 14.3831f), Vector3(-39.6139f, 18.8705f, 17.4057f));
  data[9].mAabb = Aabb(Vector3(7.61766f, -9.98924f, 47.3227f), Vector3(15.2895f, -6.5921f, 52.3562f));
  data[10].mAabb = Aabb(Vector3(55.3853f, 21.6931f, 27.0899f), Vector3(62.3511f, 25.6411f, 28.484f));
  data[11].mAabb = Aabb(Vector3(-11.3733f, -30.8108f, 47.0157f), Vector3(-5.78692f, -25.9629f, 52.122f));
  data[12].mAabb = Aabb(Vector3(-60.0583f, -35.861f, 40.3123f), Vector3(-55.235f, -28.7261f, 47.6708f));
  data[13].mAabb = Aabb(Vector3(-41.5414f, 59.6848f, -20.4627f), Vector3(-36.1044f, 63.148f, -15.458f));
  data[14].mAabb = Aabb(Vector3(6.54841f, 15.6041f, 33.5248f), Vector3(12.1661f, 21.5341f, 37.506f));
  data[15].mAabb = Aabb(Vector3(-87.0098f, -50.9626f, 3.52574f), Vector3(-79.2482f, -43.1827f, 9.19636f));
  data[16].mAabb = Aabb(Vector3(-83.9316f, -8.36586f, 25.5406f), Vector3(-82.3051f, -3.54437f, 32.7696f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest12(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mAabb = Aabb(Vector3(77.6374f, -14.3581f, 1.40703f), Vector3(79.045f, -10.5604f, 8.45537f));
  data[1].mAabb = Aabb(Vector3(27.7867f, 28.3512f, -49.5824f), Vector3(35.6427f, 28.8421f, -48.7913f));
  data[2].mAabb = Aabb(Vector3(54.8916f, 3.79794f, 53.63f), Vector3(58.0118f, 8.20843f, 61.1076f));
  data[3].mAabb = Aabb(Vector3(-49.3222f, 58.6267f, -28.4733f), Vector3(-44.5687f, 60.5083f, -20.7664f));
  data[4].mAabb = Aabb(Vector3(31.1742f, 59.8221f, -28.3597f), Vector3(33.6255f, 63.9482f, -24.7477f));
  data[5].mAabb = Aabb(Vector3(-79.056f, 2.51997f, -15.8214f), Vector3(-73.744f, 4.39952f, -13.2043f));
  data[6].mAabb = Aabb(Vector3(14.4017f, 21.2405f, 71.3667f), Vector3(21.5088f, 25.0053f, 72.3408f));
  data[7].mAabb = Aabb(Vector3(28.5158f, -55.8446f, -35.9218f), Vector3(31.6251f, -49.1734f, -33.5148f));
  data[8].mAabb = Aabb(Vector3(20.405f, 59.5635f, -47.4231f), Vector3(21.916f, 65.9293f, -43.7107f));
  data[9].mAabb = Aabb(Vector3(0.203822f, 81.3783f, 36.0074f), Vector3(4.32021f, 82.1359f, 40.532f));
  data[10].mAabb = Aabb(Vector3(43.3974f, 54.8009f, -16.5384f), Vector3(50.5898f, 60.8779f, -15.1541f));
  data[11].mAabb = Aabb(Vector3(4.08957f, 65.9747f, 11.8997f), Vector3(5.32665f, 69.3653f, 18.6265f));
  data[12].mAabb = Aabb(Vector3(-25.4709f, 60.8624f, 56.7251f), Vector3(-19.1448f, 68.4387f, 57.6667f));
  data[13].mAabb = Aabb(Vector3(-83.2448f, 20.6294f, -20.9075f), Vector3(-75.662f, 22.6265f, -20.2528f));
  data[14].mAabb = Aabb(Vector3(-28.0919f, 0.534883f, 59.893f), Vector3(-25.3461f, 6.02505f, 63.8171f));
  data[15].mAabb = Aabb(Vector3(17.8677f, -44.2244f, 36.5154f), Vector3(24.5633f, -38.6686f, 37.2675f));
  data[16].mAabb = Aabb(Vector3(-44.602f, 76.0835f, -17.8913f), Vector3(-40.0678f, 77.5539f, -10.4108f));
  data[17].mAabb = Aabb(Vector3(19.561f, 5.50785f, -98.5086f), Vector3(20.4961f, 6.59764f, -91.8687f));
  data[18].mAabb = Aabb(Vector3(12.2578f, 22.0945f, -29.4616f), Vector3(17.1635f, 25.6872f, -24.2379f));
  data[19].mAabb = Aabb(Vector3(-24.9681f, -64.5443f, -63.0778f), Vector3(-23.9281f, -61.5078f, -57.0219f));
  data[20].mAabb = Aabb(Vector3(-56.0339f, -48.968f, 24.7136f), Vector3(-52.1357f, -46.832f, 30.451f));
  data[21].mAabb = Aabb(Vector3(-70.4032f, -35.6458f, -59.7773f), Vector3(-69.1314f, -34.1905f, -52.0976f));
  data[22].mAabb = Aabb(Vector3(26.7594f, 55.246f, 24.2144f), Vector3(29.9382f, 58.459f, 30.957f));
  data[23].mAabb = Aabb(Vector3(-17.1891f, -26.0613f, 66.9675f), Vector3(-13.6245f, -19.6201f, 72.7137f));
  data[24].mAabb = Aabb(Vector3(35.3283f, -0.906573f, 82.2697f), Vector3(36.6115f, 6.99764f, 85.8086f));
  data[25].mAabb = Aabb(Vector3(12.982f, 31.4995f, 53.6687f), Vector3(18.8616f, 33.7977f, 56.2365f));
  data[26].mAabb = Aabb(Vector3(19.5483f, 13.1689f, 4.91885f), Vector3(24.7432f, 16.3348f, 12.6519f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest13(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(24);
  data[0].mAabb = Aabb(Vector3(22.3902f, -38.9301f, 21.5893f), Vector3(23.6375f, -32.8589f, 28.6286f));
  data[1].mAabb = Aabb(Vector3(-18.9331f, -64.2392f, 3.25111f), Vector3(-14.7622f, -61.3725f, 10.1756f));
  data[2].mAabb = Aabb(Vector3(-1.17f, 47.1463f, -55.0381f), Vector3(1.44642f, 54.0151f, -54.4322f));
  data[3].mAabb = Aabb(Vector3(34.6229f, 37.3456f, -28.4803f), Vector3(36.1691f, 40.3002f, -23.294f));
  data[4].mAabb = Aabb(Vector3(-75.9015f, 4.17496f, -23.894f), Vector3(-74.214f, 8.14383f, -20.8191f));
  data[5].mAabb = Aabb(Vector3(19.1321f, 82.7321f, 36.376f), Vector3(24.2994f, 86.4807f, 42.3124f));
  data[6].mAabb = Aabb(Vector3(1.80296f, 30.3887f, -91.2545f), Vector3(7.96158f, 38.0331f, -89.9224f));
  data[7].mAabb = Aabb(Vector3(1.89275f, -13.7186f, 4.36305f), Vector3(9.46876f, -5.78123f, 7.53079f));
  data[8].mAabb = Aabb(Vector3(54.0235f, -71.5908f, -18.0324f), Vector3(60.8028f, -66.6222f, -10.047f));
  data[9].mAabb = Aabb(Vector3(27.7426f, 48.7135f, 45.3718f), Vector3(33.2221f, 54.0098f, 45.8335f));
  data[10].mAabb = Aabb(Vector3(-51.1789f, 22.6518f, -77.7446f), Vector3(-46.6471f, 29.1818f, -70.0784f));
  data[11].mAabb = Aabb(Vector3(27.5197f, 1.86738f, -58.6062f), Vector3(28.7176f, 7.26454f, -51.7008f));
  data[12].mAabb = Aabb(Vector3(-3.37822f, -18.1112f, 11.101f), Vector3(-0.469319f, -10.268f, 18.354f));
  data[13].mAabb = Aabb(Vector3(73.7224f, 54.8225f, 7.73342f), Vector3(74.6413f, 58.7171f, 12.018f));
  data[14].mAabb = Aabb(Vector3(-74.796f, -22.8954f, 17.0067f), Vector3(-67.9355f, -16.1339f, 18.6837f));
  data[15].mAabb = Aabb(Vector3(54.4067f, 18.8988f, 2.97021f), Vector3(62.0298f, 21.6969f, 6.08971f));
  data[16].mAabb = Aabb(Vector3(61.8369f, 70.8389f, 2.1462f), Vector3(67.202f, 72.4494f, 7.32209f));
  data[17].mAabb = Aabb(Vector3(57.7571f, 35.5497f, -57.4169f), Vector3(60.5008f, 39.2915f, -52.5164f));
  data[18].mAabb = Aabb(Vector3(16.8237f, 4.5461f, 87.0982f), Vector3(18.8164f, 9.49748f, 92.3518f));
  data[19].mAabb = Aabb(Vector3(24.5742f, 52.1737f, 64.7539f), Vector3(30.1975f, 55.6422f, 68.0443f));
  data[20].mAabb = Aabb(Vector3(-53.398f, -11.6295f, 50.5324f), Vector3(-51.3776f, -6.34441f, 54.9457f));
  data[21].mAabb = Aabb(Vector3(-53.4307f, 43.9559f, -36.0677f), Vector3(-46.2035f, 45.6923f, -34.8161f));
  data[22].mAabb = Aabb(Vector3(32.4256f, 53.7319f, -13.697f), Vector3(37.6853f, 56.5478f, -6.77348f));
  data[23].mAabb = Aabb(Vector3(-88.9541f, -25.5536f, -2.26584f), Vector3(-84.9753f, -20.2903f, -0.199113f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest14(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mAabb = Aabb(Vector3(27.4387f, 3.34349f, -81.5841f), Vector3(33.4178f, 5.02311f, -74.5151f));
  data[1].mAabb = Aabb(Vector3(65.3781f, -3.37724f, -46.0081f), Vector3(72.8968f, 1.03046f, -39.2462f));
  data[2].mAabb = Aabb(Vector3(-61.4605f, 32.4561f, 56.6877f), Vector3(-60.6091f, 36.081f, 57.6659f));
  data[3].mAabb = Aabb(Vector3(27.4662f, 15.7917f, -16.2949f), Vector3(31.4455f, 20.8147f, -14.2187f));
  data[4].mAabb = Aabb(Vector3(-62.6885f, -18.8359f, 56.9819f), Vector3(-62.1345f, -11.6442f, 62.5568f));
  data[5].mAabb = Aabb(Vector3(-45.187f, -66.1295f, 59.161f), Vector3(-37.7293f, -64.9297f, 66.8096f));
  data[6].mAabb = Aabb(Vector3(-15.9093f, -1.86959f, 63.4094f), Vector3(-11.5487f, 3.55656f, 67.9255f));
  data[7].mAabb = Aabb(Vector3(-9.28002f, 73.5915f, 64.0893f), Vector3(-7.76206f, 77.7589f, 65.5136f));
  data[8].mAabb = Aabb(Vector3(-34.698f, -38.6724f, -37.9787f), Vector3(-30.6748f, -34.411f, -35.7429f));
  data[9].mAabb = Aabb(Vector3(6.64301f, 27.1953f, 11.9265f), Vector3(8.43419f, 29.5979f, 18.7932f));
  data[10].mAabb = Aabb(Vector3(41.6514f, -4.57234f, -6.82128f), Vector3(45.4807f, -1.37653f, -1.86504f));
  data[11].mAabb = Aabb(Vector3(48.329f, 38.1447f, 6.48358f), Vector3(51.9302f, 45.7446f, 13.7792f));
  data[12].mAabb = Aabb(Vector3(-19.9669f, -42.66f, -76.2158f), Vector3(-18.0653f, -41.6159f, -73.7329f));
  data[13].mAabb = Aabb(Vector3(-11.1125f, -73.8343f, -49.6867f), Vector3(-10.1969f, -73.1661f, -49.1424f));
  data[14].mAabb = Aabb(Vector3(59.8731f, -52.1235f, -54.0263f), Vector3(65.5263f, -46.4999f, -47.4249f));
  data[15].mAabb = Aabb(Vector3(-38.7164f, -50.7811f, 9.47256f), Vector3(-31.6826f, -49.0619f, 10.3225f));
  data[16].mAabb = Aabb(Vector3(-5.25216f, 10.4915f, 18.4404f), Vector3(0.857755f, 17.7236f, 18.9255f));
  data[17].mAabb = Aabb(Vector3(19.1691f, 44.7674f, -8.28359f), Vector3(22.7921f, 50.1748f, -4.40239f));
  data[18].mAabb = Aabb(Vector3(-23.7428f, 56.5915f, -49.1404f), Vector3(-16.9285f, 57.7815f, -42.2117f));
  data[19].mAabb = Aabb(Vector3(21.0614f, 4.00244f, -75.2561f), Vector3(27.9797f, 9.58469f, -72.2293f));
  data[20].mAabb = Aabb(Vector3(-47.1072f, -19.4612f, -4.65156f), Vector3(-45.4845f, -15.362f, -4.03724f));
  data[21].mAabb = Aabb(Vector3(10.459f, 22.8065f, 26.0197f), Vector3(13.3514f, 25.4298f, 30.4687f));
  data[22].mAabb = Aabb(Vector3(-32.6005f, 42.8516f, 31.314f), Vector3(-27.8932f, 47.5393f, 32.7461f));
  data[23].mAabb = Aabb(Vector3(-5.31797f, 3.58231f, -37.9686f), Vector3(-4.29938f, 8.19226f, -30.5491f));
  data[24].mAabb = Aabb(Vector3(-23.4183f, -68.0681f, -15.6787f), Vector3(-19.144f, -61.3695f, -10.0201f));
  data[25].mAabb = Aabb(Vector3(22.9202f, -71.0294f, -25.0002f), Vector3(26.9473f, -64.1339f, -21.1549f));
  data[26].mAabb = Aabb(Vector3(23.3791f, 57.633f, -63.6869f), Vector3(27.4958f, 63.5232f, -62.8768f));
  data[27].mAabb = Aabb(Vector3(-56.5072f, -15.2249f, 63.9471f), Vector3(-50.0317f, -8.37831f, 65.4507f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest15(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(16);
  data[0].mAabb = Aabb(Vector3(-12.168f, -18.7863f, 70.3837f), Vector3(-6.76268f, -16.6006f, 72.7935f));
  data[1].mAabb = Aabb(Vector3(-24.0339f, -67.9387f, -62.4622f), Vector3(-16.1241f, -64.6459f, -60.4736f));
  data[2].mAabb = Aabb(Vector3(-3.83263f, 66.494f, 29.3566f), Vector3(-1.05872f, 73.7987f, 35.7641f));
  data[3].mAabb = Aabb(Vector3(20.0009f, 21.2739f, 49.8349f), Vector3(21.3674f, 29.087f, 52.4613f));
  data[4].mAabb = Aabb(Vector3(44.3199f, 81.6117f, -0.159815f), Vector3(51.5338f, 85.4706f, 3.92874f));
  data[5].mAabb = Aabb(Vector3(-59.9981f, -48.088f, -5.24491f), Vector3(-58.4547f, -46.4958f, -1.57617f));
  data[6].mAabb = Aabb(Vector3(-17.2403f, -41.6466f, 25.0625f), Vector3(-11.9526f, -38.2567f, 30.4061f));
  data[7].mAabb = Aabb(Vector3(-72.8898f, -27.1825f, -8.27408f), Vector3(-71.6562f, -26.517f, -0.308643f));
  data[8].mAabb = Aabb(Vector3(-23.0599f, -27.8065f, -71.0696f), Vector3(-21.0778f, -27.107f, -63.1944f));
  data[9].mAabb = Aabb(Vector3(33.9944f, -78.8418f, -37.1506f), Vector3(40.6925f, -73.4177f, -30.9294f));
  data[10].mAabb = Aabb(Vector3(-43.7989f, -38.1163f, 11.994f), Vector3(-41.7269f, -32.1034f, 14.359f));
  data[11].mAabb = Aabb(Vector3(13.4487f, -12.8947f, -43.2487f), Vector3(17.2554f, -10.4534f, -38.488f));
  data[12].mAabb = Aabb(Vector3(26.994f, -6.68056f, -90.0878f), Vector3(32.6215f, -2.37909f, -83.9359f));
  data[13].mAabb = Aabb(Vector3(2.21222f, -7.31796f, 37.1378f), Vector3(9.2928f, -0.919515f, 38.5523f));
  data[14].mAabb = Aabb(Vector3(9.55148f, 33.26f, -10.1726f), Vector3(13.6834f, 37.2409f, -6.58364f));
  data[15].mAabb = Aabb(Vector3(42.9777f, 34.4597f, 56.4442f), Vector3(48.1773f, 36.6672f, 58.8308f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest16(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(25);
  data[0].mAabb = Aabb(Vector3(0.145485f, 5.09493f, -37.3077f), Vector3(6.74108f, 6.93574f, -32.589f));
  data[1].mAabb = Aabb(Vector3(-62.8929f, 2.23935f, 53.1481f), Vector3(-62.0339f, 4.21029f, 53.7831f));
  data[2].mAabb = Aabb(Vector3(4.9075f, 37.5091f, -56.8427f), Vector3(11.4089f, 41.7913f, -51.5124f));
  data[3].mAabb = Aabb(Vector3(-78.7976f, -7.05316f, 7.08689f), Vector3(-78.1017f, -4.27878f, 8.45176f));
  data[4].mAabb = Aabb(Vector3(17.4021f, 24.6327f, 43.2512f), Vector3(21.5649f, 28.4947f, 45.9514f));
  data[5].mAabb = Aabb(Vector3(6.72257f, -53.9645f, -54.4556f), Vector3(13.5554f, -48.0534f, -51.5734f));
  data[6].mAabb = Aabb(Vector3(-35.0771f, 4.02747f, -70.8231f), Vector3(-29.8064f, 7.82169f, -64.7006f));
  data[7].mAabb = Aabb(Vector3(-34.9932f, 7.35845f, 79.3644f), Vector3(-28.1636f, 10.5902f, 82.0096f));
  data[8].mAabb = Aabb(Vector3(23.8193f, -29.4635f, -50.1027f), Vector3(28.319f, -28.7233f, -46.3426f));
  data[9].mAabb = Aabb(Vector3(-32.897f, -3.82176f, 13.6379f), Vector3(-30.7644f, 3.62645f, 20.0027f));
  data[10].mAabb = Aabb(Vector3(0.420957f, -67.1917f, -52.3129f), Vector3(2.5343f, -60.9505f, -48.5166f));
  data[11].mAabb = Aabb(Vector3(-22.7592f, -26.3572f, -92.9022f), Vector3(-21.761f, -18.5423f, -92.4976f));
  data[12].mAabb = Aabb(Vector3(-7.1682f, -0.895866f, 67.1053f), Vector3(-0.536877f, 2.66966f, 70.444f));
  data[13].mAabb = Aabb(Vector3(54.3399f, -52.6693f, -61.6595f), Vector3(58.3475f, -51.4346f, -59.7396f));
  data[14].mAabb = Aabb(Vector3(-0.967817f, 15.1188f, 53.5086f), Vector3(2.40311f, 22.0558f, 60.9011f));
  data[15].mAabb = Aabb(Vector3(-65.2554f, 61.8362f, 7.88875f), Vector3(-63.3684f, 63.4824f, 14.8323f));
  data[16].mAabb = Aabb(Vector3(24.5542f, -67.6342f, 6.73651f), Vector3(26.2297f, -61.3367f, 10.3505f));
  data[17].mAabb = Aabb(Vector3(60.4844f, 42.4102f, -28.0717f), Vector3(62.0312f, 45.1677f, -25.638f));
  data[18].mAabb = Aabb(Vector3(-41.5088f, -71.9011f, -59.0882f), Vector3(-37.6675f, -69.3239f, -51.5312f));
  data[19].mAabb = Aabb(Vector3(-12.6406f, 46.804f, 48.142f), Vector3(-11.39f, 48.9921f, 55.0403f));
  data[20].mAabb = Aabb(Vector3(72.167f, -40.1758f, -39.2818f), Vector3(73.1241f, -32.3502f, -38.7566f));
  data[21].mAabb = Aabb(Vector3(-34.3887f, 36.0868f, 44.9682f), Vector3(-27.5604f, 37.3694f, 46.5708f));
  data[22].mAabb = Aabb(Vector3(16.7179f, -62.8768f, -37.6048f), Vector3(22.5855f, -60.5051f, -33.6619f));
  data[23].mAabb = Aabb(Vector3(13.9892f, -36.8419f, -44.4771f), Vector3(16.2306f, -31.7827f, -38.697f));
  data[24].mAabb = Aabb(Vector3(-64.1836f, -23.3595f, 13.9818f), Vector3(-63.7115f, -18.7839f, 19.9346f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest17(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(22);
  data[0].mAabb = Aabb(Vector3(74.9188f, 11.4314f, 16.9352f), Vector3(79.8697f, 17.2813f, 24.1009f));
  data[1].mAabb = Aabb(Vector3(61.3533f, 61.7668f, 9.27766f), Vector3(63.4808f, 68.7293f, 16.6746f));
  data[2].mAabb = Aabb(Vector3(-43.2352f, -75.1593f, 9.16768f), Vector3(-36.4267f, -67.895f, 12.1329f));
  data[3].mAabb = Aabb(Vector3(29.3536f, -33.2021f, -19.9421f), Vector3(36.2222f, -26.9604f, -15.0385f));
  data[4].mAabb = Aabb(Vector3(27.6698f, 4.63884f, 50.6326f), Vector3(30.893f, 7.22651f, 57.2656f));
  data[5].mAabb = Aabb(Vector3(34.051f, -1.01826f, 31.6969f), Vector3(38.9323f, 5.27048f, 33.286f));
  data[6].mAabb = Aabb(Vector3(-29.9611f, 10.1973f, -24.1345f), Vector3(-24.1279f, 13.0264f, -20.9605f));
  data[7].mAabb = Aabb(Vector3(-36.1686f, -26.6595f, 3.9531f), Vector3(-33.1411f, -25.1801f, 7.60444f));
  data[8].mAabb = Aabb(Vector3(-26.7591f, -33.6838f, 49.7157f), Vector3(-20.4831f, -32.0511f, 53.0994f));
  data[9].mAabb = Aabb(Vector3(-66.3573f, 10.3774f, -49.3723f), Vector3(-61.8751f, 15.2838f, -42.8136f));
  data[10].mAabb = Aabb(Vector3(-78.7485f, 16.2489f, -10.1335f), Vector3(-74.4988f, 20.3945f, -4.43625f));
  data[11].mAabb = Aabb(Vector3(-7.72754f, 28.7716f, -16.6826f), Vector3(-7.29136f, 32.6957f, -14.6194f));
  data[12].mAabb = Aabb(Vector3(-55.2028f, 48.1379f, -48.6428f), Vector3(-53.4571f, 53.5075f, -45.4632f));
  data[13].mAabb = Aabb(Vector3(-44.2968f, 28.3295f, -66.8329f), Vector3(-43.772f, 33.0434f, -59.8718f));
  data[14].mAabb = Aabb(Vector3(69.0673f, 45.0939f, -35.9703f), Vector3(72.1817f, 49.3089f, -30.9509f));
  data[15].mAabb = Aabb(Vector3(46.3074f, 28.6774f, -63.8313f), Vector3(53.054f, 31.8552f, -62.5741f));
  data[16].mAabb = Aabb(Vector3(2.72614f, -46.4885f, -88.8288f), Vector3(6.3522f, -40.0244f, -81.1436f));
  data[17].mAabb = Aabb(Vector3(-58.4059f, -65.5382f, -25.3491f), Vector3(-51.773f, -61.0632f, -23.7421f));
  data[18].mAabb = Aabb(Vector3(0.635978f, -54.6579f, 31.2487f), Vector3(6.82916f, -50.5983f, 37.9616f));
  data[19].mAabb = Aabb(Vector3(32.1216f, 32.381f, -41.7184f), Vector3(36.5574f, 36.8965f, -36.0329f));
  data[20].mAabb = Aabb(Vector3(30.1703f, -29.3938f, 9.94642f), Vector3(33.4812f, -23.8649f, 17.0242f));
  data[21].mAabb = Aabb(Vector3(36.5438f, 81.2508f, -22.4216f), Vector3(43.0336f, 83.7707f, -19.4645f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest18(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(22);
  data[0].mAabb = Aabb(Vector3(-21.7087f, -52.5801f, -28.0678f), Vector3(-15.5484f, -51.0571f, -25.8545f));
  data[1].mAabb = Aabb(Vector3(-1.3699f, -36.2757f, -50.1671f), Vector3(2.19122f, -28.3728f, -46.8737f));
  data[2].mAabb = Aabb(Vector3(18.1043f, 19.0671f, 72.0224f), Vector3(21.241f, 23.0703f, 74.6194f));
  data[3].mAabb = Aabb(Vector3(-21.4118f, -86.692f, 20.132f), Vector3(-17.2142f, -79.5251f, 20.7329f));
  data[4].mAabb = Aabb(Vector3(-19.2332f, 21.6359f, -18.0882f), Vector3(-14.186f, 22.8363f, -11.4309f));
  data[5].mAabb = Aabb(Vector3(18.3871f, 0.831375f, 24.9952f), Vector3(22.1006f, 5.52019f, 27.5263f));
  data[6].mAabb = Aabb(Vector3(0.822397f, -35.4038f, -56.6162f), Vector3(5.00605f, -34.9178f, -51.2772f));
  data[7].mAabb = Aabb(Vector3(-27.281f, -52.5042f, 11.4406f), Vector3(-23.6046f, -49.4225f, 17.3444f));
  data[8].mAabb = Aabb(Vector3(33.9551f, 2.72365f, -33.7004f), Vector3(39.3924f, 9.60569f, -29.4044f));
  data[9].mAabb = Aabb(Vector3(0.145996f, -34.761f, -55.8941f), Vector3(8.07015f, -28.2438f, -55.3501f));
  data[10].mAabb = Aabb(Vector3(-28.5165f, 47.5889f, 2.56f), Vector3(-24.3113f, 48.5748f, 8.12161f));
  data[11].mAabb = Aabb(Vector3(1.72641f, -28.1313f, -40.1971f), Vector3(2.62276f, -23.1479f, -32.2326f));
  data[12].mAabb = Aabb(Vector3(15.9147f, 13.4797f, 88.3701f), Vector3(23.0389f, 14.7056f, 90.608f));
  data[13].mAabb = Aabb(Vector3(-90.1439f, 22.1528f, 23.05f), Vector3(-82.5222f, 24.5287f, 26.7881f));
  data[14].mAabb = Aabb(Vector3(26.0907f, -23.4377f, 39.3767f), Vector3(29.329f, -22.2331f, 45.2918f));
  data[15].mAabb = Aabb(Vector3(-7.8764f, -40.5907f, 54.2924f), Vector3(-7.40589f, -37.9064f, 57.8835f));
  data[16].mAabb = Aabb(Vector3(-18.2808f, -30.9669f, 79.1368f), Vector3(-16.0635f, -28.6731f, 80.2688f));
  data[17].mAabb = Aabb(Vector3(-59.3045f, 52.1165f, -50.2777f), Vector3(-52.5131f, 53.6549f, -46.0639f));
  data[18].mAabb = Aabb(Vector3(14.33f, 44.6238f, 62.6868f), Vector3(15.9665f, 45.2699f, 68.8837f));
  data[19].mAabb = Aabb(Vector3(-23.9972f, 62.3436f, 52.9704f), Vector3(-16.2604f, 66.1174f, 58.5826f));
  data[20].mAabb = Aabb(Vector3(11.9746f, -82.1802f, 14.2122f), Vector3(19.5052f, -77.797f, 19.6815f));
  data[21].mAabb = Aabb(Vector3(56.3095f, 17.0161f, -28.7068f), Vector3(61.5081f, 24.8992f, -25.1004f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest19(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(15);
  data[0].mAabb = Aabb(Vector3(-98.1663f, -19.5188f, -0.331209f), Vector3(-97.244f, -18.6902f, 4.67699f));
  data[1].mAabb = Aabb(Vector3(-36.0436f, 56.6259f, 31.8415f), Vector3(-35.2319f, 61.1178f, 39.1048f));
  data[2].mAabb = Aabb(Vector3(23.9076f, -45.745f, -23.1358f), Vector3(27.317f, -45.1121f, -16.0774f));
  data[3].mAabb = Aabb(Vector3(-49.2642f, -71.0628f, -48.6129f), Vector3(-46.5008f, -67.3883f, -45.3578f));
  data[4].mAabb = Aabb(Vector3(-29.5827f, 5.91118f, -94.0499f), Vector3(-24.5708f, 9.79354f, -89.8113f));
  data[5].mAabb = Aabb(Vector3(72.4169f, -22.4491f, 58.1524f), Vector3(80.2928f, -19.356f, 63.8778f));
  data[6].mAabb = Aabb(Vector3(82.8894f, -48.3503f, -0.0921119f), Vector3(83.3309f, -45.2482f, 1.49519f));
  data[7].mAabb = Aabb(Vector3(-32.6905f, -40.299f, 14.6856f), Vector3(-27.8609f, -38.6595f, 20.077f));
  data[8].mAabb = Aabb(Vector3(-59.9397f, -21.4954f, -13.4166f), Vector3(-57.6719f, -18.6394f, -6.61693f));
  data[9].mAabb = Aabb(Vector3(-43.872f, 11.9084f, -57.8178f), Vector3(-37.0166f, 14.9005f, -56.1095f));
  data[10].mAabb = Aabb(Vector3(-87.173f, 8.47706f, -6.71416f), Vector3(-80.9912f, 9.87881f, -2.2037f));
  data[11].mAabb = Aabb(Vector3(-58.926f, 29.3009f, 17.0409f), Vector3(-57.3289f, 34.7746f, 22.789f));
  data[12].mAabb = Aabb(Vector3(82.2366f, 14.7896f, 10.6712f), Vector3(89.8124f, 15.5917f, 15.4821f));
  data[13].mAabb = Aabb(Vector3(14.8147f, 45.4399f, -21.8998f), Vector3(15.9126f, 48.5828f, -20.1339f));
  data[14].mAabb = Aabb(Vector3(25.6289f, -33.1673f, -66.8157f), Vector3(26.4288f, -32.5623f, -62.5564f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest20(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(25);
  data[0].mAabb = Aabb(Vector3(42.6752f, -26.7646f, 13.8347f), Vector3(43.4152f, -22.74f, 18.3533f));
  data[1].mAabb = Aabb(Vector3(22.7389f, -80.7146f, -48.1093f), Vector3(25.1417f, -75.2621f, -46.4099f));
  data[2].mAabb = Aabb(Vector3(-12.3464f, -20.1055f, 51.9033f), Vector3(-9.05643f, -12.8781f, 57.4078f));
  data[3].mAabb = Aabb(Vector3(-41.9937f, -28.0846f, 36.8546f), Vector3(-38.8086f, -26.2672f, 38.6453f));
  data[4].mAabb = Aabb(Vector3(-58.9361f, -7.38168f, -23.7566f), Vector3(-53.1544f, -2.24962f, -21.7678f));
  data[5].mAabb = Aabb(Vector3(-43.9427f, 13.7596f, 86.9041f), Vector3(-39.1458f, 19.045f, 91.1881f));
  data[6].mAabb = Aabb(Vector3(-17.5526f, 34.7971f, -47.0721f), Vector3(-13.0187f, 39.7021f, -43.9646f));
  data[7].mAabb = Aabb(Vector3(-73.7402f, 62.8841f, 6.18808f), Vector3(-71.525f, 63.5986f, 10.8249f));
  data[8].mAabb = Aabb(Vector3(-3.62574f, -49.9101f, -38.4348f), Vector3(-1.16587f, -43.3351f, -36.9676f));
  data[9].mAabb = Aabb(Vector3(-22.3863f, -12.7013f, -62.3362f), Vector3(-21.6305f, -9.18127f, -59.2146f));
  data[10].mAabb = Aabb(Vector3(52.6453f, 21.984f, -4.63092f), Vector3(59.6897f, 26.3376f, 1.60332f));
  data[11].mAabb = Aabb(Vector3(19.3179f, -59.0506f, -20.157f), Vector3(21.4401f, -53.4772f, -13.5832f));
  data[12].mAabb = Aabb(Vector3(46.4101f, 9.04001f, -89.3465f), Vector3(47.2541f, 11.0242f, -85.604f));
  data[13].mAabb = Aabb(Vector3(-33.2711f, -29.9227f, -75.6399f), Vector3(-31.4598f, -28.8844f, -72.5032f));
  data[14].mAabb = Aabb(Vector3(-6.79709f, -53.8639f, 40.4757f), Vector3(-1.87216f, -46.1866f, 42.6069f));
  data[15].mAabb = Aabb(Vector3(20.6224f, -52.3091f, 72.3137f), Vector3(26.8093f, -45.9067f, 79.9335f));
  data[16].mAabb = Aabb(Vector3(-16.2841f, -8.71781f, -70.1119f), Vector3(-14.0341f, -7.91679f, -68.9866f));
  data[17].mAabb = Aabb(Vector3(74.5628f, -9.73081f, 57.5446f), Vector3(79.8946f, -1.76723f, 62.8253f));
  data[18].mAabb = Aabb(Vector3(54.3341f, 63.0511f, -15.5605f), Vector3(55.3608f, 66.1376f, -10.0875f));
  data[19].mAabb = Aabb(Vector3(13.6331f, -24.6199f, -0.575123f), Vector3(14.8289f, -22.7766f, 5.06952f));
  data[20].mAabb = Aabb(Vector3(54.9239f, 28.3931f, 53.049f), Vector3(59.9539f, 31.7018f, 59.7979f));
  data[21].mAabb = Aabb(Vector3(41.2526f, -3.13574f, 64.4994f), Vector3(45.6f, 3.44385f, 68.2702f));
  data[22].mAabb = Aabb(Vector3(41.4882f, -42.8094f, 69.8446f), Vector3(45.2006f, -37.8015f, 76.2843f));
  data[23].mAabb = Aabb(Vector3(27.6958f, 41.102f, 56.9771f), Vector3(35.3388f, 41.6683f, 64.3617f));
  data[24].mAabb = Aabb(Vector3(-21.3531f, -15.6509f, -57.6546f), Vector3(-13.842f, -8.63575f, -52.6334f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest21(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(26);
  data[0].mAabb = Aabb(Vector3(-12.5402f, -66.943f, -17.8414f), Vector3(-6.13715f, -63.6641f, -10.4106f));
  data[1].mAabb = Aabb(Vector3(23.0045f, 49.7261f, 42.8507f), Vector3(26.9444f, 56.8684f, 49.8842f));
  data[2].mAabb = Aabb(Vector3(17.5065f, 28.7983f, -91.6937f), Vector3(18.3203f, 35.0049f, -88.2369f));
  data[3].mAabb = Aabb(Vector3(-48.9824f, -5.97882f, -70.0605f), Vector3(-42.5954f, -0.352963f, -69.3165f));
  data[4].mAabb = Aabb(Vector3(-32.8924f, -22.8652f, -3.88313f), Vector3(-31.4907f, -19.9953f, 2.53039f));
  data[5].mAabb = Aabb(Vector3(37.7382f, 22.9614f, -84.636f), Vector3(38.6002f, 24.9618f, -81.543f));
  data[6].mAabb = Aabb(Vector3(-61.7419f, -70.3525f, -2.81767f), Vector3(-60.4445f, -67.7305f, 0.189575f));
  data[7].mAabb = Aabb(Vector3(5.3598f, -51.9753f, -4.08789f), Vector3(6.49064f, -48.5004f, -1.35108f));
  data[8].mAabb = Aabb(Vector3(20.9873f, -4.25742f, -4.2433f), Vector3(25.1545f, 3.23533f, 0.818242f));
  data[9].mAabb = Aabb(Vector3(-35.831f, -38.0114f, -32.6162f), Vector3(-31.2389f, -37.1432f, -26.644f));
  data[10].mAabb = Aabb(Vector3(-4.50009f, -24.1381f, -52.0841f), Vector3(0.942066f, -17.3874f, -44.2056f));
  data[11].mAabb = Aabb(Vector3(-45.6288f, -15.7457f, 87.5388f), Vector3(-40.201f, -11.5365f, 88.7306f));
  data[12].mAabb = Aabb(Vector3(40.9055f, 71.6468f, 46.0984f), Vector3(45.9375f, 77.8635f, 50.0525f));
  data[13].mAabb = Aabb(Vector3(74.9087f, 28.1967f, 50.9176f), Vector3(82.2029f, 31.9086f, 53.7178f));
  data[14].mAabb = Aabb(Vector3(-53.4307f, 7.55757f, 23.8271f), Vector3(-49.6483f, 15.0925f, 26.2341f));
  data[15].mAabb = Aabb(Vector3(71.7325f, -7.25072f, -37.8742f), Vector3(76.6469f, -6.00042f, -32.6283f));
  data[16].mAabb = Aabb(Vector3(-27.759f, -20.9045f, -72.0165f), Vector3(-27.2159f, -20.0821f, -71.3294f));
  data[17].mAabb = Aabb(Vector3(-80.9178f, -41.7436f, 44.3985f), Vector3(-74.3811f, -38.9094f, 45.2422f));
  data[18].mAabb = Aabb(Vector3(-39.6809f, -57.616f, 17.7101f), Vector3(-36.774f, -50.1124f, 21.0303f));
  data[19].mAabb = Aabb(Vector3(-58.1583f, -7.9648f, 66.1963f), Vector3(-52.3408f, -4.7618f, 72.2343f));
  data[20].mAabb = Aabb(Vector3(17.1588f, 17.9159f, -71.3697f), Vector3(24.8394f, 19.0574f, -67.512f));
  data[21].mAabb = Aabb(Vector3(-30.9663f, -86.8095f, 1.90416f), Vector3(-25.4671f, -81.7566f, 8.48074f));
  data[22].mAabb = Aabb(Vector3(-26.2806f, 55.0772f, -34.5928f), Vector3(-24.1267f, 56.5639f, -32.6007f));
  data[23].mAabb = Aabb(Vector3(64.8092f, 8.83917f, -17.6992f), Vector3(66.2439f, 14.0438f, -15.8438f));
  data[24].mAabb = Aabb(Vector3(-51.101f, -0.0496365f, -81.097f), Vector3(-48.0738f, 2.29403f, -78.7016f));
  data[25].mAabb = Aabb(Vector3(34.3561f, 77.5742f, 0.505932f), Vector3(40.8877f, 83.001f, 6.20415f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest22(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(21);
  data[0].mAabb = Aabb(Vector3(-35.0831f, -58.0937f, -63.1049f), Vector3(-29.4039f, -51.6405f, -55.784f));
  data[1].mAabb = Aabb(Vector3(-43.326f, 0.335953f, -59.7779f), Vector3(-40.297f, 1.76507f, -52.9174f));
  data[2].mAabb = Aabb(Vector3(-43.776f, 25.2946f, -20.4798f), Vector3(-38.7996f, 29.5399f, -20.0264f));
  data[3].mAabb = Aabb(Vector3(17.6101f, 48.8466f, -77.5379f), Vector3(21.3426f, 53.7537f, -73.8437f));
  data[4].mAabb = Aabb(Vector3(20.2513f, -10.0186f, -27.7217f), Vector3(28.1054f, -9.27189f, -23.223f));
  data[5].mAabb = Aabb(Vector3(8.39272f, -62.2468f, -15.1733f), Vector3(12.7294f, -56.8677f, -7.82974f));
  data[6].mAabb = Aabb(Vector3(64.4992f, -41.0614f, 57.883f), Vector3(66.2542f, -33.4599f, 63.4815f));
  data[7].mAabb = Aabb(Vector3(14.9605f, -19.5122f, -60.0548f), Vector3(17.8504f, -13.294f, -56.3186f));
  data[8].mAabb = Aabb(Vector3(-58.5222f, 13.7932f, 36.0855f), Vector3(-52.5944f, 17.8314f, 40.6354f));
  data[9].mAabb = Aabb(Vector3(-17.0627f, 57.4634f, 28.4542f), Vector3(-10.3854f, 61.2717f, 34.4586f));
  data[10].mAabb = Aabb(Vector3(-83.9169f, -44.4653f, -3.95313f), Vector3(-76.8159f, -40.9763f, 2.04755f));
  data[11].mAabb = Aabb(Vector3(-37.9752f, -2.64102f, 63.0785f), Vector3(-33.4348f, 2.39455f, 64.1346f));
  data[12].mAabb = Aabb(Vector3(33.2654f, 47.1256f, 69.8231f), Vector3(38.9393f, 48.5967f, 76.4744f));
  data[13].mAabb = Aabb(Vector3(-11.4962f, -95.7191f, 12.2206f), Vector3(-8.45673f, -90.4678f, 19.3584f));
  data[14].mAabb = Aabb(Vector3(-54.9577f, -2.93865f, -33.2561f), Vector3(-47.1274f, -0.841081f, -27.2817f));
  data[15].mAabb = Aabb(Vector3(88.466f, -22.4396f, 3.25628f), Vector3(90.2377f, -18.069f, 5.04537f));
  data[16].mAabb = Aabb(Vector3(-55.186f, -14.1978f, 16.6497f), Vector3(-47.1992f, -9.02123f, 22.6172f));
  data[17].mAabb = Aabb(Vector3(11.6427f, -7.42279f, 59.9515f), Vector3(18.9981f, -1.65777f, 67.7673f));
  data[18].mAabb = Aabb(Vector3(-39.5603f, 42.6043f, 18.7236f), Vector3(-37.3664f, 49.468f, 19.3667f));
  data[19].mAabb = Aabb(Vector3(-16.5602f, -36.5286f, 40.7212f), Vector3(-9.56355f, -29.3147f, 46.2047f));
  data[20].mAabb = Aabb(Vector3(-36.9593f, 20.3441f, 27.0361f), Vector3(-36.0634f, 22.5736f, 32.4163f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest23(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(15);
  data[0].mAabb = Aabb(Vector3(-51.6136f, -37.2118f, 31.1547f), Vector3(-47.0357f, -33.063f, 38.0798f));
  data[1].mAabb = Aabb(Vector3(23.3631f, 66.023f, 12.5327f), Vector3(28.0667f, 71.2631f, 13.463f));
  data[2].mAabb = Aabb(Vector3(-18.3699f, -10.0748f, -57.3678f), Vector3(-16.1148f, -7.73391f, -50.4102f));
  data[3].mAabb = Aabb(Vector3(-9.34159f, -26.6368f, -25.0917f), Vector3(-6.98332f, -25.0732f, -24.473f));
  data[4].mAabb = Aabb(Vector3(-35.8551f, 85.9931f, -33.9401f), Vector3(-30.3716f, 88.295f, -28.3899f));
  data[5].mAabb = Aabb(Vector3(-65.4248f, -18.1034f, -31.6673f), Vector3(-62.6284f, -12.5418f, -30.0178f));
  data[6].mAabb = Aabb(Vector3(-90.794f, -17.7582f, -41.0901f), Vector3(-87.0413f, -12.1525f, -40.6312f));
  data[7].mAabb = Aabb(Vector3(-25.4099f, 81.9707f, 30.3106f), Vector3(-22.4087f, 88.1813f, 32.6202f));
  data[8].mAabb = Aabb(Vector3(13.4523f, 0.551568f, 48.2247f), Vector3(17.4383f, 4.4098f, 54.5608f));
  data[9].mAabb = Aabb(Vector3(34.2435f, 33.9576f, -35.8514f), Vector3(39.7601f, 38.3243f, -34.6812f));
  data[10].mAabb = Aabb(Vector3(-2.65336f, -31.7777f, 38.905f), Vector3(-1.49793f, -26.6748f, 40.0762f));
  data[11].mAabb = Aabb(Vector3(-65.455f, -74.6092f, -23.3791f), Vector3(-64.5405f, -70.9998f, -18.7757f));
  data[12].mAabb = Aabb(Vector3(-25.9931f, -38.5983f, 9.82535f), Vector3(-20.1974f, -35.0662f, 14.6273f));
  data[13].mAabb = Aabb(Vector3(-45.7726f, -34.7379f, 74.4811f), Vector3(-38.2555f, -30.608f, 76.8517f));
  data[14].mAabb = Aabb(Vector3(23.549f, 66.746f, 23.9175f), Vector3(24.4205f, 68.2737f, 24.3641f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest24(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(17);
  data[0].mAabb = Aabb(Vector3(48.4171f, 21.6195f, 60.4142f), Vector3(52.5887f, 25.7639f, 61.436f));
  data[1].mAabb = Aabb(Vector3(-72.7143f, -19.3541f, 1.10593f), Vector3(-65.8798f, -12.5238f, 7.99655f));
  data[2].mAabb = Aabb(Vector3(34.2732f, -60.9117f, 26.6915f), Vector3(36.4157f, -55.2838f, 33.3172f));
  data[3].mAabb = Aabb(Vector3(-86.5451f, -15.2094f, 20.5294f), Vector3(-79.0598f, -10.949f, 27.6448f));
  data[4].mAabb = Aabb(Vector3(21.0722f, -49.3926f, -87.0843f), Vector3(24.9785f, -41.8623f, -81.8131f));
  data[5].mAabb = Aabb(Vector3(20.2555f, 54.1621f, -7.22104f), Vector3(27.142f, 61.1835f, -0.431539f));
  data[6].mAabb = Aabb(Vector3(32.4887f, -32.919f, -73.8535f), Vector3(38.0535f, -31.254f, -72.4974f));
  data[7].mAabb = Aabb(Vector3(1.23184f, -24.6602f, 88.2554f), Vector3(8.9106f, -24.0185f, 92.6315f));
  data[8].mAabb = Aabb(Vector3(-31.7751f, -10.8397f, 63.7166f), Vector3(-29.9261f, -9.00767f, 65.0204f));
  data[9].mAabb = Aabb(Vector3(21.0847f, -78.279f, 3.92495f), Vector3(25.0677f, -72.2741f, 11.2103f));
  data[10].mAabb = Aabb(Vector3(2.44083f, -12.6691f, 11.2023f), Vector3(8.06645f, -9.32458f, 16.0342f));
  data[11].mAabb = Aabb(Vector3(59.1151f, 43.4753f, -25.2397f), Vector3(66.5633f, 47.5337f, -19.2502f));
  data[12].mAabb = Aabb(Vector3(0.414191f, 35.7608f, -41.0395f), Vector3(7.45048f, 37.8266f, -33.3468f));
  data[13].mAabb = Aabb(Vector3(-42.0747f, 74.9589f, -13.3183f), Vector3(-34.9672f, 80.8528f, -7.27423f));
  data[14].mAabb = Aabb(Vector3(7.84821f, 70.9873f, 52.1877f), Vector3(10.0244f, 73.4029f, 59.2898f));
  data[15].mAabb = Aabb(Vector3(-17.063f, -57.435f, 41.452f), Vector3(-14.602f, -55.4873f, 46.1772f));
  data[16].mAabb = Aabb(Vector3(-20.6482f, 82.5071f, 40.1155f), Vector3(-16.0148f, 83.319f, 44.9822f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionStructureFuzzTest25(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mAabb = Aabb(Vector3(-11.4883f, -94.1438f, 20.834f), Vector3(-4.79181f, -93.7426f, 21.6251f));
  data[1].mAabb = Aabb(Vector3(13.9839f, -67.1743f, -42.1119f), Vector3(17.1915f, -60.1515f, -40.189f));
  data[2].mAabb = Aabb(Vector3(-11.5921f, 50.382f, 83.1496f), Vector3(-10.5911f, 55.3247f, 84.6588f));
  data[3].mAabb = Aabb(Vector3(32.7737f, -79.2569f, -36.9042f), Vector3(35.1596f, -71.8567f, -29.7454f));
  data[4].mAabb = Aabb(Vector3(-59.7956f, -42.7517f, 7.95804f), Vector3(-56.1254f, -39.8605f, 12.7044f));
  data[5].mAabb = Aabb(Vector3(19.5989f, -84.2534f, -31.8072f), Vector3(23.6759f, -77.132f, -24.5534f));
  data[6].mAabb = Aabb(Vector3(-47.8759f, 39.8711f, -16.0492f), Vector3(-41.8803f, 42.365f, -10.8622f));
  data[7].mAabb = Aabb(Vector3(-67.0461f, -22.613f, 2.2367f), Vector3(-62.2879f, -18.3611f, 5.95554f));
  data[8].mAabb = Aabb(Vector3(57.5155f, 9.3319f, -2.61126f), Vector3(58.3474f, 10.0527f, 2.90883f));
  data[9].mAabb = Aabb(Vector3(4.06452f, -83.725f, -18.6026f), Vector3(6.66541f, -78.1147f, -12.3016f));
  data[10].mAabb = Aabb(Vector3(95.741f, -3.71522f, -8.60037f), Vector3(102.918f, 3.65808f, -0.837876f));
  data[11].mAabb = Aabb(Vector3(-62.9029f, 52.0366f, -41.6762f), Vector3(-57.678f, 54.5904f, -39.5982f));
  data[12].mAabb = Aabb(Vector3(-9.72543f, 78.1986f, -1.55143f), Vector3(-7.1104f, 81.7966f, 2.21426f));
  data[13].mAabb = Aabb(Vector3(37.7011f, 3.86768f, 17.2225f), Vector3(39.4253f, 4.61837f, 23.0163f));
  data[14].mAabb = Aabb(Vector3(70.0756f, 46.9884f, 44.6577f), Vector3(76.6684f, 49.7089f, 45.4258f));
  data[15].mAabb = Aabb(Vector3(-9.20298f, -83.9815f, 28.0743f), Vector3(-2.17528f, -76.2308f, 29.2666f));
  data[16].mAabb = Aabb(Vector3(74.1025f, 40.4325f, 4.75882f), Vector3(80.5801f, 45.5398f, 12.4151f));
  data[17].mAabb = Aabb(Vector3(-60.4138f, -21.8225f, 36.1039f), Vector3(-58.7601f, -14.2548f, 41.0259f));
  data[18].mAabb = Aabb(Vector3(-2.13925f, -12.7942f, -30.021f), Vector3(5.23637f, -5.42228f, -27.424f));
  data[19].mAabb = Aabb(Vector3(30.5526f, -5.93275f, 40.3622f), Vector3(34.6776f, -5.04497f, 42.3244f));
  data[20].mAabb = Aabb(Vector3(-22.5206f, -55.9895f, -54.7646f), Vector3(-18.4615f, -53.9529f, -49.4604f));
  data[21].mAabb = Aabb(Vector3(82.481f, -15.2157f, -11.9407f), Vector3(90.385f, -11.9028f, -4.99693f));
  data[22].mAabb = Aabb(Vector3(61.3647f, 37.6824f, -31.8182f), Vector3(65.3396f, 44.0438f, -30.8195f));
  data[23].mAabb = Aabb(Vector3(-19.5733f, -48.2098f, -78.5275f), Vector3(-14.6621f, -43.957f, -70.6101f));
  data[24].mAabb = Aabb(Vector3(-54.1906f, 55.1775f, -47.0798f), Vector3(-48.1008f, 58.4315f, -40.5482f));
  data[25].mAabb = Aabb(Vector3(34.5776f, 69.0004f, 34.7856f), Vector3(36.8695f, 75.8808f, 36.128f));
  data[26].mAabb = Aabb(Vector3(-58.5108f, 46.6271f, -7.07517f), Vector3(-54.7704f, 54.3998f, -4.15165f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  PrintSpatialPartitionStructure(spatialPartition, PrintAabbData, file, true);
}

void AabbSpatialPartitionRayCastFuzzTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mAabb = Aabb(Vector3(5.78385f, 11.2187f, -20.5214f), Vector3(7.58454f, 16.1407f, -15.0127f));
  data[1].mAabb = Aabb(Vector3(-16.2056f, -39.0694f, 16.5112f), Vector3(-11.9646f, -37.715f, 19.0813f));
  data[2].mAabb = Aabb(Vector3(-11.7538f, 25.6054f, -6.08261f), Vector3(-5.71534f, 29.3252f, 0.131674f));
  data[3].mAabb = Aabb(Vector3(2.10622f, -9.29249f, -21.7373f), Vector3(7.61588f, -5.79446f, -19.2978f));
  data[4].mAabb = Aabb(Vector3(-0.422652f, -8.83493f, -30.2156f), Vector3(6.83769f, -4.13591f, -28.9544f));
  data[5].mAabb = Aabb(Vector3(10.7869f, -19.9303f, 11.5446f), Vector3(13.7382f, -17.2454f, 14.0256f));
  data[6].mAabb = Aabb(Vector3(15.6756f, 17.8036f, -9.15831f), Vector3(20.9677f, 19.9037f, -1.38283f));
  data[7].mAabb = Aabb(Vector3(-38.8856f, 4.20381f, -26.1935f), Vector3(-34.4459f, 5.06955f, -18.6681f));
  data[8].mAabb = Aabb(Vector3(6.11565f, 20.1767f, -29.8111f), Vector3(13.4716f, 24.0728f, -21.8902f));
  data[9].mAabb = Aabb(Vector3(-13.1203f, 39.7542f, -19.963f), Vector3(-9.2062f, 40.9962f, -16.4497f));
  data[10].mAabb = Aabb(Vector3(-43.5262f, 12.5725f, 0.338447f), Vector3(-36.4865f, 19.1064f, 1.26124f));
  data[11].mAabb = Aabb(Vector3(33.4155f, -31.8208f, -8.99941f), Vector3(37.2341f, -27.2243f, -3.45149f));
  data[12].mAabb = Aabb(Vector3(1.69864f, 33.9889f, -25.3569f), Vector3(6.008f, 40.1371f, -18.8789f));
  data[13].mAabb = Aabb(Vector3(27.3745f, -8.99399f, 6.43565f), Vector3(33.6401f, -8.33955f, 13.3001f));
  data[14].mAabb = Aabb(Vector3(6.46524f, 26.9755f, 19.1266f), Vector3(9.1422f, 29.2843f, 26.0885f));
  data[15].mAabb = Aabb(Vector3(-8.51152f, -23.033f, 14.8638f), Vector3(-6.3759f, -19.3986f, 15.294f));
  data[16].mAabb = Aabb(Vector3(-10.6674f, -23.5108f, 10.0133f), Vector3(-3.63205f, -16.1463f, 12.0628f));
  data[17].mAabb = Aabb(Vector3(16.6675f, -14.1139f, 30.1814f), Vector3(22.9946f, -11.5659f, 35.6713f));
  data[18].mAabb = Aabb(Vector3(-18.0872f, -6.40865f, 12.2195f), Vector3(-14.2129f, -4.16612f, 15.7806f));
  data[19].mAabb = Aabb(Vector3(-5.9958f, 0.394307f, -29.2936f), Vector3(-4.82994f, 5.01354f, -24.5317f));
  data[20].mAabb = Aabb(Vector3(-35.4381f, 31.831f, -3.96975f), Vector3(-34.8479f, 35.6058f, 3.37223f));
  data[21].mAabb = Aabb(Vector3(29.1808f, 34.5309f, -10.1397f), Vector3(32.5737f, 38.9086f, -4.33295f));
  data[22].mAabb = Aabb(Vector3(-26.0524f, -31.1201f, -23.3776f), Vector3(-19.2511f, -29.1191f, -17.7844f));
  data[23].mAabb = Aabb(Vector3(-9.86672f, 19.5673f, -21.1468f), Vector3(-7.13316f, 23.1604f, -18.0727f));
  data[24].mAabb = Aabb(Vector3(-32.1155f, -40.1872f, -3.81265f), Vector3(-28.1383f, -39.2628f, -3.34793f));
  data[25].mAabb = Aabb(Vector3(-18.3438f, 6.88972f, 17.6069f), Vector3(-15.6734f, 12.7016f, 18.5499f));
  data[26].mAabb = Aabb(Vector3(-1.26006f, -48.1578f, -16.1727f), Vector3(5.44525f, -43.3878f, -9.85082f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-10.7378f, -14.7255f, -6.10565f));
  ray.mDirection = Vector3(Vector3(0.107446f, -0.314813f, 0.943052f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(25);
  data[0].mAabb = Aabb(Vector3(42.1216f, -7.28003f, 14.3232f), Vector3(42.8486f, 0.298993f, 22.2402f));
  data[1].mAabb = Aabb(Vector3(-5.00703f, 0.970568f, 44.4351f), Vector3(-0.49194f, 7.66613f, 45.1357f));
  data[2].mAabb = Aabb(Vector3(2.99788f, 42.5164f, 19.3399f), Vector3(7.27941f, 44.0502f, 26.7717f));
  data[3].mAabb = Aabb(Vector3(19.7633f, 11.5091f, -5.93565f), Vector3(25.6781f, 14.8185f, -5.48856f));
  data[4].mAabb = Aabb(Vector3(32.1666f, -1.26837f, -6.81882f), Vector3(35.5704f, 4.58966f, 0.841158f));
  data[5].mAabb = Aabb(Vector3(24.8151f, 16.0722f, 27.9524f), Vector3(28.1595f, 17.3399f, 31.3509f));
  data[6].mAabb = Aabb(Vector3(-10.8522f, -23.3809f, -20.9883f), Vector3(-4.38558f, -22.1923f, -13.3669f));
  data[7].mAabb = Aabb(Vector3(-24.1366f, 18.6398f, 20.7355f), Vector3(-16.405f, 25.1055f, 21.9665f));
  data[8].mAabb = Aabb(Vector3(28.8748f, 18.1119f, 26.0535f), Vector3(30.3867f, 19.7757f, 29.5613f));
  data[9].mAabb = Aabb(Vector3(24.0502f, 0.847842f, 7.08107f), Vector3(29.3873f, 1.38214f, 10.6918f));
  data[10].mAabb = Aabb(Vector3(23.1024f, 26.6849f, 3.04002f), Vector3(25.5177f, 33.368f, 10.0891f));
  data[11].mAabb = Aabb(Vector3(-48.4823f, -10.1524f, -15.8362f), Vector3(-43.1023f, -7.9377f, -14.5144f));
  data[12].mAabb = Aabb(Vector3(-19.9825f, -14.0444f, -3.52291f), Vector3(-12.7945f, -10.5985f, -0.781935f));
  data[13].mAabb = Aabb(Vector3(-42.9812f, -2.40404f, -17.6451f), Vector3(-36.1725f, 4.08904f, -10.3367f));
  data[14].mAabb = Aabb(Vector3(17.2326f, -36.8659f, -21.6145f), Vector3(22.2139f, -31.0756f, -20.2201f));
  data[15].mAabb = Aabb(Vector3(18.9165f, -24.18f, 29.8541f), Vector3(26.3984f, -22.4686f, 30.448f));
  data[16].mAabb = Aabb(Vector3(-15.0165f, -23.2226f, -20.92f), Vector3(-10.057f, -18.5948f, -19.2559f));
  data[17].mAabb = Aabb(Vector3(-5.75247f, 8.28146f, -42.6563f), Vector3(-5.33507f, 10.9468f, -38.0157f));
  data[18].mAabb = Aabb(Vector3(-15.4252f, -18.4096f, -18.9492f), Vector3(-12.2313f, -12.9055f, -17.1207f));
  data[19].mAabb = Aabb(Vector3(35.5846f, 7.97922f, 10.667f), Vector3(39.9645f, 11.4775f, 14.1775f));
  data[20].mAabb = Aabb(Vector3(-40.8454f, 3.98985f, -0.683857f), Vector3(-35.6915f, 9.77528f, 1.99171f));
  data[21].mAabb = Aabb(Vector3(36.4665f, 2.99763f, -16.3086f), Vector3(41.525f, 4.20872f, -12.9166f));
  data[22].mAabb = Aabb(Vector3(20.49f, 22.1852f, -12.9125f), Vector3(25.2329f, 25.5749f, -5.95391f));
  data[23].mAabb = Aabb(Vector3(-17.2765f, -37.0956f, 0.449353f), Vector3(-11.1684f, -35.9019f, 4.10348f));
  data[24].mAabb = Aabb(Vector3(-3.16575f, 30.0864f, -15.791f), Vector3(3.89002f, 33.6598f, -13.9024f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-14.5705f, -5.18838f, 14.7989f));
  ray.mDirection = Vector3(Vector3(-0.00356662f, -0.327739f, -0.944762f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(43);
  data[0].mAabb = Aabb(Vector3(-2.39938f, -21.0268f, -4.15299f), Vector3(0.0637314f, -16.7821f, -0.464766f));
  data[1].mAabb = Aabb(Vector3(-33.3021f, -12.6946f, 11.829f), Vector3(-31.4369f, -10.2603f, 17.71f));
  data[2].mAabb = Aabb(Vector3(-0.520029f, -33.0547f, 11.7705f), Vector3(0.924168f, -32.2963f, 18.9321f));
  data[3].mAabb = Aabb(Vector3(27.1452f, -5.70038f, 13.8839f), Vector3(33.7846f, -0.660873f, 14.947f));
  data[4].mAabb = Aabb(Vector3(-31.3014f, -19.4735f, -35.1162f), Vector3(-28.9718f, -16.6071f, -29.3495f));
  data[5].mAabb = Aabb(Vector3(-9.83178f, -12.6417f, -34.2891f), Vector3(-3.03346f, -5.88958f, -30.8164f));
  data[6].mAabb = Aabb(Vector3(-7.17645f, -14.4189f, -33.0522f), Vector3(-5.10276f, -11.5199f, -32.3177f));
  data[7].mAabb = Aabb(Vector3(-5.69045f, 0.987979f, -23.0011f), Vector3(1.34723f, 8.69063f, -18.7309f));
  data[8].mAabb = Aabb(Vector3(-30.3634f, 0.529109f, -9.03967f), Vector3(-25.457f, 1.39833f, -5.72279f));
  data[9].mAabb = Aabb(Vector3(-15.5761f, -20.774f, -15.3066f), Vector3(-13.2612f, -17.2052f, -12.7386f));
  data[10].mAabb = Aabb(Vector3(14.7926f, -31.963f, 23.8925f), Vector3(17.7978f, -31.2566f, 27.2331f));
  data[11].mAabb = Aabb(Vector3(-5.50961f, -5.806f, 36.8517f), Vector3(-2.30011f, 1.54248f, 40.6195f));
  data[12].mAabb = Aabb(Vector3(-23.8197f, 31.5841f, -16.1421f), Vector3(-18.6622f, 38.5028f, -11.274f));
  data[13].mAabb = Aabb(Vector3(-1.82483f, 38.7542f, -28.557f), Vector3(0.453192f, 43.6951f, -24.8948f));
  data[14].mAabb = Aabb(Vector3(-24.6069f, -39.5794f, -12.4902f), Vector3(-17.8304f, -32.381f, -7.26092f));
  data[15].mAabb = Aabb(Vector3(31.599f, 27.5879f, -1.04777f), Vector3(36.2684f, 34.3424f, 2.6154f));
  data[16].mAabb = Aabb(Vector3(39.0234f, -17.3715f, -10.7093f), Vector3(42.6525f, -11.0874f, -8.0207f));
  data[17].mAabb = Aabb(Vector3(-14.2837f, 16.9669f, 16.5804f), Vector3(-7.4248f, 21.118f, 24.1008f));
  data[18].mAabb = Aabb(Vector3(25.2867f, 16.0078f, 22.3947f), Vector3(28.7307f, 21.3975f, 30.2008f));
  data[19].mAabb = Aabb(Vector3(33.3172f, 4.12037f, 32.7842f), Vector3(34.4852f, 4.6586f, 39.6765f));
  data[20].mAabb = Aabb(Vector3(-11.4229f, -34.9167f, 12.4651f), Vector3(-10.4655f, -27.2017f, 19.4228f));
  data[21].mAabb = Aabb(Vector3(-42.6572f, 0.388113f, -9.94099f), Vector3(-38.7271f, 2.31266f, -5.0091f));
  data[22].mAabb = Aabb(Vector3(19.3517f, -46.486f, -2.15903f), Vector3(26.7153f, -41.34f, 2.91875f));
  data[23].mAabb = Aabb(Vector3(16.9493f, 0.487437f, 18.9857f), Vector3(19.5124f, 8.03538f, 20.6366f));
  data[24].mAabb = Aabb(Vector3(-14.723f, -40.6867f, -20.9221f), Vector3(-13.7967f, -36.8202f, -16.0384f));
  data[25].mAabb = Aabb(Vector3(-20.7981f, 34.7736f, -20.1135f), Vector3(-18.984f, 41.7649f, -14.6924f));
  data[26].mAabb = Aabb(Vector3(-35.9525f, 26.9684f, -19.1743f), Vector3(-32.2288f, 32.951f, -15.1268f));
  data[27].mAabb = Aabb(Vector3(9.4783f, 9.44691f, 30.3937f), Vector3(13.1176f, 11.0456f, 32.3739f));
  data[28].mAabb = Aabb(Vector3(-15.6637f, -12.5402f, 38.4096f), Vector3(-8.78795f, -7.66141f, 42.7855f));
  data[29].mAabb = Aabb(Vector3(-0.486799f, 38.882f, 13.5682f), Vector3(1.68917f, 42.2826f, 19.6714f));
  data[30].mAabb = Aabb(Vector3(0.615627f, -39.7312f, 15.6453f), Vector3(3.04511f, -37.1125f, 16.1063f));
  data[31].mAabb = Aabb(Vector3(-23.6507f, -16.2953f, -3.74113f), Vector3(-20.5721f, -9.73005f, 1.9564f));
  data[32].mAabb = Aabb(Vector3(27.4588f, 28.8651f, 7.46528f), Vector3(31.3168f, 29.565f, 10.1302f));
  data[33].mAabb = Aabb(Vector3(26.8475f, -4.31347f, -17.533f), Vector3(31.1175f, 1.87229f, -10.4399f));
  data[34].mAabb = Aabb(Vector3(-10.0998f, -14.0492f, 13.0445f), Vector3(-8.36565f, -11.172f, 14.1455f));
  data[35].mAabb = Aabb(Vector3(30.0967f, -18.658f, -38.1143f), Vector3(30.6776f, -12.44f, -31.635f));
  data[36].mAabb = Aabb(Vector3(44.5058f, -1.34082f, -6.92458f), Vector3(47.0536f, 2.8245f, -5.45256f));
  data[37].mAabb = Aabb(Vector3(-4.12346f, -17.6185f, -5.24666f), Vector3(-1.5896f, -9.84092f, -0.184185f));
  data[38].mAabb = Aabb(Vector3(-26.3301f, 21.7245f, -37.5496f), Vector3(-20.3076f, 26.4611f, -36.1174f));
  data[39].mAabb = Aabb(Vector3(11.0929f, 40.7936f, -7.15214f), Vector3(13.6275f, 44.0071f, -0.257341f));
  data[40].mAabb = Aabb(Vector3(3.89033f, -18.8223f, -5.32316f), Vector3(4.38868f, -11.1996f, 2.60703f));
  data[41].mAabb = Aabb(Vector3(-5.83623f, -13.8938f, -35.6167f), Vector3(2.09975f, -8.72577f, -32.6684f));
  data[42].mAabb = Aabb(Vector3(-27.5155f, 30.4538f, 12.2675f), Vector3(-20.9723f, 31.3872f, 14.4657f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(16.8737f, -10.8015f, 7.97549f));
  ray.mDirection = Vector3(Vector3(-0.783636f, -0.469302f, -0.407025f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(38);
  data[0].mAabb = Aabb(Vector3(16.1499f, 4.04015f, -46.9506f), Vector3(20.446f, 10.8851f, -41.5122f));
  data[1].mAabb = Aabb(Vector3(18.5495f, 6.10416f, 3.89461f), Vector3(22.2092f, 10.6923f, 8.70264f));
  data[2].mAabb = Aabb(Vector3(-11.7596f, 20.7883f, 6.71924f), Vector3(-7.55207f, 21.3991f, 10.3836f));
  data[3].mAabb = Aabb(Vector3(-7.66801f, -14.8962f, -42.8979f), Vector3(-5.70427f, -10.5801f, -39.202f));
  data[4].mAabb = Aabb(Vector3(-23.4159f, -20.418f, 23.7461f), Vector3(-19.5099f, -17.8199f, 25.0129f));
  data[5].mAabb = Aabb(Vector3(26.1552f, -7.65052f, 22.8372f), Vector3(32.2524f, -1.94882f, 30.7043f));
  data[6].mAabb = Aabb(Vector3(6.13804f, -1.40147f, 44.3024f), Vector3(14.1188f, 5.27972f, 49.4015f));
  data[7].mAabb = Aabb(Vector3(-46.5733f, 20.0248f, -13.998f), Vector3(-39.4883f, 24.6496f, -8.99115f));
  data[8].mAabb = Aabb(Vector3(-12.3907f, 37.074f, 9.55301f), Vector3(-4.63906f, 41.1602f, 14.8722f));
  data[9].mAabb = Aabb(Vector3(-25.8419f, 14.1626f, 30.0543f), Vector3(-25.326f, 19.1131f, 37.8852f));
  data[10].mAabb = Aabb(Vector3(13.6236f, 8.72427f, 29.6699f), Vector3(16.1758f, 14.7215f, 35.0926f));
  data[11].mAabb = Aabb(Vector3(-17.7025f, -28.8146f, 8.22694f), Vector3(-11.5947f, -28.1374f, 16.1142f));
  data[12].mAabb = Aabb(Vector3(-40.8979f, 2.16546f, 12.7008f), Vector3(-40.2377f, 7.77879f, 18.6171f));
  data[13].mAabb = Aabb(Vector3(-38.4876f, 8.54263f, 26.2456f), Vector3(-35.333f, 13.7895f, 26.9274f));
  data[14].mAabb = Aabb(Vector3(-23.5033f, -3.73314f, 29.3476f), Vector3(-17.2143f, 1.09043f, 36.2964f));
  data[15].mAabb = Aabb(Vector3(0.60876f, 33.455f, 7.84697f), Vector3(3.57611f, 37.7259f, 12.7884f));
  data[16].mAabb = Aabb(Vector3(30.2667f, 22.5853f, -6.45021f), Vector3(33.1202f, 29.0418f, 1.3582f));
  data[17].mAabb = Aabb(Vector3(-14.0265f, -41.5885f, -18.576f), Vector3(-9.60651f, -41.0426f, -15.9514f));
  data[18].mAabb = Aabb(Vector3(-1.68346f, 32.1221f, 2.30907f), Vector3(5.64159f, 38.1933f, 10.1115f));
  data[19].mAabb = Aabb(Vector3(-10.5135f, -30.4648f, -15.6363f), Vector3(-10.0015f, -25.6533f, -11.9402f));
  data[20].mAabb = Aabb(Vector3(42.4136f, -22.1774f, -2.31812f), Vector3(43.0959f, -16.3275f, -0.691386f));
  data[21].mAabb = Aabb(Vector3(11.6397f, -44.1768f, 21.9084f), Vector3(14.1044f, -39.86f, 24.5826f));
  data[22].mAabb = Aabb(Vector3(0.796785f, -47.0191f, 6.4323f), Vector3(7.6735f, -46.0638f, 10.5781f));
  data[23].mAabb = Aabb(Vector3(-37.2663f, 7.57851f, 5.53449f), Vector3(-31.2105f, 13.4384f, 6.09917f));
  data[24].mAabb = Aabb(Vector3(17.77f, 6.39971f, -13.8729f), Vector3(21.4891f, 12.9162f, -7.38797f));
  data[25].mAabb = Aabb(Vector3(16.4735f, 4.1401f, -10.3264f), Vector3(19.9875f, 7.10026f, -6.7305f));
  data[26].mAabb = Aabb(Vector3(-32.5112f, -18.0978f, -36.8685f), Vector3(-26.0047f, -10.895f, -32.1115f));
  data[27].mAabb = Aabb(Vector3(42.1785f, -2.58937f, 10.6852f), Vector3(45.8572f, -0.763162f, 15.8471f));
  data[28].mAabb = Aabb(Vector3(-28.3343f, -27.1172f, -16.8368f), Vector3(-20.5391f, -23.1657f, -13.5064f));
  data[29].mAabb = Aabb(Vector3(-0.0677292f, 34.2938f, -18.2359f), Vector3(4.07371f, 35.6761f, -11.4417f));
  data[30].mAabb = Aabb(Vector3(9.63488f, -15.2725f, -35.131f), Vector3(17.3721f, -13.4626f, -30.3777f));
  data[31].mAabb = Aabb(Vector3(8.8534f, 35.5199f, 15.5703f), Vector3(16.133f, 36.7361f, 16.5362f));
  data[32].mAabb = Aabb(Vector3(-36.6922f, 16.962f, -21.0738f), Vector3(-35.9023f, 24.0168f, -18.828f));
  data[33].mAabb = Aabb(Vector3(-32.2809f, -6.38263f, 25.6994f), Vector3(-31.1851f, -5.27057f, 27.6499f));
  data[34].mAabb = Aabb(Vector3(-35.0473f, 30.4248f, 9.32919f), Vector3(-33.8327f, 37.176f, 11.4001f));
  data[35].mAabb = Aabb(Vector3(10.0479f, -36.0949f, 0.885327f), Vector3(14.4248f, -30.8691f, 2.82077f));
  data[36].mAabb = Aabb(Vector3(25.0429f, -34.7551f, -16.9043f), Vector3(28.6138f, -28.2409f, -16.403f));
  data[37].mAabb = Aabb(Vector3(-17.3186f, 2.79795f, 38.1846f), Vector3(-11.4397f, 4.97114f, 45.2f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(18.8255f, 4.13851f, -7.22363f));
  ray.mDirection = Vector3(Vector3(0.235373f, 0.687906f, -0.686575f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(25);
  data[0].mAabb = Aabb(Vector3(-30.006f, -37.297f, -21.0807f), Vector3(-26.1654f, -32.9462f, -20.3268f));
  data[1].mAabb = Aabb(Vector3(-27.2001f, -8.13497f, 33.9994f), Vector3(-19.217f, -3.05811f, 36.7221f));
  data[2].mAabb = Aabb(Vector3(10.1779f, -10.17f, 44.4559f), Vector3(17.7695f, -6.86335f, 49.8855f));
  data[3].mAabb = Aabb(Vector3(15.811f, -33.9642f, -12.149f), Vector3(22.6704f, -30.9322f, -6.53614f));
  data[4].mAabb = Aabb(Vector3(-27.1593f, -42.8653f, -6.25899f), Vector3(-24.762f, -35.2339f, 1.07349f));
  data[5].mAabb = Aabb(Vector3(-11.3665f, 24.8187f, 15.1819f), Vector3(-7.64164f, 31.2787f, 16.7859f));
  data[6].mAabb = Aabb(Vector3(-27.0581f, 15.2814f, -27.7926f), Vector3(-25.6842f, 20.1224f, -22.6675f));
  data[7].mAabb = Aabb(Vector3(6.93327f, 6.41736f, -36.6208f), Vector3(13.4758f, 11.3632f, -36.106f));
  data[8].mAabb = Aabb(Vector3(-26.1252f, -21.0409f, -1.23506f), Vector3(-19.0611f, -14.8842f, 2.36456f));
  data[9].mAabb = Aabb(Vector3(-28.914f, 24.1043f, 0.637018f), Vector3(-24.7542f, 24.935f, 1.90935f));
  data[10].mAabb = Aabb(Vector3(-17.5538f, -28.7543f, 16.2552f), Vector3(-12.0344f, -26.2502f, 20.3878f));
  data[11].mAabb = Aabb(Vector3(-8.37911f, -20.39f, -25.6469f), Vector3(-5.85175f, -14.384f, -21.274f));
  data[12].mAabb = Aabb(Vector3(-15.0626f, 18.9034f, 8.29462f), Vector3(-8.4677f, 21.1897f, 8.91033f));
  data[13].mAabb = Aabb(Vector3(15.2743f, 23.8405f, -15.2953f), Vector3(18.2558f, 31.156f, -10.7689f));
  data[14].mAabb = Aabb(Vector3(-40.7047f, 20.3043f, -3.46096f), Vector3(-33.9941f, 25.6465f, 3.76876f));
  data[15].mAabb = Aabb(Vector3(-23.3746f, 3.0918f, 18.6607f), Vector3(-17.4208f, 10.7685f, 25.6065f));
  data[16].mAabb = Aabb(Vector3(-14.046f, -7.60041f, 45.9996f), Vector3(-9.09514f, -0.694934f, 49.8152f));
  data[17].mAabb = Aabb(Vector3(-34.485f, 25.7771f, 26.4391f), Vector3(-28.8141f, 28.8063f, 26.985f));
  data[18].mAabb = Aabb(Vector3(15.4723f, 6.1002f, -7.89694f), Vector3(17.428f, 13.676f, -0.280342f));
  data[19].mAabb = Aabb(Vector3(2.08755f, -22.084f, -43.3707f), Vector3(8.09541f, -19.853f, -35.8559f));
  data[20].mAabb = Aabb(Vector3(-10.5163f, -1.99063f, 34.9196f), Vector3(-4.44284f, -0.478238f, 40.0617f));
  data[21].mAabb = Aabb(Vector3(22.1654f, 18.3104f, 22.749f), Vector3(30.019f, 21.5143f, 28.463f));
  data[22].mAabb = Aabb(Vector3(18.5644f, -19.9735f, 26.641f), Vector3(25.1974f, -17.5074f, 32.7655f));
  data[23].mAabb = Aabb(Vector3(-12.1925f, 8.96225f, 8.11281f), Vector3(-6.43626f, 11.0153f, 11.0936f));
  data[24].mAabb = Aabb(Vector3(-21.6098f, 25.6729f, 8.55265f), Vector3(-14.4083f, 29.5323f, 15.081f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-6.662f, 0.415712f, 9.07621f));
  ray.mDirection = Vector3(Vector3(-0.320428f, 0.943274f, 0.0869472f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest6(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mAabb = Aabb(Vector3(11.597f, -3.10589f, -18.0922f), Vector3(19.3463f, 3.43521f, -11.061f));
  data[1].mAabb = Aabb(Vector3(-33.6293f, -18.4976f, 18.4157f), Vector3(-30.8639f, -11.7798f, 19.0321f));
  data[2].mAabb = Aabb(Vector3(-12.6282f, 19.2362f, 18.6435f), Vector3(-5.67585f, 20.8311f, 19.1646f));
  data[3].mAabb = Aabb(Vector3(-42.7455f, 11.3646f, -7.58276f), Vector3(-36.8645f, 18.1761f, -5.18204f));
  data[4].mAabb = Aabb(Vector3(-9.12012f, 35.4724f, 20.6125f), Vector3(-6.08295f, 36.1526f, 28.2367f));
  data[5].mAabb = Aabb(Vector3(-31.7083f, 13.8705f, 12.3342f), Vector3(-24.1049f, 19.934f, 19.1439f));
  data[6].mAabb = Aabb(Vector3(6.96519f, -27.0706f, 40.2169f), Vector3(10.116f, -25.3323f, 43.1861f));
  data[7].mAabb = Aabb(Vector3(18.2692f, -39.5312f, -16.8575f), Vector3(24.0795f, -35.0468f, -10.5758f));
  data[8].mAabb = Aabb(Vector3(15.6718f, -4.36877f, 34.939f), Vector3(18.4974f, 0.46988f, 42.2865f));
  data[9].mAabb = Aabb(Vector3(29.7571f, 1.27433f, -28.8985f), Vector3(36.792f, 6.90158f, -28.3976f));
  data[10].mAabb = Aabb(Vector3(-6.05135f, -18.5904f, -0.383873f), Vector3(0.166421f, -14.8764f, 1.57407f));
  data[11].mAabb = Aabb(Vector3(-14.9631f, -4.08364f, -3.78281f), Vector3(-7.11151f, -1.00264f, -2.01993f));
  data[12].mAabb = Aabb(Vector3(-2.89189f, 33.6134f, -25.3004f), Vector3(-2.01294f, 40.9072f, -21.8432f));
  data[13].mAabb = Aabb(Vector3(4.92659f, 17.488f, -36.4147f), Vector3(10.1762f, 19.0862f, -31.5665f));
  data[14].mAabb = Aabb(Vector3(12.3726f, -30.1668f, 22.9779f), Vector3(18.8986f, -23.7178f, 29.9502f));
  data[15].mAabb = Aabb(Vector3(22.9527f, 16.117f, 3.53706f), Vector3(28.315f, 21.2785f, 6.40328f));
  data[16].mAabb = Aabb(Vector3(44.8731f, 2.11993f, 9.31092f), Vector3(46.7382f, 4.68209f, 11.3531f));
  data[17].mAabb = Aabb(Vector3(-6.44676f, -22.3001f, -36.2131f), Vector3(-2.73998f, -15.3923f, -31.0774f));
  data[18].mAabb = Aabb(Vector3(15.7726f, -46.3069f, -8.38617f), Vector3(16.7156f, -40.7725f, -4.13549f));
  data[19].mAabb = Aabb(Vector3(33.2979f, 3.20953f, 19.2614f), Vector3(38.403f, 7.63045f, 21.0182f));
  data[20].mAabb = Aabb(Vector3(21.9393f, 34.0593f, -5.55771f), Vector3(29.015f, 37.8983f, -2.05063f));
  data[21].mAabb = Aabb(Vector3(39.1339f, -15.182f, -15.0239f), Vector3(42.3765f, -8.27857f, -9.27787f));
  data[22].mAabb = Aabb(Vector3(18.969f, -32.1087f, 24.5856f), Vector3(20.7966f, -27.868f, 31.9325f));
  data[23].mAabb = Aabb(Vector3(17.2208f, 22.4034f, -18.8974f), Vector3(20.451f, 26.9452f, -15.5086f));
  data[24].mAabb = Aabb(Vector3(-48.848f, -15.2282f, 1.90121f), Vector3(-47.7513f, -8.24229f, 6.10667f));
  data[25].mAabb = Aabb(Vector3(41.8932f, 12.8519f, 7.1623f), Vector3(49.0228f, 16.2295f, 11.641f));
  data[26].mAabb = Aabb(Vector3(26.9627f, -22.3792f, 35.5422f), Vector3(28.3362f, -15.8979f, 37.7771f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-7.90522f, 20.9006f, 6.71414f));
  ray.mDirection = Vector3(Vector3(0.429839f, -0.811145f, 0.396588f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest7(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mAabb = Aabb(Vector3(-6.98379f, 20.724f, 31.9836f), Vector3(-5.89122f, 27.6803f, 33.9701f));
  data[1].mAabb = Aabb(Vector3(-28.3478f, 12.2778f, 27.1538f), Vector3(-24.8354f, 18.6102f, 34.997f));
  data[2].mAabb = Aabb(Vector3(12.2524f, -15.3709f, -31.0962f), Vector3(20.1376f, -13.2432f, -24.8283f));
  data[3].mAabb = Aabb(Vector3(10.9629f, 29.3843f, -25.6844f), Vector3(18.3047f, 35.0907f, -21.9616f));
  data[4].mAabb = Aabb(Vector3(2.69764f, -49.2306f, -6.84813f), Vector3(8.92561f, -44.6719f, 0.326859f));
  data[5].mAabb = Aabb(Vector3(1.93117f, 37.6863f, 22.3348f), Vector3(8.76892f, 39.4037f, 28.1469f));
  data[6].mAabb = Aabb(Vector3(14.8864f, -20.7772f, 20.4407f), Vector3(20.5069f, -16.5926f, 26.6445f));
  data[7].mAabb = Aabb(Vector3(22.1707f, 12.7288f, 23.283f), Vector3(28.4163f, 17.4547f, 24.4348f));
  data[8].mAabb = Aabb(Vector3(23.322f, 16.8658f, -16.515f), Vector3(24.7894f, 17.3725f, -10.6134f));
  data[9].mAabb = Aabb(Vector3(-42.9297f, -3.74392f, -15.912f), Vector3(-37.9869f, -2.94313f, -9.18583f));
  data[10].mAabb = Aabb(Vector3(-31.3302f, -4.52966f, 7.82697f), Vector3(-26.7483f, -0.191536f, 15.3028f));
  data[11].mAabb = Aabb(Vector3(-4.89749f, -3.76745f, -21.0221f), Vector3(0.289993f, -0.238105f, -20.5339f));
  data[12].mAabb = Aabb(Vector3(15.0869f, -4.46657f, 6.71818f), Vector3(21.3049f, 0.483644f, 12.5238f));
  data[13].mAabb = Aabb(Vector3(2.24074f, 9.19811f, 12.599f), Vector3(9.29674f, 16.6517f, 15.697f));
  data[14].mAabb = Aabb(Vector3(-36.0911f, 11.5339f, 3.54522f), Vector3(-30.3875f, 19.365f, 4.16418f));
  data[15].mAabb = Aabb(Vector3(-34.6269f, -34.6817f, -9.428f), Vector3(-29.0941f, -31.2301f, -5.20005f));
  data[16].mAabb = Aabb(Vector3(-4.36665f, 30.2325f, -31.9238f), Vector3(-0.839164f, 31.4983f, -31.1274f));
  data[17].mAabb = Aabb(Vector3(-13.9877f, 37.2497f, 1.53284f), Vector3(-13.074f, 44.6251f, 2.63794f));
  data[18].mAabb = Aabb(Vector3(33.6588f, 16.182f, 25.2989f), Vector3(37.011f, 18.74f, 27.8622f));
  data[19].mAabb = Aabb(Vector3(-30.6534f, -21.0186f, -26.7952f), Vector3(-23.5635f, -17.1668f, -24.048f));
  data[20].mAabb = Aabb(Vector3(7.04002f, 29.8874f, 20.6983f), Vector3(8.84535f, 33.983f, 22.8357f));
  data[21].mAabb = Aabb(Vector3(-14.054f, -23.7073f, -5.08123f), Vector3(-13.587f, -16.3363f, -3.52176f));
  data[22].mAabb = Aabb(Vector3(-22.3082f, 42.3959f, 9.49609f), Vector3(-20.3857f, 42.8769f, 10.2846f));
  data[23].mAabb = Aabb(Vector3(15.7897f, -3.94623f, 17.0669f), Vector3(22.6818f, 1.81578f, 18.4162f));
  data[24].mAabb = Aabb(Vector3(-17.8699f, 5.15689f, 11.2437f), Vector3(-11.5768f, 5.6928f, 13.3208f));
  data[25].mAabb = Aabb(Vector3(40.7901f, -14.13f, -21.4045f), Vector3(44.1298f, -10.7533f, -16.7758f));
  data[26].mAabb = Aabb(Vector3(-4.53582f, -32.2045f, 13.1605f), Vector3(-1.55363f, -24.413f, 17.9936f));
  data[27].mAabb = Aabb(Vector3(-10.888f, 32.5706f, -24.1841f), Vector3(-4.3576f, 37.662f, -21.5254f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-6.66787f, -2.18159f, -6.08864f));
  ray.mDirection = Vector3(Vector3(0.784557f, -0.00383629f, 0.620045f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest8(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(33);
  data[0].mAabb = Aabb(Vector3(-21.1906f, -11.7775f, 29.3357f), Vector3(-19.1746f, -5.73738f, 30.6501f));
  data[1].mAabb = Aabb(Vector3(-37.5277f, -36.6264f, 2.91149f), Vector3(-32.4428f, -30.7141f, 9.6669f));
  data[2].mAabb = Aabb(Vector3(11.9877f, 2.80734f, 5.08631f), Vector3(19.3197f, 7.59217f, 10.072f));
  data[3].mAabb = Aabb(Vector3(10.398f, 3.99616f, 21.801f), Vector3(12.9486f, 7.45731f, 26.5726f));
  data[4].mAabb = Aabb(Vector3(-15.6338f, -7.96993f, 16.6037f), Vector3(-8.05242f, -2.35637f, 23.4422f));
  data[5].mAabb = Aabb(Vector3(19.9096f, -14.4321f, 4.96082f), Vector3(24.9741f, -8.28549f, 8.68268f));
  data[6].mAabb = Aabb(Vector3(-4.36185f, 32.7126f, -34.9212f), Vector3(-2.19748f, 37.9437f, -29.4786f));
  data[7].mAabb = Aabb(Vector3(20.5391f, -31.8681f, 7.03704f), Vector3(21.0034f, -24.9531f, 14.2248f));
  data[8].mAabb = Aabb(Vector3(4.25228f, -38.6081f, 3.07615f), Vector3(8.70197f, -32.8498f, 3.83218f));
  data[9].mAabb = Aabb(Vector3(-31.6423f, -39.0491f, -12.17f), Vector3(-27.9494f, -36.804f, -7.75695f));
  data[10].mAabb = Aabb(Vector3(-44.2706f, -12.1708f, -18.7553f), Vector3(-41.2798f, -7.43749f, -10.7874f));
  data[11].mAabb = Aabb(Vector3(8.36135f, 17.8775f, 21.3787f), Vector3(12.3699f, 19.2421f, 23.8841f));
  data[12].mAabb = Aabb(Vector3(-15.9756f, -2.65474f, 12.5523f), Vector3(-11.3408f, 2.78046f, 15.3325f));
  data[13].mAabb = Aabb(Vector3(10.2306f, -16.2817f, 0.412243f), Vector3(15.6015f, -9.53674f, 0.813403f));
  data[14].mAabb = Aabb(Vector3(4.40359f, -42.052f, -13.426f), Vector3(8.84098f, -38.4628f, -7.48661f));
  data[15].mAabb = Aabb(Vector3(-27.2055f, -25.6313f, -29.7627f), Vector3(-20.3923f, -18.1973f, -21.8492f));
  data[16].mAabb = Aabb(Vector3(20.1038f, 10.69f, -3.65628f), Vector3(24.7988f, 12.2105f, -1.82915f));
  data[17].mAabb = Aabb(Vector3(46.3218f, -4.42504f, -10.3021f), Vector3(47.7337f, 3.36992f, -6.13049f));
  data[18].mAabb = Aabb(Vector3(-39.9915f, 2.22979f, -8.71978f), Vector3(-35.9837f, 8.04468f, -3.39174f));
  data[19].mAabb = Aabb(Vector3(38.2336f, -22.0226f, -16.5687f), Vector3(46.1056f, -18.0168f, -9.40023f));
  data[20].mAabb = Aabb(Vector3(-38.7037f, -2.30151f, 4.25639f), Vector3(-36.0184f, 4.04986f, 6.43769f));
  data[21].mAabb = Aabb(Vector3(-6.46542f, -15.0028f, 33.1924f), Vector3(-5.93484f, -8.11289f, 37.5148f));
  data[22].mAabb = Aabb(Vector3(26.1535f, -33.8045f, 7.57891f), Vector3(32.3622f, -27.0375f, 8.61397f));
  data[23].mAabb = Aabb(Vector3(39.922f, 7.70771f, -22.9144f), Vector3(42.5271f, 8.33988f, -15.9412f));
  data[24].mAabb = Aabb(Vector3(13.1412f, 10.199f, 26.1807f), Vector3(17.7998f, 15.6196f, 32.1898f));
  data[25].mAabb = Aabb(Vector3(20.4188f, -8.88007f, 16.6504f), Vector3(23.7011f, -4.5271f, 18.1676f));
  data[26].mAabb = Aabb(Vector3(9.10767f, 24.8902f, 0.844924f), Vector3(10.1341f, 29.4016f, 4.42785f));
  data[27].mAabb = Aabb(Vector3(2.38536f, 26.1507f, 2.4001f), Vector3(3.86064f, 30.6417f, 9.30256f));
  data[28].mAabb = Aabb(Vector3(-20.7292f, 0.591144f, 41.0975f), Vector3(-15.2121f, 7.81368f, 41.7199f));
  data[29].mAabb = Aabb(Vector3(-20.6371f, -5.97841f, -17.0169f), Vector3(-16.5852f, -5.00992f, -13.4303f));
  data[30].mAabb = Aabb(Vector3(7.94894f, 6.91312f, 4.22986f), Vector3(15.9044f, 11.4577f, 6.38264f));
  data[31].mAabb = Aabb(Vector3(-18.6061f, -5.19141f, 20.2521f), Vector3(-10.8559f, -1.69825f, 24.7324f));
  data[32].mAabb = Aabb(Vector3(-3.41608f, 10.5903f, -47.9675f), Vector3(1.59838f, 13.4385f, -44.273f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-3.88417f, 8.6913f, -2.66489f));
  ray.mDirection = Vector3(Vector3(-0.378673f, -0.400973f, 0.834162f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest9(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(32);
  data[0].mAabb = Aabb(Vector3(1.98398f, 14.1359f, -35.7516f), Vector3(3.21619f, 17.6284f, -30.5729f));
  data[1].mAabb = Aabb(Vector3(41.9898f, 2.01204f, 3.09095f), Vector3(46.0407f, 4.69387f, 5.77743f));
  data[2].mAabb = Aabb(Vector3(-18.4606f, 13.2063f, 31.901f), Vector3(-11.9258f, 14.0398f, 37.1198f));
  data[3].mAabb = Aabb(Vector3(-22.982f, 13.786f, 18.542f), Vector3(-15.9314f, 17.384f, 21.1392f));
  data[4].mAabb = Aabb(Vector3(-25.7838f, -33.8458f, -26.4808f), Vector3(-19.4686f, -27.5912f, -19.7632f));
  data[5].mAabb = Aabb(Vector3(-8.07089f, -10.1495f, -0.93417f), Vector3(-2.68092f, -3.92102f, 1.16711f));
  data[6].mAabb = Aabb(Vector3(-19.4885f, 39.4489f, -11.7141f), Vector3(-17.9759f, 44.6853f, -10.7816f));
  data[7].mAabb = Aabb(Vector3(3.42872f, 20.8702f, 29.9549f), Vector3(4.52199f, 22.844f, 37.9329f));
  data[8].mAabb = Aabb(Vector3(22.4352f, -3.26358f, 20.0118f), Vector3(25.6366f, 3.80286f, 23.4887f));
  data[9].mAabb = Aabb(Vector3(-3.9593f, -3.38105f, 9.98255f), Vector3(3.50051f, 4.46285f, 17.4593f));
  data[10].mAabb = Aabb(Vector3(32.0616f, 6.49562f, 9.79395f), Vector3(35.6759f, 8.10983f, 14.229f));
  data[11].mAabb = Aabb(Vector3(-6.27371f, -19.8517f, -42.366f), Vector3(-3.96136f, -19.2916f, -40.7084f));
  data[12].mAabb = Aabb(Vector3(-23.5699f, -26.8346f, 14.3613f), Vector3(-18.439f, -26.2175f, 21.3259f));
  data[13].mAabb = Aabb(Vector3(-7.6904f, 36.4842f, -33.4425f), Vector3(-4.47209f, 38.0323f, -29.3752f));
  data[14].mAabb = Aabb(Vector3(-6.36825f, 25.4439f, 34.3522f), Vector3(-5.7725f, 30.0234f, 42.1934f));
  data[15].mAabb = Aabb(Vector3(-8.07481f, -14.623f, -49.4602f), Vector3(-0.133029f, -10.7972f, -44.94f));
  data[16].mAabb = Aabb(Vector3(19.5579f, -13.4674f, 26.3326f), Vector3(26.8814f, -7.26242f, 31.5466f));
  data[17].mAabb = Aabb(Vector3(-33.3976f, -16.2554f, 6.99753f), Vector3(-30.2046f, -10.6493f, 14.9414f));
  data[18].mAabb = Aabb(Vector3(-5.66591f, -18.5981f, 44.892f), Vector3(-3.11026f, -17.9268f, 45.9245f));
  data[19].mAabb = Aabb(Vector3(-26.4311f, 33.6167f, -27.1553f), Vector3(-21.0936f, 34.8387f, -23.5047f));
  data[20].mAabb = Aabb(Vector3(-25.0142f, -48.0482f, -10.7069f), Vector3(-17.8765f, -40.7864f, -3.30185f));
  data[21].mAabb = Aabb(Vector3(-40.4443f, 7.78779f, -19.7888f), Vector3(-38.7199f, 11.9779f, -14.3874f));
  data[22].mAabb = Aabb(Vector3(17.0019f, 16.3525f, 11.1642f), Vector3(22.567f, 20.6123f, 12.7183f));
  data[23].mAabb = Aabb(Vector3(23.3923f, -22.2995f, -35.6742f), Vector3(30.4914f, -16.0778f, -33.2556f));
  data[24].mAabb = Aabb(Vector3(4.56636f, 20.5134f, -33.2904f), Vector3(6.94412f, 22.5447f, -27.4576f));
  data[25].mAabb = Aabb(Vector3(-15.1415f, -14.135f, -10.919f), Vector3(-10.1788f, -6.33885f, -3.60138f));
  data[26].mAabb = Aabb(Vector3(-24.7569f, 30.5323f, -14.782f), Vector3(-22.9061f, 34.7261f, -12.9242f));
  data[27].mAabb = Aabb(Vector3(27.9772f, 34.2559f, 15.6705f), Vector3(31.5156f, 35.5648f, 18.7818f));
  data[28].mAabb = Aabb(Vector3(36.8369f, 16.9931f, 0.535998f), Vector3(42.59f, 22.7882f, 7.76595f));
  data[29].mAabb = Aabb(Vector3(-4.33443f, -11.888f, -14.5384f), Vector3(2.2774f, -7.48196f, -8.8787f));
  data[30].mAabb = Aabb(Vector3(4.08176f, -23.0424f, 40.1589f), Vector3(10.2125f, -16.6361f, 41.2568f));
  data[31].mAabb = Aabb(Vector3(-7.20544f, 2.09078f, 42.8572f), Vector3(0.0957234f, 3.80843f, 48.5735f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-14.3298f, -1.30328f, 16.7148f));
  ray.mDirection = Vector3(Vector3(0.896447f, 0.396867f, -0.19718f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest10(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(39);
  data[0].mAabb = Aabb(Vector3(6.70551f, -43.9475f, 11.0375f), Vector3(8.30464f, -39.1233f, 13.5787f));
  data[1].mAabb = Aabb(Vector3(-20.6192f, 22.1733f, -8.92558f), Vector3(-20.1635f, 27.9137f, -4.03197f));
  data[2].mAabb = Aabb(Vector3(-13.4328f, -31.7405f, 5.69958f), Vector3(-10.9321f, -29.9806f, 6.80282f));
  data[3].mAabb = Aabb(Vector3(-23.1033f, 10.0839f, 34.074f), Vector3(-21.0711f, 13.1164f, 37.9838f));
  data[4].mAabb = Aabb(Vector3(11.2555f, 10.5929f, -37.6294f), Vector3(13.1594f, 11.7205f, -34.0875f));
  data[5].mAabb = Aabb(Vector3(-10.7512f, 16.7887f, -18.6672f), Vector3(-5.31737f, 22.1771f, -13.8601f));
  data[6].mAabb = Aabb(Vector3(27.4838f, 15.4654f, -37.2201f), Vector3(28.3222f, 21.4617f, -36.0373f));
  data[7].mAabb = Aabb(Vector3(10.5513f, 28.1387f, 14.6763f), Vector3(14.9184f, 33.4739f, 21.1339f));
  data[8].mAabb = Aabb(Vector3(-2.96362f, -5.10674f, -2.41443f), Vector3(-2.35232f, 2.3911f, -1.14488f));
  data[9].mAabb = Aabb(Vector3(-25.476f, -33.5592f, 23.2586f), Vector3(-20.1498f, -31.0968f, 25.5403f));
  data[10].mAabb = Aabb(Vector3(12.2826f, 39.9104f, 7.66042f), Vector3(20.0876f, 42.9956f, 9.30339f));
  data[11].mAabb = Aabb(Vector3(1.11449f, -7.31298f, -42.2669f), Vector3(3.13297f, -0.323079f, -35.6727f));
  data[12].mAabb = Aabb(Vector3(0.23388f, -24.0078f, -27.2024f), Vector3(6.09515f, -22.9792f, -20.5018f));
  data[13].mAabb = Aabb(Vector3(10.5922f, -43.6697f, -14.9677f), Vector3(13.3027f, -37.4877f, -12.5615f));
  data[14].mAabb = Aabb(Vector3(35.4461f, -25.222f, 4.53508f), Vector3(37.7121f, -21.9067f, 6.28521f));
  data[15].mAabb = Aabb(Vector3(7.92941f, -23.7152f, -19.0767f), Vector3(8.93222f, -22.0414f, -15.7705f));
  data[16].mAabb = Aabb(Vector3(-2.43523f, 36.7371f, -26.0221f), Vector3(3.30892f, 37.649f, -21.755f));
  data[17].mAabb = Aabb(Vector3(-2.58011f, -0.424699f, -41.2305f), Vector3(2.16831f, 1.13918f, -33.4059f));
  data[18].mAabb = Aabb(Vector3(-3.59923f, -14.5119f, 34.0029f), Vector3(0.878987f, -10.5539f, 36.7747f));
  data[19].mAabb = Aabb(Vector3(-26.729f, 37.7109f, -2.98374f), Vector3(-20.7016f, 44.6539f, -2.08507f));
  data[20].mAabb = Aabb(Vector3(-51.2534f, -10.3986f, 2.18823f), Vector3(-46.2874f, -6.35346f, 2.82295f));
  data[21].mAabb = Aabb(Vector3(-4.57237f, -36.827f, -10.3247f), Vector3(2.31478f, -30.9082f, -9.07439f));
  data[22].mAabb = Aabb(Vector3(9.63061f, -25.0727f, -7.88338f), Vector3(14.556f, -19.9211f, -1.95508f));
  data[23].mAabb = Aabb(Vector3(-12.7816f, -21.9598f, -28.8231f), Vector3(-6.21499f, -14.7604f, -23.538f));
  data[24].mAabb = Aabb(Vector3(-13.4648f, 36.287f, -29.2925f), Vector3(-8.00364f, 41.4761f, -27.0632f));
  data[25].mAabb = Aabb(Vector3(-0.922705f, 13.1136f, -40.7517f), Vector3(3.18742f, 17.8096f, -39.6209f));
  data[26].mAabb = Aabb(Vector3(-4.48076f, 7.34768f, -42.0298f), Vector3(-0.172791f, 11.279f, -34.5354f));
  data[27].mAabb = Aabb(Vector3(-40.0805f, -10.7441f, 30.3164f), Vector3(-34.3911f, -6.7312f, 32.5411f));
  data[28].mAabb = Aabb(Vector3(-5.92032f, -9.28784f, 6.03876f), Vector3(1.03664f, -6.41187f, 11.1506f));
  data[29].mAabb = Aabb(Vector3(-8.76151f, -25.4924f, 4.42024f), Vector3(-1.82102f, -23.2134f, 4.88101f));
  data[30].mAabb = Aabb(Vector3(-24.527f, -2.90761f, -44.3613f), Vector3(-19.4434f, 1.50752f, -38.1113f));
  data[31].mAabb = Aabb(Vector3(-39.8712f, -32.8008f, 1.99135f), Vector3(-39.4362f, -26.2087f, 3.1048f));
  data[32].mAabb = Aabb(Vector3(14.6553f, -41.5159f, -23.6248f), Vector3(19.3427f, -35.2492f, -18.8177f));
  data[33].mAabb = Aabb(Vector3(21.0959f, -28.1604f, -22.3822f), Vector3(22.4869f, -22.8296f, -20.8357f));
  data[34].mAabb = Aabb(Vector3(-13.9802f, -19.4011f, -31.825f), Vector3(-6.22557f, -13.2666f, -31.3422f));
  data[35].mAabb = Aabb(Vector3(7.6915f, 19.7731f, 15.1092f), Vector3(12.6322f, 20.1764f, 22.6314f));
  data[36].mAabb = Aabb(Vector3(0.98726f, 4.81775f, 27.4399f), Vector3(8.04558f, 9.77677f, 30.7187f));
  data[37].mAabb = Aabb(Vector3(-8.54807f, 3.71161f, -40.7621f), Vector3(-3.68159f, 10.801f, -38.4419f));
  data[38].mAabb = Aabb(Vector3(-31.0757f, 34.729f, 13.2252f), Vector3(-26.7679f, 35.6474f, 18.1655f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(4.5444f, 2.17989f, -22.104f));
  ray.mDirection = Vector3(Vector3(-0.645662f, 0.667604f, 0.370708f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest11(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mAabb = Aabb(Vector3(5.18108f, -29.22f, 13.0937f), Vector3(11.8384f, -23.0275f, 14.3089f));
  data[1].mAabb = Aabb(Vector3(-13.7313f, 6.45391f, -0.558264f), Vector3(-8.11746f, 12.8366f, 5.9318f));
  data[2].mAabb = Aabb(Vector3(3.19923f, -28.5206f, -39.8218f), Vector3(10.4085f, -27.6619f, -33.3763f));
  data[3].mAabb = Aabb(Vector3(-30.989f, 19.5927f, 25.2567f), Vector3(-28.7333f, 23.8209f, 32.3076f));
  data[4].mAabb = Aabb(Vector3(-46.0708f, 5.31773f, -1.72394f), Vector3(-42.678f, 9.99449f, 1.24295f));
  data[5].mAabb = Aabb(Vector3(-1.74667f, -50.314f, 6.62266f), Vector3(0.344408f, -46.2183f, 8.75109f));
  data[6].mAabb = Aabb(Vector3(28.6783f, 26.956f, -4.19385f), Vector3(35.6244f, 28.6973f, 2.9765f));
  data[7].mAabb = Aabb(Vector3(38.5613f, 9.44491f, 8.47566f), Vector3(45.9088f, 16.6846f, 14.4232f));
  data[8].mAabb = Aabb(Vector3(-15.0456f, 1.76942f, -30.5325f), Vector3(-9.21359f, 2.512f, -27.487f));
  data[9].mAabb = Aabb(Vector3(21.3905f, -10.2777f, -10.856f), Vector3(26.1885f, -3.80272f, -8.79827f));
  data[10].mAabb = Aabb(Vector3(28.0382f, 4.50112f, -30.9394f), Vector3(32.0322f, 6.65367f, -29.2672f));
  data[11].mAabb = Aabb(Vector3(17.3408f, -12.3933f, 20.3123f), Vector3(25.1196f, -5.0188f, 28.3093f));
  data[12].mAabb = Aabb(Vector3(-31.2556f, 24.4762f, -26.6131f), Vector3(-27.6653f, 25.6463f, -25.5804f));
  data[13].mAabb = Aabb(Vector3(18.8218f, 43.0407f, -2.82254f), Vector3(23.2907f, 46.92f, 0.284437f));
  data[14].mAabb = Aabb(Vector3(18.7284f, -37.3422f, -19.4723f), Vector3(25.1503f, -35.8544f, -14.9106f));
  data[15].mAabb = Aabb(Vector3(5.52304f, -30.6917f, -32.3001f), Vector3(10.5677f, -23.805f, -30.8794f));
  data[16].mAabb = Aabb(Vector3(-14.7896f, -5.05088f, -11.6251f), Vector3(-13.7244f, -1.50762f, -9.37952f));
  data[17].mAabb = Aabb(Vector3(11.3011f, 6.47047f, 13.6843f), Vector3(15.4203f, 14.2483f, 14.2126f));
  data[18].mAabb = Aabb(Vector3(-13.2807f, 26.1302f, 4.27403f), Vector3(-8.45622f, 29.2442f, 8.55764f));
  data[19].mAabb = Aabb(Vector3(16.7876f, 35.2287f, -22.1348f), Vector3(22.2716f, 41.0772f, -17.4001f));
  data[20].mAabb = Aabb(Vector3(-31.3791f, 1.39173f, -13.1516f), Vector3(-25.9669f, 3.31419f, -12.4282f));
  data[21].mAabb = Aabb(Vector3(-9.06261f, 10.1954f, 22.5102f), Vector3(-7.5043f, 14.6003f, 27.9355f));
  data[22].mAabb = Aabb(Vector3(9.05908f, -39.0343f, 10.5157f), Vector3(9.7337f, -33.7202f, 15.9982f));
  data[23].mAabb = Aabb(Vector3(31.3784f, -12.2973f, 9.44351f), Vector3(32.7465f, -6.61281f, 12.3916f));
  data[24].mAabb = Aabb(Vector3(-10.0883f, -39.2736f, -14.7743f), Vector3(-6.01696f, -38.2098f, -9.80532f));
  data[25].mAabb = Aabb(Vector3(34.5178f, 1.50732f, 29.0065f), Vector3(41.5729f, 2.07733f, 35.1338f));
  data[26].mAabb = Aabb(Vector3(-36.9385f, 26.6598f, -11.3504f), Vector3(-35.5145f, 27.4442f, -3.63456f));
  data[27].mAabb = Aabb(Vector3(20.1353f, -8.4398f, 11.6276f), Vector3(22.4762f, -2.38624f, 14.1452f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(16.4026f, -11.5172f, 1.10941f));
  ray.mDirection = Vector3(Vector3(0.349957f, 0.222699f, 0.909909f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest12(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(29);
  data[0].mAabb = Aabb(Vector3(-21.7246f, -17.6249f, -42.9201f), Vector3(-15.9933f, -10.5183f, -37.4814f));
  data[1].mAabb = Aabb(Vector3(1.57503f, -8.06779f, 17.9136f), Vector3(9.30087f, -1.96808f, 20.0459f));
  data[2].mAabb = Aabb(Vector3(-16.3835f, -36.6474f, 7.97094f), Vector3(-9.77167f, -34.0987f, 11.8577f));
  data[3].mAabb = Aabb(Vector3(-7.40137f, -51.6918f, 1.68927f), Vector3(0.341177f, -46.3888f, 9.4462f));
  data[4].mAabb = Aabb(Vector3(37.6088f, 9.50088f, -4.23247f), Vector3(42.8376f, 13.1365f, 0.993517f));
  data[5].mAabb = Aabb(Vector3(-6.2246f, -34.4039f, 16.8352f), Vector3(-2.2207f, -31.4911f, 19.6613f));
  data[6].mAabb = Aabb(Vector3(-8.59324f, -2.66066f, 26.7162f), Vector3(-6.24889f, 0.711426f, 29.4834f));
  data[7].mAabb = Aabb(Vector3(-40.3536f, -12.7741f, 0.946545f), Vector3(-36.3309f, -11.3747f, 8.45298f));
  data[8].mAabb = Aabb(Vector3(-33.713f, -19.6492f, 31.9424f), Vector3(-31.6806f, -16.4752f, 32.6933f));
  data[9].mAabb = Aabb(Vector3(-22.9781f, -39.9212f, 9.61141f), Vector3(-15.1421f, -38.1894f, 13.8612f));
  data[10].mAabb = Aabb(Vector3(-10.6242f, -7.25869f, -22.5212f), Vector3(-7.35091f, -4.32334f, -17.3297f));
  data[11].mAabb = Aabb(Vector3(20.3665f, 6.07842f, -44.7566f), Vector3(27.7502f, 6.56957f, -38.4479f));
  data[12].mAabb = Aabb(Vector3(-17.5401f, -6.71136f, 39.4999f), Vector3(-12.1441f, -3.96157f, 42.063f));
  data[13].mAabb = Aabb(Vector3(-0.111967f, -6.84625f, 23.894f), Vector3(4.2577f, 0.693814f, 27.6678f));
  data[14].mAabb = Aabb(Vector3(15.5866f, -9.43172f, 25.9036f), Vector3(18.9705f, -4.78582f, 32.7486f));
  data[15].mAabb = Aabb(Vector3(-11.0013f, -8.4002f, 34.3239f), Vector3(-9.28783f, -2.28541f, 40.6734f));
  data[16].mAabb = Aabb(Vector3(15.2223f, -35.9993f, 26.4737f), Vector3(21.2754f, -29.4978f, 27.3026f));
  data[17].mAabb = Aabb(Vector3(-26.0031f, -29.1306f, -17.2396f), Vector3(-22.4937f, -27.73f, -14.1616f));
  data[18].mAabb = Aabb(Vector3(-2.06708f, -0.780763f, 12.5418f), Vector3(5.45071f, 6.11427f, 16.7544f));
  data[19].mAabb = Aabb(Vector3(-44.56f, -17.8771f, -16.2417f), Vector3(-43.158f, -14.4238f, -11.2166f));
  data[20].mAabb = Aabb(Vector3(18.1667f, 32.0713f, 24.9569f), Vector3(23.9224f, 37.5331f, 28.1395f));
  data[21].mAabb = Aabb(Vector3(-5.12008f, 9.12383f, 34.2484f), Vector3(-0.0272295f, 16.0518f, 40.5891f));
  data[22].mAabb = Aabb(Vector3(15.6022f, -25.1539f, 35.2972f), Vector3(21.887f, -22.8395f, 39.7017f));
  data[23].mAabb = Aabb(Vector3(-25.1919f, -2.30048f, -29.8194f), Vector3(-21.5011f, 1.18108f, -22.9137f));
  data[24].mAabb = Aabb(Vector3(-11.6399f, -26.2336f, -29.2665f), Vector3(-5.67613f, -22.3434f, -27.9374f));
  data[25].mAabb = Aabb(Vector3(-36.0273f, 3.11643f, 19.4016f), Vector3(-29.2102f, 8.82323f, 27.3791f));
  data[26].mAabb = Aabb(Vector3(5.14862f, 11.9998f, 23.6273f), Vector3(6.47778f, 12.7869f, 25.3596f));
  data[27].mAabb = Aabb(Vector3(-12.0003f, 33.5726f, -18.85f), Vector3(-5.4235f, 38.035f, -16.401f));
  data[28].mAabb = Aabb(Vector3(-43.4289f, -23.6663f, 9.67385f), Vector3(-42.1452f, -22.7106f, 12.868f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(2.17514f, 0.482985f, 6.99895f));
  ray.mDirection = Vector3(Vector3(-0.458433f, -0.136194f, 0.878231f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest13(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(29);
  data[0].mAabb = Aabb(Vector3(-10.3773f, -18.6777f, 44.4074f), Vector3(-5.66479f, -11.6302f, 48.2246f));
  data[1].mAabb = Aabb(Vector3(-36.6845f, 11.6208f, -30.6909f), Vector3(-29.5362f, 16.9924f, -28.8357f));
  data[2].mAabb = Aabb(Vector3(-14.3358f, -38.027f, -0.775827f), Vector3(-13.6347f, -32.7085f, 1.70213f));
  data[3].mAabb = Aabb(Vector3(28.4564f, -29.4923f, -24.0691f), Vector3(34.1873f, -25.7417f, -16.0735f));
  data[4].mAabb = Aabb(Vector3(-31.1086f, -31.9404f, 23.4436f), Vector3(-29.7915f, -29.3609f, 24.3882f));
  data[5].mAabb = Aabb(Vector3(17.757f, 7.2246f, -17.6803f), Vector3(22.2563f, 14.555f, -10.535f));
  data[6].mAabb = Aabb(Vector3(3.22726f, -23.7275f, -40.3797f), Vector3(10.3382f, -16.1188f, -34.1911f));
  data[7].mAabb = Aabb(Vector3(-10.0403f, 35.3578f, 12.6602f), Vector3(-5.27144f, 36.8472f, 15.6575f));
  data[8].mAabb = Aabb(Vector3(1.06376f, 27.1852f, -22.9945f), Vector3(2.45229f, 28.6018f, -18.003f));
  data[9].mAabb = Aabb(Vector3(-29.2563f, 0.697535f, -19.492f), Vector3(-22.5165f, 5.86971f, -14.009f));
  data[10].mAabb = Aabb(Vector3(23.6402f, 17.4365f, -0.451263f), Vector3(31.2173f, 21.035f, 6.69241f));
  data[11].mAabb = Aabb(Vector3(46.783f, 4.8622f, -13.6726f), Vector3(47.9269f, 12.4621f, -6.78751f));
  data[12].mAabb = Aabb(Vector3(-27.1927f, -41.1824f, 5.62946f), Vector3(-22.3155f, -39.7595f, 12.0525f));
  data[13].mAabb = Aabb(Vector3(-16.1064f, 6.37328f, -22.9029f), Vector3(-11.7977f, 9.10428f, -16.1923f));
  data[14].mAabb = Aabb(Vector3(14.5597f, 9.28332f, -20.5934f), Vector3(15.7763f, 16.7088f, -16.1281f));
  data[15].mAabb = Aabb(Vector3(-20.2794f, -12.1563f, 10.9578f), Vector3(-15.9297f, -10.6281f, 15.2971f));
  data[16].mAabb = Aabb(Vector3(-0.809505f, -25.5634f, -4.23795f), Vector3(3.10486f, -19.6972f, -0.995521f));
  data[17].mAabb = Aabb(Vector3(0.681103f, -11.286f, -41.3656f), Vector3(2.29114f, -6.5898f, -37.5085f));
  data[18].mAabb = Aabb(Vector3(23.7543f, -1.53652f, -4.5244f), Vector3(28.422f, -0.921515f, 0.332808f));
  data[19].mAabb = Aabb(Vector3(-28.9341f, 25.8442f, -15.8188f), Vector3(-25.4824f, 31.799f, -12.5278f));
  data[20].mAabb = Aabb(Vector3(-12.6582f, -22.1621f, -43.1083f), Vector3(-12.1798f, -21.3358f, -35.1403f));
  data[21].mAabb = Aabb(Vector3(-3.4243f, -18.1763f, -2.66882f), Vector3(1.09126f, -17.2704f, 2.38368f));
  data[22].mAabb = Aabb(Vector3(20.6938f, 17.2891f, -36.7395f), Vector3(28.2209f, 22.2551f, -35.1819f));
  data[23].mAabb = Aabb(Vector3(-18.6398f, -0.721769f, 42.5187f), Vector3(-16.0761f, 2.44064f, 47.1285f));
  data[24].mAabb = Aabb(Vector3(-33.7816f, 0.588655f, 11.1944f), Vector3(-27.774f, 2.54196f, 17.3525f));
  data[25].mAabb = Aabb(Vector3(21.551f, 30.272f, -4.71246f), Vector3(26.565f, 35.0659f, -2.92105f));
  data[26].mAabb = Aabb(Vector3(8.35177f, -26.575f, -7.94915f), Vector3(9.29126f, -22.1937f, -4.3087f));
  data[27].mAabb = Aabb(Vector3(-21.072f, -47.2702f, -0.837428f), Vector3(-13.1954f, -42.9112f, 6.10655f));
  data[28].mAabb = Aabb(Vector3(18.5412f, 14.9004f, -26.8364f), Vector3(26.3051f, 18.2748f, -23.5474f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(0.443839f, -12.5573f, -3.45909f));
  ray.mDirection = Vector3(Vector3(0.46151f, 0.74312f, -0.484542f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest14(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(26);
  data[0].mAabb = Aabb(Vector3(11.7336f, -47.9805f, -6.75078f), Vector3(18.8917f, -40.8025f, -5.69021f));
  data[1].mAabb = Aabb(Vector3(-11.4594f, 43.9298f, -0.966046f), Vector3(-7.68332f, 51.7528f, 2.60713f));
  data[2].mAabb = Aabb(Vector3(-16.9879f, -41.3026f, 3.04782f), Vector3(-15.4456f, -39.5834f, 7.76586f));
  data[3].mAabb = Aabb(Vector3(-27.7919f, 28.1194f, 25.9253f), Vector3(-22.7208f, 32.48f, 32.2496f));
  data[4].mAabb = Aabb(Vector3(13.9132f, 3.11043f, -21.3755f), Vector3(16.2093f, 3.96109f, -16.8804f));
  data[5].mAabb = Aabb(Vector3(-43.4539f, -2.16411f, 9.67556f), Vector3(-38.3977f, -1.58969f, 12.7698f));
  data[6].mAabb = Aabb(Vector3(16.7005f, -14.0557f, -35.7811f), Vector3(19.2789f, -7.38398f, -28.2129f));
  data[7].mAabb = Aabb(Vector3(-14.3346f, -13.5729f, 24.7814f), Vector3(-11.2341f, -10.0983f, 31.6829f));
  data[8].mAabb = Aabb(Vector3(2.28046f, 10.6202f, -41.0706f), Vector3(6.59446f, 15.3992f, -37.8414f));
  data[9].mAabb = Aabb(Vector3(-27.6259f, 29.2131f, 27.7267f), Vector3(-25.7528f, 29.7069f, 32.2567f));
  data[10].mAabb = Aabb(Vector3(-29.8061f, -4.47065f, -21.4019f), Vector3(-26.5345f, -0.18541f, -19.9167f));
  data[11].mAabb = Aabb(Vector3(1.93929f, 15.3453f, -38.5737f), Vector3(8.20066f, 18.9245f, -32.8704f));
  data[12].mAabb = Aabb(Vector3(-17.8283f, -34.7369f, 2.47532f), Vector3(-16.7749f, -30.0362f, 4.73316f));
  data[13].mAabb = Aabb(Vector3(38.9607f, -28.9417f, -10.5565f), Vector3(41.4955f, -28.3845f, -4.91235f));
  data[14].mAabb = Aabb(Vector3(7.10582f, -22.0699f, -32.6044f), Vector3(8.11304f, -18.6264f, -30.3009f));
  data[15].mAabb = Aabb(Vector3(31.9879f, 19.5528f, 3.57982f), Vector3(37.8487f, 24.9826f, 4.01253f));
  data[16].mAabb = Aabb(Vector3(22.0914f, -11.0725f, 27.1723f), Vector3(24.169f, -9.13223f, 33.5376f));
  data[17].mAabb = Aabb(Vector3(1.92772f, -23.4799f, 26.7823f), Vector3(4.0188f, -15.6124f, 27.5592f));
  data[18].mAabb = Aabb(Vector3(13.8302f, 20.5349f, -41.4527f), Vector3(14.6349f, 23.0117f, -36.1882f));
  data[19].mAabb = Aabb(Vector3(-5.75079f, 25.7063f, 7.67263f), Vector3(-4.6218f, 31.6674f, 8.88002f));
  data[20].mAabb = Aabb(Vector3(-0.602523f, 27.7697f, -24.8545f), Vector3(7.2829f, 34.7366f, -23.4034f));
  data[21].mAabb = Aabb(Vector3(-35.1848f, -30.6424f, 2.36847f), Vector3(-30.1988f, -24.5469f, 4.67688f));
  data[22].mAabb = Aabb(Vector3(-4.93904f, -9.7077f, -11.647f), Vector3(0.968622f, -7.51271f, -4.92664f));
  data[23].mAabb = Aabb(Vector3(-8.09525f, -25.8642f, -29.5855f), Vector3(-6.64781f, -19.0585f, -24.5872f));
  data[24].mAabb = Aabb(Vector3(-38.9868f, 25.3634f, -17.5132f), Vector3(-32.313f, 28.8656f, -16.1048f));
  data[25].mAabb = Aabb(Vector3(-14.0123f, 0.870006f, -34.5826f), Vector3(-7.15558f, 3.34912f, -28.5108f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-12.5342f, -2.09581f, -21.4915f));
  ray.mDirection = Vector3(Vector3(0.671035f, 0.608101f, -0.424177f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest15(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(33);
  data[0].mAabb = Aabb(Vector3(-17.556f, -33.1501f, 25.5128f), Vector3(-10.7865f, -25.9282f, 27.9251f));
  data[1].mAabb = Aabb(Vector3(-1.15356f, -10.7508f, 16.1339f), Vector3(3.62038f, -7.07188f, 16.8176f));
  data[2].mAabb = Aabb(Vector3(-31.025f, 13.4362f, -35.3637f), Vector3(-28.3476f, 17.0523f, -27.8223f));
  data[3].mAabb = Aabb(Vector3(14.7926f, -1.10749f, -30.7676f), Vector3(19.0126f, 5.99305f, -29.017f));
  data[4].mAabb = Aabb(Vector3(10.8501f, -30.4017f, -16.9756f), Vector3(11.4572f, -26.1862f, -15.1934f));
  data[5].mAabb = Aabb(Vector3(6.20007f, -1.79718f, 33.1925f), Vector3(12.7546f, 0.597974f, 36.2121f));
  data[6].mAabb = Aabb(Vector3(18.4832f, 12.2119f, -20.9186f), Vector3(22.674f, 15.8236f, -17.0256f));
  data[7].mAabb = Aabb(Vector3(30.141f, 3.00371f, -6.81797f), Vector3(34.1662f, 4.1218f, -5.68921f));
  data[8].mAabb = Aabb(Vector3(-8.29028f, -6.07816f, -1.34975f), Vector3(-5.38833f, -5.62133f, 5.15006f));
  data[9].mAabb = Aabb(Vector3(22.4864f, -0.293321f, -47.5479f), Vector3(23.7582f, 1.16688f, -40.5691f));
  data[10].mAabb = Aabb(Vector3(-9.91004f, 27.8118f, 28.8571f), Vector3(-9.21431f, 29.6049f, 32.8118f));
  data[11].mAabb = Aabb(Vector3(19.5596f, 1.92788f, -6.68519f), Vector3(23.0082f, 9.65512f, -1.33789f));
  data[12].mAabb = Aabb(Vector3(3.23973f, -14.9766f, 37.1411f), Vector3(4.79735f, -10.3207f, 41.9178f));
  data[13].mAabb = Aabb(Vector3(23.1458f, -28.9705f, -33.6836f), Vector3(24.6591f, -23.8479f, -30.6924f));
  data[14].mAabb = Aabb(Vector3(13.0504f, 30.7352f, -14.6904f), Vector3(16.0731f, 37.7002f, -12.8628f));
  data[15].mAabb = Aabb(Vector3(-43.6891f, 20.7981f, 16.328f), Vector3(-36.0451f, 25.347f, 19.8207f));
  data[16].mAabb = Aabb(Vector3(22.816f, -7.28456f, 2.46424f), Vector3(29.7458f, -2.56977f, 8.85805f));
  data[17].mAabb = Aabb(Vector3(-23.5158f, 15.8156f, -36.1629f), Vector3(-15.9707f, 18.1548f, -34.4501f));
  data[18].mAabb = Aabb(Vector3(-7.22672f, -0.186024f, 36.0435f), Vector3(0.0438285f, 4.48957f, 41.3732f));
  data[19].mAabb = Aabb(Vector3(32.8911f, 23.2844f, -19.2656f), Vector3(37.0968f, 30.917f, -15.9464f));
  data[20].mAabb = Aabb(Vector3(3.97429f, -22.6563f, -36.9255f), Vector3(6.37107f, -20.6369f, -36.2931f));
  data[21].mAabb = Aabb(Vector3(-27.2979f, -13.3651f, 5.67889f), Vector3(-22.6253f, -8.26297f, 8.32361f));
  data[22].mAabb = Aabb(Vector3(-27.5518f, -36.777f, -20.942f), Vector3(-20.9003f, -31.4942f, -15.1392f));
  data[23].mAabb = Aabb(Vector3(22.8611f, -6.10482f, -29.1536f), Vector3(25.6629f, -0.348382f, -21.2105f));
  data[24].mAabb = Aabb(Vector3(1.63942f, -44.1144f, 17.3234f), Vector3(3.91884f, -39.2367f, 23.6834f));
  data[25].mAabb = Aabb(Vector3(-19.1708f, -35.1537f, 25.1218f), Vector3(-12.023f, -27.2393f, 26.826f));
  data[26].mAabb = Aabb(Vector3(-11.8751f, -21.0916f, 6.97669f), Vector3(-7.58733f, -15.5254f, 9.04783f));
  data[27].mAabb = Aabb(Vector3(-8.39659f, -18.7572f, -21.8103f), Vector3(-1.03953f, -12.8773f, -20.7221f));
  data[28].mAabb = Aabb(Vector3(-14.2024f, -24.103f, -22.8525f), Vector3(-9.89049f, -20.1956f, -21.393f));
  data[29].mAabb = Aabb(Vector3(39.9799f, -11.6506f, -13.3317f), Vector3(44.2058f, -6.43384f, -5.98626f));
  data[30].mAabb = Aabb(Vector3(26.9788f, 17.15f, 10.6735f), Vector3(31.1344f, 17.8423f, 13.2226f));
  data[31].mAabb = Aabb(Vector3(-2.19694f, 27.275f, 17.624f), Vector3(2.18804f, 34.6195f, 19.305f));
  data[32].mAabb = Aabb(Vector3(-11.4044f, -10.5432f, 45.066f), Vector3(-7.54296f, -5.16596f, 50.2818f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-0.849798f, -4.62445f, -15.8818f));
  ray.mDirection = Vector3(Vector3(-0.34751f, -0.479844f, 0.805597f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest16(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(34);
  data[0].mAabb = Aabb(Vector3(40.8272f, -1.93486f, 18.0374f), Vector3(43.5536f, 2.10475f, 20.0856f));
  data[1].mAabb = Aabb(Vector3(34.1255f, 18.8798f, 9.46083f), Vector3(35.9828f, 26.5509f, 13.9822f));
  data[2].mAabb = Aabb(Vector3(-43.3754f, 20.362f, 10.0386f), Vector3(-39.1208f, 24.3263f, 14.386f));
  data[3].mAabb = Aabb(Vector3(-13.9823f, 37.3627f, 16.4797f), Vector3(-7.75109f, 44.5347f, 18.4001f));
  data[4].mAabb = Aabb(Vector3(-24.7065f, -5.22322f, 15.5552f), Vector3(-22.8081f, 0.88345f, 22.2426f));
  data[5].mAabb = Aabb(Vector3(-15.7991f, -30.9563f, 30.3535f), Vector3(-9.72255f, -25.1377f, 36.8435f));
  data[6].mAabb = Aabb(Vector3(0.642087f, 14.79f, 18.8615f), Vector3(7.03799f, 22.177f, 21.9664f));
  data[7].mAabb = Aabb(Vector3(-39.8963f, 2.13678f, 4.74751f), Vector3(-36.3038f, 3.85165f, 10.7595f));
  data[8].mAabb = Aabb(Vector3(-0.245942f, -28.0652f, -7.07265f), Vector3(5.75867f, -23.0519f, -1.24176f));
  data[9].mAabb = Aabb(Vector3(-1.35485f, -0.0752175f, 17.4595f), Vector3(2.94454f, 2.69846f, 23.3871f));
  data[10].mAabb = Aabb(Vector3(23.9972f, -42.946f, -0.57103f), Vector3(31.879f, -38.5524f, 4.83611f));
  data[11].mAabb = Aabb(Vector3(3.21222f, 19.9817f, -7.3528f), Vector3(8.37884f, 24.3648f, -3.16591f));
  data[12].mAabb = Aabb(Vector3(26.4007f, 7.76146f, 3.47516f), Vector3(29.9377f, 11.7841f, 10.9477f));
  data[13].mAabb = Aabb(Vector3(-31.2926f, -24.1523f, 5.75911f), Vector3(-24.8471f, -21.7963f, 10.4071f));
  data[14].mAabb = Aabb(Vector3(-24.3996f, 7.84606f, -26.5296f), Vector3(-22.8255f, 14.3577f, -20.2008f));
  data[15].mAabb = Aabb(Vector3(30.686f, -36.5379f, -6.79433f), Vector3(33.0065f, -35.5105f, 0.24335f));
  data[16].mAabb = Aabb(Vector3(0.330519f, 46.8873f, -1.15713f), Vector3(1.4616f, 49.2038f, 1.24219f));
  data[17].mAabb = Aabb(Vector3(8.50339f, 4.70115f, -13.3985f), Vector3(8.99477f, 7.66062f, -6.91125f));
  data[18].mAabb = Aabb(Vector3(-0.110879f, -11.3905f, -30.1108f), Vector3(3.51936f, -5.65489f, -22.8162f));
  data[19].mAabb = Aabb(Vector3(1.3374f, 5.42421f, -29.4405f), Vector3(4.33583f, 6.34051f, -27.9856f));
  data[20].mAabb = Aabb(Vector3(-13.5442f, 32.7025f, -15.181f), Vector3(-8.88851f, 38.8316f, -8.38752f));
  data[21].mAabb = Aabb(Vector3(-32.5079f, 31.8712f, -9.78637f), Vector3(-26.5077f, 36.046f, -4.74129f));
  data[22].mAabb = Aabb(Vector3(46.3382f, -16.1141f, -9.2312f), Vector3(49.103f, -10.9799f, -1.37477f));
  data[23].mAabb = Aabb(Vector3(-33.591f, 19.5353f, -26.4005f), Vector3(-29.5669f, 25.3653f, -21.0572f));
  data[24].mAabb = Aabb(Vector3(24.9481f, -37.6765f, -8.62565f), Vector3(29.999f, -34.8485f, -5.44329f));
  data[25].mAabb = Aabb(Vector3(-32.7799f, -19.3165f, 2.29273f), Vector3(-29.5855f, -12.5579f, 8.8649f));
  data[26].mAabb = Aabb(Vector3(8.04084f, -6.77397f, -49.2965f), Vector3(13.5064f, -1.9657f, -47.0772f));
  data[27].mAabb = Aabb(Vector3(-27.726f, -38.4998f, -25.1383f), Vector3(-21.5734f, -35.5941f, -19.6533f));
  data[28].mAabb = Aabb(Vector3(33.317f, -2.15688f, -13.5644f), Vector3(40.2347f, 2.19214f, -5.82115f));
  data[29].mAabb = Aabb(Vector3(0.667883f, 25.5162f, 37.1237f), Vector3(4.25336f, 31.4696f, 41.5333f));
  data[30].mAabb = Aabb(Vector3(-8.98154f, 0.431826f, -5.87935f), Vector3(-6.62465f, 4.43015f, -2.56061f));
  data[31].mAabb = Aabb(Vector3(-33.5335f, 21.322f, 12.115f), Vector3(-30.0633f, 25.3569f, 18.6674f));
  data[32].mAabb = Aabb(Vector3(24.7285f, 27.0126f, -21.7535f), Vector3(25.7861f, 34.9903f, -16.2021f));
  data[33].mAabb = Aabb(Vector3(2.962f, 20.9375f, -33.048f), Vector3(6.71099f, 21.8967f, -29.2698f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(4.50654f, -19.6576f, 1.26855f));
  ray.mDirection = Vector3(Vector3(0.611277f, 0.753241f, 0.242836f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest17(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(57);
  data[0].mAabb = Aabb(Vector3(1.24673f, -36.2046f, -6.57517f), Vector3(5.18359f, -35.2192f, 0.70558f));
  data[1].mAabb = Aabb(Vector3(0.534644f, 5.74894f, 2.25588f), Vector3(3.06131f, 10.3907f, 5.80679f));
  data[2].mAabb = Aabb(Vector3(-1.63989f, -17.6219f, -38.4741f), Vector3(5.26559f, -11.2158f, -32.081f));
  data[3].mAabb = Aabb(Vector3(-5.33185f, -33.9074f, -10.0147f), Vector3(-3.56989f, -26.9249f, -5.50722f));
  data[4].mAabb = Aabb(Vector3(-5.07443f, 22.7656f, 33.9933f), Vector3(-0.56027f, 27.6237f, 39.5331f));
  data[5].mAabb = Aabb(Vector3(0.770975f, 21.3658f, 20.4386f), Vector3(3.32686f, 21.8305f, 26.3127f));
  data[6].mAabb = Aabb(Vector3(-19.0444f, 22.9986f, 17.4196f), Vector3(-16.6631f, 29.0078f, 23.7733f));
  data[7].mAabb = Aabb(Vector3(-36.8196f, 7.65616f, -32.678f), Vector3(-29.119f, 14.9583f, -27.6323f));
  data[8].mAabb = Aabb(Vector3(15.8282f, -41.8211f, 14.4471f), Vector3(16.5546f, -39.0506f, 22.041f));
  data[9].mAabb = Aabb(Vector3(-9.8248f, -13.8631f, -44.2793f), Vector3(-5.74228f, -6.86923f, -40.6405f));
  data[10].mAabb = Aabb(Vector3(18.6109f, 24.8926f, -19.8728f), Vector3(20.4568f, 29.8103f, -17.7369f));
  data[11].mAabb = Aabb(Vector3(-21.5873f, -4.59628f, -37.8889f), Vector3(-17.7537f, 1.13233f, -34.351f));
  data[12].mAabb = Aabb(Vector3(-15.1071f, -47.452f, 8.85144f), Vector3(-9.79208f, -44.3137f, 16.7301f));
  data[13].mAabb = Aabb(Vector3(-37.7395f, 11.3828f, -29.2913f), Vector3(-32.1045f, 14.7018f, -22.949f));
  data[14].mAabb = Aabb(Vector3(1.44477f, -45.6124f, 10.9954f), Vector3(6.36924f, -41.7431f, 18.8783f));
  data[15].mAabb = Aabb(Vector3(-25.1156f, 30.3332f, -0.979758f), Vector3(-19.0258f, 37.8642f, 6.44387f));
  data[16].mAabb = Aabb(Vector3(7.39709f, -49.8777f, 5.64657f), Vector3(12.5651f, -44.391f, 11.2982f));
  data[17].mAabb = Aabb(Vector3(-28.2682f, 28.785f, -7.19269f), Vector3(-23.3906f, 35.0584f, -4.78524f));
  data[18].mAabb = Aabb(Vector3(-44.5873f, -2.42318f, -4.70915f), Vector3(-41.6974f, 0.58638f, -2.24303f));
  data[19].mAabb = Aabb(Vector3(-32.4674f, -5.96197f, 1.34998f), Vector3(-28.0657f, -4.05227f, 6.2443f));
  data[20].mAabb = Aabb(Vector3(20.5068f, 17.5179f, 35.1659f), Vector3(25.6156f, 23.4012f, 39.0583f));
  data[21].mAabb = Aabb(Vector3(5.84196f, -36.588f, -15.4416f), Vector3(6.68033f, -33.6374f, -13.4178f));
  data[22].mAabb = Aabb(Vector3(-1.1918f, 20.5002f, -25.8329f), Vector3(4.63491f, 24.4992f, -19.07f));
  data[23].mAabb = Aabb(Vector3(-9.49446f, 16.2276f, -25.9957f), Vector3(-4.18404f, 17.6219f, -19.6872f));
  data[24].mAabb = Aabb(Vector3(37.374f, -25.6535f, -17.2246f), Vector3(37.8106f, -22.3329f, -11.8683f));
  data[25].mAabb = Aabb(Vector3(2.75504f, -40.3288f, -0.836782f), Vector3(3.63933f, -34.5527f, 0.297774f));
  data[26].mAabb = Aabb(Vector3(-13.0595f, 18.5188f, 1.73922f), Vector3(-6.9143f, 23.9898f, 7.81992f));
  data[27].mAabb = Aabb(Vector3(15.5981f, 31.3143f, -23.142f), Vector3(18.914f, 37.5014f, -16.3871f));
  data[28].mAabb = Aabb(Vector3(-18.1866f, -2.84959f, 29.4663f), Vector3(-10.772f, 4.19992f, 35.2401f));
  data[29].mAabb = Aabb(Vector3(12.6656f, 44.9429f, 2.28456f), Vector3(14.7135f, 47.0706f, 5.66175f));
  data[30].mAabb = Aabb(Vector3(-12.956f, -15.1587f, -32.4965f), Vector3(-5.31063f, -8.12006f, -25.9603f));
  data[31].mAabb = Aabb(Vector3(-11.3915f, -7.1183f, -30.9883f), Vector3(-8.81307f, 0.340118f, -24.4217f));
  data[32].mAabb = Aabb(Vector3(-33.8417f, 9.67503f, -32.7644f), Vector3(-26.5341f, 16.5364f, -25.7606f));
  data[33].mAabb = Aabb(Vector3(28.8539f, 20.0484f, 0.607698f), Vector3(36.3594f, 23.754f, 1.7789f));
  data[34].mAabb = Aabb(Vector3(18.1447f, -41.4936f, 18.1132f), Vector3(24.276f, -34.8389f, 23.0936f));
  data[35].mAabb = Aabb(Vector3(-26.3045f, -40.4463f, 11.527f), Vector3(-20.9345f, -33.6534f, 17.7123f));
  data[36].mAabb = Aabb(Vector3(8.60681f, -34.1085f, 23.3677f), Vector3(10.1809f, -28.9876f, 27.9018f));
  data[37].mAabb = Aabb(Vector3(34.7402f, -17.8619f, -33.9786f), Vector3(36.941f, -12.2096f, -26.8194f));
  data[38].mAabb = Aabb(Vector3(-15.4285f, -6.06501f, 42.4098f), Vector3(-10.2538f, 0.452654f, 44.0859f));
  data[39].mAabb = Aabb(Vector3(-40.851f, 2.12769f, 13.7497f), Vector3(-35.5738f, 8.31206f, 19.5249f));
  data[40].mAabb = Aabb(Vector3(-41.5987f, -1.21805f, 8.93167f), Vector3(-38.1949f, 2.93197f, 11.4646f));
  data[41].mAabb = Aabb(Vector3(-3.52795f, 17.7386f, 21.1745f), Vector3(-1.90354f, 25.1627f, 27.9679f));
  data[42].mAabb = Aabb(Vector3(28.9384f, -33.5644f, -20.5965f), Vector3(35.168f, -28.8348f, -18.0733f));
  data[43].mAabb = Aabb(Vector3(9.6686f, -27.5994f, 6.71474f), Vector3(17.6192f, -21.0186f, 8.70191f));
  data[44].mAabb = Aabb(Vector3(8.1484f, -24.8544f, -3.88975f), Vector3(11.7541f, -22.6956f, -0.637808f));
  data[45].mAabb = Aabb(Vector3(-17.2817f, 27.8958f, 28.6927f), Vector3(-10.743f, 32.1054f, 35.5696f));
  data[46].mAabb = Aabb(Vector3(41.661f, 0.717632f, 13.9574f), Vector3(45.157f, 3.82299f, 17.194f));
  data[47].mAabb = Aabb(Vector3(-26.9893f, -22.8296f, -37.0409f), Vector3(-23.581f, -15.4496f, -32.3674f));
  data[48].mAabb = Aabb(Vector3(9.02702f, -2.65844f, -30.6595f), Vector3(11.0757f, 2.67193f, -29.4841f));
  data[49].mAabb = Aabb(Vector3(6.20903f, -40.226f, -6.88175f), Vector3(6.664f, -38.124f, -1.63094f));
  data[50].mAabb = Aabb(Vector3(6.59966f, -41.8679f, 18.433f), Vector3(12.9332f, -41.1391f, 19.5044f));
  data[51].mAabb = Aabb(Vector3(18.0837f, 7.33423f, 36.9118f), Vector3(21.9702f, 14.2093f, 42.0619f));
  data[52].mAabb = Aabb(Vector3(40.0841f, 8.41028f, -15.8337f), Vector3(45.9342f, 11.2619f, -11.1094f));
  data[53].mAabb = Aabb(Vector3(-14.3294f, -36.1261f, 20.3673f), Vector3(-9.26922f, -32.3077f, 23.6028f));
  data[54].mAabb = Aabb(Vector3(-40.2142f, -25.6264f, -11.089f), Vector3(-34.5877f, -21.9646f, -7.38729f));
  data[55].mAabb = Aabb(Vector3(-37.8815f, 21.9863f, -13.0138f), Vector3(-35.0401f, 25.6356f, -10.6015f));
  data[56].mAabb = Aabb(Vector3(-24.0774f, -0.864299f, 16.937f), Vector3(-22.163f, 2.8339f, 18.8428f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(10.1021f, 2.61199f, -1.84554f));
  ray.mDirection = Vector3(Vector3(-0.826505f, 0.179288f, -0.533616f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest18(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(35);
  data[0].mAabb = Aabb(Vector3(-10.6383f, 1.84164f, 41.545f), Vector3(-6.23802f, 9.72776f, 48.0752f));
  data[1].mAabb = Aabb(Vector3(24.1541f, -35.2515f, -19.7452f), Vector3(30.2202f, -28.3641f, -14.0289f));
  data[2].mAabb = Aabb(Vector3(21.2044f, -28.9724f, -10.2096f), Vector3(22.6509f, -22.7971f, -2.41256f));
  data[3].mAabb = Aabb(Vector3(38.8292f, -7.61543f, -24.5762f), Vector3(41.7692f, -0.611849f, -21.1853f));
  data[4].mAabb = Aabb(Vector3(-34.3622f, -20.3101f, -27.6655f), Vector3(-33.1298f, -19.8461f, -19.9689f));
  data[5].mAabb = Aabb(Vector3(-35.3379f, -37, -15.0343f), Vector3(-31.1575f, -32.7653f, -8.16713f));
  data[6].mAabb = Aabb(Vector3(0.60281f, -16.2447f, 15.1297f), Vector3(7.28191f, -8.88994f, 20.8599f));
  data[7].mAabb = Aabb(Vector3(31.6265f, 11.386f, -10.1099f), Vector3(39.3528f, 15.893f, -7.17498f));
  data[8].mAabb = Aabb(Vector3(-1.73216f, -15.0586f, -26.9996f), Vector3(0.538212f, -14.33f, -21.3565f));
  data[9].mAabb = Aabb(Vector3(26.1876f, 33.5791f, -1.65571f), Vector3(33.9853f, 35.9792f, 2.27605f));
  data[10].mAabb = Aabb(Vector3(-26.5493f, 16.7139f, 2.50319f), Vector3(-21.2503f, 20.7829f, 6.01723f));
  data[11].mAabb = Aabb(Vector3(-0.553904f, -31.3384f, -31.8523f), Vector3(6.28732f, -29.9742f, -30.5071f));
  data[12].mAabb = Aabb(Vector3(-25.4555f, 12.1081f, -28.1563f), Vector3(-20.4927f, 14.5191f, -20.4091f));
  data[13].mAabb = Aabb(Vector3(40.6613f, -4.42231f, -15.2207f), Vector3(45.1701f, -0.396844f, -13.6784f));
  data[14].mAabb = Aabb(Vector3(-30.2346f, 34.8881f, 10.1796f), Vector3(-27.402f, 41.0808f, 16.3515f));
  data[15].mAabb = Aabb(Vector3(43.022f, 1.34606f, -1.67613f), Vector3(47.3135f, 4.09098f, 5.87042f));
  data[16].mAabb = Aabb(Vector3(-16.4732f, -1.10957f, 22.9894f), Vector3(-9.27297f, 1.55394f, 27.459f));
  data[17].mAabb = Aabb(Vector3(2.56958f, -40.0319f, 23.3109f), Vector3(8.77807f, -35.6404f, 27.8765f));
  data[18].mAabb = Aabb(Vector3(-14.0605f, 3.52346f, 10.3991f), Vector3(-9.243f, 9.0366f, 15.9354f));
  data[19].mAabb = Aabb(Vector3(-33.8047f, 10.3991f, -34.0707f), Vector3(-30.4289f, 15.8913f, -30.8788f));
  data[20].mAabb = Aabb(Vector3(-26.7589f, -31.2897f, 28.9421f), Vector3(-21.0154f, -24.5067f, 29.7353f));
  data[21].mAabb = Aabb(Vector3(-20.1952f, 22.5707f, -35.1104f), Vector3(-16.1363f, 27.4949f, -27.1308f));
  data[22].mAabb = Aabb(Vector3(-27.8167f, 34.9892f, 0.52253f), Vector3(-25.4111f, 38.7159f, 3.18465f));
  data[23].mAabb = Aabb(Vector3(4.01917f, -18.9308f, 18.1972f), Vector3(9.84333f, -18.2254f, 21.5129f));
  data[24].mAabb = Aabb(Vector3(0.0817523f, -26.2902f, 39.8366f), Vector3(7.07954f, -22.8126f, 46.6479f));
  data[25].mAabb = Aabb(Vector3(-10.2126f, 21.0336f, -43.3575f), Vector3(-6.00809f, 25.8882f, -36.6577f));
  data[26].mAabb = Aabb(Vector3(30.6259f, -4.59138f, -41.3976f), Vector3(31.3395f, -1.20607f, -36.8066f));
  data[27].mAabb = Aabb(Vector3(-21.1422f, -0.96985f, 8.49645f), Vector3(-20.6559f, 6.70404f, 16.2316f));
  data[28].mAabb = Aabb(Vector3(5.75286f, -45.0608f, 19.4455f), Vector3(10.2946f, -43.1708f, 22.1122f));
  data[29].mAabb = Aabb(Vector3(-9.95049f, -0.431554f, 21.6873f), Vector3(-2.51433f, 0.993624f, 24.2439f));
  data[30].mAabb = Aabb(Vector3(-45.2851f, 0.00585246f, 0.792568f), Vector3(-38.9602f, 7.39562f, 3.85757f));
  data[31].mAabb = Aabb(Vector3(28.5682f, 7.05253f, -35.0864f), Vector3(30.9404f, 9.41011f, -32.2868f));
  data[32].mAabb = Aabb(Vector3(-1.9402f, 35.5323f, 30.9564f), Vector3(5.06199f, 36.6989f, 37.9987f));
  data[33].mAabb = Aabb(Vector3(-2.89408f, -37.3482f, -30.3941f), Vector3(-1.69017f, -31.1001f, -29.5724f));
  data[34].mAabb = Aabb(Vector3(-6.99352f, -9.7767f, -44.5632f), Vector3(-2.65215f, -5.54086f, -40.9715f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(10.1538f, 12.8054f, 1.44652f));
  ray.mDirection = Vector3(Vector3(-0.894426f, -0.239423f, 0.377728f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest19(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(26);
  data[0].mAabb = Aabb(Vector3(42.3786f, -0.467581f, -24.2724f), Vector3(45.5638f, 3.58015f, -20.5763f));
  data[1].mAabb = Aabb(Vector3(-1.64109f, 12.132f, -12.6115f), Vector3(6.29512f, 17.6187f, -5.21318f));
  data[2].mAabb = Aabb(Vector3(-5.44991f, 38.3958f, -14.6591f), Vector3(-5.03831f, 44.0662f, -12.5553f));
  data[3].mAabb = Aabb(Vector3(-13.102f, -0.94607f, -3.74209f), Vector3(-11.1077f, 6.7153f, -3.01622f));
  data[4].mAabb = Aabb(Vector3(-44.7102f, -6.75097f, 22.7373f), Vector3(-38.4184f, -0.295459f, 29.4818f));
  data[5].mAabb = Aabb(Vector3(35.225f, 23.2069f, 12.4361f), Vector3(39.6162f, 26.6467f, 16.6086f));
  data[6].mAabb = Aabb(Vector3(10.0636f, 13.991f, 26.8772f), Vector3(12.8876f, 19.901f, 30.8595f));
  data[7].mAabb = Aabb(Vector3(-21.5304f, -30.7821f, 10.8832f), Vector3(-19.1939f, -24.1316f, 11.3582f));
  data[8].mAabb = Aabb(Vector3(-25.4187f, 20.6455f, -29.0087f), Vector3(-23.2323f, 26.5738f, -23.1544f));
  data[9].mAabb = Aabb(Vector3(-21.1463f, -1.82795f, -32.0365f), Vector3(-19.9656f, -1.07795f, -25.4938f));
  data[10].mAabb = Aabb(Vector3(13.6927f, -35.5379f, 11.5709f), Vector3(20.6935f, -31.8938f, 13.7337f));
  data[11].mAabb = Aabb(Vector3(2.48082f, 27.3625f, 31.1937f), Vector3(3.55438f, 31.4543f, 37.1009f));
  data[12].mAabb = Aabb(Vector3(-12.3456f, -43.6072f, 15.92f), Vector3(-5.45428f, -39.0033f, 19.5284f));
  data[13].mAabb = Aabb(Vector3(-6.791f, -2.08751f, 4.26552f), Vector3(-0.789868f, 5.58105f, 9.60446f));
  data[14].mAabb = Aabb(Vector3(9.79498f, -21.4326f, 19.8957f), Vector3(10.4457f, -16.7104f, 23.6648f));
  data[15].mAabb = Aabb(Vector3(22.4016f, -4.33213f, 29.7499f), Vector3(25.6076f, -2.63442f, 37.0937f));
  data[16].mAabb = Aabb(Vector3(-12.4633f, 13.7146f, -47.5335f), Vector3(-5.74111f, 21, -44.3896f));
  data[17].mAabb = Aabb(Vector3(-12.9696f, -44.9054f, -9.04494f), Vector3(-6.15901f, -37.697f, -3.39079f));
  data[18].mAabb = Aabb(Vector3(19.8347f, -13.1021f, 30.3373f), Vector3(25.5457f, -12.4402f, 37.0048f));
  data[19].mAabb = Aabb(Vector3(-23.9565f, 14.1754f, 31.9545f), Vector3(-19.1088f, 16.3662f, 32.5785f));
  data[20].mAabb = Aabb(Vector3(-7.07904f, 27.8839f, 21.0712f), Vector3(-1.43719f, 28.8698f, 22.1861f));
  data[21].mAabb = Aabb(Vector3(21.2605f, 21.4505f, -6.58774f), Vector3(23.5798f, 21.9285f, -1.74329f));
  data[22].mAabb = Aabb(Vector3(4.68373f, 31.7591f, -20.8904f), Vector3(11.1541f, 33.6306f, -14.6861f));
  data[23].mAabb = Aabb(Vector3(9.90331f, -20.2779f, -15.8185f), Vector3(16.9932f, -14.566f, -10.3341f));
  data[24].mAabb = Aabb(Vector3(-12.4952f, -10.9346f, -21.7283f), Vector3(-11.1345f, -7.10928f, -21.1198f));
  data[25].mAabb = Aabb(Vector3(-47.636f, 12.1789f, 12.7476f), Vector3(-40.8077f, 19.5443f, 18.4289f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(5.8359f, 11.0692f, -10.4854f));
  ray.mDirection = Vector3(Vector3(0.0751983f, 0.975419f, -0.207129f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest20(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mAabb = Aabb(Vector3(-9.75793f, 27.623f, 21.7351f), Vector3(-3.05518f, 33.4337f, 28.6958f));
  data[1].mAabb = Aabb(Vector3(-11.7162f, -8.56936f, -50.7462f), Vector3(-5.66381f, -4.73385f, -43.9289f));
  data[2].mAabb = Aabb(Vector3(-3.36709f, 16.3757f, -36.6983f), Vector3(-2.33343f, 17.3686f, -29.6247f));
  data[3].mAabb = Aabb(Vector3(-10.7172f, 12.1773f, 0.93743f), Vector3(-10.3093f, 13.1563f, 7.86888f));
  data[4].mAabb = Aabb(Vector3(-22.3886f, -27.5903f, -25.2193f), Vector3(-17.8206f, -23.6112f, -18.2486f));
  data[5].mAabb = Aabb(Vector3(-35.3211f, -25.1994f, 24.3335f), Vector3(-33.6347f, -22.3257f, 30.1078f));
  data[6].mAabb = Aabb(Vector3(-32.5467f, -24.3732f, 16.2831f), Vector3(-26.6494f, -20.6859f, 21.102f));
  data[7].mAabb = Aabb(Vector3(-15.3233f, -43.3957f, 14.4218f), Vector3(-13.2742f, -39.845f, 21.5249f));
  data[8].mAabb = Aabb(Vector3(-3.86896f, -3.74644f, 32.3867f), Vector3(-0.278852f, 0.0672629f, 35.1077f));
  data[9].mAabb = Aabb(Vector3(-22.282f, -14.0886f, 4.32971f), Vector3(-14.5228f, -9.41692f, 5.90821f));
  data[10].mAabb = Aabb(Vector3(-2.40717f, 29.5953f, -29.3072f), Vector3(2.03255f, 33.9366f, -25.0635f));
  data[11].mAabb = Aabb(Vector3(19.8856f, 27.4275f, 4.17932f), Vector3(22.2007f, 31.0032f, 9.65719f));
  data[12].mAabb = Aabb(Vector3(-7.2352f, 23.5221f, 8.5964f), Vector3(-5.93411f, 29.7987f, 11.6491f));
  data[13].mAabb = Aabb(Vector3(4.36571f, 13.7234f, 11.2864f), Vector3(6.94827f, 20.0606f, 12.8559f));
  data[14].mAabb = Aabb(Vector3(-10.7389f, 5.61363f, 14.7125f), Vector3(-4.4585f, 7.945f, 20.834f));
  data[15].mAabb = Aabb(Vector3(-21.086f, -42.9771f, 13.496f), Vector3(-16.7036f, -35.3304f, 15.8144f));
  data[16].mAabb = Aabb(Vector3(0.832485f, 3.87636f, -25.7409f), Vector3(6.87259f, 7.53466f, -23.77f));
  data[17].mAabb = Aabb(Vector3(25.7994f, 21.6677f, -30.2136f), Vector3(31.2012f, 26.3989f, -26.8346f));
  data[18].mAabb = Aabb(Vector3(34.6456f, 4.4975f, -18.9603f), Vector3(40.8261f, 9.05364f, -17.9531f));
  data[19].mAabb = Aabb(Vector3(26.8593f, -16.458f, -10.9006f), Vector3(27.5474f, -14.1371f, -8.95985f));
  data[20].mAabb = Aabb(Vector3(-12.6441f, -29.2853f, 27.9052f), Vector3(-11.5833f, -25.6314f, 33.1215f));
  data[21].mAabb = Aabb(Vector3(-7.01679f, -25.0381f, 34.4435f), Vector3(-5.22769f, -17.5574f, 41.9339f));
  data[22].mAabb = Aabb(Vector3(-33.0906f, 5.51659f, -36.4042f), Vector3(-27.4648f, 11.8058f, -32.5225f));
  data[23].mAabb = Aabb(Vector3(29.2768f, 24.0871f, -21.0874f), Vector3(34.4787f, 25.7982f, -14.3401f));
  data[24].mAabb = Aabb(Vector3(-3.77736f, -2.83035f, 17.6874f), Vector3(-2.98654f, 2.16022f, 22.2714f));
  data[25].mAabb = Aabb(Vector3(-8.27693f, 32.8931f, 21.7199f), Vector3(-1.4858f, 36.0358f, 29.6649f));
  data[26].mAabb = Aabb(Vector3(0.232391f, 4.19789f, -50.9286f), Vector3(5.19397f, 11.378f, -44.7809f));
  data[27].mAabb = Aabb(Vector3(-23.4616f, -19.9193f, -3.44682f), Vector3(-20.4168f, -18.8963f, 1.16198f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-5.86404f, 3.32949f, 9.55027f));
  ray.mDirection = Vector3(Vector3(0.0623947f, 0.863324f, 0.500778f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest21(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(33);
  data[0].mAabb = Aabb(Vector3(-33.6278f, 23.3002f, 21.8913f), Vector3(-29.1306f, 28.1461f, 25.5642f));
  data[1].mAabb = Aabb(Vector3(4.24704f, -40.8049f, 13.6053f), Vector3(5.83899f, -33.8577f, 21.4868f));
  data[2].mAabb = Aabb(Vector3(-28.0167f, -29.3895f, -6.32378f), Vector3(-20.9593f, -28.729f, -1.3673f));
  data[3].mAabb = Aabb(Vector3(28.3523f, 27.0866f, 18.7168f), Vector3(32.0678f, 29.0758f, 26.1166f));
  data[4].mAabb = Aabb(Vector3(4.10739f, -2.37086f, -23.5542f), Vector3(5.79651f, 2.11918f, -19.4599f));
  data[5].mAabb = Aabb(Vector3(-24.0231f, 16.4596f, 18.0735f), Vector3(-16.1984f, 18.7926f, 23.9991f));
  data[6].mAabb = Aabb(Vector3(4.57065f, 4.09807f, 3.94361f), Vector3(10.2696f, 11.601f, 4.86107f));
  data[7].mAabb = Aabb(Vector3(-8.52314f, 8.84779f, -23.1958f), Vector3(-5.93849f, 12.9595f, -19.9262f));
  data[8].mAabb = Aabb(Vector3(-22.1978f, 19.4922f, 23.4651f), Vector3(-15.4649f, 24.1377f, 27.3981f));
  data[9].mAabb = Aabb(Vector3(-7.85067f, -15.0594f, -9.05637f), Vector3(-4.59595f, -13.6593f, -1.20412f));
  data[10].mAabb = Aabb(Vector3(-30.2344f, -0.111037f, 14.0442f), Vector3(-26.1526f, 2.6645f, 19.0176f));
  data[11].mAabb = Aabb(Vector3(8.72863f, 31.9224f, 30.1275f), Vector3(9.6382f, 36.5207f, 33.5299f));
  data[12].mAabb = Aabb(Vector3(1.43263f, 14.9574f, -38.1948f), Vector3(7.08261f, 17.1677f, -34.9929f));
  data[13].mAabb = Aabb(Vector3(-20.107f, -31.5267f, -13.465f), Vector3(-17.0524f, -26.4916f, -12.4685f));
  data[14].mAabb = Aabb(Vector3(-10.7581f, 7.98884f, 24.4345f), Vector3(-4.7632f, 12.6412f, 27.6201f));
  data[15].mAabb = Aabb(Vector3(-12.6014f, -37.7496f, 8.73324f), Vector3(-9.65468f, -36.2931f, 12.9786f));
  data[16].mAabb = Aabb(Vector3(-7.23334f, -27.3496f, 25.4283f), Vector3(-2.17759f, -21.8949f, 32.1782f));
  data[17].mAabb = Aabb(Vector3(36.9842f, -3.45302f, 21.2205f), Vector3(44.518f, -0.793915f, 21.6613f));
  data[18].mAabb = Aabb(Vector3(-23.6738f, -28.653f, 10.2992f), Vector3(-21.8917f, -20.6646f, 17.2218f));
  data[19].mAabb = Aabb(Vector3(3.46181f, -30.3096f, -13.0895f), Vector3(10.3847f, -22.3769f, -10.0083f));
  data[20].mAabb = Aabb(Vector3(32.3858f, -3.6763f, 23.8383f), Vector3(39.4576f, -0.799865f, 27.5272f));
  data[21].mAabb = Aabb(Vector3(12.678f, 21.6732f, -28.4062f), Vector3(20.3709f, 22.8461f, -20.6273f));
  data[22].mAabb = Aabb(Vector3(32.1677f, 8.1949f, 10.4816f), Vector3(34.8017f, 11.2474f, 14.7409f));
  data[23].mAabb = Aabb(Vector3(39.5989f, 12.9593f, -15.8701f), Vector3(44.961f, 18.8895f, -14.9014f));
  data[24].mAabb = Aabb(Vector3(-17.0453f, -8.47334f, 41.915f), Vector3(-12.8544f, -7.06208f, 46.6857f));
  data[25].mAabb = Aabb(Vector3(-22.753f, -14.9914f, -35.0153f), Vector3(-19.6291f, -13.3403f, -29.9849f));
  data[26].mAabb = Aabb(Vector3(-6.12725f, -28.6963f, 5.11263f), Vector3(-2.50235f, -25.8853f, 12.4426f));
  data[27].mAabb = Aabb(Vector3(-15.9311f, -2.75272f, 37.8955f), Vector3(-10.5685f, 4.02913f, 40.7256f));
  data[28].mAabb = Aabb(Vector3(16.2713f, 35.9949f, -7.57406f), Vector3(17.9623f, 40.7846f, -6.66193f));
  data[29].mAabb = Aabb(Vector3(5.40636f, 3.09786f, 3.10606f), Vector3(7.26898f, 10.4874f, 9.61074f));
  data[30].mAabb = Aabb(Vector3(23.155f, -7.21843f, 28.5197f), Vector3(27.8571f, -4.45821f, 34.1486f));
  data[31].mAabb = Aabb(Vector3(-24.1854f, 16.5145f, 34.2814f), Vector3(-23.7629f, 23.0841f, 41.3718f));
  data[32].mAabb = Aabb(Vector3(-46.4965f, 7.4777f, 18.1944f), Vector3(-39.6968f, 7.92177f, 20.668f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(16.3607f, 17.8482f, -0.194343f));
  ray.mDirection = Vector3(Vector3(-0.689713f, -0.613443f, 0.384686f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest22(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(25);
  data[0].mAabb = Aabb(Vector3(34.4564f, 3.07811f, 7.2565f), Vector3(35.4724f, 9.53316f, 8.98436f));
  data[1].mAabb = Aabb(Vector3(-16.8731f, 4.42183f, -6.74743f), Vector3(-9.64147f, 5.47474f, -4.12103f));
  data[2].mAabb = Aabb(Vector3(-1.01142f, -16.0438f, 13.3694f), Vector3(0.452492f, -8.49776f, 20.6555f));
  data[3].mAabb = Aabb(Vector3(-23.5124f, -26.7926f, -39.0513f), Vector3(-20.8226f, -26.3541f, -32.1324f));
  data[4].mAabb = Aabb(Vector3(10.0606f, -30.2191f, 14.0795f), Vector3(12.1902f, -26.321f, 15.6345f));
  data[5].mAabb = Aabb(Vector3(-3.75068f, -13.9793f, -36.0416f), Vector3(-0.784719f, -9.2218f, -31.0573f));
  data[6].mAabb = Aabb(Vector3(29.0115f, 8.16654f, 1.74221f), Vector3(31.3976f, 14.639f, 5.95184f));
  data[7].mAabb = Aabb(Vector3(-17.9522f, -20.5453f, -16.1364f), Vector3(-15.0401f, -13.6862f, -9.87409f));
  data[8].mAabb = Aabb(Vector3(34.1509f, -4.84562f, 9.86425f), Vector3(40.1945f, -4.21577f, 14.0611f));
  data[9].mAabb = Aabb(Vector3(-22.5089f, -2.80122f, -47.1568f), Vector3(-22.0013f, 3.14262f, -40.0192f));
  data[10].mAabb = Aabb(Vector3(-13.2261f, -6.13822f, 26.1388f), Vector3(-7.58403f, 1.3601f, 32.6238f));
  data[11].mAabb = Aabb(Vector3(8.74746f, 25.38f, 10.3172f), Vector3(11.3135f, 30.0723f, 12.7149f));
  data[12].mAabb = Aabb(Vector3(44.6168f, 18.8436f, 2.42935f), Vector3(47.0043f, 19.2628f, 6.80134f));
  data[13].mAabb = Aabb(Vector3(-17.1193f, 31.479f, -6.53569f), Vector3(-12.4305f, 39.1388f, -6.02853f));
  data[14].mAabb = Aabb(Vector3(-14.9389f, -21.6045f, -11.9852f), Vector3(-14.2518f, -17.6152f, -7.57032f));
  data[15].mAabb = Aabb(Vector3(-3.00614f, 34.6756f, 27.3958f), Vector3(4.91848f, 35.4154f, 31.8543f));
  data[16].mAabb = Aabb(Vector3(4.60533f, -34.7681f, -29.7715f), Vector3(8.25668f, -26.9632f, -22.9294f));
  data[17].mAabb = Aabb(Vector3(-33.3371f, 25.8214f, -23.8944f), Vector3(-31.7345f, 27.542f, -16.5337f));
  data[18].mAabb = Aabb(Vector3(-14.0593f, -21.8368f, -1.71436f), Vector3(-12.3368f, -14.611f, 5.99804f));
  data[19].mAabb = Aabb(Vector3(29.8648f, 25.0956f, -16.1069f), Vector3(35.0641f, 27.2305f, -13.5723f));
  data[20].mAabb = Aabb(Vector3(8.85222f, -8.43642f, -39.8003f), Vector3(12.4454f, -7.56628f, -38.1186f));
  data[21].mAabb = Aabb(Vector3(-46.7432f, -5.54978f, 13.3324f), Vector3(-39.2446f, -1.12491f, 17.4015f));
  data[22].mAabb = Aabb(Vector3(4.64614f, 34.272f, -1.22666f), Vector3(7.42353f, 40.6241f, 4.81692f));
  data[23].mAabb = Aabb(Vector3(-5.69616f, -16.0666f, -4.56383f), Vector3(-3.38311f, -11.0359f, -2.95797f));
  data[24].mAabb = Aabb(Vector3(-28.9755f, -37.0137f, -5.22558f), Vector3(-23.9791f, -29.4414f, -3.92681f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(13.295f, -4.58963f, 3.00536f));
  ray.mDirection = Vector3(Vector3(-0.825577f, -0.425545f, -0.370586f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest23(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(34);
  data[0].mAabb = Aabb(Vector3(27.8401f, 32.5856f, 8.05947f), Vector3(35.6428f, 34.7521f, 11.5642f));
  data[1].mAabb = Aabb(Vector3(4.88174f, -1.31114f, -19.5427f), Vector3(11.1113f, -0.616346f, -13.3934f));
  data[2].mAabb = Aabb(Vector3(33.2465f, 20.0135f, 18.9646f), Vector3(36.006f, 22.4681f, 20.2756f));
  data[3].mAabb = Aabb(Vector3(-20.5967f, 33.1278f, -11.2583f), Vector3(-13.9631f, 39.0519f, -3.68091f));
  data[4].mAabb = Aabb(Vector3(5.63741f, -17.2178f, -3.89957f), Vector3(6.77521f, -10.5784f, -1.71873f));
  data[5].mAabb = Aabb(Vector3(-37.1375f, 4.85708f, 12.4834f), Vector3(-30.5155f, 8.07516f, 14.1798f));
  data[6].mAabb = Aabb(Vector3(-38.4464f, -19.0009f, -14.9454f), Vector3(-35.6811f, -16.8284f, -11.7869f));
  data[7].mAabb = Aabb(Vector3(-19.8767f, -29.0924f, 12.9644f), Vector3(-16.702f, -22.3231f, 15.6966f));
  data[8].mAabb = Aabb(Vector3(-16.3783f, 9.63999f, -5.24387f), Vector3(-14.5323f, 10.6734f, -1.71801f));
  data[9].mAabb = Aabb(Vector3(27.2091f, 3.65276f, 1.8124f), Vector3(29.9886f, 11.1831f, 4.58886f));
  data[10].mAabb = Aabb(Vector3(38.5755f, -6.24758f, 18.3025f), Vector3(40.6325f, -5.15315f, 20.2616f));
  data[11].mAabb = Aabb(Vector3(-17.7895f, -1.83126f, 15.4858f), Vector3(-10.081f, 4.00543f, 21.4565f));
  data[12].mAabb = Aabb(Vector3(-9.74436f, -26.8203f, 24.7425f), Vector3(-2.07441f, -22.6177f, 30.6727f));
  data[13].mAabb = Aabb(Vector3(-4.0619f, -21.8836f, 27.3631f), Vector3(2.16468f, -20.0562f, 34.2545f));
  data[14].mAabb = Aabb(Vector3(1.76353f, 23.8228f, -40.2664f), Vector3(3.62638f, 28.1164f, -38.4476f));
  data[15].mAabb = Aabb(Vector3(-4.54197f, 38.9472f, 6.06402f), Vector3(-1.94294f, 42.2249f, 13.9671f));
  data[16].mAabb = Aabb(Vector3(-18.9316f, 28.2394f, -1.98653f), Vector3(-15.7448f, 35.2863f, 3.20814f));
  data[17].mAabb = Aabb(Vector3(3.0444f, 13.6727f, -18.4212f), Vector3(7.99856f, 21.5296f, -11.5848f));
  data[18].mAabb = Aabb(Vector3(-9.03881f, 6.38183f, -3.92308f), Vector3(-2.89549f, 8.37898f, -0.990289f));
  data[19].mAabb = Aabb(Vector3(-12.1877f, -20.0374f, -24.8896f), Vector3(-5.31844f, -15.8164f, -20.7324f));
  data[20].mAabb = Aabb(Vector3(-24.7172f, 15.3266f, -20.2341f), Vector3(-21.4752f, 17.1408f, -14.8077f));
  data[21].mAabb = Aabb(Vector3(15.4242f, -11.9084f, 19.865f), Vector3(17.7637f, -9.75149f, 26.4518f));
  data[22].mAabb = Aabb(Vector3(8.21655f, 1.1212f, -49.0401f), Vector3(9.11453f, 2.38332f, -43.6837f));
  data[23].mAabb = Aabb(Vector3(-13.41f, 30.7245f, 17.0955f), Vector3(-11.8164f, 37.7111f, 25.0336f));
  data[24].mAabb = Aabb(Vector3(10.8716f, 0.421482f, -43.1049f), Vector3(17.002f, 1.3742f, -42.6211f));
  data[25].mAabb = Aabb(Vector3(28.1429f, 34.514f, 8.08694f), Vector3(31.9599f, 36.1597f, 15.8151f));
  data[26].mAabb = Aabb(Vector3(2.81009f, -14.8454f, 9.45523f), Vector3(5.63572f, -13.2428f, 15.5802f));
  data[27].mAabb = Aabb(Vector3(19.1016f, -40.0434f, -0.378226f), Vector3(19.7477f, -36.3937f, 2.3544f));
  data[28].mAabb = Aabb(Vector3(5.8555f, 9.12943f, 18.9019f), Vector3(6.78525f, 16.6405f, 20.8737f));
  data[29].mAabb = Aabb(Vector3(-32.9819f, -0.0127549f, -14.8276f), Vector3(-28.4842f, 1.94635f, -10.3877f));
  data[30].mAabb = Aabb(Vector3(17.7806f, -20.5449f, -29.3793f), Vector3(20.3098f, -14.7797f, -24.4553f));
  data[31].mAabb = Aabb(Vector3(17.8089f, -19.9406f, 19.9244f), Vector3(18.6018f, -19.3852f, 22.2954f));
  data[32].mAabb = Aabb(Vector3(-10.5046f, -3.26924f, -14.2037f), Vector3(-4.3202f, 2.22139f, -6.81602f));
  data[33].mAabb = Aabb(Vector3(30.8068f, 14.7212f, -10.5603f), Vector3(31.3473f, 18.8631f, -8.33194f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-1.92852f, 9.95669f, 21.7409f));
  ray.mDirection = Vector3(Vector3(-0.385524f, 0.673351f, -0.630848f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest24(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mAabb = Aabb(Vector3(-21.2796f, -2.27429f, 42.7336f), Vector3(-14.3869f, 5.44228f, 46.5628f));
  data[1].mAabb = Aabb(Vector3(-2.59038f, -4.65579f, 27.0092f), Vector3(2.88796f, -1.25679f, 29.2376f));
  data[2].mAabb = Aabb(Vector3(17.1098f, 27.8554f, 14.0588f), Vector3(18.3207f, 32.2633f, 16.0662f));
  data[3].mAabb = Aabb(Vector3(-27.592f, 14.7115f, -11.4274f), Vector3(-22.5926f, 22.4647f, -7.27741f));
  data[4].mAabb = Aabb(Vector3(-8.5673f, -29.6597f, 16.9298f), Vector3(-7.79063f, -28.5036f, 24.885f));
  data[5].mAabb = Aabb(Vector3(-5.32181f, 28.6173f, -15.6051f), Vector3(-0.33704f, 35.127f, -10.2905f));
  data[6].mAabb = Aabb(Vector3(29.1476f, -19.6562f, -20.6372f), Vector3(30.0618f, -14.6483f, -18.1662f));
  data[7].mAabb = Aabb(Vector3(23.6375f, -24.6386f, -25.7908f), Vector3(29.8425f, -23.9005f, -22.0189f));
  data[8].mAabb = Aabb(Vector3(-14.6678f, 28.6147f, -19.6226f), Vector3(-14.2571f, 35.1215f, -15.8086f));
  data[9].mAabb = Aabb(Vector3(15.7501f, 30.1499f, -22.5884f), Vector3(20.5623f, 30.822f, -15.6372f));
  data[10].mAabb = Aabb(Vector3(29.8795f, 32.0847f, -6.29682f), Vector3(34.5936f, 39.2324f, -2.91407f));
  data[11].mAabb = Aabb(Vector3(-8.30294f, -1.83803f, 35.2748f), Vector3(-0.793035f, 0.212924f, 41.9604f));
  data[12].mAabb = Aabb(Vector3(-5.78365f, -5.42937f, -45.0744f), Vector3(-0.270052f, -1.74602f, -44.6247f));
  data[13].mAabb = Aabb(Vector3(19.2469f, 20.3684f, -17.8463f), Vector3(25.6083f, 27.9105f, -16.4502f));
  data[14].mAabb = Aabb(Vector3(33.1674f, -6.13471f, 20.9727f), Vector3(36.1371f, -2.04267f, 23.6821f));
  data[15].mAabb = Aabb(Vector3(-34.2151f, -10.7782f, 5.7492f), Vector3(-30.0122f, -8.02168f, 8.24525f));
  data[16].mAabb = Aabb(Vector3(43.9913f, 14.8923f, 2.01708f), Vector3(47.8391f, 16.7103f, 9.62162f));
  data[17].mAabb = Aabb(Vector3(-5.5737f, -31.9072f, 23.8768f), Vector3(-2.55555f, -26.5374f, 27.7536f));
  data[18].mAabb = Aabb(Vector3(-26.4637f, -4.90941f, 12.8176f), Vector3(-25.4367f, 0.990829f, 18.8076f));
  data[19].mAabb = Aabb(Vector3(-27.5333f, -29.0082f, -32.2118f), Vector3(-26.8896f, -23.349f, -28.6683f));
  data[20].mAabb = Aabb(Vector3(-15.0923f, -8.54723f, 2.21332f), Vector3(-10.6519f, -0.547698f, 10.1157f));
  data[21].mAabb = Aabb(Vector3(-2.01784f, 19.3789f, 1.53947f), Vector3(4.94399f, 19.9545f, 4.59658f));
  data[22].mAabb = Aabb(Vector3(-28.7721f, -5.84753f, 15.0108f), Vector3(-21.4596f, 0.890253f, 17.8021f));
  data[23].mAabb = Aabb(Vector3(-30.4059f, -11.5071f, -22.5801f), Vector3(-27.0603f, -11.0542f, -17.1329f));
  data[24].mAabb = Aabb(Vector3(33.8853f, -22.1018f, 10.3303f), Vector3(37.2393f, -21.3407f, 16.311f));
  data[25].mAabb = Aabb(Vector3(36.7819f, 28.2811f, -6.19887f), Vector3(37.7038f, 33.5588f, -0.538915f));
  data[26].mAabb = Aabb(Vector3(35.3626f, -0.482297f, 25.6795f), Vector3(42.5417f, 2.05852f, 30.5972f));
  data[27].mAabb = Aabb(Vector3(-28.7755f, -7.88235f, 18.0696f), Vector3(-21.3678f, -3.45888f, 19.8705f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(0.734514f, -10.8889f, -11.5217f));
  ray.mDirection = Vector3(Vector3(-0.665881f, 0.273436f, 0.694143f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionRayCastFuzzTest25(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(29);
  data[0].mAabb = Aabb(Vector3(-14.4188f, -16.4936f, 36.5659f), Vector3(-10.0274f, -13.7424f, 37.0169f));
  data[1].mAabb = Aabb(Vector3(-16.844f, 17.9272f, 35.5845f), Vector3(-12.9602f, 22.732f, 37.808f));
  data[2].mAabb = Aabb(Vector3(-24.7744f, -8.24775f, 3.01426f), Vector3(-21.3137f, -1.75908f, 9.47325f));
  data[3].mAabb = Aabb(Vector3(15.4676f, -0.518877f, -39.2601f), Vector3(22.7838f, 4.92815f, -36.8848f));
  data[4].mAabb = Aabb(Vector3(30.8187f, -7.93081f, 15.1174f), Vector3(38.5854f, -2.8071f, 17.0042f));
  data[5].mAabb = Aabb(Vector3(-36.7082f, -28.1633f, -5.67254f), Vector3(-29.905f, -21.9188f, -2.52868f));
  data[6].mAabb = Aabb(Vector3(-31.6834f, -28.6156f, -9.66202f), Vector3(-26.7908f, -26.8244f, -2.18667f));
  data[7].mAabb = Aabb(Vector3(5.95474f, 9.67577f, 0.993668f), Vector3(9.28346f, 11.5402f, 2.05702f));
  data[8].mAabb = Aabb(Vector3(1.41982f, 24.3742f, -40.8023f), Vector3(6.00218f, 28.3558f, -40.0092f));
  data[9].mAabb = Aabb(Vector3(25.9503f, -16.0582f, -9.11889f), Vector3(27.9542f, -14.8012f, -2.4762f));
  data[10].mAabb = Aabb(Vector3(-7.53082f, 12.7594f, -24.4623f), Vector3(-3.49144f, 17.8457f, -19.6075f));
  data[11].mAabb = Aabb(Vector3(15.4188f, 28.1573f, -15.8586f), Vector3(19.5999f, 32.9106f, -13.9399f));
  data[12].mAabb = Aabb(Vector3(-43.2748f, -10.7814f, -0.471103f), Vector3(-39.3221f, -7.00315f, 1.95397f));
  data[13].mAabb = Aabb(Vector3(0.461303f, 15.5879f, -28.8212f), Vector3(1.71206f, 22.1195f, -24.5149f));
  data[14].mAabb = Aabb(Vector3(-42.039f, -17.7939f, -18.0527f), Vector3(-41.138f, -14.751f, -15.4736f));
  data[15].mAabb = Aabb(Vector3(-8.67296f, -38.1939f, 16.7532f), Vector3(-4.59855f, -34.0274f, 19.5598f));
  data[16].mAabb = Aabb(Vector3(-3.2947f, 9.50628f, 3.4216f), Vector3(3.91275f, 12.3769f, 8.0965f));
  data[17].mAabb = Aabb(Vector3(28.863f, 8.72077f, -14.0584f), Vector3(30.2845f, 9.48863f, -6.42297f));
  data[18].mAabb = Aabb(Vector3(44.1473f, -6.41885f, 9.5389f), Vector3(45.245f, -1.99654f, 13.4428f));
  data[19].mAabb = Aabb(Vector3(-32.5492f, 14.3306f, 7.92145f), Vector3(-29.5786f, 18.5576f, 10.0571f));
  data[20].mAabb = Aabb(Vector3(19.3271f, 32.4578f, -10.5498f), Vector3(21.9632f, 34.1414f, -6.56792f));
  data[21].mAabb = Aabb(Vector3(-27.8703f, 32.2271f, -1.34698f), Vector3(-20.8315f, 33.7074f, 6.29166f));
  data[22].mAabb = Aabb(Vector3(-22.3455f, 26.0221f, -3.28064f), Vector3(-18.857f, 27.2387f, 3.06075f));
  data[23].mAabb = Aabb(Vector3(-18.8407f, -29.4661f, -18.5976f), Vector3(-15.8413f, -25.9628f, -14.0702f));
  data[24].mAabb = Aabb(Vector3(-20.9f, 15.5404f, 11.5468f), Vector3(-14.1146f, 15.9648f, 13.7362f));
  data[25].mAabb = Aabb(Vector3(-19.3609f, 28.0907f, 10.8935f), Vector3(-18.8073f, 30.2388f, 14.6731f));
  data[26].mAabb = Aabb(Vector3(5.0999f, -37.7344f, 14.589f), Vector3(9.04233f, -34.7956f, 19.7816f));
  data[27].mAabb = Aabb(Vector3(9.64559f, 3.09329f, -0.260674f), Vector3(15.4619f, 6.02933f, 4.37595f));
  data[28].mAabb = Aabb(Vector3(0.39855f, -15.8883f, -4.76729f), Vector3(8.3009f, -14.3422f, 1.98486f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Ray ray;
  ray.mStart = Vector3(Vector3(-0.760911f, -17.7239f, -3.35734f));
  ray.mDirection = Vector3(Vector3(0.385464f, 0.917472f, -0.0983001f));

  Application::mStatistics.Clear();
  PrintRayCastResults(spatialPartition, ray, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mRayAabbTests", Application::mStatistics.mRayAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(35);
  data[0].mAabb = Aabb(Vector3(-42.1677f, 16.8547f, 9.00551f), Vector3(-39.1899f, 23.5138f, 11.001f));
  data[1].mAabb = Aabb(Vector3(9.61212f, -4.25645f, 5.30613f), Vector3(10.8404f, -3.29492f, 7.31974f));
  data[2].mAabb = Aabb(Vector3(-1.82378f, -9.76108f, -41.0821f), Vector3(4.63845f, -6.92964f, -33.7197f));
  data[3].mAabb = Aabb(Vector3(2.77457f, -51.4767f, -1.01452f), Vector3(3.80429f, -44.141f, 1.69607f));
  data[4].mAabb = Aabb(Vector3(25.3061f, 21.1362f, 20.4555f), Vector3(33.0863f, 24.3726f, 27.525f));
  data[5].mAabb = Aabb(Vector3(-10.373f, -9.27229f, -20.7413f), Vector3(-8.97241f, -5.09884f, -20.1038f));
  data[6].mAabb = Aabb(Vector3(1.0472f, 1.76581f, -18.9534f), Vector3(6.90198f, 8.05641f, -17.6458f));
  data[7].mAabb = Aabb(Vector3(-40.7551f, 27.1149f, -14.043f), Vector3(-33.836f, 30.1156f, -10.8062f));
  data[8].mAabb = Aabb(Vector3(-33.1279f, -28.0502f, 8.68627f), Vector3(-27.4689f, -23.3779f, 9.33815f));
  data[9].mAabb = Aabb(Vector3(23.1234f, -9.23255f, -4.35827f), Vector3(26.8561f, -4.56299f, 0.309435f));
  data[10].mAabb = Aabb(Vector3(-6.08976f, 28.5644f, -13.7216f), Vector3(-0.88001f, 29.1499f, -7.79767f));
  data[11].mAabb = Aabb(Vector3(4.60154f, 8.3081f, -5.25431f), Vector3(8.90534f, 9.2803f, 1.3617f));
  data[12].mAabb = Aabb(Vector3(-16.3052f, -11.1597f, -6.8423f), Vector3(-10.9247f, -5.38264f, -3.45282f));
  data[13].mAabb = Aabb(Vector3(-47.4864f, -18.9931f, -13.6648f), Vector3(-43.3105f, -14.4019f, -6.37063f));
  data[14].mAabb = Aabb(Vector3(-25.3652f, 3.09992f, 38.7823f), Vector3(-21.0779f, 7.32021f, 42.3351f));
  data[15].mAabb = Aabb(Vector3(-14.4758f, 22.7301f, -9.6493f), Vector3(-10.051f, 26.3279f, -5.65561f));
  data[16].mAabb = Aabb(Vector3(5.29099f, -30.4065f, -23.2867f), Vector3(7.90973f, -26.8222f, -19.6799f));
  data[17].mAabb = Aabb(Vector3(16.135f, 21.8655f, -14.0759f), Vector3(22.5886f, 28.3799f, -8.92434f));
  data[18].mAabb = Aabb(Vector3(11.8629f, 25.9047f, -23.7738f), Vector3(16.3285f, 27.295f, -23.1667f));
  data[19].mAabb = Aabb(Vector3(14.1279f, 9.59282f, 6.89459f), Vector3(17.7264f, 15.3414f, 12.9904f));
  data[20].mAabb = Aabb(Vector3(2.95917f, -23.8312f, 18.15f), Vector3(4.97487f, -16.6527f, 21.978f));
  data[21].mAabb = Aabb(Vector3(-28.7206f, 16.7571f, 19.7172f), Vector3(-23.3154f, 19.3722f, 20.1446f));
  data[22].mAabb = Aabb(Vector3(-40.6333f, 0.100276f, -21.2316f), Vector3(-35.9573f, 7.48795f, -15.0665f));
  data[23].mAabb = Aabb(Vector3(-35.9732f, -19.2706f, -11.4882f), Vector3(-30.9358f, -13.9127f, -7.4778f));
  data[24].mAabb = Aabb(Vector3(-5.82018f, 20.2214f, 38.8791f), Vector3(-3.63377f, 26.8921f, 46.3255f));
  data[25].mAabb = Aabb(Vector3(-10.4467f, 29.9785f, -1.93543f), Vector3(-8.7636f, 36.5609f, 1.98404f));
  data[26].mAabb = Aabb(Vector3(-8.56228f, 29.9116f, 26.5763f), Vector3(-2.67897f, 31.8608f, 30.4911f));
  data[27].mAabb = Aabb(Vector3(-21.3574f, 16.0924f, -7.91824f), Vector3(-17.7381f, 19.6036f, -0.996302f));
  data[28].mAabb = Aabb(Vector3(12.7857f, 5.2988f, 10.1643f), Vector3(17.2647f, 13.0242f, 16.5087f));
  data[29].mAabb = Aabb(Vector3(18.8812f, 3.3726f, 39.6333f), Vector3(21.0783f, 10.0543f, 40.6767f));
  data[30].mAabb = Aabb(Vector3(43.8062f, -7.33572f, 14.2162f), Vector3(45.1254f, -3.1748f, 15.2671f));
  data[31].mAabb = Aabb(Vector3(7.56896f, 2.23976f, -49.8382f), Vector3(9.57863f, 3.92378f, -45.0464f));
  data[32].mAabb = Aabb(Vector3(-26.1802f, -36.2696f, -25.0588f), Vector3(-18.6995f, -33.8323f, -17.5941f));
  data[33].mAabb = Aabb(Vector3(4.04706f, -43.0534f, 6.00849f), Vector3(10.3567f, -35.8826f, 8.39923f));
  data[34].mAabb = Aabb(Vector3(41.6941f, -17.6749f, 11.0525f), Vector3(47.3615f, -9.96665f, 13.1719f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-73.9413f, -28.0283f, 33.4646f), Vector3(23.7861f, -70.578f, 52.5694f), Vector3(67.568f, 29.9794f, 52.5694f), Vector3(-30.1594f, 72.5291f, 33.4646f), Vector3(-0.466591f, -5.07933f, -5.76028f), Vector3(6.34118f, -8.04338f, -4.42942f), Vector3(9.90655f, 0.145481f, -4.42942f), Vector3(3.09878f, 3.10953f, -5.76028f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(25);
  data[0].mAabb = Aabb(Vector3(19.9385f, 16.1432f, 36.9828f), Vector3(21.7376f, 16.7246f, 43.0454f));
  data[1].mAabb = Aabb(Vector3(9.54012f, 29.267f, -23.28f), Vector3(17.5174f, 30.8592f, -18.8027f));
  data[2].mAabb = Aabb(Vector3(-2.4759f, -42.224f, -29.66f), Vector3(-1.70943f, -35.4448f, -22.232f));
  data[3].mAabb = Aabb(Vector3(16.0096f, -5.99357f, -38.1912f), Vector3(20.8508f, 1.86634f, -32.7201f));
  data[4].mAabb = Aabb(Vector3(24.9111f, 5.65231f, -28.5078f), Vector3(28.6114f, 13.3197f, -28.0686f));
  data[5].mAabb = Aabb(Vector3(-28.1465f, 9.12786f, -5.74959f), Vector3(-27.7128f, 10.3536f, -0.442422f));
  data[6].mAabb = Aabb(Vector3(45.914f, 4.60179f, 0.379514f), Vector3(51.1367f, 7.60486f, 1.13415f));
  data[7].mAabb = Aabb(Vector3(17.6912f, -36.9419f, 30.2201f), Vector3(22.5906f, -31.2587f, 30.7414f));
  data[8].mAabb = Aabb(Vector3(-5.57818f, -18.3195f, 43.8364f), Vector3(-0.353586f, -11.3593f, 47.9537f));
  data[9].mAabb = Aabb(Vector3(-40.0591f, 8.05399f, -30.8226f), Vector3(-38.084f, 10.2513f, -26.1315f));
  data[10].mAabb = Aabb(Vector3(3.70292f, -17.8182f, -42.0166f), Vector3(8.48845f, -15.4024f, -41.076f));
  data[11].mAabb = Aabb(Vector3(36.2201f, 1.52247f, -6.55131f), Vector3(38.1373f, 2.29497f, -0.462271f));
  data[12].mAabb = Aabb(Vector3(26.2915f, 16.0696f, 7.54566f), Vector3(33.8048f, 16.6563f, 9.2051f));
  data[13].mAabb = Aabb(Vector3(-26.2637f, -16.2909f, 19.4573f), Vector3(-25.3358f, -10.8722f, 22.8857f));
  data[14].mAabb = Aabb(Vector3(-21.2424f, -18.2977f, -32.8464f), Vector3(-20.8296f, -15.8283f, -25.7962f));
  data[15].mAabb = Aabb(Vector3(-7.01516f, 37.3491f, 4.61173f), Vector3(-1.51804f, 42.1328f, 7.22862f));
  data[16].mAabb = Aabb(Vector3(-34.506f, 20.7546f, -9.92357f), Vector3(-28.3079f, 25.1092f, -3.98205f));
  data[17].mAabb = Aabb(Vector3(-33.7639f, 14.5482f, -23.88f), Vector3(-31.1008f, 17.9629f, -18.2546f));
  data[18].mAabb = Aabb(Vector3(35.8018f, 14.0568f, -23.7278f), Vector3(42.162f, 17.5309f, -20.8052f));
  data[19].mAabb = Aabb(Vector3(-11.813f, 12.2021f, 39.1788f), Vector3(-7.59925f, 18.2097f, 42.7668f));
  data[20].mAabb = Aabb(Vector3(-19.4034f, 6.41218f, -39.1574f), Vector3(-17.701f, 8.05654f, -32.6935f));
  data[21].mAabb = Aabb(Vector3(-34.3755f, -16.5988f, -27.7073f), Vector3(-26.5395f, -8.99035f, -22.46f));
  data[22].mAabb = Aabb(Vector3(-4.67789f, -11.8691f, -12.459f), Vector3(-2.62114f, -10.9006f, -9.59765f));
  data[23].mAabb = Aabb(Vector3(-36.6831f, -27.6736f, 19.0194f), Vector3(-33.4571f, -26.7427f, 25.4705f));
  data[24].mAabb = Aabb(Vector3(10.9841f, -44.3699f, 0.708765f), Vector3(17.6771f, -39.7115f, 6.72637f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-36.2776f, 35.2886f, -68.9134f), Vector3(-36.6607f, -77.2606f, -30.1711f), Vector3(-36.6607f, -38.7343f, 81.7505f), Vector3(-36.2776f, 73.8149f, 43.0082f), Vector3(38.3401f, 0.287792f, 2.4445f), Vector3(38.318f, -6.20886f, 4.68081f), Vector3(38.318f, -4.18876f, 10.5493f), Vector3(38.3401f, 2.30789f, 8.31304f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(39);
  data[0].mAabb = Aabb(Vector3(-7.9285f, -4.80817f, 33.5905f), Vector3(-4.53762f, 1.03432f, 37.5331f));
  data[1].mAabb = Aabb(Vector3(17.9431f, 11.8543f, 2.91378f), Vector3(25.0794f, 16.9353f, 5.52672f));
  data[2].mAabb = Aabb(Vector3(-22.728f, -6.56122f, -14.0607f), Vector3(-17.8174f, -5.13813f, -10.9511f));
  data[3].mAabb = Aabb(Vector3(-23.3642f, -31.0845f, 9.80346f), Vector3(-21.1708f, -25.4914f, 13.2024f));
  data[4].mAabb = Aabb(Vector3(42.3746f, -0.258734f, -17.9478f), Vector3(49.8314f, 7.17603f, -13.1558f));
  data[5].mAabb = Aabb(Vector3(-10.0693f, 4.54971f, 11.2689f), Vector3(-5.96129f, 11.5248f, 13.3551f));
  data[6].mAabb = Aabb(Vector3(-40.7806f, 18.7138f, -2.38263f), Vector3(-40.3152f, 24.1358f, 3.40999f));
  data[7].mAabb = Aabb(Vector3(7.62455f, -39.4239f, -26.3932f), Vector3(15.3439f, -37.8751f, -22.6043f));
  data[8].mAabb = Aabb(Vector3(-18.5995f, -12.7709f, 19.3177f), Vector3(-15.3051f, -11.0695f, 22.3136f));
  data[9].mAabb = Aabb(Vector3(2.2872f, 17.4411f, -32.1716f), Vector3(6.55898f, 19.4218f, -24.6603f));
  data[10].mAabb = Aabb(Vector3(-11.9782f, -38.6196f, -16.243f), Vector3(-4.93752f, -35.2644f, -8.80357f));
  data[11].mAabb = Aabb(Vector3(-34.3065f, 32.7305f, -10.0611f), Vector3(-26.5445f, 39.6204f, -4.29374f));
  data[12].mAabb = Aabb(Vector3(-4.68964f, 19.3211f, -41.2952f), Vector3(-3.88397f, 26.2045f, -36.097f));
  data[13].mAabb = Aabb(Vector3(22.6575f, -1.34841f, -4.82765f), Vector3(29.1441f, -0.494966f, -2.2045f));
  data[14].mAabb = Aabb(Vector3(-19.9995f, -32.3206f, -8.78155f), Vector3(-19.5285f, -30.1847f, -7.13208f));
  data[15].mAabb = Aabb(Vector3(-2.22884f, 35.8282f, 3.34537f), Vector3(0.729237f, 36.7408f, 9.56708f));
  data[16].mAabb = Aabb(Vector3(-3.18819f, 27.0651f, 25.6025f), Vector3(-1.34761f, 32.591f, 26.2778f));
  data[17].mAabb = Aabb(Vector3(12.4081f, 28.0999f, 25.4291f), Vector3(17.5527f, 34.0002f, 26.6827f));
  data[18].mAabb = Aabb(Vector3(34.0291f, -12.4077f, -31.0752f), Vector3(38.2494f, -8.86168f, -28.9083f));
  data[19].mAabb = Aabb(Vector3(8.92395f, 27.3555f, -22.9376f), Vector3(11.9249f, 32.4523f, -21.0987f));
  data[20].mAabb = Aabb(Vector3(5.06159f, -13.4217f, 38.4368f), Vector3(8.55382f, -10.4277f, 44.633f));
  data[21].mAabb = Aabb(Vector3(14.912f, -9.00497f, 19.7017f), Vector3(20.9655f, -7.67488f, 27.5781f));
  data[22].mAabb = Aabb(Vector3(15.1491f, -10.3497f, -3.47074f), Vector3(17.0973f, -9.82488f, -2.65881f));
  data[23].mAabb = Aabb(Vector3(11.0055f, 19.4995f, -41.6798f), Vector3(12.2022f, 26.9311f, -38.3518f));
  data[24].mAabb = Aabb(Vector3(5.22333f, -13.2539f, -10.6893f), Vector3(7.5663f, -6.11672f, -5.2608f));
  data[25].mAabb = Aabb(Vector3(-32.4509f, 25.052f, -7.01291f), Vector3(-27.181f, 26.6089f, -5.11156f));
  data[26].mAabb = Aabb(Vector3(-2.6758f, 22.4878f, -8.05947f), Vector3(0.356962f, 23.4971f, -5.69516f));
  data[27].mAabb = Aabb(Vector3(-39.706f, -5.55834f, 1.86774f), Vector3(-36.5337f, -0.0656152f, 6.85576f));
  data[28].mAabb = Aabb(Vector3(6.56535f, -26.4178f, -42.8927f), Vector3(13.8245f, -21.3171f, -39.5953f));
  data[29].mAabb = Aabb(Vector3(-47.9026f, -13.1314f, 5.24527f), Vector3(-41.0213f, -7.68133f, 11.7683f));
  data[30].mAabb = Aabb(Vector3(-21.0196f, -8.76493f, -9.60975f), Vector3(-18.3795f, -5.44364f, -2.41319f));
  data[31].mAabb = Aabb(Vector3(-20.5008f, -7.5188f, -44.598f), Vector3(-17.1665f, -6.45011f, -43.768f));
  data[32].mAabb = Aabb(Vector3(-9.57226f, -13.093f, 45.7763f), Vector3(-2.03591f, -7.39985f, 51.0693f));
  data[33].mAabb = Aabb(Vector3(-3.94946f, -35.5512f, -5.13657f), Vector3(-0.209517f, -34.6151f, 1.37507f));
  data[34].mAabb = Aabb(Vector3(1.00581f, 29.5516f, 2.11194f), Vector3(4.55046f, 36.2596f, 4.5674f));
  data[35].mAabb = Aabb(Vector3(28.5082f, 0.96792f, 1.52129f), Vector3(36.3846f, 8.1058f, 3.16797f));
  data[36].mAabb = Aabb(Vector3(28.666f, 15.3054f, -2.78913f), Vector3(31.4611f, 18.2037f, 2.53914f));
  data[37].mAabb = Aabb(Vector3(10.4275f, -17.4852f, 6.59602f), Vector3(15.1722f, -12.7342f, 10.358f));
  data[38].mAabb = Aabb(Vector3(-7.29339f, 34.7725f, 1.08169f), Vector3(-6.39402f, 38.6033f, 8.47888f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-21.6662f, 77.2502f, 45.7339f), Vector3(-7.19457f, 24.3769f, -65.9153f), Vector3(-7.19457f, -89.85f, -11.8214f), Vector3(-21.6662f, -36.9767f, 99.8279f), Vector3(36.0696f, 2.3361f, 23.75f), Vector3(36.9757f, -0.974292f, 16.7596f), Vector3(36.9757f, -9.82657f, 20.9517f), Vector3(36.0696f, -6.51617f, 27.9421f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(47);
  data[0].mAabb = Aabb(Vector3(-9.50206f, -15.5945f, -39.1654f), Vector3(-5.07186f, -13.3199f, -38.6247f));
  data[1].mAabb = Aabb(Vector3(32.3077f, -9.13585f, -23.4836f), Vector3(40.2766f, -3.17971f, -22.6795f));
  data[2].mAabb = Aabb(Vector3(12.2157f, 19.6917f, 31.4826f), Vector3(17.7203f, 27.3955f, 37.2054f));
  data[3].mAabb = Aabb(Vector3(15.9508f, -30.5809f, 11.6512f), Vector3(16.9339f, -28.9955f, 18.9454f));
  data[4].mAabb = Aabb(Vector3(-36.8676f, 3.41411f, -7.09757f), Vector3(-32.4499f, 4.78501f, -3.78347f));
  data[5].mAabb = Aabb(Vector3(-14.5375f, 26.7657f, 28.5979f), Vector3(-6.9f, 29.1019f, 32.5821f));
  data[6].mAabb = Aabb(Vector3(-4.50597f, -2.87493f, -51.4099f), Vector3(-2.30751f, 3.0056f, -47.1794f));
  data[7].mAabb = Aabb(Vector3(-35.2384f, -15.0217f, 5.33861f), Vector3(-33.0149f, -11.0821f, 6.19623f));
  data[8].mAabb = Aabb(Vector3(10.2511f, -24.0447f, -17.8674f), Vector3(16.7646f, -19.7739f, -10.8251f));
  data[9].mAabb = Aabb(Vector3(6.51459f, 30.1778f, 19.2574f), Vector3(10.798f, 32.2285f, 23.1662f));
  data[10].mAabb = Aabb(Vector3(2.49261f, 28.5512f, -40.317f), Vector3(2.95199f, 34.6363f, -36.2987f));
  data[11].mAabb = Aabb(Vector3(20.343f, -0.89387f, -14.231f), Vector3(22.33f, 3.66761f, -6.57362f));
  data[12].mAabb = Aabb(Vector3(0.801156f, 41.2868f, 13.776f), Vector3(2.00947f, 44.7765f, 19.189f));
  data[13].mAabb = Aabb(Vector3(-8.13955f, -13.1756f, -4.10187f), Vector3(-0.146972f, -9.50527f, -2.11609f));
  data[14].mAabb = Aabb(Vector3(15.6296f, 5.84561f, -30.7598f), Vector3(17.7401f, 9.25782f, -27.8507f));
  data[15].mAabb = Aabb(Vector3(12.2732f, -6.55389f, -13.657f), Vector3(17.5727f, -2.17913f, -6.3405f));
  data[16].mAabb = Aabb(Vector3(-5.68788f, -17.8218f, 14.7896f), Vector3(0.386081f, -11.5683f, 16.919f));
  data[17].mAabb = Aabb(Vector3(29.4788f, 15.1334f, -33.0782f), Vector3(29.885f, 19.7795f, -29.1455f));
  data[18].mAabb = Aabb(Vector3(-1.7555f, 20.6587f, -36.7163f), Vector3(2.87463f, 23.7993f, -29.5905f));
  data[19].mAabb = Aabb(Vector3(1.41349f, 6.43531f, -21.8294f), Vector3(3.50133f, 7.58564f, -16.7613f));
  data[20].mAabb = Aabb(Vector3(15.9052f, 34.6717f, 3.87893f), Vector3(20.0047f, 41.3545f, 7.04319f));
  data[21].mAabb = Aabb(Vector3(-22.872f, -4.57239f, 1.89713f), Vector3(-16.5717f, 2.40707f, 4.66177f));
  data[22].mAabb = Aabb(Vector3(39.6058f, 4.5611f, 2.79399f), Vector3(46.0724f, 9.35151f, 5.90908f));
  data[23].mAabb = Aabb(Vector3(-14.4634f, -24.1819f, -30.4579f), Vector3(-11.3314f, -20.9311f, -24.7374f));
  data[24].mAabb = Aabb(Vector3(33.714f, -21.4236f, -22.4715f), Vector3(34.4962f, -16.8994f, -16.3122f));
  data[25].mAabb = Aabb(Vector3(-46.4044f, -20.4812f, -7.07685f), Vector3(-43.6959f, -19.4382f, -2.54158f));
  data[26].mAabb = Aabb(Vector3(6.30586f, 35.1225f, 3.90338f), Vector3(8.20675f, 37.4531f, 6.43028f));
  data[27].mAabb = Aabb(Vector3(-9.79299f, -12.3316f, -22.8337f), Vector3(-5.02717f, -6.00575f, -15.2646f));
  data[28].mAabb = Aabb(Vector3(-0.739684f, 17.0186f, -42.7526f), Vector3(1.62694f, 19.0527f, -40.5746f));
  data[29].mAabb = Aabb(Vector3(14.1501f, 11.8811f, -45.5372f), Vector3(21.7528f, 15.4311f, -39.9135f));
  data[30].mAabb = Aabb(Vector3(10.7394f, -12.2506f, -44.1651f), Vector3(14.202f, -11.7119f, -43.426f));
  data[31].mAabb = Aabb(Vector3(10.7426f, 5.86327f, -4.42371f), Vector3(14.6713f, 7.22095f, -3.36175f));
  data[32].mAabb = Aabb(Vector3(-0.872105f, 14.2511f, 12.3164f), Vector3(5.56067f, 16.0629f, 17.3235f));
  data[33].mAabb = Aabb(Vector3(23.2394f, 20.397f, 30.6258f), Vector3(29.3553f, 25.6729f, 35.8012f));
  data[34].mAabb = Aabb(Vector3(29.7569f, 23.2406f, -11.3231f), Vector3(30.4489f, 25.1461f, -10.3887f));
  data[35].mAabb = Aabb(Vector3(12.4776f, 3.42732f, -44.6976f), Vector3(15.2457f, 9.88422f, -42.0837f));
  data[36].mAabb = Aabb(Vector3(-30.2505f, -11.1114f, 11.0966f), Vector3(-25.4151f, -5.53058f, 12.7036f));
  data[37].mAabb = Aabb(Vector3(1.66492f, -27.5212f, 10.5098f), Vector3(4.78675f, -24.1941f, 17.5998f));
  data[38].mAabb = Aabb(Vector3(29.027f, -2.28527f, 30.7323f), Vector3(36.2836f, -0.189316f, 35.6598f));
  data[39].mAabb = Aabb(Vector3(-18.5148f, 3.14571f, 6.47084f), Vector3(-15.7248f, 3.9523f, 8.44038f));
  data[40].mAabb = Aabb(Vector3(-10.698f, -4.07739f, -7.89175f), Vector3(-4.10407f, 2.24591f, -1.77627f));
  data[41].mAabb = Aabb(Vector3(-28.8556f, -14.0682f, -42.2432f), Vector3(-24.2958f, -10.1053f, -38.2819f));
  data[42].mAabb = Aabb(Vector3(-15.7353f, -22.2203f, 8.32323f), Vector3(-9.32359f, -20.6654f, 9.46382f));
  data[43].mAabb = Aabb(Vector3(-37.6096f, -14.7179f, -10.2634f), Vector3(-33.849f, -10.7585f, -4.74469f));
  data[44].mAabb = Aabb(Vector3(2.19681f, 12.0712f, -24.6f), Vector3(6.92714f, 16.2328f, -20.003f));
  data[45].mAabb = Aabb(Vector3(-16.6154f, -14.5861f, -11.3288f), Vector3(-13.1042f, -11.0215f, -7.56335f));
  data[46].mAabb = Aabb(Vector3(-43.1882f, 4.06179f, -7.34766f), Vector3(-35.5699f, 6.92755f, -4.41579f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(99.9492f, 62.2028f, 23.3748f), Vector3(-54.8129f, 102.551f, -9.80993f), Vector3(-95.075f, -51.8825f, -9.80993f), Vector3(59.6871f, -92.2303f, 23.3748f), Vector3(16.9518f, 3.85409f, -41.474f), Vector3(8.85824f, 5.96415f, -43.2094f), Vector3(7.64837f, 1.32347f, -43.2094f), Vector3(15.7419f, -0.786595f, -41.474f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(59);
  data[0].mAabb = Aabb(Vector3(-3.7175f, 0.905794f, 35.9082f), Vector3(0.617608f, 2.33283f, 36.8642f));
  data[1].mAabb = Aabb(Vector3(1.93904f, -2.34111f, -11.1892f), Vector3(8.56456f, -0.837532f, -9.7309f));
  data[2].mAabb = Aabb(Vector3(-7.37312f, -0.540035f, -10.248f), Vector3(-0.26632f, 2.23712f, -9.10296f));
  data[3].mAabb = Aabb(Vector3(-15.5825f, -25.0714f, -9.45275f), Vector3(-9.70246f, -19.7464f, -1.78489f));
  data[4].mAabb = Aabb(Vector3(18.8613f, -7.47183f, 36.9604f), Vector3(26.3218f, -3.76806f, 40.0349f));
  data[5].mAabb = Aabb(Vector3(18.8813f, 18.8783f, 13.0429f), Vector3(23.433f, 22.057f, 20.7096f));
  data[6].mAabb = Aabb(Vector3(17.041f, -8.20018f, -4.83809f), Vector3(22.3337f, -5.52786f, 0.644191f));
  data[7].mAabb = Aabb(Vector3(-21.7155f, 34.4444f, -28.9781f), Vector3(-15.7918f, 35.5386f, -21.0479f));
  data[8].mAabb = Aabb(Vector3(-11.1035f, -13.5349f, 28.978f), Vector3(-9.32044f, -8.72455f, 30.1682f));
  data[9].mAabb = Aabb(Vector3(-24.7756f, 33.9456f, -20.9848f), Vector3(-20.2513f, 35.4448f, -19.6489f));
  data[10].mAabb = Aabb(Vector3(-24.0304f, -24.1843f, 27.3142f), Vector3(-20.2749f, -16.3153f, 34.1858f));
  data[11].mAabb = Aabb(Vector3(14.9756f, 16.0041f, 6.80855f), Vector3(22.1292f, 23.5966f, 9.30135f));
  data[12].mAabb = Aabb(Vector3(29.7141f, 2.66589f, -12.498f), Vector3(30.6969f, 3.6295f, -11.2203f));
  data[13].mAabb = Aabb(Vector3(-3.14534f, -4.275f, 27.7765f), Vector3(0.307461f, 0.00629973f, 29.158f));
  data[14].mAabb = Aabb(Vector3(-3.102f, -8.77668f, 36.7311f), Vector3(4.28985f, -1.56736f, 42.118f));
  data[15].mAabb = Aabb(Vector3(2.96234f, -35.6675f, 6.4402f), Vector3(4.64799f, -33.7754f, 8.71521f));
  data[16].mAabb = Aabb(Vector3(13.151f, -3.70259f, 24.9818f), Vector3(15.6828f, 3.85464f, 27.1165f));
  data[17].mAabb = Aabb(Vector3(0.929571f, -2.77991f, -34.5914f), Vector3(6.91841f, 1.88594f, -27.4946f));
  data[18].mAabb = Aabb(Vector3(4.5062f, -36.7835f, 5.37455f), Vector3(5.58092f, -31.8279f, 10.5674f));
  data[19].mAabb = Aabb(Vector3(-0.221908f, -16.6349f, -12.2076f), Vector3(4.9345f, -11.1802f, -8.42472f));
  data[20].mAabb = Aabb(Vector3(22.315f, 4.62961f, 26.2156f), Vector3(25.4157f, 9.96484f, 31.0695f));
  data[21].mAabb = Aabb(Vector3(-45.3028f, 9.88386f, -13.657f), Vector3(-44.0817f, 15.3149f, -12.448f));
  data[22].mAabb = Aabb(Vector3(-1.02017f, 19.5541f, -34.5332f), Vector3(6.31811f, 26.8959f, -32.8437f));
  data[23].mAabb = Aabb(Vector3(8.45927f, 36.0204f, -10.5174f), Vector3(11.9527f, 36.6377f, -6.47408f));
  data[24].mAabb = Aabb(Vector3(6.30535f, 10.0304f, -25.8949f), Vector3(13.6234f, 15.3515f, -25.4531f));
  data[25].mAabb = Aabb(Vector3(-25.9175f, 12.1009f, -6.19749f), Vector3(-24.7961f, 14.5586f, 0.892603f));
  data[26].mAabb = Aabb(Vector3(-4.56478f, -34.036f, -28.4944f), Vector3(-3.95835f, -27.7614f, -20.8855f));
  data[27].mAabb = Aabb(Vector3(10.9129f, -11.2053f, 20.33f), Vector3(17.9489f, -7.37187f, 21.616f));
  data[28].mAabb = Aabb(Vector3(-23.9883f, 16.9422f, -29.2359f), Vector3(-16.9116f, 21.4353f, -25.245f));
  data[29].mAabb = Aabb(Vector3(42.4171f, 8.45233f, -8.92196f), Vector3(46.356f, 11.7961f, -6.41037f));
  data[30].mAabb = Aabb(Vector3(2.41356f, 20.4555f, 37.0678f), Vector3(7.19445f, 26.2409f, 41.1253f));
  data[31].mAabb = Aabb(Vector3(-29.4248f, 3.38072f, -20.1807f), Vector3(-22.6202f, 10.2412f, -16.0028f));
  data[32].mAabb = Aabb(Vector3(10.7704f, 14.7174f, -11.7755f), Vector3(18.163f, 21.7284f, -5.57765f));
  data[33].mAabb = Aabb(Vector3(-22.2215f, -1.14752f, 11.5733f), Vector3(-18.0752f, 4.01909f, 13.1281f));
  data[34].mAabb = Aabb(Vector3(41.6009f, 6.94358f, 2.17508f), Vector3(43.3706f, 14.5753f, 8.69066f));
  data[35].mAabb = Aabb(Vector3(-12.5122f, -28.2992f, 27.4991f), Vector3(-4.78962f, -21.9998f, 31.5023f));
  data[36].mAabb = Aabb(Vector3(14.7636f, -8.94307f, -1.37823f), Vector3(22.3763f, -4.35028f, 0.457017f));
  data[37].mAabb = Aabb(Vector3(5.96153f, -11.5887f, -19.0677f), Vector3(9.29581f, -4.19015f, -18.4005f));
  data[38].mAabb = Aabb(Vector3(-37.8087f, -13.7413f, 18.4297f), Vector3(-37.2371f, -12.093f, 21.0081f));
  data[39].mAabb = Aabb(Vector3(33.7365f, -30.2142f, 3.69222f), Vector3(35.7214f, -22.7296f, 4.69133f));
  data[40].mAabb = Aabb(Vector3(27.7599f, -36.2066f, -12.8998f), Vector3(34.1314f, -28.9655f, -8.92772f));
  data[41].mAabb = Aabb(Vector3(-20.5731f, -28.1302f, 27.0174f), Vector3(-13.715f, -21.3602f, 28.6879f));
  data[42].mAabb = Aabb(Vector3(-23.6439f, 13.9255f, 6.95737f), Vector3(-22.7339f, 20.3757f, 11.6126f));
  data[43].mAabb = Aabb(Vector3(-47.521f, -18.011f, 8.52913f), Vector3(-43.3406f, -15.2892f, 9.76621f));
  data[44].mAabb = Aabb(Vector3(-18.1639f, -21.6608f, 31.9211f), Vector3(-10.6628f, -18.9409f, 37.8638f));
  data[45].mAabb = Aabb(Vector3(3.19236f, -33.7253f, -5.62641f), Vector3(9.42381f, -29.2409f, -0.307645f));
  data[46].mAabb = Aabb(Vector3(-25.1684f, 19.7979f, 2.77631f), Vector3(-21.7541f, 20.6796f, 7.58759f));
  data[47].mAabb = Aabb(Vector3(16.555f, -43.0803f, -2.59907f), Vector3(20.3147f, -35.6022f, 4.25677f));
  data[48].mAabb = Aabb(Vector3(-29.4965f, 28.6317f, 2.1889f), Vector3(-25.4105f, 33.0125f, 7.25694f));
  data[49].mAabb = Aabb(Vector3(-31.2768f, 16.204f, -22.136f), Vector3(-30.8042f, 19.1862f, -16.3302f));
  data[50].mAabb = Aabb(Vector3(29.3597f, -0.913935f, -24.9551f), Vector3(34.9121f, 3.70715f, -18.3892f));
  data[51].mAabb = Aabb(Vector3(-43.9448f, -6.27794f, 6.42794f), Vector3(-41.8873f, -3.75777f, 13.6714f));
  data[52].mAabb = Aabb(Vector3(0.281598f, -16.3413f, 41.5173f), Vector3(1.75548f, -11.4008f, 46.0437f));
  data[53].mAabb = Aabb(Vector3(-9.51093f, 26.0831f, 22.8334f), Vector3(-6.31071f, 33.5372f, 24.2567f));
  data[54].mAabb = Aabb(Vector3(-22.2296f, -10.4329f, -7.36395f), Vector3(-16.1151f, -6.5032f, -2.92795f));
  data[55].mAabb = Aabb(Vector3(15.8341f, -30.5515f, 26.4226f), Vector3(20.496f, -28.1477f, 27.9945f));
  data[56].mAabb = Aabb(Vector3(9.3011f, 38.3036f, 12.1905f), Vector3(12.5329f, 41.7096f, 13.1631f));
  data[57].mAabb = Aabb(Vector3(-16.4708f, -30.8013f, -37.8754f), Vector3(-11.3938f, -29.0964f, -31.7063f));
  data[58].mAabb = Aabb(Vector3(23.9811f, -10.111f, 12.2657f), Vector3(27.0278f, -6.35639f, 14.6978f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-31.1274f, -29.4109f, 24.3172f), Vector3(49.0287f, -31.3402f, 36.3449f), Vector3(50.9906f, 50.1709f, 36.3449f), Vector3(-29.1655f, 52.1002f, 24.3172f), Vector3(9.45161f, 6.09263f, 5.41697f), Vector3(17.4963f, 5.899f, 6.6241f), Vector3(17.7031f, 14.4919f, 6.6241f), Vector3(9.65843f, 14.6855f, 5.41697f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest6(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(35);
  data[0].mAabb = Aabb(Vector3(9.84348f, -29.3175f, 20.6483f), Vector3(14.1788f, -23.7102f, 25.4183f));
  data[1].mAabb = Aabb(Vector3(3.92432f, 3.07753f, 24.1609f), Vector3(8.20283f, 10.5088f, 25.1403f));
  data[2].mAabb = Aabb(Vector3(11.2247f, 6.87306f, -33.1559f), Vector3(17.265f, 11.3566f, -29.1077f));
  data[3].mAabb = Aabb(Vector3(-18.8f, 44.7503f, -9.33814f), Vector3(-15.421f, 45.5694f, -5.79163f));
  data[4].mAabb = Aabb(Vector3(-7.0444f, -3.29029f, -0.36972f), Vector3(-1.94134f, 4.5898f, 2.70641f));
  data[5].mAabb = Aabb(Vector3(-5.39262f, -20.0531f, -30.4276f), Vector3(-4.42552f, -14.8313f, -30.0005f));
  data[6].mAabb = Aabb(Vector3(14.5951f, 38.0192f, -5.41543f), Vector3(20.5842f, 39.5974f, -0.24835f));
  data[7].mAabb = Aabb(Vector3(6.27989f, -16.9989f, -16.9198f), Vector3(12.4466f, -13.5976f, -15.3895f));
  data[8].mAabb = Aabb(Vector3(-27.7389f, -10.4808f, 20.5274f), Vector3(-23.2349f, -3.81561f, 21.885f));
  data[9].mAabb = Aabb(Vector3(23.505f, -27.2642f, -32.3131f), Vector3(28.3541f, -23.7393f, -27.1022f));
  data[10].mAabb = Aabb(Vector3(6.6253f, -26.5444f, -11.5587f), Vector3(13.7022f, -24.8191f, -6.28681f));
  data[11].mAabb = Aabb(Vector3(23.3826f, -12.5216f, 30.4812f), Vector3(29.146f, -10.0977f, 31.6204f));
  data[12].mAabb = Aabb(Vector3(36.5577f, 16.3074f, -13.7175f), Vector3(37.397f, 24.1676f, -11.3973f));
  data[13].mAabb = Aabb(Vector3(-17.3923f, -26.4433f, 22.23f), Vector3(-14.2529f, -24.6099f, 26.4649f));
  data[14].mAabb = Aabb(Vector3(22.9701f, -28.5795f, 10.467f), Vector3(23.5786f, -24.7937f, 16.3166f));
  data[15].mAabb = Aabb(Vector3(24.8341f, -27.1911f, 17.033f), Vector3(31.4139f, -22.0217f, 19.617f));
  data[16].mAabb = Aabb(Vector3(-2.80289f, 27.865f, 13.906f), Vector3(3.48469f, 31.1474f, 20.1602f));
  data[17].mAabb = Aabb(Vector3(-31.9589f, -7.68223f, 31.2139f), Vector3(-27.9112f, -5.47333f, 33.6612f));
  data[18].mAabb = Aabb(Vector3(32.6584f, 26.5507f, 15.6258f), Vector3(37.0561f, 34.3972f, 21.286f));
  data[19].mAabb = Aabb(Vector3(-24.1294f, -8.19165f, 38.2708f), Vector3(-22.9587f, -2.15526f, 45.9463f));
  data[20].mAabb = Aabb(Vector3(-32.9096f, 17.5389f, 5.64876f), Vector3(-26.0559f, 24.7568f, 13.4477f));
  data[21].mAabb = Aabb(Vector3(32.8368f, -22.282f, 26.2108f), Vector3(35.5024f, -17.0674f, 28.8516f));
  data[22].mAabb = Aabb(Vector3(28.1756f, -38.1491f, -22.2319f), Vector3(30.468f, -31.5094f, -18.5555f));
  data[23].mAabb = Aabb(Vector3(5.92621f, -11.5237f, -10.642f), Vector3(9.02646f, -9.57528f, -6.64086f));
  data[24].mAabb = Aabb(Vector3(-5.26728f, 11.6137f, -38.1284f), Vector3(-2.19509f, 14.3273f, -33.0708f));
  data[25].mAabb = Aabb(Vector3(10.7521f, -41.7039f, -12.6143f), Vector3(15.559f, -34.9054f, -5.40959f));
  data[26].mAabb = Aabb(Vector3(-7.4811f, -28.2188f, -24.2799f), Vector3(-5.02959f, -27.5046f, -17.5075f));
  data[27].mAabb = Aabb(Vector3(-23.2545f, -16.4092f, 34.8295f), Vector3(-22.3004f, -15.298f, 41.8818f));
  data[28].mAabb = Aabb(Vector3(-32.4046f, 13.3434f, -17.777f), Vector3(-30.1456f, 16.1683f, -11.9169f));
  data[29].mAabb = Aabb(Vector3(-22.3943f, -2.26533f, -12.7568f), Vector3(-19.9982f, 1.46047f, -10.9308f));
  data[30].mAabb = Aabb(Vector3(-29.8355f, -2.6477f, 2.65712f), Vector3(-28.263f, 4.3081f, 6.81966f));
  data[31].mAabb = Aabb(Vector3(23.6345f, 38.269f, 13.1307f), Vector3(24.3399f, 40.5894f, 13.8306f));
  data[32].mAabb = Aabb(Vector3(-43.8501f, -7.36599f, 6.13556f), Vector3(-35.938f, -0.95641f, 6.91386f));
  data[33].mAabb = Aabb(Vector3(-31.8668f, -6.98721f, 15.9952f), Vector3(-25.0585f, 0.574656f, 20.7372f));
  data[34].mAabb = Aabb(Vector3(-6.37516f, 33.5599f, -12.4173f), Vector3(0.691509f, 40.8156f, -5.02546f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-19.1816f, -82.534f, 99.7438f), Vector3(-53.6264f, 110.099f, 92.2313f), Vector3(-53.6264f, 102.558f, -101.139f), Vector3(-19.1816f, -90.0753f, -93.6268f), Vector3(60.8264f, 22.594f, 2.50506f), Vector3(59.1209f, 32.1318f, 2.1331f), Vector3(59.1209f, 31.8441f, -5.24263f), Vector3(60.8264f, 22.3063f, -4.87066f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest7(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(42);
  data[0].mAabb = Aabb(Vector3(-7.21987f, 18.6339f, -20.6889f), Vector3(-6.58004f, 21.9902f, -14.284f));
  data[1].mAabb = Aabb(Vector3(18.701f, -42.7009f, -6.30156f), Vector3(26.4334f, -39.5143f, -1.76838f));
  data[2].mAabb = Aabb(Vector3(10.6233f, -20.2861f, -31.0532f), Vector3(15.3323f, -18.9268f, -29.9471f));
  data[3].mAabb = Aabb(Vector3(-13.052f, -32.883f, -31.8336f), Vector3(-8.14192f, -29.7046f, -30.3667f));
  data[4].mAabb = Aabb(Vector3(-19.0224f, -0.321196f, 16.5103f), Vector3(-18.3603f, 1.41107f, 20.0791f));
  data[5].mAabb = Aabb(Vector3(27.6907f, -15.1276f, 32.9264f), Vector3(33.572f, -9.62513f, 36.6313f));
  data[6].mAabb = Aabb(Vector3(17.9879f, 23.9599f, 30.5614f), Vector3(24.1591f, 25.6771f, 34.8557f));
  data[7].mAabb = Aabb(Vector3(-11.8938f, -36.2957f, 15.4886f), Vector3(-7.82701f, -31.2819f, 21.8165f));
  data[8].mAabb = Aabb(Vector3(16.7584f, 39.0405f, 6.05849f), Vector3(21.4813f, 46.6356f, 10.0749f));
  data[9].mAabb = Aabb(Vector3(0.17896f, -26.1312f, -0.445326f), Vector3(2.2494f, -20.003f, 0.75974f));
  data[10].mAabb = Aabb(Vector3(3.05556f, -4.52043f, -19.0916f), Vector3(10.8329f, 2.34167f, -17.8747f));
  data[11].mAabb = Aabb(Vector3(-29.7205f, 6.27544f, -6.08438f), Vector3(-22.2876f, 10.4869f, -0.805274f));
  data[12].mAabb = Aabb(Vector3(17.4431f, -11.2869f, 45.0043f), Vector3(18.6004f, -4.77757f, 46.7463f));
  data[13].mAabb = Aabb(Vector3(14.115f, 26.792f, -4.39563f), Vector3(16.3893f, 34.0906f, 1.46054f));
  data[14].mAabb = Aabb(Vector3(-30.5603f, -9.61579f, 31.0728f), Vector3(-29.0238f, -2.60524f, 31.9594f));
  data[15].mAabb = Aabb(Vector3(-14.128f, -23.957f, 14.5947f), Vector3(-13.5364f, -16.3019f, 17.7669f));
  data[16].mAabb = Aabb(Vector3(-7.91031f, -28.8633f, -34.6178f), Vector3(-3.62507f, -23.0278f, -28.5141f));
  data[17].mAabb = Aabb(Vector3(21.1952f, -28.9913f, -16.5449f), Vector3(27.9633f, -22.4956f, -9.05652f));
  data[18].mAabb = Aabb(Vector3(18.0398f, -37.9594f, -18.2622f), Vector3(20.9749f, -31.4584f, -13.1589f));
  data[19].mAabb = Aabb(Vector3(4.26176f, 0.808507f, 15.3169f), Vector3(8.52403f, 2.17756f, 19.1014f));
  data[20].mAabb = Aabb(Vector3(-9.70917f, -20.8592f, -16.4636f), Vector3(-3.77716f, -15.4908f, -15.7572f));
  data[21].mAabb = Aabb(Vector3(-32.0047f, 25.6002f, -15.9834f), Vector3(-31.1691f, 27.1252f, -8.67222f));
  data[22].mAabb = Aabb(Vector3(13.2201f, -21.4862f, -33.5184f), Vector3(16.1501f, -20.8798f, -31.5076f));
  data[23].mAabb = Aabb(Vector3(10.8629f, 36.9646f, -18.2542f), Vector3(11.7458f, 40.5366f, -15.5919f));
  data[24].mAabb = Aabb(Vector3(-23.9327f, -30.0929f, 22.452f), Vector3(-20.0343f, -26.9674f, 24.4876f));
  data[25].mAabb = Aabb(Vector3(2.90078f, -14.2056f, -30.9747f), Vector3(10.1284f, -6.26243f, -27.3421f));
  data[26].mAabb = Aabb(Vector3(1.39053f, 30.6039f, 15.9646f), Vector3(5.88614f, 33.3036f, 22.1707f));
  data[27].mAabb = Aabb(Vector3(17.9369f, 35.7547f, 12.9364f), Vector3(24.4807f, 36.6315f, 16.655f));
  data[28].mAabb = Aabb(Vector3(43.7875f, -1.63182f, 14.1837f), Vector3(44.7683f, 4.25613f, 19.223f));
  data[29].mAabb = Aabb(Vector3(3.66728f, 27.6232f, 5.88377f), Vector3(6.43633f, 32.8559f, 7.21432f));
  data[30].mAabb = Aabb(Vector3(-17.8944f, -34.1957f, 25.528f), Vector3(-10.976f, -26.4293f, 26.5238f));
  data[31].mAabb = Aabb(Vector3(-23.375f, 3.30367f, -28.0381f), Vector3(-16.3058f, 6.54726f, -21.6626f));
  data[32].mAabb = Aabb(Vector3(-38.7572f, -9.7408f, 5.15517f), Vector3(-33.8146f, -3.25375f, 10.8151f));
  data[33].mAabb = Aabb(Vector3(-23.5543f, 20.4262f, 10.7629f), Vector3(-20.4374f, 22.1564f, 17.8349f));
  data[34].mAabb = Aabb(Vector3(5.37884f, -9.54469f, -10.4262f), Vector3(11.6217f, -3.2752f, -7.22043f));
  data[35].mAabb = Aabb(Vector3(30.1553f, -16.6165f, 10.8354f), Vector3(31.6057f, -11.7375f, 12.0977f));
  data[36].mAabb = Aabb(Vector3(-26.2312f, -16.471f, -34.068f), Vector3(-19.5987f, -12.6255f, -32.5484f));
  data[37].mAabb = Aabb(Vector3(-36.5966f, -14.6492f, -21.9918f), Vector3(-32.5282f, -9.14693f, -19.3079f));
  data[38].mAabb = Aabb(Vector3(5.40634f, 34.423f, 6.31752f), Vector3(9.6714f, 37.186f, 13.6539f));
  data[39].mAabb = Aabb(Vector3(26.3224f, 17.9001f, -39.0925f), Vector3(26.9523f, 20.9908f, -34.233f));
  data[40].mAabb = Aabb(Vector3(31.8834f, 22.0324f, 8.97236f), Vector3(36.5402f, 26.9979f, 10.1231f));
  data[41].mAabb = Aabb(Vector3(-17.9657f, -15.8665f, -9.83071f), Vector3(-10.5471f, -8.29447f, -6.75713f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-19.604f, -65.4718f, 50.5429f), Vector3(-68.0546f, 26.448f, 56.9129f), Vector3(-68.0546f, 33.782f, -48.9187f), Vector3(-19.604f, -58.1378f, -55.2887f), Vector3(5.11976f, 6.9616f, 5.73483f), Vector3(2.93912f, 11.0987f, 6.02152f), Vector3(2.93912f, 11.5597f, -0.630997f), Vector3(5.11976f, 7.42262f, -0.917694f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest8(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(26);
  data[0].mAabb = Aabb(Vector3(-30.3175f, 0.229839f, -21.4237f), Vector3(-29.2187f, 4.92028f, -16.4081f));
  data[1].mAabb = Aabb(Vector3(5.29607f, -18.865f, -16.5354f), Vector3(13.0372f, -13.035f, -13.8693f));
  data[2].mAabb = Aabb(Vector3(19.3078f, -17.06f, -18.559f), Vector3(26.3912f, -11.2998f, -13.6292f));
  data[3].mAabb = Aabb(Vector3(9.98305f, -22.3939f, -11.8887f), Vector3(12.8435f, -21.3486f, -7.85421f));
  data[4].mAabb = Aabb(Vector3(-27.1668f, -5.34938f, 39.589f), Vector3(-22.5781f, 1.68946f, 45.6287f));
  data[5].mAabb = Aabb(Vector3(-23.6659f, -13.1314f, 13.4281f), Vector3(-15.9486f, -8.19047f, 16.1498f));
  data[6].mAabb = Aabb(Vector3(-31.5861f, -24.8132f, 7.51122f), Vector3(-24.9508f, -21.4787f, 9.6241f));
  data[7].mAabb = Aabb(Vector3(-10.2126f, -15.5872f, -44.7527f), Vector3(-4.45806f, -10.5688f, -38.6207f));
  data[8].mAabb = Aabb(Vector3(-17.4071f, -16.5661f, -13.1345f), Vector3(-11.4948f, -10.2321f, -5.30776f));
  data[9].mAabb = Aabb(Vector3(23.6462f, -35.0334f, 22.4707f), Vector3(26.8302f, -28.0507f, 26.3993f));
  data[10].mAabb = Aabb(Vector3(41.2806f, -0.297926f, -22.0815f), Vector3(42.7679f, 1.22467f, -21.223f));
  data[11].mAabb = Aabb(Vector3(-16.0582f, 5.47159f, -47.5667f), Vector3(-14.8907f, 8.7189f, -42.9936f));
  data[12].mAabb = Aabb(Vector3(25.5213f, 15.8597f, -24.9743f), Vector3(31.2226f, 18.4119f, -20.1382f));
  data[13].mAabb = Aabb(Vector3(17.7194f, 27.814f, -18.496f), Vector3(25.1588f, 33.3332f, -17.2761f));
  data[14].mAabb = Aabb(Vector3(12.6888f, -22.2725f, -3.15162f), Vector3(18.9957f, -18.0023f, 1.94239f));
  data[15].mAabb = Aabb(Vector3(3.39901f, 4.70056f, -4.56953f), Vector3(6.92858f, 10.0755f, -2.93654f));
  data[16].mAabb = Aabb(Vector3(-7.71842f, 14.228f, -7.20002f), Vector3(-0.599563f, 18.4527f, -6.18584f));
  data[17].mAabb = Aabb(Vector3(-8.38441f, -6.31463f, 22.5323f), Vector3(-0.430334f, -2.16879f, 24.7182f));
  data[18].mAabb = Aabb(Vector3(-9.12316f, 7.45279f, 9.09613f), Vector3(-8.4903f, 15.3064f, 10.0001f));
  data[19].mAabb = Aabb(Vector3(-12.8411f, -12.9349f, 32.8659f), Vector3(-5.71223f, -6.51582f, 35.4742f));
  data[20].mAabb = Aabb(Vector3(-1.66535f, -0.241861f, 34.296f), Vector3(1.81459f, 4.53416f, 39.0715f));
  data[21].mAabb = Aabb(Vector3(13.4122f, -9.6467f, -41.0789f), Vector3(14.191f, -5.17962f, -38.738f));
  data[22].mAabb = Aabb(Vector3(27.357f, -11.7874f, 5.08385f), Vector3(27.931f, -5.59423f, 6.47517f));
  data[23].mAabb = Aabb(Vector3(43.3665f, 10.7754f, -17.4148f), Vector3(45.3606f, 18.3013f, -10.6529f));
  data[24].mAabb = Aabb(Vector3(3.40149f, -37.5941f, 26.2257f), Vector3(8.22367f, -35.9801f, 28.3625f));
  data[25].mAabb = Aabb(Vector3(-17.5064f, -26.8728f, -13.3006f), Vector3(-14.4022f, -20.4514f, -6.35474f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-15.8763f, 39.5379f, -45.588f), Vector3(-33.8427f, -23.008f, -39.0753f), Vector3(-33.8427f, -15.9583f, 28.6278f), Vector3(-15.8763f, 46.5876f, 22.1151f), Vector3(19.1039f, 1.91696f, -11.7731f), Vector3(17.4758f, -3.75107f, -11.1829f), Vector3(17.4758f, -2.86086f, -2.63359f), Vector3(19.1039f, 2.80717f, -3.22379f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest9(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(64);
  data[0].mAabb = Aabb(Vector3(-0.905045f, 31.3153f, -35.5126f), Vector3(5.62329f, 35.9415f, -30.7447f));
  data[1].mAabb = Aabb(Vector3(-21.2223f, 29.8355f, -32.0153f), Vector3(-13.5999f, 35.8011f, -26.2568f));
  data[2].mAabb = Aabb(Vector3(7.40595f, 6.99876f, -6.75668f), Vector3(12.4951f, 9.19746f, -5.77613f));
  data[3].mAabb = Aabb(Vector3(15.6297f, 3.60303f, -11.7588f), Vector3(17.2984f, 9.8927f, -6.44888f));
  data[4].mAabb = Aabb(Vector3(-18.4709f, 11.0197f, 34.053f), Vector3(-12.1189f, 11.7045f, 38.7309f));
  data[5].mAabb = Aabb(Vector3(-21.464f, 11.2511f, 31.6697f), Vector3(-19.8994f, 15.1546f, 35.536f));
  data[6].mAabb = Aabb(Vector3(8.94615f, 18.7246f, -0.458483f), Vector3(16.1701f, 22.2236f, 3.76042f));
  data[7].mAabb = Aabb(Vector3(-10.6829f, -12.0027f, -3.86425f), Vector3(-8.75909f, -10.4761f, 3.11754f));
  data[8].mAabb = Aabb(Vector3(-43.1022f, -8.74642f, 6.1972f), Vector3(-37.2914f, -7.02111f, 11.7314f));
  data[9].mAabb = Aabb(Vector3(-40.6095f, -4.68237f, -26.7943f), Vector3(-39.0129f, -1.91309f, -19.6474f));
  data[10].mAabb = Aabb(Vector3(1.87839f, -28.4549f, 3.79107f), Vector3(8.25898f, -20.7664f, 10.263f));
  data[11].mAabb = Aabb(Vector3(-35.3282f, -21.257f, 7.16669f), Vector3(-31.0859f, -15.5975f, 9.42546f));
  data[12].mAabb = Aabb(Vector3(16.1072f, -26.3138f, 7.29975f), Vector3(22.8102f, -21.736f, 9.86585f));
  data[13].mAabb = Aabb(Vector3(-0.858233f, -6.54018f, 1.87353f), Vector3(2.20769f, -0.855184f, 2.6168f));
  data[14].mAabb = Aabb(Vector3(-4.83253f, 3.38961f, 21.4301f), Vector3(1.65104f, 10.9872f, 29.2743f));
  data[15].mAabb = Aabb(Vector3(-15.1066f, -18.1f, -44.3225f), Vector3(-9.57789f, -17.5873f, -37.8735f));
  data[16].mAabb = Aabb(Vector3(9.19704f, -3.42395f, -6.83471f), Vector3(12.6f, -0.72751f, -4.75384f));
  data[17].mAabb = Aabb(Vector3(28.0137f, -38.6965f, -18.8501f), Vector3(33.6581f, -31.1472f, -15.8336f));
  data[18].mAabb = Aabb(Vector3(21.8394f, -37.0475f, 4.43235f), Vector3(29.7151f, -33.1004f, 5.35004f));
  data[19].mAabb = Aabb(Vector3(1.01459f, 12.7911f, -0.0409532f), Vector3(6.28998f, 15.6907f, 6.80607f));
  data[20].mAabb = Aabb(Vector3(19.0895f, -31.4571f, 32.5903f), Vector3(24.126f, -28.227f, 33.2431f));
  data[21].mAabb = Aabb(Vector3(32.8058f, -35.5293f, 6.28525f), Vector3(40.0473f, -29.8327f, 9.45601f));
  data[22].mAabb = Aabb(Vector3(13.1094f, 8.79239f, -32.4512f), Vector3(14.5817f, 16.486f, -30.7321f));
  data[23].mAabb = Aabb(Vector3(3.22114f, 14.9881f, -36.7145f), Vector3(8.87228f, 18.5408f, -35.1777f));
  data[24].mAabb = Aabb(Vector3(38.0347f, 3.46793f, 11.2315f), Vector3(39.6428f, 10.51f, 18.2942f));
  data[25].mAabb = Aabb(Vector3(-10.9042f, 0.745424f, 8.29716f), Vector3(-8.23448f, 4.65005f, 10.729f));
  data[26].mAabb = Aabb(Vector3(30.8157f, -29.7568f, 19.7875f), Vector3(36.4775f, -24.4322f, 21.6183f));
  data[27].mAabb = Aabb(Vector3(-5.29924f, 45.326f, -5.91549f), Vector3(-4.15958f, 51.1346f, -0.973167f));
  data[28].mAabb = Aabb(Vector3(21.7504f, -30.3527f, 19.9382f), Vector3(25.0281f, -25.4725f, 20.5245f));
  data[29].mAabb = Aabb(Vector3(25.004f, -20.1837f, 16.5646f), Vector3(27.2619f, -18.0321f, 23.337f));
  data[30].mAabb = Aabb(Vector3(36.6658f, -2.76238f, 3.82471f), Vector3(38.2218f, -1.65844f, 5.0815f));
  data[31].mAabb = Aabb(Vector3(18.3067f, 2.5619f, -21.6341f), Vector3(21.6373f, 7.00138f, -16.7053f));
  data[32].mAabb = Aabb(Vector3(32.2662f, -17.9153f, 24.6492f), Vector3(33.0517f, -13.0172f, 25.0833f));
  data[33].mAabb = Aabb(Vector3(-37.3547f, -8.91369f, -0.198907f), Vector3(-35.3404f, -6.38912f, 1.38932f));
  data[34].mAabb = Aabb(Vector3(5.58828f, 19.3021f, 2.03542f), Vector3(7.78257f, 26.3695f, 2.47091f));
  data[35].mAabb = Aabb(Vector3(-35.6825f, 8.32436f, -26.1066f), Vector3(-33.6267f, 11.7612f, -25.4515f));
  data[36].mAabb = Aabb(Vector3(-35.0658f, -18.9125f, -32.7124f), Vector3(-28.4342f, -10.9878f, -29.5729f));
  data[37].mAabb = Aabb(Vector3(29.6717f, 26.8542f, 10.333f), Vector3(33.8148f, 27.7318f, 17.4598f));
  data[38].mAabb = Aabb(Vector3(-28.3751f, 19.5969f, -35.4026f), Vector3(-23.4824f, 23.1634f, -30.7968f));
  data[39].mAabb = Aabb(Vector3(-13.5048f, 37.7009f, 6.90357f), Vector3(-6.22337f, 42.0446f, 14.079f));
  data[40].mAabb = Aabb(Vector3(-33.1321f, -8.23265f, -11.2287f), Vector3(-30.9329f, -1.74839f, -10.5304f));
  data[41].mAabb = Aabb(Vector3(-30.0118f, 21.6557f, 11.4064f), Vector3(-25.7059f, 23.8941f, 13.2676f));
  data[42].mAabb = Aabb(Vector3(-18.166f, -42.2624f, 8.80683f), Vector3(-16.6193f, -35.0956f, 11.3249f));
  data[43].mAabb = Aabb(Vector3(-1.75765f, -20.8243f, -22.4684f), Vector3(2.7862f, -17.6869f, -18.4791f));
  data[44].mAabb = Aabb(Vector3(-4.60262f, -18.0342f, 16.7162f), Vector3(-0.968673f, -10.4661f, 20.1748f));
  data[45].mAabb = Aabb(Vector3(0.431617f, -15.3816f, 26.3294f), Vector3(6.86903f, -8.61418f, 28.9484f));
  data[46].mAabb = Aabb(Vector3(7.68029f, -15.0537f, 15.5924f), Vector3(8.96329f, -12.3635f, 18.6938f));
  data[47].mAabb = Aabb(Vector3(-5.47125f, 31.6633f, 7.35414f), Vector3(0.870372f, 34.9264f, 9.6992f));
  data[48].mAabb = Aabb(Vector3(11.6582f, 21.2574f, -17.8319f), Vector3(14.9269f, 24.411f, -10.8735f));
  data[49].mAabb = Aabb(Vector3(-2.04897f, 16.0322f, 4.61161f), Vector3(2.2597f, 20.2968f, 9.66852f));
  data[50].mAabb = Aabb(Vector3(-3.93444f, -6.85773f, 43.0856f), Vector3(0.726309f, -1.44572f, 43.9613f));
  data[51].mAabb = Aabb(Vector3(-5.59466f, 20.0641f, -24.7602f), Vector3(-3.7223f, 26.8798f, -21.4695f));
  data[52].mAabb = Aabb(Vector3(12.4925f, -2.18785f, -32.2815f), Vector3(19.4935f, 0.287325f, -30.7665f));
  data[53].mAabb = Aabb(Vector3(14.6275f, 6.67938f, -40.7875f), Vector3(20.4697f, 14.3076f, -35.8988f));
  data[54].mAabb = Aabb(Vector3(-0.56062f, -39.7663f, -9.01389f), Vector3(4.86136f, -37.1613f, -2.09729f));
  data[55].mAabb = Aabb(Vector3(-21.7209f, 25.7981f, 7.54831f), Vector3(-18.9976f, 32.4712f, 13.6234f));
  data[56].mAabb = Aabb(Vector3(-1.99057f, -3.25709f, 39.7636f), Vector3(-1.57132f, 1.18657f, 41.529f));
  data[57].mAabb = Aabb(Vector3(29.7414f, 28.804f, -14.5625f), Vector3(31.1156f, 32.4658f, -13.501f));
  data[58].mAabb = Aabb(Vector3(41.5679f, -18.2412f, 14.7366f), Vector3(46.1632f, -15.8046f, 15.7048f));
  data[59].mAabb = Aabb(Vector3(16.3161f, 31.1552f, -36.6696f), Vector3(18.426f, 33.5343f, -30.5701f));
  data[60].mAabb = Aabb(Vector3(34.1431f, -34.227f, -0.693683f), Vector3(37.4229f, -32.8092f, 4.26024f));
  data[61].mAabb = Aabb(Vector3(21.5898f, -35.0815f, -5.20943f), Vector3(26.6607f, -31.4489f, -1.52747f));
  data[62].mAabb = Aabb(Vector3(-33.9308f, 29.5582f, 11.4411f), Vector3(-27.3846f, 37.3706f, 13.7512f));
  data[63].mAabb = Aabb(Vector3(16.8074f, -16.8494f, 22.2371f), Vector3(24.0714f, -15.073f, 27.4569f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(87.7912f, 17.2901f, -3.92114f), Vector3(8.52276f, 57.2681f, 69.2781f), Vector3(-43.3232f, -45.5322f, 69.2781f), Vector3(35.9452f, -85.5102f, -3.92114f), Vector3(4.17042f, -2.05809f, 2.43951f), Vector3(0.585904f, -0.250281f, 5.74959f), Vector3(-1.78857f, -4.95839f, 5.74959f), Vector3(1.79595f, -6.76619f, 2.43951f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest10(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(29);
  data[0].mAabb = Aabb(Vector3(-6.06127f, 4.76968f, 18.0221f), Vector3(0.90033f, 9.34786f, 24.3938f));
  data[1].mAabb = Aabb(Vector3(6.1067f, -4.45082f, -18.4811f), Vector3(13.7546f, -3.87686f, -17.6931f));
  data[2].mAabb = Aabb(Vector3(0.481201f, -39.4591f, -0.213717f), Vector3(1.44296f, -38.1622f, 6.91372f));
  data[3].mAabb = Aabb(Vector3(-20.1052f, -16.5347f, -10.7301f), Vector3(-19.1643f, -16.0361f, -4.36248f));
  data[4].mAabb = Aabb(Vector3(8.20068f, 46.6256f, 6.85767f), Vector3(8.85953f, 48.311f, 13.8916f));
  data[5].mAabb = Aabb(Vector3(17.6139f, -7.89949f, -45.7391f), Vector3(22.4293f, -3.62585f, -43.5866f));
  data[6].mAabb = Aabb(Vector3(9.09017f, 31.7174f, 25.9405f), Vector3(11.7811f, 35.3099f, 33.3906f));
  data[7].mAabb = Aabb(Vector3(-31.288f, 8.68721f, -28.3997f), Vector3(-25.1904f, 10.0194f, -21.6963f));
  data[8].mAabb = Aabb(Vector3(9.70125f, -33.27f, 2.67885f), Vector3(13.7891f, -27.6157f, 4.17198f));
  data[9].mAabb = Aabb(Vector3(-21.3486f, -1.76183f, -26.3508f), Vector3(-17.7307f, 3.71929f, -21.646f));
  data[10].mAabb = Aabb(Vector3(0.96429f, 6.85222f, 39.8997f), Vector3(3.8115f, 11.4626f, 47.6432f));
  data[11].mAabb = Aabb(Vector3(-15.7714f, 32.5641f, -34.1297f), Vector3(-9.91472f, 40.3767f, -26.6444f));
  data[12].mAabb = Aabb(Vector3(-1.90052f, 25.3065f, 3.34135f), Vector3(-0.284222f, 31.4201f, 6.00486f));
  data[13].mAabb = Aabb(Vector3(-3.50345f, -5.99397f, -0.864051f), Vector3(-0.904885f, 1.59387f, 0.345422f));
  data[14].mAabb = Aabb(Vector3(26.1354f, 37.1228f, -8.72009f), Vector3(28.9715f, 45.0657f, -4.51209f));
  data[15].mAabb = Aabb(Vector3(-17.8145f, 28.4282f, -8.83938f), Vector3(-10.5546f, 34.3389f, -2.12502f));
  data[16].mAabb = Aabb(Vector3(-28.1212f, -5.67617f, 39.1251f), Vector3(-25.4071f, -3.7391f, 39.5991f));
  data[17].mAabb = Aabb(Vector3(-38.519f, 7.19627f, -19.3256f), Vector3(-34.1728f, 9.99384f, -11.7816f));
  data[18].mAabb = Aabb(Vector3(-11.3177f, -26.656f, -25.2399f), Vector3(-8.5306f, -19.8976f, -18.9763f));
  data[19].mAabb = Aabb(Vector3(22.9089f, 5.34112f, 19.3407f), Vector3(28.0194f, 9.40184f, 19.8929f));
  data[20].mAabb = Aabb(Vector3(-27.4028f, -1.13053f, 23.0436f), Vector3(-26.5677f, 1.86535f, 25.2588f));
  data[21].mAabb = Aabb(Vector3(9.28116f, -32.0961f, 13.0929f), Vector3(17.1469f, -29.4804f, 14.7241f));
  data[22].mAabb = Aabb(Vector3(-22.5506f, -33.4056f, 0.66657f), Vector3(-19.8386f, -30.2761f, 2.03631f));
  data[23].mAabb = Aabb(Vector3(-30.9673f, 12.0474f, -1.78378f), Vector3(-25.7471f, 13.4714f, 0.745438f));
  data[24].mAabb = Aabb(Vector3(-3.68577f, -15.2792f, -3.83836f), Vector3(-2.03492f, -9.02108f, 1.59475f));
  data[25].mAabb = Aabb(Vector3(-21.6878f, 0.391718f, -10.3055f), Vector3(-19.7896f, 5.07984f, -2.58294f));
  data[26].mAabb = Aabb(Vector3(-5.12361f, -12.8427f, 14.5724f), Vector3(-0.511101f, -11.1336f, 18.968f));
  data[27].mAabb = Aabb(Vector3(-44.2746f, 18.2893f, -12.6746f), Vector3(-41.2715f, 24.7931f, -9.77386f));
  data[28].mAabb = Aabb(Vector3(3.52861f, -39.5082f, 4.36625f), Vector3(10.1618f, -32.4663f, 6.54105f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-36.4726f, -74.7351f, 94.7499f), Vector3(-57.5419f, 76.5284f, 82.0425f), Vector3(-57.5419f, 63.6058f, -71.7818f), Vector3(-36.4726f, -87.6577f, -59.0744f), Vector3(24.5626f, 0.315684f, 15.9724f), Vector3(23.3507f, 9.0166f, 15.2415f), Vector3(23.3507f, 8.18533f, 5.34648f), Vector3(24.5626f, -0.515582f, 6.07744f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest11(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(46);
  data[0].mAabb = Aabb(Vector3(10.8902f, 21.3938f, 2.45571f), Vector3(16.5857f, 22.4154f, 9.76336f));
  data[1].mAabb = Aabb(Vector3(11.2259f, 24.2029f, -32.7242f), Vector3(18.2752f, 29.389f, -25.3078f));
  data[2].mAabb = Aabb(Vector3(18.0951f, -45.7992f, 3.60614f), Vector3(22.5888f, -39.2757f, 10.3736f));
  data[3].mAabb = Aabb(Vector3(-16.2698f, 38.8869f, -23.8499f), Vector3(-8.8397f, 44.8818f, -21.9381f));
  data[4].mAabb = Aabb(Vector3(24.0011f, -0.538119f, 3.32545f), Vector3(28.217f, 4.14351f, 10.3889f));
  data[5].mAabb = Aabb(Vector3(-19.4541f, -6.4058f, -21.9882f), Vector3(-16.1453f, -0.675573f, -15.4349f));
  data[6].mAabb = Aabb(Vector3(26.4601f, 5.69572f, -13.9772f), Vector3(29.7403f, 8.55985f, -9.15665f));
  data[7].mAabb = Aabb(Vector3(-3.6373f, 37.0202f, 8.90493f), Vector3(2.28869f, 43.1206f, 13.834f));
  data[8].mAabb = Aabb(Vector3(-13.5284f, -0.591774f, 37.0782f), Vector3(-11.8952f, 3.08601f, 40.9608f));
  data[9].mAabb = Aabb(Vector3(-43.684f, -2.60365f, -7.7789f), Vector3(-42.0876f, 4.33082f, -4.34999f));
  data[10].mAabb = Aabb(Vector3(41.7876f, 6.66417f, 4.86644f), Vector3(45.1073f, 14.3691f, 11.0153f));
  data[11].mAabb = Aabb(Vector3(-18.1173f, -21.3906f, 34.3568f), Vector3(-14.427f, -16.2954f, 37.5027f));
  data[12].mAabb = Aabb(Vector3(-23.9633f, 4.08299f, -16.867f), Vector3(-22.2918f, 11.6718f, -11.2933f));
  data[13].mAabb = Aabb(Vector3(13.5667f, -32.4768f, 25.5062f), Vector3(17.0749f, -24.5777f, 29.7812f));
  data[14].mAabb = Aabb(Vector3(25.2f, 1.39625f, -30.7893f), Vector3(30.0275f, 6.92074f, -27.6522f));
  data[15].mAabb = Aabb(Vector3(33.9267f, -14.6522f, 20.6922f), Vector3(35.1981f, -10.8547f, 22.6054f));
  data[16].mAabb = Aabb(Vector3(-20.8002f, -41.1383f, -22.4598f), Vector3(-17.3052f, -34.7153f, -18.8528f));
  data[17].mAabb = Aabb(Vector3(0.841877f, 11.6405f, -42.1214f), Vector3(6.67741f, 15.7288f, -37.7404f));
  data[18].mAabb = Aabb(Vector3(3.35716f, -3.78079f, -45.3499f), Vector3(10.4248f, -0.171654f, -41.0545f));
  data[19].mAabb = Aabb(Vector3(-1.88851f, 13.7557f, -16.5191f), Vector3(0.0506528f, 20.9697f, -13.9474f));
  data[20].mAabb = Aabb(Vector3(34.4587f, 16.1684f, -10.9499f), Vector3(38.8689f, 16.6821f, -5.92041f));
  data[21].mAabb = Aabb(Vector3(25.7368f, -37.847f, -7.6182f), Vector3(27.341f, -30.8327f, -2.57313f));
  data[22].mAabb = Aabb(Vector3(-19.4499f, 35.076f, 5.80794f), Vector3(-13.6235f, 36.7012f, 9.75501f));
  data[23].mAabb = Aabb(Vector3(42.5545f, -19.7654f, 8.61999f), Vector3(46.252f, -16.8712f, 15.1973f));
  data[24].mAabb = Aabb(Vector3(41.0692f, -5.50726f, -18.2394f), Vector3(48.3855f, -4.54364f, -17.5128f));
  data[25].mAabb = Aabb(Vector3(-8.72556f, 43.8908f, 4.63067f), Vector3(-7.66175f, 47.9587f, 9.50666f));
  data[26].mAabb = Aabb(Vector3(21.2367f, 0.281124f, -6.99342f), Vector3(24.4782f, 8.01764f, -4.72444f));
  data[27].mAabb = Aabb(Vector3(-30.7241f, 15.3853f, 17.4404f), Vector3(-27.0737f, 16.4273f, 19.0193f));
  data[28].mAabb = Aabb(Vector3(-11.029f, -38.7263f, 9.19028f), Vector3(-8.52133f, -38.0851f, 16.0287f));
  data[29].mAabb = Aabb(Vector3(15.2389f, 20.1576f, -39.6758f), Vector3(19.4647f, 23.061f, -36.2316f));
  data[30].mAabb = Aabb(Vector3(-38.5748f, 8.27786f, -29.5908f), Vector3(-31.3975f, 10.7549f, -22.3105f));
  data[31].mAabb = Aabb(Vector3(10.8513f, 18.4761f, 9.53545f), Vector3(17.9662f, 25.6464f, 14.9806f));
  data[32].mAabb = Aabb(Vector3(17.4105f, 4.62248f, -45.2825f), Vector3(24.836f, 11.5488f, -40.7597f));
  data[33].mAabb = Aabb(Vector3(-5.00173f, 45.3098f, -1.30715f), Vector3(-4.04832f, 46.08f, 0.777431f));
  data[34].mAabb = Aabb(Vector3(-33.517f, -20.3706f, -18.8893f), Vector3(-28.5659f, -18.0003f, -15.3085f));
  data[35].mAabb = Aabb(Vector3(-18.9675f, -37.1922f, -27.1442f), Vector3(-15.4827f, -33.882f, -26.105f));
  data[36].mAabb = Aabb(Vector3(8.64184f, 1.26154f, 40.6806f), Vector3(13.3998f, 8.26489f, 46.7499f));
  data[37].mAabb = Aabb(Vector3(-4.54864f, -29.5962f, -6.92386f), Vector3(1.65197f, -21.6001f, -5.07725f));
  data[38].mAabb = Aabb(Vector3(-9.8111f, 32.8463f, 16.8241f), Vector3(-7.19978f, 35.7459f, 18.6654f));
  data[39].mAabb = Aabb(Vector3(-2.07793f, -22.9382f, -31.8138f), Vector3(5.56836f, -16.7689f, -26.8664f));
  data[40].mAabb = Aabb(Vector3(3.79057f, -12.3265f, -26.8258f), Vector3(10.6844f, -9.81769f, -22.6619f));
  data[41].mAabb = Aabb(Vector3(18.1987f, 39.1301f, -11.734f), Vector3(19.3989f, 43.1497f, -5.53754f));
  data[42].mAabb = Aabb(Vector3(-5.77374f, -29.4664f, 13.9139f), Vector3(-5.21208f, -23.4379f, 15.7551f));
  data[43].mAabb = Aabb(Vector3(-0.0923147f, -42.4001f, -3.89257f), Vector3(7.24735f, -37.7617f, 0.261156f));
  data[44].mAabb = Aabb(Vector3(-28.7451f, -10.2511f, -33.9678f), Vector3(-25.2227f, -3.12463f, -32.0653f));
  data[45].mAabb = Aabb(Vector3(10.4812f, 6.89319f, 6.00299f), Vector3(11.4859f, 7.66685f, 11.6718f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-78.0467f, 97.8913f, 66.1002f), Vector3(1.27099f, 82.5163f, -114.162f), Vector3(1.27099f, -114.883f, -97.3251f), Vector3(-78.0467f, -99.5083f, 82.9369f), Vector3(41.4937f, -1.32045f, 22.8606f), Vector3(44.3781f, -1.87958f, 16.3052f), Vector3(44.3781f, -9.6115f, 16.9647f), Vector3(41.4937f, -9.05238f, 23.5201f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest12(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mAabb = Aabb(Vector3(-45.3729f, -11.4175f, -21.5042f), Vector3(-37.6943f, -6.61832f, -14.917f));
  data[1].mAabb = Aabb(Vector3(-30.0819f, 10.8547f, 20.7039f), Vector3(-24.8539f, 18.836f, 27.1884f));
  data[2].mAabb = Aabb(Vector3(-9.70102f, -2.44166f, -7.93176f), Vector3(-6.1951f, 3.97349f, -7.11079f));
  data[3].mAabb = Aabb(Vector3(-23.9346f, 24.4171f, -14.2185f), Vector3(-17.9084f, 32.3227f, -6.64178f));
  data[4].mAabb = Aabb(Vector3(-19.7148f, -19.8763f, -14.2073f), Vector3(-13.9658f, -14.7756f, -7.7694f));
  data[5].mAabb = Aabb(Vector3(-21.7957f, -31.7872f, 7.18572f), Vector3(-17.955f, -30.7777f, 11.6676f));
  data[6].mAabb = Aabb(Vector3(-8.25709f, 18.6118f, -6.04019f), Vector3(-1.2324f, 22.5818f, 0.554245f));
  data[7].mAabb = Aabb(Vector3(30.3689f, 28.6054f, -10.4985f), Vector3(34.7814f, 31.3281f, -9.34465f));
  data[8].mAabb = Aabb(Vector3(34.075f, -17.0536f, 22.5762f), Vector3(41.7883f, -14.6698f, 28.0828f));
  data[9].mAabb = Aabb(Vector3(-6.35264f, 28.9901f, 3.31087f), Vector3(0.347793f, 30.3714f, 8.05743f));
  data[10].mAabb = Aabb(Vector3(13.3444f, -29.6044f, -15.5117f), Vector3(17.8491f, -23.0475f, -8.43719f));
  data[11].mAabb = Aabb(Vector3(42.1323f, -7.38548f, 23.0684f), Vector3(42.5617f, -4.75514f, 24.7309f));
  data[12].mAabb = Aabb(Vector3(-9.38313f, -44.9906f, -11.9553f), Vector3(-2.04022f, -44.4127f, -6.08495f));
  data[13].mAabb = Aabb(Vector3(2.9549f, 3.47004f, -40.6517f), Vector3(10.5504f, 6.23491f, -38.2779f));
  data[14].mAabb = Aabb(Vector3(-4.88371f, 47.7101f, -13.2642f), Vector3(-2.05784f, 49.7663f, -7.80855f));
  data[15].mAabb = Aabb(Vector3(41.9528f, 0.519212f, 12.7218f), Vector3(46.2317f, 2.44956f, 17.396f));
  data[16].mAabb = Aabb(Vector3(-1.42217f, 0.135442f, 10.1251f), Vector3(4.90809f, 3.73692f, 16.9116f));
  data[17].mAabb = Aabb(Vector3(-17.2655f, 7.39145f, -29.0782f), Vector3(-13.5221f, 12.0805f, -26.6496f));
  data[18].mAabb = Aabb(Vector3(-27.6043f, -39.1879f, -19.5684f), Vector3(-20.6875f, -31.2338f, -15.0955f));
  data[19].mAabb = Aabb(Vector3(-9.15484f, 19.92f, -33.7612f), Vector3(-1.18917f, 24.7871f, -30.2789f));
  data[20].mAabb = Aabb(Vector3(-1.99298f, -35.1241f, 33.8984f), Vector3(-1.50995f, -31.5465f, 35.9494f));
  data[21].mAabb = Aabb(Vector3(3.96749f, 36.0247f, 26.2279f), Vector3(6.14254f, 37.0199f, 27.6167f));
  data[22].mAabb = Aabb(Vector3(32.38f, -6.36541f, 26.3247f), Vector3(38.8051f, -1.43932f, 26.7597f));
  data[23].mAabb = Aabb(Vector3(32.5229f, 27.4631f, 11.204f), Vector3(36.077f, 28.7168f, 12.6276f));
  data[24].mAabb = Aabb(Vector3(24.3387f, -41.1325f, -1.69611f), Vector3(29.208f, -36.9361f, -0.589847f));
  data[25].mAabb = Aabb(Vector3(-10.8624f, 7.41843f, 15.537f), Vector3(-6.59577f, 10.8562f, 23.0791f));
  data[26].mAabb = Aabb(Vector3(-18.0024f, -22.0994f, 20.8621f), Vector3(-16.664f, -17.7186f, 21.8695f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-38.2387f, 5.9228f, 8.84647f), Vector3(-4.30484f, 18.9121f, -38.0927f), Vector3(-4.30484f, -41.6861f, -54.8619f), Vector3(-38.2387f, -54.6754f, -7.92271f), Vector3(10.0368f, -20.3393f, 2.24415f), Vector3(13.0186f, -19.1979f, -1.88037f), Vector3(13.0186f, -27.6139f, -4.20931f), Vector3(10.0368f, -28.7553f, -0.0847933f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest13(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(30);
  data[0].mAabb = Aabb(Vector3(-31.1341f, -29.843f, 18.734f), Vector3(-26.2889f, -23.4207f, 20.371f));
  data[1].mAabb = Aabb(Vector3(-10.9317f, 14.2473f, -20.7185f), Vector3(-9.8185f, 20.0014f, -13.9721f));
  data[2].mAabb = Aabb(Vector3(-34.6804f, -11.1454f, -33.3679f), Vector3(-29.4275f, -9.15102f, -26.4823f));
  data[3].mAabb = Aabb(Vector3(-29.6816f, -6.85945f, 8.06726f), Vector3(-25.8853f, -5.61889f, 10.6668f));
  data[4].mAabb = Aabb(Vector3(-8.62705f, -21.5757f, -16.8907f), Vector3(-2.13328f, -19.8685f, -13.1115f));
  data[5].mAabb = Aabb(Vector3(-2.53182f, -27.1967f, -33.2806f), Vector3(3.32482f, -20.1971f, -30.7707f));
  data[6].mAabb = Aabb(Vector3(21.2617f, -9.73857f, -32.1015f), Vector3(29.2246f, -2.44088f, -25.7601f));
  data[7].mAabb = Aabb(Vector3(10.3314f, 22.9555f, -28.9787f), Vector3(13.2747f, 25.0291f, -20.9977f));
  data[8].mAabb = Aabb(Vector3(33.4155f, 1.52184f, 29.7346f), Vector3(34.0433f, 6.7527f, 35.8039f));
  data[9].mAabb = Aabb(Vector3(-8.02516f, 4.89732f, 22.0926f), Vector3(-6.32885f, 6.60036f, 22.9008f));
  data[10].mAabb = Aabb(Vector3(-8.39857f, 17.731f, -1.77335f), Vector3(-0.642341f, 24.7024f, 0.399602f));
  data[11].mAabb = Aabb(Vector3(24.2534f, 10.57f, 8.29898f), Vector3(27.2011f, 14.7462f, 11.0773f));
  data[12].mAabb = Aabb(Vector3(22.4302f, -23.4776f, 19.6596f), Vector3(29.3953f, -18.9982f, 24.5922f));
  data[13].mAabb = Aabb(Vector3(10.9862f, 26.332f, -30.7646f), Vector3(14.8611f, 28.7455f, -28.8006f));
  data[14].mAabb = Aabb(Vector3(-19.3347f, -36.4763f, 3.00855f), Vector3(-13.3247f, -32.3773f, 4.49543f));
  data[15].mAabb = Aabb(Vector3(-26.2039f, -28.7446f, -15.1888f), Vector3(-21.578f, -23.7948f, -12.3562f));
  data[16].mAabb = Aabb(Vector3(-11.5148f, 32.7413f, 25.1089f), Vector3(-10.1949f, 34.5392f, 31.4737f));
  data[17].mAabb = Aabb(Vector3(31.956f, -24.0074f, 7.60669f), Vector3(33.0773f, -16.8361f, 12.7842f));
  data[18].mAabb = Aabb(Vector3(15.7738f, 35.6682f, 2.57088f), Vector3(16.2721f, 37.7897f, 6.24054f));
  data[19].mAabb = Aabb(Vector3(-35.2535f, -17.9599f, -8.62314f), Vector3(-32.5026f, -16.0817f, -6.73594f));
  data[20].mAabb = Aabb(Vector3(-23.9383f, -18.3816f, 25.7477f), Vector3(-18.9451f, -13.7568f, 27.7831f));
  data[21].mAabb = Aabb(Vector3(20.472f, 31.5895f, 9.22854f), Vector3(23.9491f, 32.0171f, 14.9926f));
  data[22].mAabb = Aabb(Vector3(-38.7964f, -5.0959f, -9.55563f), Vector3(-33.8385f, 1.84853f, -7.89434f));
  data[23].mAabb = Aabb(Vector3(-32.4442f, 24.7115f, 24.6661f), Vector3(-26.5915f, 26.235f, 30.0683f));
  data[24].mAabb = Aabb(Vector3(-20.2452f, 11.4439f, 31.8448f), Vector3(-16.1355f, 12.9164f, 35.1833f));
  data[25].mAabb = Aabb(Vector3(-4.7895f, 17.3859f, -31.9708f), Vector3(-1.11612f, 17.9019f, -27.227f));
  data[26].mAabb = Aabb(Vector3(19.636f, -8.6114f, 34.3572f), Vector3(24.6361f, -1.41531f, 37.5417f));
  data[27].mAabb = Aabb(Vector3(3.371f, -7.22338f, -10.1453f), Vector3(10.9408f, -0.552404f, -9.4278f));
  data[28].mAabb = Aabb(Vector3(-32.3004f, -17.0226f, 26.0532f), Vector3(-29.3913f, -9.76014f, 30.2468f));
  data[29].mAabb = Aabb(Vector3(-10.9813f, -7.67795f, -8.48532f), Vector3(-6.92428f, -6.00576f, -0.504568f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-71.8733f, 83.8443f, 64.3284f), Vector3(-10.9549f, 95.2291f, -69.5853f), Vector3(-10.9549f, -50.6922f, -81.9909f), Vector3(-71.8733f, -62.0769f, 51.9228f), Vector3(48.0619f, 15.3944f, 35.1958f), Vector3(50.6278f, 15.8739f, 29.5554f), Vector3(50.6278f, 10.7881f, 29.1231f), Vector3(48.0619f, 10.3086f, 34.7634f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest14(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(53);
  data[0].mAabb = Aabb(Vector3(-29.5129f, -7.95798f, -12.6039f), Vector3(-22.2416f, -0.848862f, -10.5298f));
  data[1].mAabb = Aabb(Vector3(-33.8277f, -24.6815f, -11.6303f), Vector3(-32.7964f, -19.7078f, -10.3599f));
  data[2].mAabb = Aabb(Vector3(-33.5807f, -13.7296f, -5.48548f), Vector3(-27.0334f, -9.83978f, 0.495013f));
  data[3].mAabb = Aabb(Vector3(-31.6826f, 39.5049f, -4.88086f), Vector3(-24.7524f, 41.1233f, 1.47584f));
  data[4].mAabb = Aabb(Vector3(-18.8895f, -15.3257f, 18.1109f), Vector3(-14.7056f, -11.342f, 24.0626f));
  data[5].mAabb = Aabb(Vector3(1.3462f, -18.368f, -7.83231f), Vector3(3.59338f, -17.4721f, -1.2606f));
  data[6].mAabb = Aabb(Vector3(11.6778f, -11.3942f, -22.1781f), Vector3(14.7982f, -10.1699f, -21.0512f));
  data[7].mAabb = Aabb(Vector3(-5.65104f, 30.852f, 9.01677f), Vector3(0.145293f, 34.2863f, 16.4365f));
  data[8].mAabb = Aabb(Vector3(26.3575f, 20.0789f, 18.0662f), Vector3(27.0052f, 25.8204f, 22.5833f));
  data[9].mAabb = Aabb(Vector3(10.3075f, 1.79911f, -17.5476f), Vector3(11.5881f, 5.6657f, -15.9753f));
  data[10].mAabb = Aabb(Vector3(28.6147f, -3.30082f, -41.0283f), Vector3(34.2053f, -0.443871f, -35.2628f));
  data[11].mAabb = Aabb(Vector3(-6.47212f, -6.81243f, -35.684f), Vector3(-3.83528f, -3.96453f, -27.8099f));
  data[12].mAabb = Aabb(Vector3(11.2682f, -30.442f, -16.867f), Vector3(13.1608f, -26.0579f, -10.5673f));
  data[13].mAabb = Aabb(Vector3(11.7776f, -4.60946f, 31.0791f), Vector3(13.7884f, 1.76672f, 35.1001f));
  data[14].mAabb = Aabb(Vector3(-2.38311f, -34.5398f, -27.4526f), Vector3(-0.572448f, -28.6482f, -25.262f));
  data[15].mAabb = Aabb(Vector3(-5.49113f, -3.76365f, -28.1031f), Vector3(0.784856f, -1.07463f, -25.5765f));
  data[16].mAabb = Aabb(Vector3(21.3969f, 5.04297f, -26.4131f), Vector3(22.733f, 6.73813f, -19.7841f));
  data[17].mAabb = Aabb(Vector3(13.1353f, -17.6133f, -35.1585f), Vector3(20.1426f, -15.6215f, -28.5721f));
  data[18].mAabb = Aabb(Vector3(32.892f, -1.20947f, 2.33395f), Vector3(36.741f, 6.72883f, 4.86455f));
  data[19].mAabb = Aabb(Vector3(-16.4039f, 19.3758f, 13.9772f), Vector3(-10.1811f, 27.0571f, 18.2309f));
  data[20].mAabb = Aabb(Vector3(13.7036f, -42.0239f, 8.12114f), Vector3(14.3286f, -39.6988f, 8.90917f));
  data[21].mAabb = Aabb(Vector3(30.4447f, 17.3717f, 21.7457f), Vector3(34.0518f, 21.7005f, 25.2885f));
  data[22].mAabb = Aabb(Vector3(17.7953f, -40.4371f, 9.86721f), Vector3(23.5976f, -35.967f, 13.3409f));
  data[23].mAabb = Aabb(Vector3(-39.6465f, -14.0336f, -12.8052f), Vector3(-32.9219f, -8.14774f, -11.9406f));
  data[24].mAabb = Aabb(Vector3(30.3811f, 3.30094f, 0.501852f), Vector3(34.4037f, 11.1235f, 2.41573f));
  data[25].mAabb = Aabb(Vector3(-42.2979f, 18.386f, 9.39785f), Vector3(-34.3561f, 24.5555f, 16.4114f));
  data[26].mAabb = Aabb(Vector3(-16.0519f, -33.9117f, -29.7887f), Vector3(-8.89132f, -31.5799f, -23.2453f));
  data[27].mAabb = Aabb(Vector3(1.02117f, -35.7033f, 23.0173f), Vector3(5.78676f, -31.4043f, 30.934f));
  data[28].mAabb = Aabb(Vector3(23.0942f, -6.16938f, 30.9571f), Vector3(25.443f, -2.15226f, 33.8067f));
  data[29].mAabb = Aabb(Vector3(-18.5007f, -23.2323f, 2.34278f), Vector3(-11.1877f, -15.2972f, 9.49921f));
  data[30].mAabb = Aabb(Vector3(33.6012f, -0.253608f, -19.3788f), Vector3(36.5214f, 3.54363f, -14.2519f));
  data[31].mAabb = Aabb(Vector3(-4.08977f, 19.1977f, 15.7654f), Vector3(-0.867978f, 23.7937f, 20.4444f));
  data[32].mAabb = Aabb(Vector3(-11.6381f, -11.6927f, 42.7737f), Vector3(-4.36937f, -9.1394f, 46.3188f));
  data[33].mAabb = Aabb(Vector3(3.28131f, 10.2333f, -9.88747f), Vector3(9.40143f, 11.7371f, -4.38292f));
  data[34].mAabb = Aabb(Vector3(-24.3423f, -33.8534f, 7.18777f), Vector3(-23.0927f, -27.0767f, 13.8386f));
  data[35].mAabb = Aabb(Vector3(-15.6472f, 21.4848f, 34.5693f), Vector3(-9.6869f, 24.1121f, 38.6154f));
  data[36].mAabb = Aabb(Vector3(-30.2765f, -3.18558f, -40.7931f), Vector3(-23.5457f, 4.18679f, -35.5834f));
  data[37].mAabb = Aabb(Vector3(6.90269f, -33.2795f, 29.3281f), Vector3(7.43861f, -32.6956f, 36.7833f));
  data[38].mAabb = Aabb(Vector3(-23.0688f, -21.1972f, 17.8833f), Vector3(-15.1671f, -15.2221f, 24.1904f));
  data[39].mAabb = Aabb(Vector3(-32.1382f, -16.1963f, -11.9423f), Vector3(-29.6468f, -12.133f, -6.33991f));
  data[40].mAabb = Aabb(Vector3(7.62184f, 6.4845f, -27.149f), Vector3(8.78029f, 11.4296f, -25.5362f));
  data[41].mAabb = Aabb(Vector3(-24.043f, -18.9959f, -30.9709f), Vector3(-20.5088f, -15.3635f, -26.6623f));
  data[42].mAabb = Aabb(Vector3(10.9356f, -10.7021f, 35.3369f), Vector3(18.7136f, -8.10166f, 38.8676f));
  data[43].mAabb = Aabb(Vector3(-14.805f, 8.26611f, 8.00364f), Vector3(-11.8347f, 11.2555f, 14.6403f));
  data[44].mAabb = Aabb(Vector3(3.27954f, 15.2849f, -16.496f), Vector3(9.66616f, 16.3401f, -10.9594f));
  data[45].mAabb = Aabb(Vector3(18.586f, 8.06751f, 3.87555f), Vector3(24.8509f, 11.392f, 9.53295f));
  data[46].mAabb = Aabb(Vector3(-16.5471f, 10.6813f, -28.9707f), Vector3(-12.1025f, 18.1019f, -28.5452f));
  data[47].mAabb = Aabb(Vector3(-18.194f, -22.799f, -30.0147f), Vector3(-16.2451f, -15.7467f, -27.3103f));
  data[48].mAabb = Aabb(Vector3(-11.3241f, 17.0048f, -45.3858f), Vector3(-10.7722f, 22.337f, -41.4098f));
  data[49].mAabb = Aabb(Vector3(30.2672f, 19.9432f, 3.45718f), Vector3(35.2485f, 24.5195f, 3.98173f));
  data[50].mAabb = Aabb(Vector3(12.0391f, -29.9864f, -30.0099f), Vector3(15.6327f, -23.215f, -25.0681f));
  data[51].mAabb = Aabb(Vector3(9.95287f, 33.7466f, 4.60843f), Vector3(17.63f, 36.5004f, 5.15246f));
  data[52].mAabb = Aabb(Vector3(-27.2536f, 23.2917f, 13.2355f), Vector3(-22.322f, 24.825f, 14.9272f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-77.7404f, 56.4963f, 5.61071f), Vector3(-12.2864f, -4.60312f, -84.701f), Vector3(-12.2864f, -110.519f, -13.0446f), Vector3(-77.7404f, -49.4198f, 77.2671f), Vector3(29.5611f, 3.95773f, 34.6952f), Vector3(33.4467f, 0.330643f, 29.334f), Vector3(33.4467f, -6.50461f, 33.9583f), Vector3(29.5611f, -2.87752f, 39.3195f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest15(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(28);
  data[0].mAabb = Aabb(Vector3(-5.6302f, 6.72067f, -17.6436f), Vector3(-1.92969f, 14.4743f, -12.3457f));
  data[1].mAabb = Aabb(Vector3(41.8223f, 6.28742f, -7.73045f), Vector3(42.5036f, 8.61995f, -5.35339f));
  data[2].mAabb = Aabb(Vector3(-9.13481f, -11.1681f, -20.6517f), Vector3(-6.81829f, -5.45429f, -18.4611f));
  data[3].mAabb = Aabb(Vector3(23.1589f, 2.48712f, -31.3444f), Vector3(26.6432f, 9.66883f, -28.7971f));
  data[4].mAabb = Aabb(Vector3(-27.0751f, -34.279f, 17.7872f), Vector3(-25.5868f, -26.3495f, 20.7722f));
  data[5].mAabb = Aabb(Vector3(-37.9965f, 4.58391f, -23.9923f), Vector3(-35.4056f, 9.21404f, -17.4665f));
  data[6].mAabb = Aabb(Vector3(-16.4787f, -13.9656f, 23.8832f), Vector3(-14.0116f, -6.17222f, 25.7484f));
  data[7].mAabb = Aabb(Vector3(-0.605132f, 41.5522f, 19.7701f), Vector3(4.93096f, 46.071f, 25.0255f));
  data[8].mAabb = Aabb(Vector3(-29.9534f, -13.1493f, 32.0522f), Vector3(-25.016f, -5.89178f, 33.4094f));
  data[9].mAabb = Aabb(Vector3(24.9345f, 4.41634f, 32.0325f), Vector3(31.9601f, 7.87401f, 34.151f));
  data[10].mAabb = Aabb(Vector3(8.54443f, -20.2927f, -45.265f), Vector3(15.1597f, -18.4034f, -38.4511f));
  data[11].mAabb = Aabb(Vector3(-31.9938f, -4.41077f, 11.9775f), Vector3(-30.0015f, 1.10283f, 18.9034f));
  data[12].mAabb = Aabb(Vector3(37.8049f, 4.41035f, 15.138f), Vector3(44.2282f, 5.20511f, 22.6324f));
  data[13].mAabb = Aabb(Vector3(8.95017f, 16.3988f, -9.54922f), Vector3(16.2822f, 18.0443f, -7.89512f));
  data[14].mAabb = Aabb(Vector3(-4.87498f, 19.5527f, -44.0502f), Vector3(2.33178f, 21.8741f, -37.3453f));
  data[15].mAabb = Aabb(Vector3(9.13565f, -33.2511f, -34.9544f), Vector3(15.7241f, -27.7454f, -31.8516f));
  data[16].mAabb = Aabb(Vector3(-27.8462f, 34.486f, -25.855f), Vector3(-25.2945f, 36.7411f, -18.1969f));
  data[17].mAabb = Aabb(Vector3(-27.7706f, -16.6501f, -24.7431f), Vector3(-26.1257f, -12.8403f, -22.9194f));
  data[18].mAabb = Aabb(Vector3(-5.07249f, 10.2036f, 17.098f), Vector3(-0.605411f, 11.2254f, 19.4157f));
  data[19].mAabb = Aabb(Vector3(34.1382f, 4.52675f, -5.10481f), Vector3(36.2269f, 7.02395f, -3.81022f));
  data[20].mAabb = Aabb(Vector3(-3.95832f, -23.698f, -43.8644f), Vector3(1.33586f, -20.6896f, -37.176f));
  data[21].mAabb = Aabb(Vector3(-31.3853f, 4.6714f, -8.19011f), Vector3(-24.2776f, 8.76251f, -3.09703f));
  data[22].mAabb = Aabb(Vector3(3.19044f, 33.3686f, 25.0989f), Vector3(9.79856f, 38.281f, 32.5133f));
  data[23].mAabb = Aabb(Vector3(-9.15827f, 41.365f, 16.3033f), Vector3(-8.57573f, 47.631f, 17.5367f));
  data[24].mAabb = Aabb(Vector3(-33.4224f, 30.4078f, 3.47068f), Vector3(-32.5544f, 34.6425f, 11.0196f));
  data[25].mAabb = Aabb(Vector3(25.7842f, -4.91711f, 26.3345f), Vector3(32.4258f, -3.47268f, 30.5708f));
  data[26].mAabb = Aabb(Vector3(27.7849f, 36.2676f, 7.24726f), Vector3(28.3714f, 38.2979f, 13.2053f));
  data[27].mAabb = Aabb(Vector3(16.074f, -10.3478f, 21.5923f), Vector3(22.0037f, -3.71931f, 28.0738f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(0.647476f, 64.1223f, -4.98807f), Vector3(-52.6825f, 7.97602f, -33.6299f), Vector3(-52.6825f, -28.9322f, 38.7209f), Vector3(0.647476f, 27.214f, 67.3627f), Vector3(33.9245f, -22.8764f, -6.4959f), Vector3(29.9307f, -27.0811f, -8.64082f), Vector3(29.9307f, -29.2804f, -4.32947f), Vector3(33.9245f, -25.0758f, -2.18454f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest16(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(58);
  data[0].mAabb = Aabb(Vector3(-8.37952f, 19.4971f, 36.9167f), Vector3(-7.62303f, 26.9089f, 37.7226f));
  data[1].mAabb = Aabb(Vector3(21.1346f, 1.78157f, 4.88851f), Vector3(27.0096f, 9.33578f, 12.1449f));
  data[2].mAabb = Aabb(Vector3(12.5397f, 32.2431f, -31.6689f), Vector3(19.5718f, 34.8069f, -24.8418f));
  data[3].mAabb = Aabb(Vector3(-1.87875f, 42.5554f, -19.7966f), Vector3(3.99226f, 48.3316f, -16.7541f));
  data[4].mAabb = Aabb(Vector3(16.227f, -15.9108f, 2.08245f), Vector3(24.0707f, -14.3079f, 7.77139f));
  data[5].mAabb = Aabb(Vector3(-29.302f, -21.5283f, 32.5744f), Vector3(-22.1333f, -15.9366f, 36.0128f));
  data[6].mAabb = Aabb(Vector3(-25.5763f, 32.941f, 12.0428f), Vector3(-20.4633f, 37.7426f, 17.1039f));
  data[7].mAabb = Aabb(Vector3(-8.50479f, 2.35907f, -50.5026f), Vector3(-2.1583f, 5.50525f, -45.1337f));
  data[8].mAabb = Aabb(Vector3(-19.2303f, 0.330411f, 0.188756f), Vector3(-11.9245f, 6.72863f, 5.31246f));
  data[9].mAabb = Aabb(Vector3(-5.29526f, 13.9634f, 29.634f), Vector3(-3.67201f, 20.5474f, 32.2297f));
  data[10].mAabb = Aabb(Vector3(-47.8507f, -6.15697f, 4.49278f), Vector3(-47.1775f, 1.56145f, 8.3487f));
  data[11].mAabb = Aabb(Vector3(-37.0085f, -30.7202f, -11.9046f), Vector3(-30.0889f, -26.4022f, -7.94616f));
  data[12].mAabb = Aabb(Vector3(-16.3142f, 22.9596f, -26.2927f), Vector3(-14.7547f, 30.4702f, -24.0152f));
  data[13].mAabb = Aabb(Vector3(21.1541f, -20.5018f, 4.16351f), Vector3(22.6625f, -15.5788f, 8.10942f));
  data[14].mAabb = Aabb(Vector3(31.2967f, 16.0501f, -19.393f), Vector3(33.6744f, 23.3095f, -16.6333f));
  data[15].mAabb = Aabb(Vector3(17.1647f, -6.85796f, -41.607f), Vector3(19.3402f, -0.947277f, -34.5842f));
  data[16].mAabb = Aabb(Vector3(12.9931f, -14.3509f, -0.469629f), Vector3(20.6707f, -9.71306f, 4.44695f));
  data[17].mAabb = Aabb(Vector3(-10.9006f, -39.0881f, -17.3142f), Vector3(-3.10588f, -35.8389f, -11.5988f));
  data[18].mAabb = Aabb(Vector3(14.1845f, -17.3322f, -14.5723f), Vector3(17.4939f, -12.0686f, -7.18368f));
  data[19].mAabb = Aabb(Vector3(2.68601f, -7.98921f, -51.1002f), Vector3(5.91963f, -2.69434f, -44.8291f));
  data[20].mAabb = Aabb(Vector3(32.8003f, 12.2058f, 0.293515f), Vector3(34.7017f, 15.3242f, 5.12544f));
  data[21].mAabb = Aabb(Vector3(-4.06943f, -30.427f, 28.3561f), Vector3(-3.56389f, -27.034f, 30.2618f));
  data[22].mAabb = Aabb(Vector3(-11.5748f, -6.97276f, -7.30751f), Vector3(-3.91504f, -1.57629f, -3.68005f));
  data[23].mAabb = Aabb(Vector3(-19.7112f, -26.0201f, -27.4816f), Vector3(-12.0389f, -18.8082f, -24.8316f));
  data[24].mAabb = Aabb(Vector3(-0.784545f, -21.8511f, -17.6121f), Vector3(4.92203f, -15.3103f, -9.9953f));
  data[25].mAabb = Aabb(Vector3(-12.618f, -42.7426f, 2.54178f), Vector3(-10.3994f, -36.8693f, 9.14874f));
  data[26].mAabb = Aabb(Vector3(-18.1869f, 14.4962f, 30.866f), Vector3(-16.8206f, 16.9299f, 35.85f));
  data[27].mAabb = Aabb(Vector3(-43.9596f, 10.2096f, -15.3757f), Vector3(-39.3536f, 11.153f, -8.94221f));
  data[28].mAabb = Aabb(Vector3(-7.46742f, -29.2868f, 32.8557f), Vector3(-5.65212f, -26.5864f, 39.2481f));
  data[29].mAabb = Aabb(Vector3(-27.7107f, -26.7247f, -18.4475f), Vector3(-25.7931f, -23.9833f, -11.3871f));
  data[30].mAabb = Aabb(Vector3(-2.76496f, -30.8323f, -3.60752f), Vector3(0.738407f, -27.9401f, 2.28089f));
  data[31].mAabb = Aabb(Vector3(22.3739f, 3.67129f, -28.0668f), Vector3(29.6862f, 10.5053f, -24.0073f));
  data[32].mAabb = Aabb(Vector3(0.364125f, 2.943f, 14.6937f), Vector3(7.32712f, 6.65047f, 20.5798f));
  data[33].mAabb = Aabb(Vector3(11.1525f, 8.28196f, 23.6459f), Vector3(16.3455f, 10.0581f, 28.7202f));
  data[34].mAabb = Aabb(Vector3(1.0284f, 32.4706f, 11.8683f), Vector3(1.84752f, 33.4857f, 12.4137f));
  data[35].mAabb = Aabb(Vector3(4.4552f, -14.5731f, -49.4936f), Vector3(11.4637f, -12.4143f, -43.771f));
  data[36].mAabb = Aabb(Vector3(4.88621f, -37.4352f, -30.6379f), Vector3(9.89557f, -33.99f, -24.9822f));
  data[37].mAabb = Aabb(Vector3(31.9184f, -7.76048f, -10.6255f), Vector3(37.5134f, -1.73081f, -8.23781f));
  data[38].mAabb = Aabb(Vector3(-41.2035f, -23.4563f, -20.8287f), Vector3(-40.1764f, -22.1531f, -14.2927f));
  data[39].mAabb = Aabb(Vector3(14.5028f, 9.75447f, -6.91222f), Vector3(21.88f, 17.3003f, -0.402667f));
  data[40].mAabb = Aabb(Vector3(24.861f, -21.7894f, 11.3451f), Vector3(31.2657f, -17.4118f, 14.6128f));
  data[41].mAabb = Aabb(Vector3(39.6204f, 22.8625f, -1.57592f), Vector3(45.9539f, 24.7854f, 4.40782f));
  data[42].mAabb = Aabb(Vector3(-14.1892f, -38.0058f, 22.6777f), Vector3(-6.94622f, -34.0084f, 24.6463f));
  data[43].mAabb = Aabb(Vector3(8.2803f, 37.7987f, -23.702f), Vector3(11.3242f, 44.9433f, -18.2118f));
  data[44].mAabb = Aabb(Vector3(-40.3857f, -3.44548f, -1.71984f), Vector3(-34.3827f, 3.86125f, 0.503448f));
  data[45].mAabb = Aabb(Vector3(28.6267f, -1.11733f, -4.20931f), Vector3(29.7575f, 0.372794f, 3.5446f));
  data[46].mAabb = Aabb(Vector3(34.8519f, 8.13927f, 15.3074f), Vector3(39.6263f, 14.8525f, 19.4885f));
  data[47].mAabb = Aabb(Vector3(28.9748f, 5.51137f, -21.0317f), Vector3(29.7784f, 12.0599f, -14.2747f));
  data[48].mAabb = Aabb(Vector3(-25.5769f, -17.3891f, 40.6125f), Vector3(-19.1509f, -15.3084f, 42.4473f));
  data[49].mAabb = Aabb(Vector3(31.5484f, 18.5995f, 17.8469f), Vector3(36.9718f, 20.5748f, 24.7594f));
  data[50].mAabb = Aabb(Vector3(27.7102f, -24.1254f, 21.8322f), Vector3(33.571f, -17.104f, 23.0243f));
  data[51].mAabb = Aabb(Vector3(-52.5312f, -4.72017f, 0.152236f), Vector3(-44.9348f, -4.25731f, 2.56409f));
  data[52].mAabb = Aabb(Vector3(-11.1034f, -39.1965f, -22.6103f), Vector3(-10.5258f, -34.3437f, -15.5577f));
  data[53].mAabb = Aabb(Vector3(-37.8775f, -11.6018f, 4.27998f), Vector3(-36.7659f, -4.42522f, 11.0405f));
  data[54].mAabb = Aabb(Vector3(33.8118f, -20.5971f, 11.9248f), Vector3(41.7735f, -14.6139f, 13.8273f));
  data[55].mAabb = Aabb(Vector3(5.37511f, 27.099f, -21.6821f), Vector3(5.80944f, 29.2265f, -15.7735f));
  data[56].mAabb = Aabb(Vector3(-8.80172f, 8.52073f, -4.17857f), Vector3(-4.29382f, 13.6076f, 0.862568f));
  data[57].mAabb = Aabb(Vector3(-18.4644f, -14.2497f, 4.17954f), Vector3(-10.8f, -10.108f, 5.17888f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-21.8489f, -24.5096f, -12.0373f), Vector3(-32.6508f, -22.0273f, 43.9401f), Vector3(-32.6508f, 35.7227f, 41.3791f), Vector3(-21.8489f, 33.2403f, -14.5982f), Vector3(9.21278f, 1.57735f, 18.0101f), Vector3(7.77346f, 1.90812f, 25.469f), Vector3(7.77346f, 10.2462f, 25.0992f), Vector3(9.21278f, 9.91548f, 17.6404f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest17(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(37);
  data[0].mAabb = Aabb(Vector3(-12.9044f, 7.70975f, -46.3491f), Vector3(-10.7857f, 11.5362f, -41.632f));
  data[1].mAabb = Aabb(Vector3(24.588f, -18.1085f, -38.3554f), Vector3(28.5826f, -12.1414f, -36.7421f));
  data[2].mAabb = Aabb(Vector3(16.7128f, 12.4129f, 23.597f), Vector3(18.8032f, 15.3436f, 27.3988f));
  data[3].mAabb = Aabb(Vector3(20.6607f, 14.2659f, -20.8426f), Vector3(24.5896f, 18.1329f, -12.9404f));
  data[4].mAabb = Aabb(Vector3(33.7261f, 0.522864f, 20.0954f), Vector3(35.1181f, 4.19068f, 25.1504f));
  data[5].mAabb = Aabb(Vector3(-14.6051f, -36.5343f, 22.7003f), Vector3(-9.29194f, -32.8082f, 23.7252f));
  data[6].mAabb = Aabb(Vector3(-10.5988f, 21.0158f, -25.5434f), Vector3(-7.99049f, 24.1364f, -19.022f));
  data[7].mAabb = Aabb(Vector3(0.0320146f, -41.7195f, -1.48827f), Vector3(6.25558f, -39.4327f, 4.9517f));
  data[8].mAabb = Aabb(Vector3(-28.2997f, 18.1961f, 29.8171f), Vector3(-22.1759f, 25.6002f, 32.0645f));
  data[9].mAabb = Aabb(Vector3(-35.5978f, 25.7583f, -22.6446f), Vector3(-30.5506f, 32.5773f, -16.1987f));
  data[10].mAabb = Aabb(Vector3(-16.3748f, 17.5333f, -43.4083f), Vector3(-8.41097f, 24.3303f, -36.8732f));
  data[11].mAabb = Aabb(Vector3(19.4966f, 27.9936f, -15.6602f), Vector3(19.9325f, 31.8987f, -9.38588f));
  data[12].mAabb = Aabb(Vector3(14.1507f, -44.7853f, 7.14852f), Vector3(20.7045f, -37.075f, 13.6333f));
  data[13].mAabb = Aabb(Vector3(-19.6116f, 12.3796f, 20.3942f), Vector3(-15.2712f, 15.3757f, 25.4701f));
  data[14].mAabb = Aabb(Vector3(-5.41348f, -24.8003f, -34.2197f), Vector3(-0.548852f, -22.294f, -32.0282f));
  data[15].mAabb = Aabb(Vector3(42.8595f, -17.8466f, -7.19115f), Vector3(46.1381f, -10.6023f, -4.52533f));
  data[16].mAabb = Aabb(Vector3(11.8236f, -13.1266f, 10.1858f), Vector3(17.6243f, -7.94927f, 11.5428f));
  data[17].mAabb = Aabb(Vector3(7.51607f, -1.45019f, -3.96608f), Vector3(11.9284f, 2.0824f, -2.07493f));
  data[18].mAabb = Aabb(Vector3(-2.34779f, 5.22676f, -28.6839f), Vector3(0.152665f, 8.72665f, -22.6078f));
  data[19].mAabb = Aabb(Vector3(-18.1627f, -16.9596f, 8.72997f), Vector3(-15.3769f, -10.3522f, 9.41038f));
  data[20].mAabb = Aabb(Vector3(5.05004f, -30.252f, 20.7799f), Vector3(12.0555f, -28.9758f, 23.7447f));
  data[21].mAabb = Aabb(Vector3(-36.4796f, 25.0676f, -7.23992f), Vector3(-30.1893f, 31.0973f, -5.19987f));
  data[22].mAabb = Aabb(Vector3(-24.0589f, -2.37399f, -31.9599f), Vector3(-19.0957f, -1.10073f, -29.9678f));
  data[23].mAabb = Aabb(Vector3(-1.11936f, 14.1305f, -19.908f), Vector3(6.80363f, 16.9869f, -14.2483f));
  data[24].mAabb = Aabb(Vector3(31.1384f, 6.01545f, 24.1973f), Vector3(32.5661f, 9.68929f, 30.1713f));
  data[25].mAabb = Aabb(Vector3(2.49486f, 32.3786f, 7.40248f), Vector3(6.38696f, 39.9451f, 9.18972f));
  data[26].mAabb = Aabb(Vector3(32.9543f, -23.7924f, -20.6726f), Vector3(40.3712f, -16.3383f, -18.9772f));
  data[27].mAabb = Aabb(Vector3(26.3413f, -11.5333f, -36.713f), Vector3(34.2851f, -7.79524f, -29.6726f));
  data[28].mAabb = Aabb(Vector3(39.9927f, 11.2323f, -17.0154f), Vector3(43.0842f, 17.1265f, -10.3906f));
  data[29].mAabb = Aabb(Vector3(46.8176f, -3.6052f, 1.29439f), Vector3(47.6769f, 3.79546f, 4.50435f));
  data[30].mAabb = Aabb(Vector3(-11.2942f, -34.291f, 14.6529f), Vector3(-10.476f, -32.6494f, 18.4288f));
  data[31].mAabb = Aabb(Vector3(24.3665f, 16.8896f, 18.1005f), Vector3(25.4649f, 23.0494f, 19.2267f));
  data[32].mAabb = Aabb(Vector3(2.18f, 34.5807f, -19.0137f), Vector3(2.95899f, 36.715f, -15.1237f));
  data[33].mAabb = Aabb(Vector3(17.8087f, -37.9039f, -20.2607f), Vector3(23.3487f, -31.0826f, -13.2177f));
  data[34].mAabb = Aabb(Vector3(3.83746f, 20.601f, -29.0066f), Vector3(11.8252f, 26.1981f, -22.3155f));
  data[35].mAabb = Aabb(Vector3(12.6624f, -22.1367f, -33.2845f), Vector3(14.1532f, -16.1198f, -26.0773f));
  data[36].mAabb = Aabb(Vector3(-3.1368f, -11.7537f, 35.2982f), Vector3(-0.958976f, -4.9257f, 36.8811f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(66.9477f, 71.0588f, 11.0056f), Vector3(-33.9126f, 43.042f, 70.3163f), Vector3(-2.02836f, -71.7409f, 70.3163f), Vector3(98.8319f, -43.724f, 11.0056f), Vector3(5.35575f, -4.39281f, -15.3427f), Vector3(-1.25498f, -6.22913f, -11.4552f), Vector3(0.538383f, -12.6852f, -11.4552f), Vector3(7.14911f, -10.8489f, -15.3427f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest18(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(26);
  data[0].mAabb = Aabb(Vector3(-22.3929f, 0.618171f, 42.7983f), Vector3(-14.4163f, 1.90558f, 47.9682f));
  data[1].mAabb = Aabb(Vector3(20.8914f, -0.26199f, -3.37101f), Vector3(22.4654f, 2.71302f, -0.411077f));
  data[2].mAabb = Aabb(Vector3(5.55954f, -4.98241f, -40.3613f), Vector3(11.9798f, -1.87056f, -33.8696f));
  data[3].mAabb = Aabb(Vector3(12.1773f, -12.8306f, 33.9645f), Vector3(18.9877f, -7.5346f, 39.8063f));
  data[4].mAabb = Aabb(Vector3(18.898f, 1.15138f, 17.3155f), Vector3(19.3187f, 3.42477f, 25.2846f));
  data[5].mAabb = Aabb(Vector3(-20.8861f, 7.0284f, 12.8438f), Vector3(-14.4208f, 9.53047f, 14.3728f));
  data[6].mAabb = Aabb(Vector3(26.037f, 7.85651f, 22.1122f), Vector3(32.2302f, 12.2331f, 23.1494f));
  data[7].mAabb = Aabb(Vector3(18.4012f, 8.56719f, 24.5008f), Vector3(21.9612f, 14.8903f, 27.1589f));
  data[8].mAabb = Aabb(Vector3(-48.1832f, 10.0921f, -1.93442f), Vector3(-43.9439f, 12.8539f, 5.39921f));
  data[9].mAabb = Aabb(Vector3(-15.1945f, 29.9957f, -23.7988f), Vector3(-14.5862f, 35.1278f, -16.8347f));
  data[10].mAabb = Aabb(Vector3(11.6716f, 18.2141f, 29.4388f), Vector3(16.9669f, 22.1307f, 30.953f));
  data[11].mAabb = Aabb(Vector3(23.3529f, -36.51f, -1.79534f), Vector3(29.6068f, -28.8259f, 0.129204f));
  data[12].mAabb = Aabb(Vector3(9.89907f, 18.1038f, -29.1588f), Vector3(14.3868f, 18.7553f, -23.1834f));
  data[13].mAabb = Aabb(Vector3(-22.4209f, 37.4348f, 4.49965f), Vector3(-17.3693f, 44.8572f, 6.98549f));
  data[14].mAabb = Aabb(Vector3(-6.57506f, -42.4785f, -26.8341f), Vector3(-5.45882f, -35.6739f, -25.8445f));
  data[15].mAabb = Aabb(Vector3(-33.043f, -22.5704f, -28.4115f), Vector3(-31.7394f, -16.7514f, -25.5198f));
  data[16].mAabb = Aabb(Vector3(-31.8444f, -19.2937f, 13.2835f), Vector3(-24.9712f, -14.26f, 17.6615f));
  data[17].mAabb = Aabb(Vector3(10.0697f, -10.0922f, -41.0148f), Vector3(10.935f, -8.68005f, -39.9927f));
  data[18].mAabb = Aabb(Vector3(-31.8246f, -23.0409f, -32.0875f), Vector3(-24.7143f, -17.9758f, -29.8677f));
  data[19].mAabb = Aabb(Vector3(18.427f, 6.60859f, -24.0973f), Vector3(22.2544f, 13.611f, -17.4409f));
  data[20].mAabb = Aabb(Vector3(-38.1581f, -11.2228f, 24.9559f), Vector3(-34.9887f, -8.07203f, 26.0777f));
  data[21].mAabb = Aabb(Vector3(11.0687f, 5.9136f, 30.9138f), Vector3(12.264f, 7.58092f, 32.9863f));
  data[22].mAabb = Aabb(Vector3(15.2376f, 34.6229f, -7.73331f), Vector3(16.824f, 36.7328f, -2.58038f));
  data[23].mAabb = Aabb(Vector3(44.9997f, -8.39074f, -10.2396f), Vector3(47.8729f, -6.72667f, -8.24128f));
  data[24].mAabb = Aabb(Vector3(-41.8031f, 10.8577f, -5.93136f), Vector3(-39.622f, 15.162f, -0.370215f));
  data[25].mAabb = Aabb(Vector3(-33.2031f, -23.7361f, 10.9812f), Vector3(-26.7397f, -18.8615f, 17.5021f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-18.4458f, 25.1694f, 54.4369f), Vector3(14.4977f, 57.6067f, -1.37034f), Vector3(14.4977f, -5.49803f, -38.0492f), Vector3(-18.4458f, -37.9353f, 17.758f), Vector3(34.9773f, 1.84947f, 30.8366f), Vector3(38.8083f, 5.62165f, 24.3467f), Vector3(38.8083f, -2.11419f, 19.8503f), Vector3(34.9773f, -5.88637f, 26.3402f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest19(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(33);
  data[0].mAabb = Aabb(Vector3(22.1418f, -13.7991f, -6.54155f), Vector3(24.8269f, -9.14249f, -5.42995f));
  data[1].mAabb = Aabb(Vector3(-15.0663f, -20.6222f, -20.1097f), Vector3(-12.4141f, -18.3042f, -16.5219f));
  data[2].mAabb = Aabb(Vector3(27.7255f, -26.3701f, -22.6863f), Vector3(34.7773f, -21.6904f, -19.1096f));
  data[3].mAabb = Aabb(Vector3(-7.94337f, -12.7415f, 41.774f), Vector3(-2.2934f, -5.34643f, 44.6651f));
  data[4].mAabb = Aabb(Vector3(24.1591f, -42.8803f, -6.81119f), Vector3(26.0618f, -37.1266f, 0.904214f));
  data[5].mAabb = Aabb(Vector3(-2.47006f, -33.3439f, -14.7529f), Vector3(1.34619f, -25.4058f, -13.8297f));
  data[6].mAabb = Aabb(Vector3(2.08337f, -44.9511f, -20.3586f), Vector3(3.8669f, -37.1608f, -19.4117f));
  data[7].mAabb = Aabb(Vector3(-37.6833f, 4.67683f, -20.9696f), Vector3(-30.0776f, 8.84262f, -16.0948f));
  data[8].mAabb = Aabb(Vector3(-13.4882f, 1.28237f, -9.34355f), Vector3(-12.6874f, 3.53418f, -1.60425f));
  data[9].mAabb = Aabb(Vector3(26.2465f, 24.7524f, 14.558f), Vector3(27.2108f, 32.2349f, 17.9632f));
  data[10].mAabb = Aabb(Vector3(-37.7633f, -1.7629f, 23.7792f), Vector3(-30.073f, 1.03444f, 24.2938f));
  data[11].mAabb = Aabb(Vector3(23.2776f, -22.4001f, -35.7101f), Vector3(25.0666f, -19.8484f, -28.4449f));
  data[12].mAabb = Aabb(Vector3(-39.8473f, 14.5823f, -5.5235f), Vector3(-36.492f, 19.1002f, -3.52589f));
  data[13].mAabb = Aabb(Vector3(-0.389982f, -13.4355f, 27.6807f), Vector3(3.02038f, -5.5422f, 34.8406f));
  data[14].mAabb = Aabb(Vector3(9.64457f, 43.9176f, -18.3693f), Vector3(14.5837f, 47.4871f, -12.0054f));
  data[15].mAabb = Aabb(Vector3(-45.7399f, 8.82101f, 16.0256f), Vector3(-39.8714f, 12.7289f, 18.5486f));
  data[16].mAabb = Aabb(Vector3(-45.4614f, -12.2944f, 19.5345f), Vector3(-39.1691f, -4.67521f, 23.4876f));
  data[17].mAabb = Aabb(Vector3(15.2486f, 9.91641f, 29.4336f), Vector3(22.7886f, 12.5621f, 37.2956f));
  data[18].mAabb = Aabb(Vector3(19.1793f, -6.6386f, -14.616f), Vector3(20.88f, -4.92466f, -11.7043f));
  data[19].mAabb = Aabb(Vector3(7.64263f, -4.0757f, 8.60945f), Vector3(13.923f, 1.35486f, 16.5454f));
  data[20].mAabb = Aabb(Vector3(-5.83576f, -43.3968f, 8.73768f), Vector3(1.29701f, -38.2091f, 14.4607f));
  data[21].mAabb = Aabb(Vector3(-8.24089f, -17.0473f, -11.8414f), Vector3(-5.99743f, -15.9963f, -7.81111f));
  data[22].mAabb = Aabb(Vector3(18.6373f, 11.8412f, -8.82335f), Vector3(23.3078f, 13.6572f, -7.63243f));
  data[23].mAabb = Aabb(Vector3(22.9546f, 7.48803f, 0.0822f), Vector3(28.8945f, 8.92179f, 1.07156f));
  data[24].mAabb = Aabb(Vector3(7.8053f, -23.1337f, 15.8004f), Vector3(13.3936f, -22.6994f, 21.6389f));
  data[25].mAabb = Aabb(Vector3(3.22398f, -33.1242f, 6.42967f), Vector3(8.92336f, -31.6167f, 7.70131f));
  data[26].mAabb = Aabb(Vector3(17.7316f, 24.7447f, -24.4009f), Vector3(23.4692f, 25.3732f, -21.9178f));
  data[27].mAabb = Aabb(Vector3(-4.53034f, 6.48768f, -21.0514f), Vector3(-0.0335679f, 11.0628f, -13.3647f));
  data[28].mAabb = Aabb(Vector3(-35.1933f, -9.60299f, -2.25003f), Vector3(-29.2875f, -2.88956f, 5.30209f));
  data[29].mAabb = Aabb(Vector3(18.3448f, 37.4362f, -11.7208f), Vector3(22.6511f, 44.9377f, -9.44296f));
  data[30].mAabb = Aabb(Vector3(-32.1936f, 23.8146f, -32.7264f), Vector3(-24.5877f, 25.2244f, -31.8257f));
  data[31].mAabb = Aabb(Vector3(15.2282f, 28.5141f, 19.8846f), Vector3(17.5726f, 31.9474f, 21.7025f));
  data[32].mAabb = Aabb(Vector3(-51.1439f, -5.47544f, 3.38088f), Vector3(-46.1803f, 1.75986f, 6.27586f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(54.1615f, 64.6982f, -27.2865f), Vector3(-49.6162f, 58.8415f, 74.2166f), Vector3(-41.4795f, -85.3347f, 74.2166f), Vector3(62.2982f, -79.478f, -27.2865f), Vector3(-26.644f, -8.68002f, -15.7933f), Vector3(-32.2621f, -8.99708f, -10.2983f), Vector3(-31.8684f, -15.9743f, -10.2983f), Vector3(-26.2502f, -15.6573f, -15.7933f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest20(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(73);
  data[0].mAabb = Aabb(Vector3(-9.37304f, 15.3583f, 23.4269f), Vector3(-1.77174f, 20.9348f, 24.2607f));
  data[1].mAabb = Aabb(Vector3(-24.5775f, 22.2306f, 1.60303f), Vector3(-22.4936f, 26.3468f, 4.73529f));
  data[2].mAabb = Aabb(Vector3(-10.713f, -8.63057f, 30.7476f), Vector3(-9.78142f, -1.91343f, 37.8999f));
  data[3].mAabb = Aabb(Vector3(36.3434f, -0.058136f, 5.78088f), Vector3(39.3465f, 3.34758f, 12.3115f));
  data[4].mAabb = Aabb(Vector3(27.274f, 24.5159f, -17.6791f), Vector3(33.3257f, 26.0118f, -13.9526f));
  data[5].mAabb = Aabb(Vector3(10.0983f, 42.7943f, 5.29913f), Vector3(11.2848f, 49.584f, 10.7703f));
  data[6].mAabb = Aabb(Vector3(-5.70689f, 20.5624f, 24.9275f), Vector3(-1.12431f, 23.0784f, 25.4669f));
  data[7].mAabb = Aabb(Vector3(4.97273f, 7.39619f, 28.4806f), Vector3(8.41625f, 11.6974f, 30.7502f));
  data[8].mAabb = Aabb(Vector3(19.7562f, -44.9439f, 5.81877f), Vector3(22.0382f, -41.4719f, 8.42963f));
  data[9].mAabb = Aabb(Vector3(28.1873f, 23.0392f, -18.3297f), Vector3(30.5607f, 24.8659f, -16.7115f));
  data[10].mAabb = Aabb(Vector3(18.7755f, -26.7239f, -8.28349f), Vector3(24.4935f, -20.3521f, -4.90444f));
  data[11].mAabb = Aabb(Vector3(1.15272f, 3.70918f, -30.041f), Vector3(7.69706f, 5.52425f, -23.3348f));
  data[12].mAabb = Aabb(Vector3(11.394f, -39.4672f, 5.72958f), Vector3(12.0761f, -33.9186f, 7.04343f));
  data[13].mAabb = Aabb(Vector3(9.36531f, 11.9109f, 31.9344f), Vector3(16.1084f, 12.894f, 34.2873f));
  data[14].mAabb = Aabb(Vector3(-19.9953f, 40.1772f, -14.3941f), Vector3(-16.6429f, 44.4042f, -11.9203f));
  data[15].mAabb = Aabb(Vector3(-0.262514f, -4.49037f, -33.6938f), Vector3(4.14078f, 2.18943f, -29.9281f));
  data[16].mAabb = Aabb(Vector3(-18.048f, 24.4165f, -4.04751f), Vector3(-17.433f, 30.8178f, 1.86851f));
  data[17].mAabb = Aabb(Vector3(7.24633f, 22.8894f, 11.6434f), Vector3(11.372f, 24.261f, 14.1754f));
  data[18].mAabb = Aabb(Vector3(10.0316f, -2.15902f, 38.7813f), Vector3(12.5944f, 4.43356f, 41.8567f));
  data[19].mAabb = Aabb(Vector3(17.9098f, -38.7639f, -24.4587f), Vector3(23.1166f, -37.4514f, -21.9944f));
  data[20].mAabb = Aabb(Vector3(-16.5946f, -0.021976f, -5.46437f), Vector3(-15.8147f, 3.82397f, -2.23748f));
  data[21].mAabb = Aabb(Vector3(-37.4537f, -21.2053f, -25.321f), Vector3(-36.9712f, -19.1476f, -18.0173f));
  data[22].mAabb = Aabb(Vector3(-9.86947f, -21.349f, 29.8313f), Vector3(-7.64432f, -19.62f, 31.966f));
  data[23].mAabb = Aabb(Vector3(-39.5738f, -13.7251f, 4.19386f), Vector3(-37.3686f, -11.2367f, 5.09207f));
  data[24].mAabb = Aabb(Vector3(28.9647f, -17.2899f, 12.9076f), Vector3(29.6917f, -11.7935f, 17.7214f));
  data[25].mAabb = Aabb(Vector3(-30.5555f, -0.0175047f, 16.7804f), Vector3(-26.0953f, 6.38813f, 19.0512f));
  data[26].mAabb = Aabb(Vector3(-18.2643f, 23.2145f, 34.6086f), Vector3(-15.56f, 24.1946f, 38.9124f));
  data[27].mAabb = Aabb(Vector3(-1.64267f, 6.75861f, -48.328f), Vector3(-1.00238f, 10.1179f, -47.7459f));
  data[28].mAabb = Aabb(Vector3(14.2509f, 14.0219f, -21.1087f), Vector3(21.3723f, 16.3939f, -16.5319f));
  data[29].mAabb = Aabb(Vector3(-7.12365f, -45.0524f, 20.2737f), Vector3(-3.63443f, -42.4798f, 24.6812f));
  data[30].mAabb = Aabb(Vector3(-21.7336f, 4.47323f, -31.2117f), Vector3(-18.6398f, 5.92856f, -26.5248f));
  data[31].mAabb = Aabb(Vector3(32.3601f, -5.55202f, 12.3642f), Vector3(36.1814f, 2.0727f, 15.1024f));
  data[32].mAabb = Aabb(Vector3(-25.7826f, 17.0426f, -4.66459f), Vector3(-19.026f, 21.2976f, -2.78945f));
  data[33].mAabb = Aabb(Vector3(-32.5251f, -36.3017f, -12.0394f), Vector3(-27.0862f, -30.5467f, -8.32008f));
  data[34].mAabb = Aabb(Vector3(5.54337f, 8.59007f, 44.1165f), Vector3(8.7473f, 11.4524f, 50.8597f));
  data[35].mAabb = Aabb(Vector3(22.9535f, -23.6442f, 24.5099f), Vector3(26.905f, -19.7929f, 26.2454f));
  data[36].mAabb = Aabb(Vector3(-15.2989f, 22.4437f, -22.5222f), Vector3(-10.1796f, 30.0439f, -15.9166f));
  data[37].mAabb = Aabb(Vector3(19.534f, -8.4142f, 9.70218f), Vector3(20.9496f, -5.83118f, 10.5628f));
  data[38].mAabb = Aabb(Vector3(-25.4051f, -19.4896f, 33.9928f), Vector3(-22.7038f, -16.9991f, 40.9303f));
  data[39].mAabb = Aabb(Vector3(24.9161f, -29.6859f, 0.376889f), Vector3(25.42f, -28.1417f, 6.45642f));
  data[40].mAabb = Aabb(Vector3(24.1392f, 29.5943f, -18.8433f), Vector3(25.4426f, 31.9836f, -15.4171f));
  data[41].mAabb = Aabb(Vector3(13.7877f, -5.85643f, -48.4711f), Vector3(15.5046f, -2.98974f, -44.5736f));
  data[42].mAabb = Aabb(Vector3(-24.1858f, -8.67068f, -23.4594f), Vector3(-19.1882f, -2.32697f, -16.518f));
  data[43].mAabb = Aabb(Vector3(10.6518f, 37.1606f, -1.42845f), Vector3(11.2023f, 44.5278f, 1.92137f));
  data[44].mAabb = Aabb(Vector3(-4.85526f, 6.95145f, 8.36678f), Vector3(0.818371f, 9.69475f, 12.7024f));
  data[45].mAabb = Aabb(Vector3(-7.28962f, -18.4382f, -13.2263f), Vector3(-6.75788f, -17.3475f, -6.20489f));
  data[46].mAabb = Aabb(Vector3(0.07375f, -3.85685f, 12.4878f), Vector3(3.16264f, -0.634592f, 20.2746f));
  data[47].mAabb = Aabb(Vector3(-20.5015f, 24.9752f, 17.9607f), Vector3(-19.466f, 27.2873f, 23.8517f));
  data[48].mAabb = Aabb(Vector3(20.4771f, 13.5202f, 14.1322f), Vector3(21.9565f, 15.9963f, 21.3301f));
  data[49].mAabb = Aabb(Vector3(-7.17024f, 17.4464f, 32.3549f), Vector3(-0.977525f, 24.706f, 36.7682f));
  data[50].mAabb = Aabb(Vector3(-9.82194f, 16.268f, 12.454f), Vector3(-9.27697f, 16.8245f, 13.6182f));
  data[51].mAabb = Aabb(Vector3(8.2423f, -45.804f, 9.87195f), Vector3(14.4468f, -42.3839f, 12.3216f));
  data[52].mAabb = Aabb(Vector3(-7.31718f, -9.00978f, -13.8262f), Vector3(-4.89675f, -1.40455f, -9.2063f));
  data[53].mAabb = Aabb(Vector3(-15.9978f, 7.59893f, -1.75042f), Vector3(-8.22142f, 10.2921f, -0.491544f));
  data[54].mAabb = Aabb(Vector3(-31.745f, -18.2172f, -22.249f), Vector3(-24.897f, -10.2269f, -18.7709f));
  data[55].mAabb = Aabb(Vector3(18.0333f, 10.1264f, 19.8562f), Vector3(22.2126f, 14.9778f, 25.6217f));
  data[56].mAabb = Aabb(Vector3(-29.4653f, -4.04784f, 1.80855f), Vector3(-28.5068f, -2.64029f, 6.98607f));
  data[57].mAabb = Aabb(Vector3(23.6538f, -32.9412f, -0.304404f), Vector3(30.9107f, -29.7686f, 6.4067f));
  data[58].mAabb = Aabb(Vector3(3.21204f, -6.3774f, 21.5803f), Vector3(10.2929f, 0.333474f, 25.0256f));
  data[59].mAabb = Aabb(Vector3(13.7753f, 3.58824f, 3.9859f), Vector3(15.2608f, 7.09439f, 10.0947f));
  data[60].mAabb = Aabb(Vector3(5.90327f, 23.1197f, 4.5795f), Vector3(10.8864f, 24.7483f, 10.7718f));
  data[61].mAabb = Aabb(Vector3(-19.513f, 23.2986f, 13.77f), Vector3(-16.3077f, 24.7328f, 14.9748f));
  data[62].mAabb = Aabb(Vector3(-10.3559f, -16.3657f, 21.5122f), Vector3(-5.58773f, -13.0298f, 27.1605f));
  data[63].mAabb = Aabb(Vector3(42.1566f, 1.35986f, -3.18807f), Vector3(43.6852f, 4.15372f, 2.38211f));
  data[64].mAabb = Aabb(Vector3(7.83097f, -8.29665f, 24.1264f), Vector3(11.0565f, -3.65654f, 25.7838f));
  data[65].mAabb = Aabb(Vector3(0.657924f, 18.2407f, 18.9938f), Vector3(2.70122f, 20.0571f, 26.3156f));
  data[66].mAabb = Aabb(Vector3(7.89803f, 22.4667f, -39.2418f), Vector3(8.96114f, 23.6098f, -36.4055f));
  data[67].mAabb = Aabb(Vector3(15.7993f, 37.8054f, 21.5054f), Vector3(18.8203f, 39.9602f, 25.4051f));
  data[68].mAabb = Aabb(Vector3(15.3715f, 11.8358f, 5.57735f), Vector3(19.1933f, 18.3825f, 8.09334f));
  data[69].mAabb = Aabb(Vector3(-28.6413f, -10.3816f, -20.8734f), Vector3(-24.9983f, -7.72784f, -15.071f));
  data[70].mAabb = Aabb(Vector3(-36.719f, 16.721f, -28.9001f), Vector3(-35.23f, 19.3754f, -22.7236f));
  data[71].mAabb = Aabb(Vector3(-1.54392f, 6.80344f, -22.2152f), Vector3(1.61362f, 9.53329f, -17.9191f));
  data[72].mAabb = Aabb(Vector3(12.9765f, -13.0565f, -16.2987f), Vector3(14.6041f, -10.6115f, -15.4132f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(132.876f, 34.8941f, -1.99508f), Vector3(-37.5286f, 119.65f, 36.0986f), Vector3(-123.491f, -53.1804f, 36.0986f), Vector3(46.9132f, -137.936f, -1.99508f), Vector3(-0.410049f, -1.6835f, -47.5372f), Vector3(-9.08328f, 2.6304f, -45.5983f), Vector3(-13.0083f, -5.261f, -45.5983f), Vector3(-4.33508f, -9.5749f, -47.5372f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest21(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(57);
  data[0].mAabb = Aabb(Vector3(25.3937f, -5.48405f, 25.6587f), Vector3(29.4097f, 0.059695f, 32.0391f));
  data[1].mAabb = Aabb(Vector3(-14.0165f, 18.4667f, -5.60935f), Vector3(-6.09303f, 21.9495f, -3.77781f));
  data[2].mAabb = Aabb(Vector3(25.8577f, -42.7517f, -10.1722f), Vector3(26.9848f, -38.0202f, -3.3345f));
  data[3].mAabb = Aabb(Vector3(23.4301f, 21.4715f, -30.4255f), Vector3(30.6166f, 24.6209f, -23.1833f));
  data[4].mAabb = Aabb(Vector3(-5.27449f, 23.5608f, 23.1284f), Vector3(-1.06209f, 26.0316f, 23.5868f));
  data[5].mAabb = Aabb(Vector3(-11.7592f, 26.4516f, -19.7792f), Vector3(-7.17796f, 31.4754f, -12.8197f));
  data[6].mAabb = Aabb(Vector3(-27.0376f, 2.37855f, 15.9214f), Vector3(-21.7762f, 9.31325f, 22.4158f));
  data[7].mAabb = Aabb(Vector3(40.9967f, -4.46757f, 3.72352f), Vector3(42.5207f, 0.356471f, 6.25065f));
  data[8].mAabb = Aabb(Vector3(-9.94995f, 6.21166f, 13.7336f), Vector3(-7.73131f, 13.7545f, 18.0625f));
  data[9].mAabb = Aabb(Vector3(-36.5889f, 8.81487f, -34.94f), Vector3(-29.5738f, 11.464f, -27.5934f));
  data[10].mAabb = Aabb(Vector3(-20.4217f, 13.5273f, 32.0187f), Vector3(-19.6293f, 20.1086f, 33.0862f));
  data[11].mAabb = Aabb(Vector3(-13.7087f, -11.0714f, -25.8666f), Vector3(-7.47123f, -6.03441f, -20.5181f));
  data[12].mAabb = Aabb(Vector3(12.7619f, -24.0255f, 10.1075f), Vector3(20.018f, -22.1723f, 12.9445f));
  data[13].mAabb = Aabb(Vector3(-17.8205f, -20.2396f, 38.404f), Vector3(-14.672f, -17.606f, 44.038f));
  data[14].mAabb = Aabb(Vector3(-36.9549f, 2.77187f, 10.4643f), Vector3(-32.557f, 7.44422f, 12.1188f));
  data[15].mAabb = Aabb(Vector3(0.736685f, 32.4112f, -18.986f), Vector3(2.66958f, 34.5011f, -16.1466f));
  data[16].mAabb = Aabb(Vector3(27.4629f, -42.2635f, -2.96507f), Vector3(32.8538f, -35.7518f, -0.633698f));
  data[17].mAabb = Aabb(Vector3(-8.62778f, -25.1135f, -36.8701f), Vector3(-7.45264f, -20.5221f, -30.4768f));
  data[18].mAabb = Aabb(Vector3(31.4973f, 22.7398f, 5.80969f), Vector3(34.432f, 24.1596f, 9.48145f));
  data[19].mAabb = Aabb(Vector3(-4.2099f, 43.8042f, -12.2836f), Vector3(-1.7941f, 45.8426f, -10.6592f));
  data[20].mAabb = Aabb(Vector3(-24.8047f, -34.0163f, 28.3561f), Vector3(-17.5631f, -26.0961f, 32.3883f));
  data[21].mAabb = Aabb(Vector3(44.1617f, 16.2779f, -14.6568f), Vector3(44.7157f, 21.1681f, -8.77189f));
  data[22].mAabb = Aabb(Vector3(-34.915f, -9.63031f, 4.68565f), Vector3(-29.493f, -2.132f, 10.9846f));
  data[23].mAabb = Aabb(Vector3(27.2635f, 3.73964f, -14.6625f), Vector3(30.6235f, 9.21891f, -8.0112f));
  data[24].mAabb = Aabb(Vector3(15.6902f, -30.3772f, 0.717699f), Vector3(21.1272f, -28.5775f, 1.86988f));
  data[25].mAabb = Aabb(Vector3(35.5359f, -3.55321f, -20.8636f), Vector3(37.4913f, 1.26294f, -15.2987f));
  data[26].mAabb = Aabb(Vector3(14.922f, -8.16075f, -47.3629f), Vector3(19.6975f, -1.31651f, -44.8882f));
  data[27].mAabb = Aabb(Vector3(-26.9668f, -0.785503f, 28.3741f), Vector3(-19.0366f, 5.90519f, 29.3479f));
  data[28].mAabb = Aabb(Vector3(17.0874f, 29.1807f, 14.4866f), Vector3(18.5114f, 33.1481f, 21.8548f));
  data[29].mAabb = Aabb(Vector3(-36.1096f, 17.6005f, 20.8345f), Vector3(-33.1552f, 18.2872f, 24.5777f));
  data[30].mAabb = Aabb(Vector3(19.9667f, 16.845f, 7.42889f), Vector3(21.2548f, 24.656f, 15.2719f));
  data[31].mAabb = Aabb(Vector3(-3.77211f, -1.52588f, -8.14147f), Vector3(3.97763f, 3.59527f, -5.65516f));
  data[32].mAabb = Aabb(Vector3(26.7736f, -3.42064f, -41.5208f), Vector3(29.5997f, 1.64184f, -38.8817f));
  data[33].mAabb = Aabb(Vector3(-22.1501f, 7.38846f, -33.2151f), Vector3(-19.8716f, 8.90502f, -29.8226f));
  data[34].mAabb = Aabb(Vector3(-17.4734f, -13.286f, -19.9595f), Vector3(-13.2088f, -5.41819f, -12.913f));
  data[35].mAabb = Aabb(Vector3(-18.2943f, 4.7473f, -24.24f), Vector3(-15.4717f, 11.1759f, -16.6366f));
  data[36].mAabb = Aabb(Vector3(-18.5308f, 16.142f, -38.9554f), Vector3(-11.9811f, 22.164f, -37.3769f));
  data[37].mAabb = Aabb(Vector3(-13.9936f, 5.33242f, 13.8895f), Vector3(-8.99191f, 11.1617f, 19.594f));
  data[38].mAabb = Aabb(Vector3(-27.0887f, -17.79f, -23.5468f), Vector3(-22.8855f, -16.7376f, -16.1731f));
  data[39].mAabb = Aabb(Vector3(12.4674f, 15.213f, 15.4539f), Vector3(19.6718f, 20.6823f, 19.7494f));
  data[40].mAabb = Aabb(Vector3(-22.4125f, -36.4101f, -8.03209f), Vector3(-16.7697f, -31.3005f, -6.85857f));
  data[41].mAabb = Aabb(Vector3(-7.50563f, -9.40453f, -15.1865f), Vector3(-1.61653f, -3.38136f, -10.5879f));
  data[42].mAabb = Aabb(Vector3(-33.847f, -30.7335f, -24.0398f), Vector3(-27.1181f, -25.3607f, -21.8866f));
  data[43].mAabb = Aabb(Vector3(-14.2617f, 10.2086f, -11.2532f), Vector3(-11.8422f, 14.6456f, -9.98246f));
  data[44].mAabb = Aabb(Vector3(41.0005f, 8.16294f, 5.97172f), Vector3(45.7035f, 13.0531f, 11.4273f));
  data[45].mAabb = Aabb(Vector3(11.2663f, -13.5783f, -14.5376f), Vector3(15.3605f, -8.49351f, -9.55794f));
  data[46].mAabb = Aabb(Vector3(-17.3783f, 1.04019f, 17.41f), Vector3(-10.7017f, 4.79776f, 20.9094f));
  data[47].mAabb = Aabb(Vector3(12.8028f, -29.4446f, -22.49f), Vector3(18.6385f, -24.0927f, -17.5825f));
  data[48].mAabb = Aabb(Vector3(-1.50219f, 17.8279f, 3.51322f), Vector3(4.33311f, 18.985f, 9.03377f));
  data[49].mAabb = Aabb(Vector3(14.009f, 16.1122f, 15.6465f), Vector3(17.6112f, 23.7652f, 19.5915f));
  data[50].mAabb = Aabb(Vector3(35.214f, 14.1146f, 26.1362f), Vector3(36.3365f, 17.8738f, 33.744f));
  data[51].mAabb = Aabb(Vector3(14.9592f, 8.26167f, 22.3794f), Vector3(18.1395f, 15.5617f, 27.1167f));
  data[52].mAabb = Aabb(Vector3(-2.59165f, 21.8873f, 35.1743f), Vector3(0.567511f, 28.8967f, 41.2737f));
  data[53].mAabb = Aabb(Vector3(-24.9643f, 21.4174f, 8.65928f), Vector3(-17.9377f, 22.0498f, 12.0031f));
  data[54].mAabb = Aabb(Vector3(18.3027f, -34.1885f, -3.86566f), Vector3(21.672f, -30.9843f, 2.73388f));
  data[55].mAabb = Aabb(Vector3(-24.7953f, -21.7503f, 19.1417f), Vector3(-21.1816f, -20.9291f, 24.6196f));
  data[56].mAabb = Aabb(Vector3(-21.1036f, -4.02689f, 25.7596f), Vector3(-20.0361f, 1.64976f, 33.238f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(66.548f, 25.4498f, -14.3898f), Vector3(14.7928f, 58.4755f, 24.6521f), Vector3(-25.0294f, -3.93072f, 24.6521f), Vector3(26.7258f, -36.9564f, -14.3898f), Vector3(8.4418f, 24.3046f, -30.4008f), Vector3(2.52866f, 28.0779f, -25.9401f), Vector3(-2.62739f, 19.9977f, -25.9401f), Vector3(3.28575f, 16.2245f, -30.4008f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest22(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(68);
  data[0].mAabb = Aabb(Vector3(26.8409f, -34.0355f, -18.3982f), Vector3(33.7805f, -31.3889f, -10.8085f));
  data[1].mAabb = Aabb(Vector3(-16.1451f, -25.7978f, -31.4644f), Vector3(-12.4156f, -21.629f, -30.3983f));
  data[2].mAabb = Aabb(Vector3(23.3123f, -21.9481f, -8.49811f), Vector3(27.5171f, -18.8228f, -4.59488f));
  data[3].mAabb = Aabb(Vector3(-1.78459f, -30.2238f, -40.0428f), Vector3(0.155032f, -28.4704f, -38.9104f));
  data[4].mAabb = Aabb(Vector3(-3.09878f, -0.794029f, 25.0867f), Vector3(3.92313f, 0.946125f, 28.5569f));
  data[5].mAabb = Aabb(Vector3(20.5913f, 22.3751f, 15.7168f), Vector3(22.9241f, 25.0785f, 17.2144f));
  data[6].mAabb = Aabb(Vector3(-2.43479f, -38.2607f, -35.0499f), Vector3(1.13074f, -35.0535f, -30.4286f));
  data[7].mAabb = Aabb(Vector3(-3.95547f, -15.186f, -18.2694f), Vector3(2.8396f, -10.237f, -16.8632f));
  data[8].mAabb = Aabb(Vector3(5.5244f, -2.04626f, -30.732f), Vector3(6.97741f, -0.571683f, -29.0176f));
  data[9].mAabb = Aabb(Vector3(-3.32517f, 24.6654f, 5.3916f), Vector3(-0.835616f, 29.238f, 12.285f));
  data[10].mAabb = Aabb(Vector3(8.82595f, 31.341f, 7.73978f), Vector3(13.5166f, 33.6728f, 11.495f));
  data[11].mAabb = Aabb(Vector3(-12.3872f, -8.92109f, -29.4872f), Vector3(-5.26416f, -5.45832f, -26.418f));
  data[12].mAabb = Aabb(Vector3(-16.6697f, -14.1691f, -32.8697f), Vector3(-9.64613f, -9.75681f, -29.8311f));
  data[13].mAabb = Aabb(Vector3(32.6182f, -7.949f, 10.3953f), Vector3(35.3349f, -6.10401f, 12.5794f));
  data[14].mAabb = Aabb(Vector3(21.5847f, -9.29245f, 38.5038f), Vector3(26.8332f, -5.39037f, 40.3771f));
  data[15].mAabb = Aabb(Vector3(-34.0127f, 3.63513f, -38.3869f), Vector3(-27.4582f, 8.5313f, -34.5572f));
  data[16].mAabb = Aabb(Vector3(-14.2423f, 0.826976f, -36.383f), Vector3(-12.3862f, 1.69271f, -32.3279f));
  data[17].mAabb = Aabb(Vector3(9.64222f, 11.2509f, 17.4523f), Vector3(17.0004f, 11.71f, 21.2977f));
  data[18].mAabb = Aabb(Vector3(27.7623f, 4.4296f, 14.704f), Vector3(28.3247f, 8.53323f, 17.8483f));
  data[19].mAabb = Aabb(Vector3(11.509f, 0.475209f, -31.3187f), Vector3(19.2733f, 5.94613f, -29.0311f));
  data[20].mAabb = Aabb(Vector3(-6.77274f, 25.2628f, -40.5492f), Vector3(-4.68212f, 30.1135f, -37.1303f));
  data[21].mAabb = Aabb(Vector3(-15.2379f, -27.3357f, -40.0363f), Vector3(-7.68205f, -26.0246f, -37.4078f));
  data[22].mAabb = Aabb(Vector3(-0.930148f, 3.21394f, -1.6594f), Vector3(2.84041f, 10.6464f, 5.09832f));
  data[23].mAabb = Aabb(Vector3(23.3326f, 8.23725f, 35.2387f), Vector3(24.8487f, 15.9292f, 40.9808f));
  data[24].mAabb = Aabb(Vector3(0.995793f, 4.37165f, 21.9151f), Vector3(3.70986f, 7.95875f, 23.2371f));
  data[25].mAabb = Aabb(Vector3(-31.9167f, -18.9405f, -27.255f), Vector3(-30.7485f, -17.6476f, -21.2103f));
  data[26].mAabb = Aabb(Vector3(16.1676f, 24.3698f, -35.069f), Vector3(22.2986f, 25.74f, -28.1747f));
  data[27].mAabb = Aabb(Vector3(-22.2777f, -7.21106f, -41.5678f), Vector3(-20.0206f, -2.44964f, -40.6188f));
  data[28].mAabb = Aabb(Vector3(-1.06031f, -40.4282f, -17.0159f), Vector3(1.8857f, -37.4777f, -9.47699f));
  data[29].mAabb = Aabb(Vector3(36.6646f, 7.05762f, 16.1701f), Vector3(42.7077f, 13.7411f, 21.9673f));
  data[30].mAabb = Aabb(Vector3(34.284f, -17.2241f, -3.62972f), Vector3(40.9659f, -13.0124f, -2.3836f));
  data[31].mAabb = Aabb(Vector3(-2.9845f, 30.7507f, -16.4238f), Vector3(-1.91999f, 38.4951f, -14.5934f));
  data[32].mAabb = Aabb(Vector3(-16.5919f, 16.1882f, -16.0714f), Vector3(-14.4226f, 17.8618f, -11.2492f));
  data[33].mAabb = Aabb(Vector3(-18.0291f, -27.2007f, -16.8243f), Vector3(-12.1929f, -21.5146f, -9.85922f));
  data[34].mAabb = Aabb(Vector3(-25.1403f, -22.2842f, 22.0602f), Vector3(-20.2931f, -18.6429f, 22.5476f));
  data[35].mAabb = Aabb(Vector3(-12.0668f, 13.8715f, -47.9104f), Vector3(-8.92644f, 15.3514f, -40.9803f));
  data[36].mAabb = Aabb(Vector3(-39.5051f, 11.7429f, 28.6695f), Vector3(-35.0909f, 12.4418f, 33.1168f));
  data[37].mAabb = Aabb(Vector3(19.7255f, 11.3148f, 9.36844f), Vector3(22.9069f, 17.8334f, 14.3029f));
  data[38].mAabb = Aabb(Vector3(22.6616f, -4.12749f, -24.8614f), Vector3(24.2579f, 2.33172f, -24.1668f));
  data[39].mAabb = Aabb(Vector3(14.9487f, 17.7873f, 7.01151f), Vector3(20.405f, 21.8357f, 10.4339f));
  data[40].mAabb = Aabb(Vector3(10.0692f, 19.9963f, 37.9751f), Vector3(11.0605f, 22.0751f, 41.8839f));
  data[41].mAabb = Aabb(Vector3(-12.2224f, 16.0979f, 5.80726f), Vector3(-6.81019f, 20.3488f, 7.09002f));
  data[42].mAabb = Aabb(Vector3(-3.46269f, 22.9756f, -40.1086f), Vector3(-1.91133f, 24.8334f, -37.793f));
  data[43].mAabb = Aabb(Vector3(1.84525f, -18.333f, 40.704f), Vector3(7.5945f, -16.5497f, 43.1753f));
  data[44].mAabb = Aabb(Vector3(21.8895f, -28.1146f, -35.9487f), Vector3(29.1624f, -23.0869f, -29.5841f));
  data[45].mAabb = Aabb(Vector3(-27.9426f, -20.0542f, 15.4862f), Vector3(-24.3116f, -14.4578f, 20.8975f));
  data[46].mAabb = Aabb(Vector3(6.89323f, 31.1476f, 11.0604f), Vector3(7.7374f, 36.5965f, 18.3525f));
  data[47].mAabb = Aabb(Vector3(-34.9388f, -17.0989f, 19.3437f), Vector3(-30.0714f, -14.0626f, 26.4793f));
  data[48].mAabb = Aabb(Vector3(18.483f, 1.71446f, 8.19853f), Vector3(20.1102f, 8.43809f, 11.2297f));
  data[49].mAabb = Aabb(Vector3(24.374f, -15.7255f, 15.1431f), Vector3(30.3041f, -10.477f, 21.8702f));
  data[50].mAabb = Aabb(Vector3(42.4879f, 5.40243f, 15.4841f), Vector3(48.8126f, 7.04262f, 17.4122f));
  data[51].mAabb = Aabb(Vector3(-10.8618f, -15.4277f, 2.55785f), Vector3(-8.39729f, -9.93684f, 6.58656f));
  data[52].mAabb = Aabb(Vector3(39.4781f, -11.6169f, 5.46178f), Vector3(41.5791f, -3.7568f, 7.59252f));
  data[53].mAabb = Aabb(Vector3(-18.9607f, 27.6017f, 27.2815f), Vector3(-15.7995f, 32.5735f, 28.2581f));
  data[54].mAabb = Aabb(Vector3(-8.70699f, -42.4757f, -7.63059f), Vector3(-6.18798f, -37.7148f, -6.11913f));
  data[55].mAabb = Aabb(Vector3(-37.0886f, -30.2023f, 18.5653f), Vector3(-35.8424f, -23.976f, 20.0916f));
  data[56].mAabb = Aabb(Vector3(23.9611f, -0.161707f, 12.9458f), Vector3(31.2131f, 7.58548f, 18.5304f));
  data[57].mAabb = Aabb(Vector3(-33.0875f, -16.4202f, 28.3495f), Vector3(-29.0305f, -9.38062f, 30.6783f));
  data[58].mAabb = Aabb(Vector3(-8.36601f, 35.2806f, -7.56613f), Vector3(-5.22888f, 38.6207f, -2.88265f));
  data[59].mAabb = Aabb(Vector3(-20.9143f, -4.56231f, 3.86552f), Vector3(-16.3503f, -3.22991f, 4.38868f));
  data[60].mAabb = Aabb(Vector3(-20.7975f, -2.41288f, 3.37474f), Vector3(-14.4663f, 1.75013f, 5.23318f));
  data[61].mAabb = Aabb(Vector3(-12.4113f, -5.8613f, -24.3813f), Vector3(-9.51124f, -1.03773f, -21.1749f));
  data[62].mAabb = Aabb(Vector3(-10.348f, 28.2505f, 13.4667f), Vector3(-5.61794f, 36.1814f, 15.4258f));
  data[63].mAabb = Aabb(Vector3(2.41054f, -34.431f, 8.83407f), Vector3(9.77271f, -28.9576f, 12.9762f));
  data[64].mAabb = Aabb(Vector3(6.67244f, 19.3122f, -3.68525f), Vector3(12.2895f, 24.8685f, 1.6748f));
  data[65].mAabb = Aabb(Vector3(-36.4279f, 13.3973f, 14.2794f), Vector3(-35.0836f, 14.3305f, 17.7508f));
  data[66].mAabb = Aabb(Vector3(-10.1501f, 29.3064f, -21.2554f), Vector3(-8.0514f, 34.1957f, -13.2568f));
  data[67].mAabb = Aabb(Vector3(-2.93595f, 2.19168f, 30.7751f), Vector3(0.335009f, 9.9929f, 36.3657f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(21.831f, 116.741f, 28.2818f), Vector3(-73.9806f, 26.3531f, 72.9961f), Vector3(21.7801f, -75.1542f, 72.9961f), Vector3(117.592f, 15.2333f, 28.2818f), Vector3(-0.472049f, 5.73044f, -40.321f), Vector3(-6.12961f, 0.393173f, -37.6807f), Vector3(-0.186093f, -5.90701f, -37.6807f), Vector3(5.47147f, -0.56974f, -40.321f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest23(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(44);
  data[0].mAabb = Aabb(Vector3(-21.7927f, 8.10133f, 20.2445f), Vector3(-19.5564f, 12.7526f, 26.3437f));
  data[1].mAabb = Aabb(Vector3(-22.3234f, 8.87549f, -28.2356f), Vector3(-21.4549f, 16.7303f, -27.2159f));
  data[2].mAabb = Aabb(Vector3(37.3736f, 21.9091f, -15.5512f), Vector3(41.4722f, 28.0107f, -11.475f));
  data[3].mAabb = Aabb(Vector3(4.139f, 15.5391f, -1.60039f), Vector3(10.4032f, 18.8152f, 2.83863f));
  data[4].mAabb = Aabb(Vector3(-19.8434f, -1.31521f, -47.7495f), Vector3(-19.056f, -0.805268f, -43.0996f));
  data[5].mAabb = Aabb(Vector3(27.4317f, -27.4493f, 27.4446f), Vector3(34.0584f, -20.6445f, 35.045f));
  data[6].mAabb = Aabb(Vector3(-36.3469f, -16.2018f, -11.3513f), Vector3(-29.7984f, -10.5163f, -6.78841f));
  data[7].mAabb = Aabb(Vector3(-29.1113f, 11.4904f, -3.30121f), Vector3(-26.8993f, 17.2988f, 0.891254f));
  data[8].mAabb = Aabb(Vector3(17.9479f, -36.6783f, 14.8189f), Vector3(24.5616f, -31.5073f, 18.4811f));
  data[9].mAabb = Aabb(Vector3(33.1027f, 32.3127f, 2.72215f), Vector3(34.8426f, 36.1985f, 7.06607f));
  data[10].mAabb = Aabb(Vector3(-10.2072f, 16.8352f, -48.6999f), Vector3(-8.75977f, 17.597f, -42.6999f));
  data[11].mAabb = Aabb(Vector3(24.5698f, 2.39329f, 7.61133f), Vector3(25.9627f, 5.51419f, 10.9259f));
  data[12].mAabb = Aabb(Vector3(0.463895f, -18.987f, 18.6973f), Vector3(5.69151f, -14.2764f, 22.9623f));
  data[13].mAabb = Aabb(Vector3(-4.79793f, 44.2892f, -8.77284f), Vector3(-0.415976f, 45.7202f, -5.07673f));
  data[14].mAabb = Aabb(Vector3(13.7796f, -7.01381f, -16.4202f), Vector3(14.9538f, -5.22866f, -14.962f));
  data[15].mAabb = Aabb(Vector3(11.6766f, 36.2646f, 22.3447f), Vector3(13.6716f, 42.9411f, 24.883f));
  data[16].mAabb = Aabb(Vector3(-29.672f, 12.1497f, 8.98396f), Vector3(-25.1267f, 18.4932f, 14.906f));
  data[17].mAabb = Aabb(Vector3(2.50844f, 28.061f, 20.2354f), Vector3(2.94555f, 32.6487f, 23.2466f));
  data[18].mAabb = Aabb(Vector3(-29.3928f, 16.1341f, 31.9834f), Vector3(-21.4932f, 17.5164f, 32.4217f));
  data[19].mAabb = Aabb(Vector3(-13.9168f, -22.2232f, -39.8211f), Vector3(-7.141f, -18.4431f, -32.2034f));
  data[20].mAabb = Aabb(Vector3(25.8582f, -29.4476f, -18.3891f), Vector3(30.9097f, -23.1174f, -14.4813f));
  data[21].mAabb = Aabb(Vector3(-2.34786f, -18.9661f, -11.1313f), Vector3(2.75636f, -15.2544f, -4.1653f));
  data[22].mAabb = Aabb(Vector3(-27.4551f, -30.9771f, -20.4728f), Vector3(-22.3307f, -23.6393f, -14.5517f));
  data[23].mAabb = Aabb(Vector3(12.3381f, 43.8557f, 3.41203f), Vector3(15.7754f, 45.106f, 8.13007f));
  data[24].mAabb = Aabb(Vector3(-1.49637f, -25.701f, -45.0125f), Vector3(3.61643f, -21.2646f, -38.2768f));
  data[25].mAabb = Aabb(Vector3(-21.4757f, 22.5511f, 0.0769093f), Vector3(-13.829f, 25.8647f, 1.60066f));
  data[26].mAabb = Aabb(Vector3(18.5089f, -27.8211f, 5.07981f), Vector3(25.6804f, -27.2973f, 8.85014f));
  data[27].mAabb = Aabb(Vector3(1.06284f, 16.6923f, -29.6309f), Vector3(4.01766f, 18.3313f, -28.2765f));
  data[28].mAabb = Aabb(Vector3(-13.7554f, -22.3256f, 13.9879f), Vector3(-10.3144f, -18.1869f, 19.12f));
  data[29].mAabb = Aabb(Vector3(-15.2014f, -17.6701f, -14.6843f), Vector3(-10.7065f, -11.3159f, -13.6355f));
  data[30].mAabb = Aabb(Vector3(-11.7394f, 18.629f, 23.6992f), Vector3(-4.71773f, 26.4156f, 26.1823f));
  data[31].mAabb = Aabb(Vector3(-25.2751f, -36.5306f, 1.80562f), Vector3(-18.6229f, -33.329f, 5.48711f));
  data[32].mAabb = Aabb(Vector3(16.3689f, -12.0684f, 36.7387f), Vector3(22.6778f, -5.88495f, 43.3044f));
  data[33].mAabb = Aabb(Vector3(-34.6737f, -28.351f, -29.6128f), Vector3(-27.976f, -21.2625f, -28.2426f));
  data[34].mAabb = Aabb(Vector3(32.9337f, -18.8175f, -5.47077f), Vector3(37.8382f, -17.8425f, -3.77816f));
  data[35].mAabb = Aabb(Vector3(4.79731f, -28.752f, 6.38559f), Vector3(5.62524f, -27.9352f, 12.5168f));
  data[36].mAabb = Aabb(Vector3(-9.5042f, 4.49626f, -6.15696f), Vector3(-7.99112f, 7.59141f, -0.0352204f));
  data[37].mAabb = Aabb(Vector3(8.93534f, 10.4333f, 31.8283f), Vector3(15.4588f, 18.0958f, 37.8242f));
  data[38].mAabb = Aabb(Vector3(-2.27903f, 17.7188f, -39.9492f), Vector3(1.35863f, 19.8463f, -36.5302f));
  data[39].mAabb = Aabb(Vector3(-1.47126f, 29.7471f, -28.2709f), Vector3(0.262632f, 32.806f, -27.2681f));
  data[40].mAabb = Aabb(Vector3(-37.2103f, 29.6752f, 6.48345f), Vector3(-31.7218f, 34.708f, 14.2139f));
  data[41].mAabb = Aabb(Vector3(-40.4874f, -15.5798f, 2.36203f), Vector3(-38.4751f, -10.3221f, 6.23812f));
  data[42].mAabb = Aabb(Vector3(-39.8075f, 15.3613f, -10.8736f), Vector3(-38.6929f, 22.5632f, -5.60305f));
  data[43].mAabb = Aabb(Vector3(-10.7276f, 20.0004f, 25.0862f), Vector3(-4.22849f, 24.6164f, 25.4883f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-19.0769f, 15.6346f, 32.0913f), Vector3(-46.3087f, 25.1319f, 4.11905f), Vector3(-46.3087f, -13.8702f, -9.12326f), Vector3(-19.0769f, -23.3675f, 18.849f), Vector3(-8.25623f, 10.6496f, -3.22307f), Vector3(-13.6985f, 12.5476f, -8.81326f), Vector3(-13.6985f, 3.9867f, -11.7199f), Vector3(-8.25623f, 2.08868f, -6.12973f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest24(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(27);
  data[0].mAabb = Aabb(Vector3(20.6419f, 3.87612f, -35.9532f), Vector3(27.0624f, 6.62058f, -33.9941f));
  data[1].mAabb = Aabb(Vector3(-29.4178f, -32.2346f, -20.2391f), Vector3(-25.4698f, -30.227f, -14.9781f));
  data[2].mAabb = Aabb(Vector3(-25.8975f, 6.21472f, 14.9814f), Vector3(-23.3731f, 8.43314f, 17.9784f));
  data[3].mAabb = Aabb(Vector3(-9.25435f, 17.2008f, -24.0114f), Vector3(-4.97375f, 23.9569f, -17.4733f));
  data[4].mAabb = Aabb(Vector3(17.6641f, 38.7504f, -7.0092f), Vector3(19.1902f, 39.3916f, -5.41215f));
  data[5].mAabb = Aabb(Vector3(-7.98524f, -12.9355f, -4.37581f), Vector3(-7.44468f, -11.6093f, 2.59669f));
  data[6].mAabb = Aabb(Vector3(-1.69471f, 39.6253f, 8.88028f), Vector3(4.12435f, 47.5857f, 12.8197f));
  data[7].mAabb = Aabb(Vector3(21.5648f, -43.1307f, -15.0522f), Vector3(26.0746f, -41.5188f, -8.47961f));
  data[8].mAabb = Aabb(Vector3(-11.4162f, 12.1931f, 9.44958f), Vector3(-10.0393f, 15.3555f, 17.1817f));
  data[9].mAabb = Aabb(Vector3(-2.11162f, 14.7644f, 28.814f), Vector3(1.93588f, 16.043f, 33.2182f));
  data[10].mAabb = Aabb(Vector3(-15.6422f, 23.3956f, -28.6791f), Vector3(-12.0864f, 24.5221f, -26.5746f));
  data[11].mAabb = Aabb(Vector3(-19.264f, -32.4222f, 17.0545f), Vector3(-15.2612f, -24.7354f, 24.7221f));
  data[12].mAabb = Aabb(Vector3(-6.17927f, -0.524079f, -11.0568f), Vector3(-0.529528f, 0.274395f, -6.72517f));
  data[13].mAabb = Aabb(Vector3(-9.24912f, 30.5446f, -27.0091f), Vector3(-6.71457f, 36.1185f, -20.3031f));
  data[14].mAabb = Aabb(Vector3(28.8526f, 22.2384f, -31.8275f), Vector3(31.7237f, 25.7427f, -24.0819f));
  data[15].mAabb = Aabb(Vector3(-46.7506f, 3.2491f, 0.416994f), Vector3(-45.3365f, 4.44999f, 5.4296f));
  data[16].mAabb = Aabb(Vector3(-7.12972f, 14.7414f, -35.4385f), Vector3(-4.91617f, 19.953f, -27.6394f));
  data[17].mAabb = Aabb(Vector3(1.27803f, -8.63322f, -4.53597f), Vector3(1.94244f, -1.55077f, 2.55783f));
  data[18].mAabb = Aabb(Vector3(15.658f, -10.4386f, -42.3727f), Vector3(16.5182f, -3.28538f, -38.9254f));
  data[19].mAabb = Aabb(Vector3(-14.6409f, -19.47f, -8.07137f), Vector3(-6.93659f, -13.4638f, -0.416269f));
  data[20].mAabb = Aabb(Vector3(-45.194f, -18.9699f, 0.124366f), Vector3(-41.9928f, -17.1453f, 4.12803f));
  data[21].mAabb = Aabb(Vector3(-8.17438f, -12.5303f, 3.65548f), Vector3(-4.42052f, -7.26809f, 10.2253f));
  data[22].mAabb = Aabb(Vector3(33.8767f, -25.971f, -16.6696f), Vector3(39.7992f, -24.402f, -9.63373f));
  data[23].mAabb = Aabb(Vector3(-6.36538f, -21.8979f, -40.3858f), Vector3(-2.29283f, -14.912f, -38.4912f));
  data[24].mAabb = Aabb(Vector3(-7.70789f, 17.0615f, -11.8285f), Vector3(-1.67985f, 23.0223f, -3.9628f));
  data[25].mAabb = Aabb(Vector3(24.7268f, -17.9731f, -33.1064f), Vector3(27.5079f, -12.4377f, -32.5131f));
  data[26].mAabb = Aabb(Vector3(14.84f, 27.7551f, 0.956804f), Vector3(21.6977f, 33.3548f, 7.19011f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(-11.3761f, 99.8605f, 7.09462f), Vector3(-19.7f, 40.3509f, -90.5589f), Vector3(-19.7f, -60.3148f, -29.2137f), Vector3(-11.3761f, -0.805271f, 68.4398f), Vector3(20.6312f, 22.6483f, -13.4466f), Vector3(20.3285f, 20.4839f, -16.9983f), Vector3(20.3285f, 14.1688f, -13.15f), Vector3(20.6312f, 16.3332f, -9.59823f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionFrustumCastFuzzTest25(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(42);
  data[0].mAabb = Aabb(Vector3(22.2304f, 26.0736f, -6.03951f), Vector3(22.8992f, 32.507f, -3.58034f));
  data[1].mAabb = Aabb(Vector3(-31.3906f, -7.46562f, 23.215f), Vector3(-29.7372f, -4.07359f, 23.622f));
  data[2].mAabb = Aabb(Vector3(-8.42064f, -29.6867f, -17.5826f), Vector3(-1.18118f, -22.0622f, -9.6939f));
  data[3].mAabb = Aabb(Vector3(-5.98049f, -36.0486f, -17.7584f), Vector3(-0.904795f, -35.5811f, -11.4981f));
  data[4].mAabb = Aabb(Vector3(11.9016f, -25.9995f, -29.2371f), Vector3(18.7361f, -22.7056f, -26.1739f));
  data[5].mAabb = Aabb(Vector3(-2.37867f, -0.211628f, -12.7703f), Vector3(3.51624f, 1.74956f, -5.40463f));
  data[6].mAabb = Aabb(Vector3(-41.0092f, -27.943f, 14.2657f), Vector3(-35.622f, -27.4259f, 16.5984f));
  data[7].mAabb = Aabb(Vector3(-34.2747f, -32.3083f, 9.33959f), Vector3(-33.0054f, -31.2605f, 14.9937f));
  data[8].mAabb = Aabb(Vector3(5.46456f, -42.4231f, 12.0458f), Vector3(8.65805f, -40.9325f, 13.304f));
  data[9].mAabb = Aabb(Vector3(38.4365f, 2.42581f, -0.44961f), Vector3(39.4558f, 7.174f, 3.16973f));
  data[10].mAabb = Aabb(Vector3(-47.6811f, 3.77088f, -14.3772f), Vector3(-42.2006f, 5.04715f, -12.9537f));
  data[11].mAabb = Aabb(Vector3(-10.9506f, -45.1962f, 18.5337f), Vector3(-6.67907f, -40.9469f, 23.5319f));
  data[12].mAabb = Aabb(Vector3(-14.1413f, 7.41693f, 30.1817f), Vector3(-8.70281f, 14.7719f, 38.0105f));
  data[13].mAabb = Aabb(Vector3(-48.1637f, 6.0668f, 12.54f), Vector3(-43.1926f, 9.08262f, 14.234f));
  data[14].mAabb = Aabb(Vector3(-5.80215f, -27.965f, 15.7019f), Vector3(2.07956f, -22.2695f, 20.0326f));
  data[15].mAabb = Aabb(Vector3(-12.5778f, 22.5343f, 11.6134f), Vector3(-7.44803f, 29.0325f, 19.1141f));
  data[16].mAabb = Aabb(Vector3(-8.87404f, 17.3241f, -34.4828f), Vector3(-2.97589f, 24.3803f, -26.8918f));
  data[17].mAabb = Aabb(Vector3(-32.2202f, 3.812f, -31.4473f), Vector3(-28.9515f, 6.4646f, -26.058f));
  data[18].mAabb = Aabb(Vector3(20.3511f, 12.5453f, -15.8156f), Vector3(21.802f, 19.5728f, -8.41884f));
  data[19].mAabb = Aabb(Vector3(28.719f, 18.673f, 22.0317f), Vector3(34.0396f, 22.9587f, 27.7592f));
  data[20].mAabb = Aabb(Vector3(-28.488f, 30.0017f, 15.4466f), Vector3(-23.3912f, 31.1325f, 23.2596f));
  data[21].mAabb = Aabb(Vector3(-24.9445f, -19.1138f, 10.0469f), Vector3(-22.2928f, -11.477f, 16.2306f));
  data[22].mAabb = Aabb(Vector3(-34.1879f, 5.76851f, 28.8239f), Vector3(-27.2096f, 8.25435f, 36.2571f));
  data[23].mAabb = Aabb(Vector3(-27.7316f, -0.0967216f, 8.2245f), Vector3(-25.2622f, 6.50932f, 13.3104f));
  data[24].mAabb = Aabb(Vector3(4.43096f, 11.4498f, 29.3437f), Vector3(10.6916f, 17.2074f, 33.3295f));
  data[25].mAabb = Aabb(Vector3(-19.1936f, -16.7627f, -17.6802f), Vector3(-17.1194f, -16.1129f, -14.2849f));
  data[26].mAabb = Aabb(Vector3(-2.26836f, 10.9642f, -49.7008f), Vector3(5.29768f, 15.4605f, -43.7356f));
  data[27].mAabb = Aabb(Vector3(-37.8362f, -5.51379f, -29.6214f), Vector3(-30.4149f, 1.03148f, -26.9649f));
  data[28].mAabb = Aabb(Vector3(-7.821f, 39.1282f, -24.9363f), Vector3(-4.64467f, 44.712f, -17.5936f));
  data[29].mAabb = Aabb(Vector3(9.23488f, -47.2941f, 1.72159f), Vector3(11.8866f, -42.8514f, 4.21021f));
  data[30].mAabb = Aabb(Vector3(-19.1009f, 21.0439f, 22.0149f), Vector3(-17.5391f, 24.5414f, 28.8417f));
  data[31].mAabb = Aabb(Vector3(-15.0451f, 9.8835f, 34.3372f), Vector3(-13.5854f, 13.1039f, 39.314f));
  data[32].mAabb = Aabb(Vector3(18.027f, -2.40645f, 5.04136f), Vector3(25.0262f, 0.0967925f, 9.97139f));
  data[33].mAabb = Aabb(Vector3(-5.80369f, -6.67572f, -15.1366f), Vector3(-2.449f, -3.12898f, -8.40506f));
  data[34].mAabb = Aabb(Vector3(2.68123f, -2.77581f, 21.138f), Vector3(5.92343f, 1.11815f, 28.2452f));
  data[35].mAabb = Aabb(Vector3(-10.7819f, -23.4612f, 40.7117f), Vector3(-9.90204f, -17.7917f, 41.8841f));
  data[36].mAabb = Aabb(Vector3(30.8904f, -30.9021f, 17.0426f), Vector3(36.4998f, -30.1208f, 21.2705f));
  data[37].mAabb = Aabb(Vector3(-47.1645f, -2.27508f, 17.7296f), Vector3(-41.9084f, 5.26521f, 19.9334f));
  data[38].mAabb = Aabb(Vector3(-20.5325f, -21.2783f, -33.7058f), Vector3(-14.0882f, -17.3215f, -29.4611f));
  data[39].mAabb = Aabb(Vector3(34.7562f, 8.19225f, 19.9592f), Vector3(35.6619f, 11.6815f, 25.4009f));
  data[40].mAabb = Aabb(Vector3(5.3483f, -26.3984f, 30.7296f), Vector3(12.8698f, -21.8662f, 33.4492f));
  data[41].mAabb = Aabb(Vector3(-34.788f, -17.0858f, 16.5359f), Vector3(-33.2633f, -12.0247f, 21.0914f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Frustum frustum;
  frustum.Set(Vector3(35.3276f, 92.8983f, -6.76069f), Vector3(-42.7824f, 61.8341f, 64.862f), Vector3(-1.98682f, -40.745f, 64.862f), Vector3(76.1231f, -9.68075f, -6.76069f), Vector3(-29.3672f, 10.656f, -32.0155f), Vector3(-33.1933f, 9.13431f, -28.5071f), Vector3(-31.2097f, 4.14645f, -28.5071f), Vector3(-27.3835f, 5.66811f, -32.0155f));

  Application::mStatistics.Clear();
  PrintFrustumCastResults(spatialPartition, frustum, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mFrustumAabbTests", Application::mStatistics.mFrustumAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(51);
  data[0].mAabb = Aabb(Vector3(-2.50758f, -2.47893f, -3.78198f), Vector3(2.50758f, 2.47893f, 3.78198f));
  data[1].mAabb = Aabb(Vector3(-0.301207f, 26.9339f, -36.3619f), Vector3(0.631561f, 28.1958f, -34.7266f));
  data[2].mAabb = Aabb(Vector3(26.4048f, -22.7028f, -7.13027f), Vector3(29.3642f, -21.9073f, -5.68398f));
  data[3].mAabb = Aabb(Vector3(-15.2883f, 12.2861f, 2.13709f), Vector3(-13.7683f, 13.4378f, 6.67398f));
  data[4].mAabb = Aabb(Vector3(-1.53138f, -32.7849f, 7.889f), Vector3(6.21279f, -26.1686f, 14.0462f));
  data[5].mAabb = Aabb(Vector3(-32.0719f, -38.3121f, -3.70923f), Vector3(-30.7571f, -30.4276f, 1.39221f));
  data[6].mAabb = Aabb(Vector3(-4.86913f, -38.8917f, -5.22337f), Vector3(1.39642f, -34.1523f, 1.08138f));
  data[7].mAabb = Aabb(Vector3(18.5336f, 0.799971f, 34.0444f), Vector3(22.887f, 6.86698f, 36.4043f));
  data[8].mAabb = Aabb(Vector3(1.75049f, -34.221f, -1.21292f), Vector3(5.60316f, -32.4078f, 0.232899f));
  data[9].mAabb = Aabb(Vector3(-11.0306f, 15.9638f, -29.3692f), Vector3(-3.16231f, 19.8286f, -22.9406f));
  data[10].mAabb = Aabb(Vector3(35.1365f, 0.363216f, -31.9428f), Vector3(38.519f, 3.47483f, -25.6979f));
  data[11].mAabb = Aabb(Vector3(-22.0401f, 3.59088f, -40.1107f), Vector3(-18.302f, 4.69157f, -36.0514f));
  data[12].mAabb = Aabb(Vector3(-19.6512f, 10.5655f, 10.4349f), Vector3(-11.7846f, 18.1921f, 13.8793f));
  data[13].mAabb = Aabb(Vector3(32.8426f, -10.1661f, 32.2664f), Vector3(36.13f, -8.85777f, 37.3999f));
  data[14].mAabb = Aabb(Vector3(-32.8891f, -2.13404f, 30.705f), Vector3(-27.4724f, 0.686955f, 34.9643f));
  data[15].mAabb = Aabb(Vector3(-3.1337f, 39.9141f, 17.4567f), Vector3(-2.48645f, 42.8116f, 24.8669f));
  data[16].mAabb = Aabb(Vector3(32.1811f, 9.06543f, 25.8265f), Vector3(37.8849f, 11.5675f, 28.0343f));
  data[17].mAabb = Aabb(Vector3(27.2713f, 3.03492f, -17.1581f), Vector3(33.7618f, 10.2352f, -15.3147f));
  data[18].mAabb = Aabb(Vector3(29.8592f, -9.41472f, -12.0314f), Vector3(33.0824f, -1.53811f, -6.63822f));
  data[19].mAabb = Aabb(Vector3(-33.2269f, -10.3172f, -14.8775f), Vector3(-26.6733f, -8.96348f, -7.0976f));
  data[20].mAabb = Aabb(Vector3(-34.6607f, -34.0997f, -10.5224f), Vector3(-29.7836f, -30.4467f, -8.87785f));
  data[21].mAabb = Aabb(Vector3(-29.3278f, -43.3592f, 3.06245f), Vector3(-22.1698f, -36.3709f, 5.01065f));
  data[22].mAabb = Aabb(Vector3(27.9372f, 23.767f, -8.60017f), Vector3(32.7232f, 29.8219f, -5.06549f));
  data[23].mAabb = Aabb(Vector3(31.4475f, -2.49367f, -15.132f), Vector3(38.3903f, -1.8172f, -10.9764f));
  data[24].mAabb = Aabb(Vector3(15.5607f, 0.14285f, 14.5124f), Vector3(21.4071f, 1.14427f, 19.394f));
  data[25].mAabb = Aabb(Vector3(-7.83327f, -5.61041f, -6.9384f), Vector3(-4.01168f, -3.29504f, -5.73751f));
  data[26].mAabb = Aabb(Vector3(-3.08566f, -47.5396f, 10.5556f), Vector3(-1.74468f, -45.416f, 13.908f));
  data[27].mAabb = Aabb(Vector3(10.2303f, -31.9265f, -33.564f), Vector3(15.8077f, -31.3353f, -31.2444f));
  data[28].mAabb = Aabb(Vector3(11.1425f, -35.8542f, 14.1206f), Vector3(12.0616f, -29.7775f, 18.4977f));
  data[29].mAabb = Aabb(Vector3(-17.1332f, 8.22728f, -12.1976f), Vector3(-16.0293f, 12.3307f, -5.7275f));
  data[30].mAabb = Aabb(Vector3(5.27215f, -0.452393f, 47.6964f), Vector3(11.9274f, 5.95765f, 49.0822f));
  data[31].mAabb = Aabb(Vector3(8.66877f, -0.514738f, 12.2106f), Vector3(13.7809f, 0.7838f, 19.7873f));
  data[32].mAabb = Aabb(Vector3(7.65944f, 30.1082f, -18.4458f), Vector3(8.36166f, 33.1672f, -11.2601f));
  data[33].mAabb = Aabb(Vector3(-19.9466f, -27.3205f, 2.9031f), Vector3(-15.8391f, -23.5358f, 3.34346f));
  data[34].mAabb = Aabb(Vector3(25.552f, 3.29898f, -32.182f), Vector3(27.8029f, 4.81972f, -29.8989f));
  data[35].mAabb = Aabb(Vector3(-12.5974f, -8.27895f, -3.07694f), Vector3(-4.9404f, -6.49566f, 3.95308f));
  data[36].mAabb = Aabb(Vector3(27.803f, -12.9732f, 1.07695f), Vector3(32.3074f, -5.79798f, 5.24877f));
  data[37].mAabb = Aabb(Vector3(-9.64127f, 36.7748f, 15.3885f), Vector3(-7.28856f, 43.0607f, 17.654f));
  data[38].mAabb = Aabb(Vector3(21.8809f, -5.11757f, -39.9109f), Vector3(23.2659f, -3.90346f, -38.1195f));
  data[39].mAabb = Aabb(Vector3(13.2879f, 37.8424f, 10.6393f), Vector3(18.1783f, 44.5148f, 12.8477f));
  data[40].mAabb = Aabb(Vector3(-25.6522f, 19.5684f, 19.0766f), Vector3(-19.7661f, 22.0125f, 23.8515f));
  data[41].mAabb = Aabb(Vector3(23.9224f, 34.2538f, 15.9084f), Vector3(27.9908f, 37.4137f, 19.6771f));
  data[42].mAabb = Aabb(Vector3(21.7822f, 32.7412f, 23.9109f), Vector3(25.5558f, 36.56f, 28.8059f));
  data[43].mAabb = Aabb(Vector3(-12.4172f, 12.5538f, -30.5909f), Vector3(-9.09125f, 16.1944f, -29.7481f));
  data[44].mAabb = Aabb(Vector3(-8.58084f, -21.5101f, 28.2587f), Vector3(-5.61836f, -19.5385f, 28.7802f));
  data[45].mAabb = Aabb(Vector3(-41.4872f, -34.6043f, 5.90152f), Vector3(-34.6571f, -27.1345f, 7.49601f));
  data[46].mAabb = Aabb(Vector3(-19.0943f, -17.3009f, -31.1915f), Vector3(-18.4259f, -9.8965f, -28.0871f));
  data[47].mAabb = Aabb(Vector3(-14.9514f, 4.14505f, 40.0576f), Vector3(-13.8279f, 6.71647f, 45.8496f));
  data[48].mAabb = Aabb(Vector3(-6.34928f, 20.6273f, -12.8183f), Vector3(-0.494268f, 23.424f, -11.1268f));
  data[49].mAabb = Aabb(Vector3(-4.86284f, 25.2095f, 20.4383f), Vector3(-1.51417f, 31.2299f, 24.1493f));
  data[50].mAabb = Aabb(Vector3(31.9946f, -8.22262f, 9.76155f), Vector3(39.4797f, -5.12074f, 11.8582f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest2(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(55);
  data[0].mAabb = Aabb(Vector3(-16.7992f, 8.13461f, 42.1253f), Vector3(-15.679f, 14.5356f, 44.4535f));
  data[1].mAabb = Aabb(Vector3(5.02642f, -42.8865f, -11.965f), Vector3(7.75673f, -39.7632f, -8.62443f));
  data[2].mAabb = Aabb(Vector3(18.9163f, -8.46484f, 24.647f), Vector3(21.5761f, -7.65244f, 31.9692f));
  data[3].mAabb = Aabb(Vector3(-18.6854f, 8.63766f, -12.1757f), Vector3(-17.7831f, 12.0777f, -10.7477f));
  data[4].mAabb = Aabb(Vector3(22.5016f, -23.5486f, 35.4653f), Vector3(26.2251f, -22.4107f, 38.6694f));
  data[5].mAabb = Aabb(Vector3(-12.9946f, -15.9812f, -10.8763f), Vector3(-7.38054f, -9.24921f, -7.07819f));
  data[6].mAabb = Aabb(Vector3(-28.1376f, -7.56459f, 36.3472f), Vector3(-21.3776f, -1.64487f, 39.627f));
  data[7].mAabb = Aabb(Vector3(20.1201f, -6.18015f, 12.9417f), Vector3(26.3666f, -0.0565493f, 19.6115f));
  data[8].mAabb = Aabb(Vector3(-29.3063f, 8.31735f, -16.3589f), Vector3(-23.6009f, 10.3282f, -15.9535f));
  data[9].mAabb = Aabb(Vector3(-8.16505f, 28.0661f, 0.783156f), Vector3(-5.80168f, 30.5556f, 5.70391f));
  data[10].mAabb = Aabb(Vector3(-20.4696f, 5.24913f, -4.22516f), Vector3(-12.8124f, 6.45142f, -3.66419f));
  data[11].mAabb = Aabb(Vector3(-23.9505f, -21.1168f, -43.3514f), Vector3(-17.9139f, -13.1882f, -39.8327f));
  data[12].mAabb = Aabb(Vector3(23.515f, 20.3285f, -6.98747f), Vector3(28.6197f, 25.1092f, -0.366824f));
  data[13].mAabb = Aabb(Vector3(17.4141f, -9.92787f, -18.258f), Vector3(25.322f, -3.90494f, -11.6717f));
  data[14].mAabb = Aabb(Vector3(2.40877f, -29.316f, 36.9218f), Vector3(8.23549f, -21.4301f, 41.2565f));
  data[15].mAabb = Aabb(Vector3(8.65784f, 25.9946f, -15.1993f), Vector3(9.45956f, 31.4507f, -7.59449f));
  data[16].mAabb = Aabb(Vector3(-35.5819f, 6.35854f, 29.1334f), Vector3(-32.2107f, 13.6827f, 35.4725f));
  data[17].mAabb = Aabb(Vector3(16.9973f, -10.694f, -36.1173f), Vector3(23.4962f, -10.1539f, -35.6405f));
  data[18].mAabb = Aabb(Vector3(-28.9895f, -29.5135f, 10.5896f), Vector3(-26.1645f, -26.41f, 11.5859f));
  data[19].mAabb = Aabb(Vector3(8.6247f, 39.6999f, 17.4092f), Vector3(10.5073f, 45.3244f, 21.9649f));
  data[20].mAabb = Aabb(Vector3(-22.3019f, -1.25339f, -2.4612f), Vector3(-14.7091f, 1.70051f, 3.83009f));
  data[21].mAabb = Aabb(Vector3(-20.1797f, 18.0789f, 0.210072f), Vector3(-18.5047f, 25.4195f, 1.96414f));
  data[22].mAabb = Aabb(Vector3(-12.1237f, -3.69946f, 1.62464f), Vector3(-6.23348f, 1.19184f, 8.80797f));
  data[23].mAabb = Aabb(Vector3(-34.187f, -10.7773f, -4.37218f), Vector3(-30.2179f, -9.12506f, 2.4767f));
  data[24].mAabb = Aabb(Vector3(-2.01026f, -18.0873f, 0.817768f), Vector3(5.06129f, -12.9963f, 7.85498f));
  data[25].mAabb = Aabb(Vector3(2.61003f, 23.2893f, 31.3032f), Vector3(5.1854f, 28.5593f, 33.1899f));
  data[26].mAabb = Aabb(Vector3(5.8101f, 0.883966f, 1.83365f), Vector3(12.7054f, 7.01754f, 3.77142f));
  data[27].mAabb = Aabb(Vector3(-41.8875f, -9.60237f, 11.4717f), Vector3(-33.8968f, -6.41143f, 12.8846f));
  data[28].mAabb = Aabb(Vector3(-40.2492f, 18.4659f, -17.0844f), Vector3(-32.3986f, 22.9481f, -14.979f));
  data[29].mAabb = Aabb(Vector3(-21.5014f, 41.2704f, -5.58592f), Vector3(-14.097f, 44.4015f, -3.35985f));
  data[30].mAabb = Aabb(Vector3(-15.5909f, -11.8925f, 5.18869f), Vector3(-11.5434f, -11.2348f, 5.61072f));
  data[31].mAabb = Aabb(Vector3(34.8541f, 11.0595f, -28.6099f), Vector3(38.0084f, 17.6674f, -27.8309f));
  data[32].mAabb = Aabb(Vector3(-37.2345f, -9.06823f, -19.39f), Vector3(-33.6442f, -5.69614f, -14.7072f));
  data[33].mAabb = Aabb(Vector3(-10.5908f, -1.94345f, -49.892f), Vector3(-3.74657f, 4.69552f, -43.1584f));
  data[34].mAabb = Aabb(Vector3(18.7193f, 21.0645f, -4.02304f), Vector3(24.2616f, 23.7454f, -0.840916f));
  data[35].mAabb = Aabb(Vector3(3.17898f, -16.6541f, -23.8376f), Vector3(10.1137f, -12.4359f, -16.0547f));
  data[36].mAabb = Aabb(Vector3(-7.49133f, -2.85621f, -33.7172f), Vector3(-3.09523f, 2.16707f, -30.6649f));
  data[37].mAabb = Aabb(Vector3(4.24275f, -7.40439f, -15.5067f), Vector3(11.6641f, -5.87415f, -11.2502f));
  data[38].mAabb = Aabb(Vector3(9.27599f, 13.143f, -26.5209f), Vector3(16.8392f, 19.5466f, -23.1604f));
  data[39].mAabb = Aabb(Vector3(-17.0557f, -29.8338f, 19.4942f), Vector3(-13.6435f, -27.7643f, 27.3098f));
  data[40].mAabb = Aabb(Vector3(-30.6467f, -22.9503f, 1.26377f), Vector3(-28.654f, -18.7646f, 5.64666f));
  data[41].mAabb = Aabb(Vector3(-29.5187f, -10.3244f, 40.8242f), Vector3(-23.101f, -4.3031f, 41.9794f));
  data[42].mAabb = Aabb(Vector3(18.3954f, -36.4122f, 8.29819f), Vector3(25.8292f, -29.0563f, 14.5607f));
  data[43].mAabb = Aabb(Vector3(10.5396f, 20.7391f, -10.6232f), Vector3(18.5027f, 21.4123f, -6.79764f));
  data[44].mAabb = Aabb(Vector3(-12.7757f, -4.00558f, -50.2138f), Vector3(-12.3228f, -2.6871f, -42.9446f));
  data[45].mAabb = Aabb(Vector3(-2.25887f, -28.4404f, 9.75473f), Vector3(-0.321106f, -25.8261f, 15.2349f));
  data[46].mAabb = Aabb(Vector3(-13.2013f, 32.8117f, -15.6028f), Vector3(-6.88128f, 34.704f, -15.1344f));
  data[47].mAabb = Aabb(Vector3(24.3236f, 13.477f, -17.1439f), Vector3(31.8207f, 20.5648f, -14.273f));
  data[48].mAabb = Aabb(Vector3(-33.994f, 33.0896f, 13.0373f), Vector3(-27.9205f, 35.6487f, 14.8559f));
  data[49].mAabb = Aabb(Vector3(2.65838f, -17.507f, 29.2395f), Vector3(10.3789f, -9.8498f, 29.9357f));
  data[50].mAabb = Aabb(Vector3(5.32154f, -44.5449f, 0.0792778f), Vector3(6.80192f, -41.7066f, 2.17824f));
  data[51].mAabb = Aabb(Vector3(-6.74213f, 7.29229f, -35.2315f), Vector3(-2.494f, 9.64337f, -27.8122f));
  data[52].mAabb = Aabb(Vector3(-11.6855f, 44.4472f, -5.7884f), Vector3(-4.88463f, 49.891f, -0.895481f));
  data[53].mAabb = Aabb(Vector3(10.8466f, -7.39447f, -48.6145f), Vector3(15.1499f, -2.34568f, -40.8518f));
  data[54].mAabb = Aabb(Vector3(3.20252f, 40.0957f, -16.8093f), Vector3(9.27162f, 42.98f, -11.7809f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest3(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(60);
  data[0].mAabb = Aabb(Vector3(-24.1076f, -15.1458f, -7.50096f), Vector3(-20.3066f, -12.0465f, -2.08362f));
  data[1].mAabb = Aabb(Vector3(-22.833f, -9.96212f, -19.0351f), Vector3(-21.5377f, -4.36689f, -13.8854f));
  data[2].mAabb = Aabb(Vector3(0.631305f, -28.6168f, -33.2125f), Vector3(8.18737f, -24.1708f, -28.0628f));
  data[3].mAabb = Aabb(Vector3(-31.63f, 17.0114f, 7.66613f), Vector3(-27.3814f, 19.3986f, 13.0095f));
  data[4].mAabb = Aabb(Vector3(11.284f, 20.786f, 13.1499f), Vector3(12.2938f, 24.9291f, 17.3272f));
  data[5].mAabb = Aabb(Vector3(5.4573f, 34.2665f, 27.4857f), Vector3(9.16756f, 37.5799f, 33.231f));
  data[6].mAabb = Aabb(Vector3(20.4289f, 21.0309f, 12.3696f), Vector3(25.2787f, 23.8709f, 18.5878f));
  data[7].mAabb = Aabb(Vector3(-12.8842f, 10.5288f, -33.8625f), Vector3(-11.7005f, 16.8076f, -32.2708f));
  data[8].mAabb = Aabb(Vector3(-13.1027f, 35.6984f, 14.7574f), Vector3(-7.24772f, 43.431f, 22.0444f));
  data[9].mAabb = Aabb(Vector3(-21.2117f, 7.67613f, 20.0369f), Vector3(-17.8192f, 11.9523f, 21.0529f));
  data[10].mAabb = Aabb(Vector3(23.0219f, 30.3879f, -15.8573f), Vector3(28.8611f, 32.9714f, -14.7782f));
  data[11].mAabb = Aabb(Vector3(17.0185f, 18.978f, 34.6618f), Vector3(23.173f, 25.1897f, 41.8843f));
  data[12].mAabb = Aabb(Vector3(-31.0684f, 19.9345f, 17.5381f), Vector3(-28.2065f, 26.8771f, 23.1057f));
  data[13].mAabb = Aabb(Vector3(42.393f, 7.6572f, -5.57656f), Vector3(43.9993f, 10.5376f, 0.0286489f));
  data[14].mAabb = Aabb(Vector3(24.0206f, -19.2932f, -31.7671f), Vector3(24.4387f, -13.472f, -24.7471f));
  data[15].mAabb = Aabb(Vector3(-38.8657f, 1.29555f, 21.7951f), Vector3(-31.2751f, 4.55515f, 27.7183f));
  data[16].mAabb = Aabb(Vector3(36.5921f, -10.9933f, 0.767018f), Vector3(43.9166f, -4.90103f, 3.42334f));
  data[17].mAabb = Aabb(Vector3(-3.58337f, 29.0808f, -14.618f), Vector3(4.23085f, 33.1585f, -11.1773f));
  data[18].mAabb = Aabb(Vector3(-42.8968f, 2.98605f, -23.7177f), Vector3(-40.4907f, 3.85689f, -15.9624f));
  data[19].mAabb = Aabb(Vector3(-15.6478f, 15.5547f, 21.721f), Vector3(-8.85091f, 18.1778f, 29.6716f));
  data[20].mAabb = Aabb(Vector3(29.9655f, -5.2548f, -4.17559f), Vector3(31.4721f, 1.68708f, -0.95635f));
  data[21].mAabb = Aabb(Vector3(-35.1461f, -3.52256f, -6.11899f), Vector3(-30.5301f, 3.43441f, -1.53084f));
  data[22].mAabb = Aabb(Vector3(6.80666f, -2.39641f, -41.0308f), Vector3(10.1312f, -0.300689f, -40.0134f));
  data[23].mAabb = Aabb(Vector3(-8.50428f, -34.2229f, -28.3715f), Vector3(-4.23853f, -32.7349f, -25.4176f));
  data[24].mAabb = Aabb(Vector3(-25.8713f, -3.73087f, 12.2759f), Vector3(-21.0772f, -0.29407f, 18.1903f));
  data[25].mAabb = Aabb(Vector3(-24.9134f, 8.64199f, -39.7979f), Vector3(-23.8753f, 13.1197f, -39.3469f));
  data[26].mAabb = Aabb(Vector3(-32.2395f, -34.3641f, 23.7758f), Vector3(-25.3166f, -27.2408f, 29.0711f));
  data[27].mAabb = Aabb(Vector3(-8.85083f, -49.0027f, 1.14042f), Vector3(-2.90815f, -48.3693f, 2.29493f));
  data[28].mAabb = Aabb(Vector3(-27.6988f, 18.0122f, -14.3845f), Vector3(-23.504f, 25.8162f, -13.2771f));
  data[29].mAabb = Aabb(Vector3(14.2025f, -0.244561f, 17.9472f), Vector3(21.1757f, 6.70892f, 25.2711f));
  data[30].mAabb = Aabb(Vector3(19.1237f, 38.1133f, 19.5793f), Vector3(26.7799f, 38.7281f, 22.5014f));
  data[31].mAabb = Aabb(Vector3(9.20902f, -19.5473f, -25.6704f), Vector3(13.0475f, -17.7583f, -22.4001f));
  data[32].mAabb = Aabb(Vector3(12.4933f, 9.11337f, 24.4029f), Vector3(16.0852f, 10.7088f, 28.138f));
  data[33].mAabb = Aabb(Vector3(11.9225f, -22.1356f, 20.8921f), Vector3(16.6894f, -16.4531f, 21.5844f));
  data[34].mAabb = Aabb(Vector3(6.37434f, 7.86109f, 23.5307f), Vector3(10.6849f, 12.4497f, 25.4467f));
  data[35].mAabb = Aabb(Vector3(6.54352f, 5.94342f, 24.8147f), Vector3(13.5392f, 11.8875f, 30.4071f));
  data[36].mAabb = Aabb(Vector3(-6.99589f, -40.4121f, -8.29334f), Vector3(-5.2518f, -38.7253f, -0.974315f));
  data[37].mAabb = Aabb(Vector3(-22.7833f, 9.06183f, 16.5864f), Vector3(-21.2227f, 14.995f, 22.8721f));
  data[38].mAabb = Aabb(Vector3(-18.1843f, 0.240183f, -9.91485f), Vector3(-15.0035f, 0.727393f, -6.14637f));
  data[39].mAabb = Aabb(Vector3(-10.1518f, -43.6059f, -7.49841f), Vector3(-8.95207f, -38.6026f, -5.28487f));
  data[40].mAabb = Aabb(Vector3(33.0221f, 8.42706f, -10.7894f), Vector3(38.4606f, 14.046f, -7.25914f));
  data[41].mAabb = Aabb(Vector3(-11.8581f, -39.4094f, 19.5845f), Vector3(-9.08117f, -31.7346f, 25.4625f));
  data[42].mAabb = Aabb(Vector3(1.66683f, 9.59869f, 4.78217f), Vector3(4.86264f, 13.7986f, 11.1655f));
  data[43].mAabb = Aabb(Vector3(-5.08494f, -0.204045f, -36.2143f), Vector3(-0.439031f, 4.59239f, -29.012f));
  data[44].mAabb = Aabb(Vector3(-1.38446f, -15.1896f, -15.6967f), Vector3(0.406029f, -8.8941f, -9.19407f));
  data[45].mAabb = Aabb(Vector3(-4.35118f, -45.3077f, -5.9448f), Vector3(1.20996f, -42.8464f, 1.49459f));
  data[46].mAabb = Aabb(Vector3(38.7857f, 11.3094f, 18.5706f), Vector3(39.7823f, 16.5405f, 22.7366f));
  data[47].mAabb = Aabb(Vector3(-0.386935f, 14.4688f, -12.9177f), Vector3(6.36476f, 17.9043f, -7.38645f));
  data[48].mAabb = Aabb(Vector3(-3.96368f, -24.063f, 26.8074f), Vector3(-0.266415f, -16.4351f, 32.7053f));
  data[49].mAabb = Aabb(Vector3(-12.1519f, 6.51251f, -49.6466f), Vector3(-7.58295f, 8.17728f, -43.6076f));
  data[50].mAabb = Aabb(Vector3(-45.4222f, -11.5465f, -9.37597f), Vector3(-44.6609f, -5.92416f, -8.91358f));
  data[51].mAabb = Aabb(Vector3(-35.7609f, 33.1267f, -1.75854f), Vector3(-32.8401f, 34.1487f, 5.79405f));
  data[52].mAabb = Aabb(Vector3(-13.5106f, -19.2871f, -16.7938f), Vector3(-12.2726f, -16.1567f, -16.0753f));
  data[53].mAabb = Aabb(Vector3(7.78798f, 35.3104f, 22.0959f), Vector3(10.294f, 40.1666f, 24.7901f));
  data[54].mAabb = Aabb(Vector3(26.8533f, -36.5411f, -11.2416f), Vector3(32.8362f, -29.9189f, -9.29343f));
  data[55].mAabb = Aabb(Vector3(11.2015f, 6.39833f, -2.80066f), Vector3(14.86f, 9.10428f, -0.97538f));
  data[56].mAabb = Aabb(Vector3(-14.6807f, 6.73162f, 27.5666f), Vector3(-13.2553f, 7.79706f, 35.0394f));
  data[57].mAabb = Aabb(Vector3(-16.1351f, 4.70556f, -35.8644f), Vector3(-13.5178f, 11.8462f, -30.6899f));
  data[58].mAabb = Aabb(Vector3(13.445f, 29.383f, -1.51271f), Vector3(14.2393f, 33.2885f, 1.05478f));
  data[59].mAabb = Aabb(Vector3(-15.21f, -31.9402f, 15.9602f), Vector3(-12.376f, -24.4479f, 19.8523f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest4(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(53);
  data[0].mAabb = Aabb(Vector3(30.1325f, 19.8332f, -1.08904f), Vector3(34.8211f, 25.6444f, 3.35253f));
  data[1].mAabb = Aabb(Vector3(-34.2909f, 12.7534f, 17.074f), Vector3(-31.1392f, 20.0411f, 20.2462f));
  data[2].mAabb = Aabb(Vector3(-12.9589f, 26.34f, -1.8353f), Vector3(-10.3362f, 33.9881f, 6.06589f));
  data[3].mAabb = Aabb(Vector3(11.2737f, 28.0102f, -6.58087f), Vector3(14.6783f, 31.0764f, 1.4022f));
  data[4].mAabb = Aabb(Vector3(4.91411f, -33.5782f, 27.7206f), Vector3(8.69093f, -32.6086f, 28.1811f));
  data[5].mAabb = Aabb(Vector3(6.72912f, -43.3681f, 14.0211f), Vector3(8.03114f, -37.9632f, 19.3385f));
  data[6].mAabb = Aabb(Vector3(29.2857f, -14.3844f, -40.4207f), Vector3(31.4983f, -10.3378f, -34.6802f));
  data[7].mAabb = Aabb(Vector3(-19.7352f, 11.0762f, 4.27473f), Vector3(-12.5344f, 15.4598f, 7.56355f));
  data[8].mAabb = Aabb(Vector3(-12.0083f, -18.0766f, -8.89825f), Vector3(-8.96183f, -11.9935f, -8.23128f));
  data[9].mAabb = Aabb(Vector3(26.9241f, 12.9917f, -38.8451f), Vector3(30.8814f, 16.9939f, -32.0577f));
  data[10].mAabb = Aabb(Vector3(-45.9075f, -16.92f, 8.19335f), Vector3(-38.8856f, -15.7706f, 10.9227f));
  data[11].mAabb = Aabb(Vector3(35.8588f, -27.5141f, 15.9616f), Vector3(39.3907f, -20.2907f, 16.5587f));
  data[12].mAabb = Aabb(Vector3(14.1302f, 22.5182f, 3.23623f), Vector3(21.3984f, 23.2721f, 4.14743f));
  data[13].mAabb = Aabb(Vector3(-41.2775f, 6.00958f, -12.0192f), Vector3(-36.7707f, 7.8729f, -6.04218f));
  data[14].mAabb = Aabb(Vector3(25.3746f, -25.9718f, 6.87654f), Vector3(26.2345f, -23.9554f, 11.4981f));
  data[15].mAabb = Aabb(Vector3(15.5233f, 25.525f, 18.1673f), Vector3(22.5617f, 27.7155f, 18.68f));
  data[16].mAabb = Aabb(Vector3(13.2285f, 2.43175f, -42.5386f), Vector3(19.6163f, 8.63954f, -40.2135f));
  data[17].mAabb = Aabb(Vector3(3.4828f, 34.7006f, -19.8117f), Vector3(5.83156f, 41.9959f, -15.7514f));
  data[18].mAabb = Aabb(Vector3(-17.2999f, -12.3218f, -6.92983f), Vector3(-10.7486f, -8.50628f, -1.53383f));
  data[19].mAabb = Aabb(Vector3(5.81491f, 41.7975f, -18.1913f), Vector3(7.89114f, 48.8904f, -11.6078f));
  data[20].mAabb = Aabb(Vector3(-30.4795f, -19.3565f, 27.9933f), Vector3(-25.8878f, -13.656f, 34.8914f));
  data[21].mAabb = Aabb(Vector3(-17.5121f, 4.45783f, 30.3423f), Vector3(-15.7204f, 7.88094f, 33.049f));
  data[22].mAabb = Aabb(Vector3(-23.2456f, -10.1253f, 29.532f), Vector3(-16.0734f, -4.02029f, 29.9418f));
  data[23].mAabb = Aabb(Vector3(1.62228f, 26.821f, 23.1648f), Vector3(6.41732f, 29.1303f, 29.5551f));
  data[24].mAabb = Aabb(Vector3(-32.1828f, -12.6207f, -4.01258f), Vector3(-31.2633f, -9.94424f, -1.40775f));
  data[25].mAabb = Aabb(Vector3(11.0896f, -15.3509f, -30.1407f), Vector3(11.5963f, -9.71433f, -23.5971f));
  data[26].mAabb = Aabb(Vector3(6.909f, -6.19959f, 37.7484f), Vector3(8.15048f, -1.33218f, 42.0478f));
  data[27].mAabb = Aabb(Vector3(-22.2296f, -25.2344f, 10.9351f), Vector3(-21.4671f, -21.321f, 13.9212f));
  data[28].mAabb = Aabb(Vector3(-13.3063f, -25.9744f, 38.6083f), Vector3(-8.27702f, -22.0981f, 45.0895f));
  data[29].mAabb = Aabb(Vector3(21.1645f, -22.8191f, -38.3126f), Vector3(26.6925f, -16.8356f, -30.741f));
  data[30].mAabb = Aabb(Vector3(-19.4289f, -23.5471f, 10.2917f), Vector3(-17.5691f, -20.8562f, 15.5233f));
  data[31].mAabb = Aabb(Vector3(15.4318f, -34.6128f, -28.1158f), Vector3(16.7739f, -33.6726f, -22.631f));
  data[32].mAabb = Aabb(Vector3(33.2929f, 5.91027f, 13.6636f), Vector3(37.8036f, 9.30532f, 19.7148f));
  data[33].mAabb = Aabb(Vector3(-27.6028f, -26.8076f, 27.0438f), Vector3(-26.7976f, -24.6908f, 31.7709f));
  data[34].mAabb = Aabb(Vector3(13.5889f, -22.7314f, 1.33949f), Vector3(16.1863f, -18.0275f, 8.84545f));
  data[35].mAabb = Aabb(Vector3(-3.64964f, -28.5464f, -22.6878f), Vector3(2.37075f, -20.9377f, -21.0884f));
  data[36].mAabb = Aabb(Vector3(-35.9157f, -18.9507f, -30.3764f), Vector3(-30.566f, -13.2617f, -26.074f));
  data[37].mAabb = Aabb(Vector3(34.6077f, 25.5107f, -12.1302f), Vector3(37.7124f, 29.9003f, -6.73212f));
  data[38].mAabb = Aabb(Vector3(-21.7436f, -13.4454f, -2.49914f), Vector3(-20.4095f, -5.58966f, 0.406519f));
  data[39].mAabb = Aabb(Vector3(-8.54466f, -14.747f, 3.22187f), Vector3(-1.06351f, -12.256f, 6.55522f));
  data[40].mAabb = Aabb(Vector3(21.102f, -32.5611f, 24.8263f), Vector3(22.2438f, -28.6268f, 25.8402f));
  data[41].mAabb = Aabb(Vector3(-25.3311f, -42.0833f, 11.6835f), Vector3(-24.2701f, -36.1844f, 12.9702f));
  data[42].mAabb = Aabb(Vector3(-32.4816f, 18.8396f, 26.5216f), Vector3(-26.4339f, 25.1905f, 34.1217f));
  data[43].mAabb = Aabb(Vector3(1.65701f, 4.57217f, 15.8573f), Vector3(3.09193f, 10.0064f, 22.0741f));
  data[44].mAabb = Aabb(Vector3(8.0825f, -34.9085f, 5.96901f), Vector3(15.9401f, -29.9736f, 7.60178f));
  data[45].mAabb = Aabb(Vector3(-23.4054f, 25.4256f, -29.0435f), Vector3(-18.0266f, 32.1084f, -26.8188f));
  data[46].mAabb = Aabb(Vector3(-32.5185f, 13.4355f, 24.7674f), Vector3(-25.1645f, 19.0676f, 29.762f));
  data[47].mAabb = Aabb(Vector3(14.7422f, 4.24488f, 8.559f), Vector3(15.9356f, 7.6738f, 15.0569f));
  data[48].mAabb = Aabb(Vector3(-8.68389f, -32.5328f, 37.9166f), Vector3(-4.12891f, -30.753f, 38.4161f));
  data[49].mAabb = Aabb(Vector3(-10.6213f, -3.78882f, 6.81168f), Vector3(-5.63724f, -2.92402f, 13.1477f));
  data[50].mAabb = Aabb(Vector3(9.84702f, 16.2778f, -45.0574f), Vector3(11.2423f, 23.1898f, -37.7233f));
  data[51].mAabb = Aabb(Vector3(-44.6563f, -2.01128f, -27.0245f), Vector3(-40.8591f, 4.61934f, -19.1439f));
  data[52].mAabb = Aabb(Vector3(0.905584f, 18.8621f, 37.4681f), Vector3(1.35058f, 19.5133f, 44.2933f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest5(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(68);
  data[0].mAabb = Aabb(Vector3(8.51379f, -29.0914f, -5.49732f), Vector3(13.8657f, -28.2268f, 1.04076f));
  data[1].mAabb = Aabb(Vector3(-28.5292f, 0.999673f, -18.6841f), Vector3(-28.0763f, 5.75088f, -14.7176f));
  data[2].mAabb = Aabb(Vector3(-14.8418f, 33.4101f, 26.1557f), Vector3(-12.2277f, 39.5936f, 32.7098f));
  data[3].mAabb = Aabb(Vector3(-0.745195f, -5.05895f, 20.7074f), Vector3(6.27323f, -3.68434f, 24.6006f));
  data[4].mAabb = Aabb(Vector3(17.6287f, 32.2114f, -26.611f), Vector3(19.9031f, 33.2102f, -19.2171f));
  data[5].mAabb = Aabb(Vector3(35.5859f, -3.27297f, 19.3573f), Vector3(42.8643f, 4.4088f, 24.9154f));
  data[6].mAabb = Aabb(Vector3(27.5858f, -20.1954f, 7.53418f), Vector3(30.5181f, -19.7764f, 10.7495f));
  data[7].mAabb = Aabb(Vector3(29.802f, -15.3278f, 6.40103f), Vector3(37.5638f, -10.045f, 9.93362f));
  data[8].mAabb = Aabb(Vector3(-30.6966f, -34.2063f, -0.746722f), Vector3(-27.3057f, -26.3685f, 2.67964f));
  data[9].mAabb = Aabb(Vector3(-27.4372f, 7.94766f, 5.85039f), Vector3(-23.358f, 8.71459f, 7.43886f));
  data[10].mAabb = Aabb(Vector3(10.8935f, 1.94367f, 1.5557f), Vector3(12.1355f, 8.77353f, 4.40754f));
  data[11].mAabb = Aabb(Vector3(-2.72864f, 14.8577f, -13.6132f), Vector3(5.109f, 15.8649f, -11.3843f));
  data[12].mAabb = Aabb(Vector3(7.1769f, -10.5834f, -15.0116f), Vector3(14.6151f, -6.698f, -10.4315f));
  data[13].mAabb = Aabb(Vector3(19.4612f, -13.9953f, 27.674f), Vector3(20.5322f, -13.281f, 32.7546f));
  data[14].mAabb = Aabb(Vector3(-40.1678f, -14.0513f, 19.7511f), Vector3(-36.7048f, -6.30526f, 24.7556f));
  data[15].mAabb = Aabb(Vector3(7.90261f, 30.8285f, 1.67473f), Vector3(13.0082f, 37.5247f, 3.2342f));
  data[16].mAabb = Aabb(Vector3(-13.27f, 28.012f, 13.6096f), Vector3(-6.15412f, 30.1186f, 19.9776f));
  data[17].mAabb = Aabb(Vector3(-37.5404f, -25.3909f, 20.4688f), Vector3(-31.3759f, -19.8986f, 23.0938f));
  data[18].mAabb = Aabb(Vector3(7.23104f, -18.3184f, 34.9028f), Vector3(13.5474f, -15.6746f, 39.2309f));
  data[19].mAabb = Aabb(Vector3(-11.9758f, -6.43637f, 22.4118f), Vector3(-11.3468f, -1.19925f, 25.8435f));
  data[20].mAabb = Aabb(Vector3(21.379f, -20.9279f, -4.26746f), Vector3(24.3297f, -16.5932f, -3.61813f));
  data[21].mAabb = Aabb(Vector3(-28.3409f, -21.5341f, -21.854f), Vector3(-27.2724f, -16.3095f, -16.5598f));
  data[22].mAabb = Aabb(Vector3(-27.9282f, 26.3374f, -12.1239f), Vector3(-25.7652f, 27.565f, -8.38144f));
  data[23].mAabb = Aabb(Vector3(-41.3185f, -1.75843f, 17.8311f), Vector3(-33.7678f, -0.53156f, 24.2055f));
  data[24].mAabb = Aabb(Vector3(-32.9405f, -19.6727f, 9.92623f), Vector3(-26.2291f, -13.4442f, 16.2815f));
  data[25].mAabb = Aabb(Vector3(-13.5257f, -28.7451f, 27.6519f), Vector3(-7.7834f, -27.1079f, 33.159f));
  data[26].mAabb = Aabb(Vector3(-9.25702f, -35.0349f, -11.1342f), Vector3(-5.4621f, -32.7722f, -9.19987f));
  data[27].mAabb = Aabb(Vector3(7.46426f, 30.8363f, -3.84886f), Vector3(11.3844f, 33.7299f, 2.72587f));
  data[28].mAabb = Aabb(Vector3(-26.1896f, 0.892362f, -8.34858f), Vector3(-22.2179f, 4.0724f, -2.18277f));
  data[29].mAabb = Aabb(Vector3(-16.691f, 26.7652f, -19.9259f), Vector3(-13.4959f, 32.4175f, -12.8836f));
  data[30].mAabb = Aabb(Vector3(12.911f, -8.02624f, 30.3475f), Vector3(18.4828f, -4.26774f, 31.1562f));
  data[31].mAabb = Aabb(Vector3(-1.02876f, 6.34498f, 5.24083f), Vector3(3.24163f, 11.3103f, 8.90934f));
  data[32].mAabb = Aabb(Vector3(-21.1883f, 30.1738f, 31.046f), Vector3(-16.1634f, 34.9482f, 32.9819f));
  data[33].mAabb = Aabb(Vector3(-6.3011f, -11.0154f, -9.72948f), Vector3(-0.46116f, -5.48158f, -3.12693f));
  data[34].mAabb = Aabb(Vector3(3.92276f, 3.07076f, -48.6606f), Vector3(6.43365f, 9.5715f, -46.1704f));
  data[35].mAabb = Aabb(Vector3(-3.97252f, 18.2754f, 16.0899f), Vector3(2.77152f, 21.1662f, 19.7693f));
  data[36].mAabb = Aabb(Vector3(13.0919f, 1.86785f, -40.9757f), Vector3(14.8397f, 6.46227f, -34.5023f));
  data[37].mAabb = Aabb(Vector3(42.6744f, -19.4327f, 3.59007f), Vector3(47.6675f, -15.0496f, 6.51915f));
  data[38].mAabb = Aabb(Vector3(19.2973f, 4.52731f, -27.5f), Vector3(25.8247f, 7.86229f, -24.0247f));
  data[39].mAabb = Aabb(Vector3(17.1072f, -40.0306f, -23.1983f), Vector3(22.8771f, -39.6204f, -19.2909f));
  data[40].mAabb = Aabb(Vector3(-6.76642f, 0.647209f, -41.2706f), Vector3(-1.55133f, 4.82807f, -39.2074f));
  data[41].mAabb = Aabb(Vector3(-29.9058f, -13.0899f, -13.04f), Vector3(-28.7787f, -7.70553f, -9.97452f));
  data[42].mAabb = Aabb(Vector3(-3.08959f, -18.8191f, 31.3449f), Vector3(3.53175f, -11.4195f, 32.4781f));
  data[43].mAabb = Aabb(Vector3(-2.40974f, 34.6251f, -36.3858f), Vector3(-0.520445f, 37.5004f, -31.0178f));
  data[44].mAabb = Aabb(Vector3(29.8725f, -35.7953f, -13.7477f), Vector3(34.335f, -28.2554f, -11.2008f));
  data[45].mAabb = Aabb(Vector3(2.06808f, -31.2874f, -27.4267f), Vector3(2.94031f, -25.688f, -24.4549f));
  data[46].mAabb = Aabb(Vector3(-26.4452f, -28.6504f, -24.1903f), Vector3(-24.2273f, -23.3437f, -19.2324f));
  data[47].mAabb = Aabb(Vector3(-10.0864f, -19.6974f, -38.156f), Vector3(-8.9528f, -15.7779f, -30.975f));
  data[48].mAabb = Aabb(Vector3(-39.8738f, -4.64573f, 19.7508f), Vector3(-33.8715f, -3.24653f, 25.8971f));
  data[49].mAabb = Aabb(Vector3(17.3525f, 32.8389f, -5.61801f), Vector3(20.9194f, 38.7521f, -2.33034f));
  data[50].mAabb = Aabb(Vector3(-7.02078f, 38.8224f, 2.00958f), Vector3(-3.76373f, 41.3001f, 8.9786f));
  data[51].mAabb = Aabb(Vector3(16.9422f, 21.8475f, -28.1086f), Vector3(20.892f, 25.3254f, -22.3981f));
  data[52].mAabb = Aabb(Vector3(34.2268f, 13.3912f, 27.6723f), Vector3(36.3123f, 18.2101f, 33.9142f));
  data[53].mAabb = Aabb(Vector3(-19.9318f, 1.32036f, -27.2159f), Vector3(-12.1707f, 8.04956f, -20.1677f));
  data[54].mAabb = Aabb(Vector3(-20.2911f, -27.9601f, 3.55526f), Vector3(-15.6603f, -26.9355f, 6.01953f));
  data[55].mAabb = Aabb(Vector3(15.6865f, -5.31388f, 10.7997f), Vector3(22.164f, -1.35498f, 16.8528f));
  data[56].mAabb = Aabb(Vector3(30.2932f, 24.2268f, 18.6124f), Vector3(34.8115f, 29.9726f, 25.5116f));
  data[57].mAabb = Aabb(Vector3(3.0554f, 21.1707f, 27.1656f), Vector3(10.3208f, 25.7856f, 34.1119f));
  data[58].mAabb = Aabb(Vector3(-19.356f, 17.3279f, 32.1622f), Vector3(-15.9823f, 18.7101f, 40.0831f));
  data[59].mAabb = Aabb(Vector3(35.2084f, 23.3819f, -0.660704f), Vector3(41.7836f, 30.7448f, 7.2166f));
  data[60].mAabb = Aabb(Vector3(-28.6079f, 17.7732f, 1.14181f), Vector3(-21.3837f, 22.6972f, 6.28592f));
  data[61].mAabb = Aabb(Vector3(34.4263f, -30.5378f, 2.87007f), Vector3(41.5818f, -25.4415f, 10.6184f));
  data[62].mAabb = Aabb(Vector3(28.1971f, -4.19306f, 16.9684f), Vector3(33.5989f, 0.699633f, 24.6145f));
  data[63].mAabb = Aabb(Vector3(-26.8001f, -23.3785f, -26.0848f), Vector3(-19.803f, -17.625f, -22.4729f));
  data[64].mAabb = Aabb(Vector3(-3.30318f, 2.00732f, -40.7136f), Vector3(3.45455f, 9.55852f, -39.9224f));
  data[65].mAabb = Aabb(Vector3(30.8312f, -7.50314f, -10.7355f), Vector3(37.3523f, -1.49806f, -2.87906f));
  data[66].mAabb = Aabb(Vector3(-21.3086f, -8.80438f, -29.6547f), Vector3(-14.7079f, -6.66784f, -25.6749f));
  data[67].mAabb = Aabb(Vector3(-23.6471f, 8.83903f, -26.9095f), Vector3(-23.1272f, 11.9168f, -22.7226f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest6(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(35);
  data[0].mAabb = Aabb(Vector3(-43.71f, -12.9205f, 4.57206f), Vector3(-40.2903f, -7.38653f, 8.56645f));
  data[1].mAabb = Aabb(Vector3(23.5208f, 4.55855f, -34.418f), Vector3(24.3443f, 10.6207f, -31.9672f));
  data[2].mAabb = Aabb(Vector3(-33.1303f, 2.34601f, -34.7239f), Vector3(-29.2837f, 7.15729f, -30.6664f));
  data[3].mAabb = Aabb(Vector3(-36.608f, 11.4273f, 10.9991f), Vector3(-35.4881f, 17.6302f, 15.3268f));
  data[4].mAabb = Aabb(Vector3(-23.4072f, 3.67646f, 42.3565f), Vector3(-17.3087f, 9.87869f, 47.0585f));
  data[5].mAabb = Aabb(Vector3(17.4762f, 33.6361f, 23.1494f), Vector3(21.8948f, 35.1745f, 28.5512f));
  data[6].mAabb = Aabb(Vector3(21.4777f, 32.0877f, -3.7401f), Vector3(23.9336f, 36.4042f, 1.40424f));
  data[7].mAabb = Aabb(Vector3(-6.48878f, -34.8134f, 31.6145f), Vector3(-4.731f, -33.9274f, 38.4418f));
  data[8].mAabb = Aabb(Vector3(-2.15006f, 5.54891f, 39.7893f), Vector3(-0.28489f, 7.08727f, 45.3499f));
  data[9].mAabb = Aabb(Vector3(-10.303f, 6.32501f, 33.4815f), Vector3(-7.06498f, 11.8971f, 38.2211f));
  data[10].mAabb = Aabb(Vector3(-13.3442f, 23.2462f, 7.17912f), Vector3(-11.1903f, 26.2775f, 13.1037f));
  data[11].mAabb = Aabb(Vector3(-29.0272f, 21.1673f, -26.6276f), Vector3(-28.1636f, 23.3257f, -23.0998f));
  data[12].mAabb = Aabb(Vector3(-19.5292f, -12.5129f, -22.4663f), Vector3(-14.5781f, -7.28739f, -20.8737f));
  data[13].mAabb = Aabb(Vector3(13.9327f, -13.4802f, -15.2076f), Vector3(16.4044f, -5.57272f, -7.51885f));
  data[14].mAabb = Aabb(Vector3(1.93228f, 22.3455f, -2.59389f), Vector3(7.55836f, 28.3972f, 2.26146f));
  data[15].mAabb = Aabb(Vector3(-45.2228f, 18.1727f, -2.61543f), Vector3(-42.665f, 19.7227f, -2.0431f));
  data[16].mAabb = Aabb(Vector3(0.398119f, -0.989546f, 45.3237f), Vector3(1.156f, -0.405849f, 49.1801f));
  data[17].mAabb = Aabb(Vector3(39.0176f, -16.1689f, -18.5926f), Vector3(41.834f, -14.8509f, -12.8565f));
  data[18].mAabb = Aabb(Vector3(26.7219f, -31.6052f, -12.1971f), Vector3(32.9696f, -26.0524f, -10.0916f));
  data[19].mAabb = Aabb(Vector3(-31.0585f, -30.6937f, 10.1946f), Vector3(-29.6542f, -29.4887f, 13.806f));
  data[20].mAabb = Aabb(Vector3(-14.7253f, 16.6662f, 31.9124f), Vector3(-7.74008f, 24.659f, 36.2972f));
  data[21].mAabb = Aabb(Vector3(31.5963f, 16.8673f, 20.8833f), Vector3(34.5363f, 21.4822f, 25.2913f));
  data[22].mAabb = Aabb(Vector3(-11.2466f, 15.5022f, 2.51203f), Vector3(-5.26073f, 18.5872f, 3.58187f));
  data[23].mAabb = Aabb(Vector3(16.8901f, 28.2713f, 20.8999f), Vector3(23.1434f, 31.436f, 25.2538f));
  data[24].mAabb = Aabb(Vector3(-23.2488f, 3.14802f, 29.6038f), Vector3(-20.5431f, 4.40759f, 36.279f));
  data[25].mAabb = Aabb(Vector3(11.1403f, 9.551f, 14.6771f), Vector3(17.8358f, 12.5534f, 19.2739f));
  data[26].mAabb = Aabb(Vector3(15.9923f, -12.4891f, -23.2293f), Vector3(23.6434f, -10.0706f, -16.196f));
  data[27].mAabb = Aabb(Vector3(-9.07264f, 4.1647f, -2.48111f), Vector3(-8.6462f, 11.365f, -0.2119f));
  data[28].mAabb = Aabb(Vector3(13.2289f, 26.8177f, -4.02355f), Vector3(19.8214f, 34.1594f, 3.70392f));
  data[29].mAabb = Aabb(Vector3(-8.27041f, -39.7074f, -5.50466f), Vector3(-3.5853f, -36.3186f, -1.66729f));
  data[30].mAabb = Aabb(Vector3(21.8335f, -43.252f, -6.38991f), Vector3(26.132f, -39.9126f, 1.39346f));
  data[31].mAabb = Aabb(Vector3(-14.9646f, -38.7649f, 22.3511f), Vector3(-9.50457f, -36.7701f, 22.9905f));
  data[32].mAabb = Aabb(Vector3(-24.2488f, -18.2773f, 35.8305f), Vector3(-16.3525f, -16.463f, 43.465f));
  data[33].mAabb = Aabb(Vector3(-40.5886f, -18.8533f, -10.6596f), Vector3(-34.4147f, -11.8115f, -8.32596f));
  data[34].mAabb = Aabb(Vector3(-22.8054f, -24.0337f, -23.235f), Vector3(-19.0255f, -20.04f, -18.6585f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest7(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(26);
  data[0].mAabb = Aabb(Vector3(1.91914f, -13.8079f, 2.5808f), Vector3(9.27922f, -7.80284f, 3.9858f));
  data[1].mAabb = Aabb(Vector3(11.7349f, -23.4476f, -43.502f), Vector3(12.8544f, -22.5701f, -40.6762f));
  data[2].mAabb = Aabb(Vector3(-0.997611f, 22.5759f, 35.0433f), Vector3(5.13782f, 26.1285f, 37.7666f));
  data[3].mAabb = Aabb(Vector3(37.2761f, -2.1412f, 2.94529f), Vector3(39.5274f, 1.10286f, 10.2873f));
  data[4].mAabb = Aabb(Vector3(-30.9472f, 36.9036f, -6.90366f), Vector3(-28.4563f, 38.4417f, -3.42464f));
  data[5].mAabb = Aabb(Vector3(-20.6193f, 25.1285f, -30.2429f), Vector3(-16.3927f, 31.0336f, -26.557f));
  data[6].mAabb = Aabb(Vector3(25.1066f, -32.0647f, -23.032f), Vector3(29.7708f, -25.8105f, -21.0513f));
  data[7].mAabb = Aabb(Vector3(-7.22291f, -22.7419f, -47.6084f), Vector3(-3.13111f, -20.0605f, -41.491f));
  data[8].mAabb = Aabb(Vector3(-8.33838f, -48.5469f, 7.52874f), Vector3(-6.57851f, -41.4337f, 11.5384f));
  data[9].mAabb = Aabb(Vector3(-14.6695f, 2.57734f, -47.7494f), Vector3(-12.5107f, 4.22008f, -42.542f));
  data[10].mAabb = Aabb(Vector3(18.4116f, -21.9335f, 20.5693f), Vector3(24.6024f, -17.7582f, 28.2603f));
  data[11].mAabb = Aabb(Vector3(-14.445f, 20.3463f, -11.0147f), Vector3(-10.6028f, 27.5967f, -5.75136f));
  data[12].mAabb = Aabb(Vector3(-39.9813f, -2.08929f, -8.70363f), Vector3(-36.769f, 0.705729f, -5.30603f));
  data[13].mAabb = Aabb(Vector3(33.3876f, -30.8351f, -11.7918f), Vector3(34.0555f, -26.6598f, -8.27173f));
  data[14].mAabb = Aabb(Vector3(29.9007f, -5.59498f, -36.2199f), Vector3(31.9619f, 1.85973f, -29.7115f));
  data[15].mAabb = Aabb(Vector3(-13.9665f, 20.4153f, -36.2737f), Vector3(-8.69508f, 27.5743f, -29.461f));
  data[16].mAabb = Aabb(Vector3(32.0524f, -34.7811f, -2.04467f), Vector3(39.0662f, -29.7421f, 5.77813f));
  data[17].mAabb = Aabb(Vector3(-8.49586f, -11.1048f, -12.6052f), Vector3(-2.30268f, -9.23058f, -9.7643f));
  data[18].mAabb = Aabb(Vector3(18.512f, 4.99851f, 1.01229f), Vector3(22.5852f, 12.6237f, 4.86635f));
  data[19].mAabb = Aabb(Vector3(-35.2454f, 34.6293f, -9.41735f), Vector3(-34.3595f, 35.3805f, -4.87558f));
  data[20].mAabb = Aabb(Vector3(-2.07764f, 21.2915f, -47.0687f), Vector3(-0.0767858f, 21.9274f, -40.0614f));
  data[21].mAabb = Aabb(Vector3(3.33373f, 16.7645f, 33.3679f), Vector3(6.48292f, 17.4966f, 34.4433f));
  data[22].mAabb = Aabb(Vector3(-3.24537f, 14.4228f, -13.4662f), Vector3(-0.242298f, 17.6571f, -5.61023f));
  data[23].mAabb = Aabb(Vector3(-28.023f, 9.48086f, 29.9457f), Vector3(-27.0281f, 15.5949f, 32.2935f));
  data[24].mAabb = Aabb(Vector3(18.0961f, -8.85528f, -6.92336f), Vector3(20.6801f, -5.64764f, -4.59223f));
  data[25].mAabb = Aabb(Vector3(-26.7249f, 37.536f, -5.99078f), Vector3(-22.3569f, 39.7809f, -3.02134f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest8(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(30);
  data[0].mAabb = Aabb(Vector3(8.878f, -9.07409f, 45.3967f), Vector3(11.7143f, -1.74347f, 45.9184f));
  data[1].mAabb = Aabb(Vector3(14.2529f, 18.8256f, 22.1704f), Vector3(21.2286f, 22.0314f, 25.9136f));
  data[2].mAabb = Aabb(Vector3(28.3338f, -2.17212f, 25.8687f), Vector3(30.029f, 4.70854f, 28.8352f));
  data[3].mAabb = Aabb(Vector3(6.10369f, 5.86368f, 18.7906f), Vector3(13.714f, 10.7636f, 25.7023f));
  data[4].mAabb = Aabb(Vector3(19.928f, -26.2694f, 19.7644f), Vector3(23.4805f, -20.5243f, 26.2902f));
  data[5].mAabb = Aabb(Vector3(19.5083f, -27.6245f, -14.963f), Vector3(22.2015f, -24.9979f, -7.82673f));
  data[6].mAabb = Aabb(Vector3(-39.0867f, -28.9217f, 2.87403f), Vector3(-35.1517f, -23.1734f, 9.19107f));
  data[7].mAabb = Aabb(Vector3(-21.323f, 6.47968f, -21.5418f), Vector3(-20.6447f, 12.7241f, -19.3609f));
  data[8].mAabb = Aabb(Vector3(0.119425f, -42.753f, 24.4772f), Vector3(7.90488f, -40.1422f, 27.0041f));
  data[9].mAabb = Aabb(Vector3(18.6774f, -3.81513f, -20.9002f), Vector3(25.3968f, 3.97148f, -16.0312f));
  data[10].mAabb = Aabb(Vector3(23.1831f, -27.8873f, 28.5629f), Vector3(26.3685f, -21.0528f, 33.7727f));
  data[11].mAabb = Aabb(Vector3(22.2306f, -18.4234f, -21.0411f), Vector3(26.8807f, -10.4598f, -20.4163f));
  data[12].mAabb = Aabb(Vector3(-21.8295f, 36.2089f, 3.29557f), Vector3(-14.9523f, 37.3965f, 4.57254f));
  data[13].mAabb = Aabb(Vector3(24.9341f, 22.8548f, 27.5455f), Vector3(32.7334f, 26.2301f, 35.2371f));
  data[14].mAabb = Aabb(Vector3(-15.5964f, -11.1938f, -31.1854f), Vector3(-10.0014f, -5.63521f, -28.9918f));
  data[15].mAabb = Aabb(Vector3(9.84017f, -46.6552f, 3.74176f), Vector3(14.3868f, -45.9627f, 6.97422f));
  data[16].mAabb = Aabb(Vector3(23.7127f, -18.3858f, -36.0519f), Vector3(24.7355f, -12.654f, -30.16f));
  data[17].mAabb = Aabb(Vector3(14.2559f, -24.481f, 0.117933f), Vector3(14.988f, -18.2078f, 6.85339f));
  data[18].mAabb = Aabb(Vector3(24.5326f, 12.6172f, 6.57282f), Vector3(29.7213f, 13.0757f, 13.187f));
  data[19].mAabb = Aabb(Vector3(5.78981f, -0.995329f, -32.6024f), Vector3(13.4282f, 3.27785f, -24.6773f));
  data[20].mAabb = Aabb(Vector3(-12.733f, -20.7397f, -35.1604f), Vector3(-8.62589f, -13.7628f, -27.358f));
  data[21].mAabb = Aabb(Vector3(0.0717477f, 27.1426f, -32.3614f), Vector3(2.91895f, 28.0615f, -24.5592f));
  data[22].mAabb = Aabb(Vector3(-29.4304f, 20.5519f, 12.7169f), Vector3(-26.9468f, 26.2995f, 17.255f));
  data[23].mAabb = Aabb(Vector3(15.9238f, 16.6706f, -33.0885f), Vector3(17.4188f, 20.2683f, -28.6694f));
  data[24].mAabb = Aabb(Vector3(-6.3051f, -49.2207f, 2.22465f), Vector3(1.38967f, -42.6527f, 6.88053f));
  data[25].mAabb = Aabb(Vector3(18.8269f, 21.1307f, 35.5689f), Vector3(25.6567f, 25.9635f, 37.5716f));
  data[26].mAabb = Aabb(Vector3(-7.72038f, -16.7438f, -30.9831f), Vector3(-2.66811f, -12.7204f, -29.1516f));
  data[27].mAabb = Aabb(Vector3(-2.70512f, 0.864488f, 42.1455f), Vector3(5.28236f, 7.87039f, 46.3876f));
  data[28].mAabb = Aabb(Vector3(-14.1748f, -41.7321f, 18.0628f), Vector3(-11.2059f, -37.288f, 25.8313f));
  data[29].mAabb = Aabb(Vector3(-26.421f, -37.5747f, 1.7898f), Vector3(-19.7224f, -31.6895f, 3.73661f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest9(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(33);
  data[0].mAabb = Aabb(Vector3(-5.97936f, 19.2607f, -12.8838f), Vector3(-2.39389f, 25.3421f, -10.9054f));
  data[1].mAabb = Aabb(Vector3(-24.1228f, 26.513f, 9.7922f), Vector3(-17.0272f, 33.3218f, 10.8395f));
  data[2].mAabb = Aabb(Vector3(0.65465f, -24.6874f, 30.0307f), Vector3(1.78039f, -16.7305f, 36.2898f));
  data[3].mAabb = Aabb(Vector3(-25.061f, 25.8936f, 13.4711f), Vector3(-18.3798f, 28.3231f, 17.1373f));
  data[4].mAabb = Aabb(Vector3(-17.4028f, 21.8462f, 20.0576f), Vector3(-11.5093f, 27.6557f, 26.9733f));
  data[5].mAabb = Aabb(Vector3(-15.41f, -28.9515f, 19.1732f), Vector3(-13.0411f, -22.094f, 20.2817f));
  data[6].mAabb = Aabb(Vector3(-15.3064f, -6.77781f, 2.45822f), Vector3(-11.3712f, -2.97037f, 4.37928f));
  data[7].mAabb = Aabb(Vector3(12.9618f, -25.7564f, 18.1248f), Vector3(14.7406f, -24.3858f, 21.0521f));
  data[8].mAabb = Aabb(Vector3(-11.1207f, 32.1171f, 15.9896f), Vector3(-3.54377f, 34.2706f, 20.5166f));
  data[9].mAabb = Aabb(Vector3(21.6103f, 6.2537f, 10.1671f), Vector3(27.4145f, 7.27831f, 15.9203f));
  data[10].mAabb = Aabb(Vector3(15.5299f, 1.3512f, 5.65404f), Vector3(16.6566f, 4.57461f, 6.75497f));
  data[11].mAabb = Aabb(Vector3(30.9691f, 13.9785f, 3.85245f), Vector3(33.1481f, 14.7753f, 5.76006f));
  data[12].mAabb = Aabb(Vector3(-11.4364f, -2.39335f, 27.9748f), Vector3(-7.57426f, 5.46725f, 34.8678f));
  data[13].mAabb = Aabb(Vector3(-0.364493f, 9.26031f, 29.9485f), Vector3(1.74491f, 14.6099f, 33.119f));
  data[14].mAabb = Aabb(Vector3(10.2684f, 22.6799f, -39.898f), Vector3(18.0741f, 29.9723f, -34.166f));
  data[15].mAabb = Aabb(Vector3(19.2449f, -39.8685f, 11.2788f), Vector3(20.2201f, -34.5022f, 15.694f));
  data[16].mAabb = Aabb(Vector3(11.658f, -22.9548f, -25.7198f), Vector3(19.2663f, -20.2231f, -21.4415f));
  data[17].mAabb = Aabb(Vector3(-31.8015f, 15.6398f, -9.68303f), Vector3(-25.4782f, 18.4701f, -4.05856f));
  data[18].mAabb = Aabb(Vector3(-21.5527f, 38.0588f, 16.8841f), Vector3(-19.9006f, 42.9816f, 18.9167f));
  data[19].mAabb = Aabb(Vector3(-31.1126f, -15.1587f, -17.0486f), Vector3(-24.5576f, -13.753f, -15.2482f));
  data[20].mAabb = Aabb(Vector3(-47.1841f, 1.09704f, -6.75198f), Vector3(-40.3033f, 8.79227f, -5.43025f));
  data[21].mAabb = Aabb(Vector3(-36.136f, -7.91261f, -30.955f), Vector3(-35.4071f, -4.43105f, -24.8762f));
  data[22].mAabb = Aabb(Vector3(-9.083f, 47.6379f, 3.82257f), Vector3(-4.60804f, 49.4284f, 6.69321f));
  data[23].mAabb = Aabb(Vector3(37.6028f, -8.47625f, -6.57239f), Vector3(38.4906f, -2.43151f, 1.38772f));
  data[24].mAabb = Aabb(Vector3(0.200898f, 10.3384f, 11.0321f), Vector3(3.4823f, 18.1616f, 15.8058f));
  data[25].mAabb = Aabb(Vector3(5.95274f, -8.67676f, -9.05396f), Vector3(11.6711f, -2.13427f, -1.0797f));
  data[26].mAabb = Aabb(Vector3(-23.6199f, 5.35256f, 0.047594f), Vector3(-22.3079f, 9.98664f, 3.72468f));
  data[27].mAabb = Aabb(Vector3(-28.2579f, -4.56725f, 28.951f), Vector3(-26.8921f, -1.27077f, 36.8369f));
  data[28].mAabb = Aabb(Vector3(-30.7807f, -3.79582f, -0.848413f), Vector3(-28.9585f, 1.71012f, -0.0619998f));
  data[29].mAabb = Aabb(Vector3(23.7196f, -7.77634f, -6.76918f), Vector3(27.1251f, -6.14265f, -0.213943f));
  data[30].mAabb = Aabb(Vector3(-0.700719f, -2.53374f, 36.3522f), Vector3(0.381419f, 3.96491f, 40.2627f));
  data[31].mAabb = Aabb(Vector3(-2.5178f, 30.3331f, -27.189f), Vector3(3.27412f, 33.0252f, -25.0207f));
  data[32].mAabb = Aabb(Vector3(8.95076f, 24.2407f, -24.8487f), Vector3(14.5045f, 30.4093f, -19.4956f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest10(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(58);
  data[0].mAabb = Aabb(Vector3(-28.7271f, -24.2945f, -15.3296f), Vector3(-23.381f, -21.1112f, -12.2523f));
  data[1].mAabb = Aabb(Vector3(18.7121f, -19.8695f, -7.94371f), Vector3(21.5821f, -15.2352f, -6.85207f));
  data[2].mAabb = Aabb(Vector3(-26.2467f, 3.3975f, -12.5653f), Vector3(-23.1994f, 10.7778f, -5.8623f));
  data[3].mAabb = Aabb(Vector3(8.98595f, 4.42646f, 19.49f), Vector3(14.4817f, 12.1593f, 22.697f));
  data[4].mAabb = Aabb(Vector3(1.95203f, 31.6778f, -9.29026f), Vector3(8.92963f, 33.9229f, -7.34252f));
  data[5].mAabb = Aabb(Vector3(8.37334f, -4.7145f, 11.9044f), Vector3(16.2344f, -0.78923f, 12.7952f));
  data[6].mAabb = Aabb(Vector3(-28.4613f, 4.30207f, -10.6161f), Vector3(-23.647f, 10.2371f, -8.44108f));
  data[7].mAabb = Aabb(Vector3(21.5587f, 9.72688f, -27.129f), Vector3(25.5647f, 10.5864f, -21.4349f));
  data[8].mAabb = Aabb(Vector3(-11.9054f, -0.434438f, -19.7525f), Vector3(-10.7416f, 1.35558f, -18.4741f));
  data[9].mAabb = Aabb(Vector3(8.41551f, -21.0245f, -13.2297f), Vector3(9.92349f, -17.1551f, -8.41214f));
  data[10].mAabb = Aabb(Vector3(-18.393f, -31.1176f, -2.3385f), Vector3(-13.8306f, -28.1305f, 4.44103f));
  data[11].mAabb = Aabb(Vector3(12.0541f, 1.05543f, -32.6263f), Vector3(12.5863f, 6.72744f, -26.3549f));
  data[12].mAabb = Aabb(Vector3(26.2832f, -0.249194f, 29.0246f), Vector3(29.312f, 6.87384f, 36.9483f));
  data[13].mAabb = Aabb(Vector3(-38.0782f, 19.181f, 15.4344f), Vector3(-33.0591f, 20.4373f, 16.2948f));
  data[14].mAabb = Aabb(Vector3(-43.5978f, 16.3455f, -13.1964f), Vector3(-38.7079f, 22.1403f, -6.40805f));
  data[15].mAabb = Aabb(Vector3(17.3899f, 8.00392f, -7.11585f), Vector3(25.2106f, 12.9256f, -5.79899f));
  data[16].mAabb = Aabb(Vector3(0.930146f, -34.6329f, -7.7703f), Vector3(5.9126f, -29.3927f, -6.75612f));
  data[17].mAabb = Aabb(Vector3(34.6378f, 19.9836f, 1.93147f), Vector3(36.4376f, 24.6167f, 5.41791f));
  data[18].mAabb = Aabb(Vector3(7.51867f, -11.9373f, -20.9986f), Vector3(13.6694f, -9.23965f, -20.4228f));
  data[19].mAabb = Aabb(Vector3(46.2668f, 9.61457f, -1.90672f), Vector3(50.5696f, 15.0672f, 5.17479f));
  data[20].mAabb = Aabb(Vector3(7.48806f, -3.02117f, 16.508f), Vector3(9.23564f, 0.728517f, 21.7057f));
  data[21].mAabb = Aabb(Vector3(-20.945f, 29.2085f, -2.72495f), Vector3(-18.3272f, 35.2201f, -1.00776f));
  data[22].mAabb = Aabb(Vector3(-24.3577f, 11.9734f, 25.9343f), Vector3(-20.9021f, 14.4873f, 27.9683f));
  data[23].mAabb = Aabb(Vector3(-34.2172f, -27.3933f, -2.10146f), Vector3(-28.782f, -20.809f, 0.437962f));
  data[24].mAabb = Aabb(Vector3(3.20048f, 14.4055f, -33.9048f), Vector3(8.13701f, 16.7466f, -32.48f));
  data[25].mAabb = Aabb(Vector3(6.13074f, -43.5086f, 6.62716f), Vector3(7.64684f, -36.782f, 9.784f));
  data[26].mAabb = Aabb(Vector3(-9.78825f, 12.3869f, -16.0602f), Vector3(-6.16335f, 18.8721f, -12.9264f));
  data[27].mAabb = Aabb(Vector3(17.8784f, 29.8524f, 3.62595f), Vector3(20.8668f, 37.2958f, 9.81866f));
  data[28].mAabb = Aabb(Vector3(-31.2292f, 17.6983f, -27.7385f), Vector3(-29.6516f, 20.9046f, -25.6479f));
  data[29].mAabb = Aabb(Vector3(13.3942f, 37.0201f, -1.48387f), Vector3(18.2718f, 43.2636f, 5.28291f));
  data[30].mAabb = Aabb(Vector3(-40.2756f, 10.4196f, 5.45819f), Vector3(-38.9863f, 14.3906f, 7.4994f));
  data[31].mAabb = Aabb(Vector3(6.27771f, -3.98394f, 1.3118f), Vector3(14.1645f, 3.66444f, 6.9314f));
  data[32].mAabb = Aabb(Vector3(-19.4272f, 22.3156f, 3.31784f), Vector3(-18.4358f, 29.525f, 5.04129f));
  data[33].mAabb = Aabb(Vector3(-7.99396f, -25.2172f, 41.959f), Vector3(-3.55495f, -18.1012f, 45.152f));
  data[34].mAabb = Aabb(Vector3(9.22193f, 1.20998f, 27.4832f), Vector3(14.5634f, 8.30495f, 33.0638f));
  data[35].mAabb = Aabb(Vector3(-29.5481f, 2.58287f, -24.8788f), Vector3(-22.953f, 3.92339f, -19.1004f));
  data[36].mAabb = Aabb(Vector3(8.69452f, -11.9658f, -16.474f), Vector3(11.513f, -8.55896f, -15.6514f));
  data[37].mAabb = Aabb(Vector3(6.29545f, 3.63907f, 10.0738f), Vector3(6.95035f, 9.33335f, 12.7179f));
  data[38].mAabb = Aabb(Vector3(9.63653f, -35.452f, 9.19011f), Vector3(11.3739f, -32.7124f, 15.2395f));
  data[39].mAabb = Aabb(Vector3(-20.8405f, 0.441804f, -3.08126f), Vector3(-14.9795f, 3.00998f, 2.97693f));
  data[40].mAabb = Aabb(Vector3(-53.6954f, -2.15859f, 1.52114f), Vector3(-45.9016f, 2.96071f, 5.57003f));
  data[41].mAabb = Aabb(Vector3(-16.1198f, 31.2455f, 0.514034f), Vector3(-15.7077f, 37.8279f, 7.22931f));
  data[42].mAabb = Aabb(Vector3(0.727134f, -18.4447f, -30.1121f), Vector3(5.37606f, -14.1521f, -29.331f));
  data[43].mAabb = Aabb(Vector3(18.8755f, -27.6628f, -18.3244f), Vector3(25.0775f, -24.4445f, -13.444f));
  data[44].mAabb = Aabb(Vector3(43.2372f, 14.8199f, -0.582001f), Vector3(46.112f, 18.1692f, 7.38066f));
  data[45].mAabb = Aabb(Vector3(14.2299f, -33.4786f, 20.1799f), Vector3(18.5233f, -25.8325f, 27.9461f));
  data[46].mAabb = Aabb(Vector3(6.97741f, -28.5695f, 27.953f), Vector3(12.9412f, -23.029f, 29.2132f));
  data[47].mAabb = Aabb(Vector3(32.3269f, 10.558f, -27.484f), Vector3(35.2708f, 18.4581f, -26.0342f));
  data[48].mAabb = Aabb(Vector3(-23.3347f, 1.97863f, -43.2081f), Vector3(-19.0158f, 6.73308f, -42.0952f));
  data[49].mAabb = Aabb(Vector3(-36.9944f, -6.80302f, -23.084f), Vector3(-30.8031f, -5.63205f, -22.4361f));
  data[50].mAabb = Aabb(Vector3(-5.81711f, -14.8262f, 24.986f), Vector3(-0.278232f, -10.9106f, 26.3722f));
  data[51].mAabb = Aabb(Vector3(32.2767f, -28.1163f, -17.4647f), Vector3(39.4895f, -26.7394f, -15.2071f));
  data[52].mAabb = Aabb(Vector3(-21.5211f, -24.8953f, 35.008f), Vector3(-14.8135f, -22.7302f, 41.8865f));
  data[53].mAabb = Aabb(Vector3(-14.5854f, 2.54486f, 32.5435f), Vector3(-9.3123f, 8.91571f, 39.3228f));
  data[54].mAabb = Aabb(Vector3(8.50307f, -22.8689f, 36.2925f), Vector3(9.10347f, -20.9792f, 39.9801f));
  data[55].mAabb = Aabb(Vector3(-30.0695f, 26.891f, -29.0282f), Vector3(-26.7992f, 27.4425f, -27.0967f));
  data[56].mAabb = Aabb(Vector3(-17.5956f, -5.82074f, -28.5461f), Vector3(-12.4712f, 1.03602f, -26.693f));
  data[57].mAabb = Aabb(Vector3(-9.6747f, -7.71577f, 32.4173f), Vector3(-2.18102f, -3.67245f, 36.5896f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest11(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(41);
  data[0].mAabb = Aabb(Vector3(-3.97087f, -6.65799f, -3.73774f), Vector3(0.713774f, 0.373888f, 0.688291f));
  data[1].mAabb = Aabb(Vector3(-24.9751f, -12.018f, -22.7622f), Vector3(-18.1371f, -11.1119f, -16.9394f));
  data[2].mAabb = Aabb(Vector3(5.43808f, 27.0093f, 31.0116f), Vector3(11.6262f, 33.822f, 31.9353f));
  data[3].mAabb = Aabb(Vector3(-25.7996f, -24.5864f, -37.9453f), Vector3(-19.189f, -22.7052f, -29.9467f));
  data[4].mAabb = Aabb(Vector3(-30.9258f, -22.4114f, 18.779f), Vector3(-23.1197f, -16.1672f, 22.2543f));
  data[5].mAabb = Aabb(Vector3(-17.5504f, -2.14432f, 11.9735f), Vector3(-14.9173f, 1.22266f, 17.9234f));
  data[6].mAabb = Aabb(Vector3(26.9993f, -29.2683f, -23.4731f), Vector3(30.8789f, -26.104f, -19.694f));
  data[7].mAabb = Aabb(Vector3(-9.17352f, 17.8089f, 35.3394f), Vector3(-5.99904f, 23.6704f, 37.4082f));
  data[8].mAabb = Aabb(Vector3(15.4741f, 17.6954f, 30.748f), Vector3(18.5244f, 21.8046f, 33.396f));
  data[9].mAabb = Aabb(Vector3(-35.8833f, -3.32102f, -25.3638f), Vector3(-33.3173f, 4.47557f, -17.9845f));
  data[10].mAabb = Aabb(Vector3(16.5038f, -27.224f, -28.2674f), Vector3(21.1119f, -20.3081f, -27.8152f));
  data[11].mAabb = Aabb(Vector3(33.9693f, -4.18177f, -29.3382f), Vector3(35.2873f, -2.94145f, -21.4584f));
  data[12].mAabb = Aabb(Vector3(-37.6934f, -26.8178f, -3.78936f), Vector3(-33.0911f, -26.3793f, 0.828709f));
  data[13].mAabb = Aabb(Vector3(-38.3933f, -26.5856f, -0.545408f), Vector3(-36.6652f, -23.4647f, 6.18124f));
  data[14].mAabb = Aabb(Vector3(-11.3385f, 32.2148f, 32.5436f), Vector3(-7.41092f, 36.1591f, 34.2381f));
  data[15].mAabb = Aabb(Vector3(-21.8161f, 6.2024f, 16.6023f), Vector3(-15.5202f, 8.23318f, 17.065f));
  data[16].mAabb = Aabb(Vector3(3.92478f, -51.3808f, -11.3822f), Vector3(5.92007f, -46.0346f, -6.48096f));
  data[17].mAabb = Aabb(Vector3(17.2259f, 21.1194f, 8.80031f), Vector3(21.6816f, 22.0014f, 10.9116f));
  data[18].mAabb = Aabb(Vector3(28.0243f, -31.8227f, 10.414f), Vector3(29.4286f, -28.5829f, 13.4824f));
  data[19].mAabb = Aabb(Vector3(-10.3034f, 27.6533f, 35.072f), Vector3(-4.96403f, 32.7185f, 42.4135f));
  data[20].mAabb = Aabb(Vector3(0.555729f, -19.6126f, 31.3689f), Vector3(7.78151f, -15.3065f, 36.8519f));
  data[21].mAabb = Aabb(Vector3(-26.7684f, 31.7136f, -3.59666f), Vector3(-23.4863f, 38.8965f, -2.27539f));
  data[22].mAabb = Aabb(Vector3(11.6362f, -36.6616f, 4.70627f), Vector3(12.3426f, -30.4236f, 5.65736f));
  data[23].mAabb = Aabb(Vector3(20.4278f, 20.8762f, 15.4392f), Vector3(22.6114f, 21.291f, 16.7099f));
  data[24].mAabb = Aabb(Vector3(-8.78721f, 27.2466f, 16.3671f), Vector3(-0.96975f, 35.0072f, 19.1612f));
  data[25].mAabb = Aabb(Vector3(33.5964f, 16.8865f, -5.0077f), Vector3(34.2344f, 20.0681f, -0.681873f));
  data[26].mAabb = Aabb(Vector3(30.6769f, -13.4662f, 9.47256f), Vector3(37.5193f, -5.96415f, 15.1569f));
  data[27].mAabb = Aabb(Vector3(10.0946f, -38.4558f, -3.51305f), Vector3(13.238f, -32.8935f, -0.58698f));
  data[28].mAabb = Aabb(Vector3(-44.2967f, 7.31795f, -3.14842f), Vector3(-43.661f, 10.196f, 0.0893744f));
  data[29].mAabb = Aabb(Vector3(-31.8438f, -26.673f, -28.2253f), Vector3(-26.9395f, -24.1345f, -22.4849f));
  data[30].mAabb = Aabb(Vector3(27.6154f, 15.3237f, 29.6156f), Vector3(32.9652f, 19.2805f, 35.8916f));
  data[31].mAabb = Aabb(Vector3(14.6811f, -29.6451f, -28.3201f), Vector3(22.6217f, -27.9265f, -22.3788f));
  data[32].mAabb = Aabb(Vector3(-22.0738f, -8.47361f, -44.2344f), Vector3(-14.4224f, -3.41299f, -38.7688f));
  data[33].mAabb = Aabb(Vector3(-22.9862f, -32.8457f, -8.68707f), Vector3(-22.1738f, -29.4359f, -6.64656f));
  data[34].mAabb = Aabb(Vector3(7.60944f, 40.4072f, -1.41952f), Vector3(14.6455f, 45.4785f, -0.766238f));
  data[35].mAabb = Aabb(Vector3(22.0265f, -10.296f, 20.581f), Vector3(27.3056f, -2.39877f, 26.0806f));
  data[36].mAabb = Aabb(Vector3(38.0695f, 18.4216f, -9.60393f), Vector3(43.3243f, 22.423f, -6.99887f));
  data[37].mAabb = Aabb(Vector3(-19.7625f, 14.7404f, -10.0516f), Vector3(-19.1658f, 16.9347f, -6.52545f));
  data[38].mAabb = Aabb(Vector3(6.8904f, 6.96115f, -0.982882f), Vector3(13.1557f, 12.9518f, 6.88051f));
  data[39].mAabb = Aabb(Vector3(-9.30151f, -32.9772f, 2.56789f), Vector3(-5.72741f, -29.0468f, 3.83883f));
  data[40].mAabb = Aabb(Vector3(-32.1892f, -6.46091f, -40.0962f), Vector3(-29.47f, -4.56744f, -35.6611f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest12(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(72);
  data[0].mAabb = Aabb(Vector3(-20.6916f, -5.73656f, -28.3981f), Vector3(-15.2561f, -1.11361f, -23.4291f));
  data[1].mAabb = Aabb(Vector3(-31.9965f, 20.5576f, 2.83254f), Vector3(-30.5732f, 26.5221f, 9.66657f));
  data[2].mAabb = Aabb(Vector3(-14.4914f, 39.9449f, 15.647f), Vector3(-9.38856f, 41.8268f, 18.8435f));
  data[3].mAabb = Aabb(Vector3(-28.4841f, 27.2677f, -6.79111f), Vector3(-24.971f, 32.033f, -1.31276f));
  data[4].mAabb = Aabb(Vector3(-3.50134f, 23.8058f, 14.4698f), Vector3(-1.69323f, 24.9308f, 20.4327f));
  data[5].mAabb = Aabb(Vector3(28.7992f, 18.9845f, -21.7356f), Vector3(35.8248f, 19.9451f, -19.2947f));
  data[6].mAabb = Aabb(Vector3(-35.8012f, -34.7673f, -15.0403f), Vector3(-27.9443f, -31.3472f, -8.7198f));
  data[7].mAabb = Aabb(Vector3(21.7457f, 30.2254f, -9.92531f), Vector3(28.598f, 34.1732f, -3.61547f));
  data[8].mAabb = Aabb(Vector3(17.6767f, -19.3287f, -18.8516f), Vector3(21.7785f, -17.445f, -17.5684f));
  data[9].mAabb = Aabb(Vector3(15.4513f, 5.04676f, 25.2613f), Vector3(22.8362f, 7.09516f, 31.0933f));
  data[10].mAabb = Aabb(Vector3(-14.6694f, 24.2923f, 30.2692f), Vector3(-10.4692f, 28.8635f, 36.0815f));
  data[11].mAabb = Aabb(Vector3(-12.1914f, -20.472f, 1.40648f), Vector3(-8.24522f, -14.6112f, 7.51871f));
  data[12].mAabb = Aabb(Vector3(-15.7539f, -9.02198f, -9.41121f), Vector3(-12.0012f, -1.51995f, -5.83084f));
  data[13].mAabb = Aabb(Vector3(-3.54942f, 40.6897f, 21.2977f), Vector3(0.293738f, 43.8438f, 24.6721f));
  data[14].mAabb = Aabb(Vector3(-14.8671f, 28.6307f, 4.94042f), Vector3(-7.92336f, 29.8226f, 7.37384f));
  data[15].mAabb = Aabb(Vector3(-32.0592f, -14.6019f, -18.4277f), Vector3(-24.1117f, -12.8277f, -11.1305f));
  data[16].mAabb = Aabb(Vector3(19.079f, 39.8066f, -2.6755f), Vector3(26.9721f, 46.4551f, -1.22202f));
  data[17].mAabb = Aabb(Vector3(35.7905f, -4.74627f, 20.6963f), Vector3(42.5109f, 1.67421f, 24.0308f));
  data[18].mAabb = Aabb(Vector3(-23.6664f, -18.5332f, -32.2476f), Vector3(-18.3353f, -14.7418f, -25.106f));
  data[19].mAabb = Aabb(Vector3(5.77652f, 7.8442f, -29.5455f), Vector3(8.56945f, 14.7977f, -27.5068f));
  data[20].mAabb = Aabb(Vector3(9.65679f, -21.1345f, -1.88639f), Vector3(13.4691f, -14.4672f, 2.54335f));
  data[21].mAabb = Aabb(Vector3(11.4171f, 4.7279f, 36.0167f), Vector3(19.0321f, 11.2305f, 43.0085f));
  data[22].mAabb = Aabb(Vector3(16.2332f, -11.8611f, -41.2413f), Vector3(20.3104f, -7.84862f, -36.4019f));
  data[23].mAabb = Aabb(Vector3(14.2722f, 19.9796f, 31.5074f), Vector3(15.7535f, 27.4093f, 34.2702f));
  data[24].mAabb = Aabb(Vector3(-20.6909f, -18.4598f, -15.1009f), Vector3(-16.517f, -14.1258f, -13.6117f));
  data[25].mAabb = Aabb(Vector3(7.58212f, 18.5403f, -13.0462f), Vector3(9.6384f, 24.7541f, -5.74361f));
  data[26].mAabb = Aabb(Vector3(-20.4544f, 10.4344f, -10.6359f), Vector3(-14.0961f, 13.3001f, -4.15768f));
  data[27].mAabb = Aabb(Vector3(-20.221f, -25.8127f, 31.8541f), Vector3(-17.5224f, -19.2915f, 33.2394f));
  data[28].mAabb = Aabb(Vector3(-9.92399f, 42.3705f, 1.46891f), Vector3(-4.14714f, 45.5353f, 9.41115f));
  data[29].mAabb = Aabb(Vector3(-23.384f, 29.2782f, -34.7428f), Vector3(-21.6773f, 31.9976f, -27.2276f));
  data[30].mAabb = Aabb(Vector3(-38.34f, -5.69149f, -14.6633f), Vector3(-36.7894f, -3.77994f, -7.5542f));
  data[31].mAabb = Aabb(Vector3(33.4559f, 4.29003f, 1.02437f), Vector3(38.8512f, 8.19256f, 2.72695f));
  data[32].mAabb = Aabb(Vector3(-6.84238f, 18.8405f, 3.26901f), Vector3(-0.571033f, 20.1137f, 6.32427f));
  data[33].mAabb = Aabb(Vector3(-47.1205f, -3.30589f, -2.22192f), Vector3(-41.4084f, 1.77792f, 4.31128f));
  data[34].mAabb = Aabb(Vector3(11.9344f, 2.2664f, 3.24452f), Vector3(15.2539f, 5.26066f, 5.12824f));
  data[35].mAabb = Aabb(Vector3(-7.05169f, 31.2279f, 15.2642f), Vector3(-1.73849f, 37.2538f, 18.5934f));
  data[36].mAabb = Aabb(Vector3(10.2295f, -28.8427f, 37.0039f), Vector3(13.0517f, -25.8642f, 38.6327f));
  data[37].mAabb = Aabb(Vector3(2.47148f, 37.2923f, 3.25066f), Vector3(9.67522f, 44.4566f, 7.48f));
  data[38].mAabb = Aabb(Vector3(4.2776f, 9.49871f, -19.9516f), Vector3(5.53554f, 10.8211f, -13.1442f));
  data[39].mAabb = Aabb(Vector3(31.5709f, 23.2528f, -24.426f), Vector3(35.432f, 30.3433f, -18.8386f));
  data[40].mAabb = Aabb(Vector3(33.703f, -5.75769f, 21.6543f), Vector3(36.8264f, -4.79454f, 22.7765f));
  data[41].mAabb = Aabb(Vector3(-28.5542f, -18.3961f, -13.1766f), Vector3(-24.0045f, -11.3392f, -9.26622f));
  data[42].mAabb = Aabb(Vector3(5.9065f, -17.7294f, 25.7931f), Vector3(6.78267f, -15.425f, 26.4313f));
  data[43].mAabb = Aabb(Vector3(-17.1121f, 1.70095f, -14.007f), Vector3(-10.5698f, 3.0642f, -13.061f));
  data[44].mAabb = Aabb(Vector3(34.5302f, 19.6227f, 22.6048f), Vector3(37.6919f, 24.6044f, 24.5368f));
  data[45].mAabb = Aabb(Vector3(42.2252f, 18.857f, -1.46032f), Vector3(44.3827f, 23.549f, 2.87015f));
  data[46].mAabb = Aabb(Vector3(18.8121f, -27.1578f, -26.2951f), Vector3(26.3535f, -25.8279f, -25.5537f));
  data[47].mAabb = Aabb(Vector3(38.392f, 4.03131f, -21.0624f), Vector3(41.7224f, 8.08066f, -17.4516f));
  data[48].mAabb = Aabb(Vector3(24.8515f, 26.5229f, -15.4413f), Vector3(32.5825f, 29.6394f, -13.4249f));
  data[49].mAabb = Aabb(Vector3(-2.5565f, -26.2104f, -20.248f), Vector3(-1.73251f, -18.2306f, -16.1929f));
  data[50].mAabb = Aabb(Vector3(-0.732902f, -8.30367f, -18.1536f), Vector3(6.83175f, -5.80183f, -11.2643f));
  data[51].mAabb = Aabb(Vector3(-1.39083f, -9.99937f, -31.3538f), Vector3(5.60626f, -5.28689f, -24.4924f));
  data[52].mAabb = Aabb(Vector3(-6.66253f, 32.387f, -1.97608f), Vector3(-4.16741f, 39.9748f, 1.89793f));
  data[53].mAabb = Aabb(Vector3(-12.624f, 15.372f, -41.0416f), Vector3(-12.1855f, 17.2766f, -38.0652f));
  data[54].mAabb = Aabb(Vector3(-14.3654f, 25.7471f, -7.54157f), Vector3(-7.1229f, 33.6683f, -4.52946f));
  data[55].mAabb = Aabb(Vector3(31.2775f, -10.2908f, -30.0179f), Vector3(36.2639f, -5.04675f, -24.0759f));
  data[56].mAabb = Aabb(Vector3(-28.8898f, -27.2277f, 25.0086f), Vector3(-22.085f, -24.5178f, 28.4774f));
  data[57].mAabb = Aabb(Vector3(5.1537f, -27.5564f, -10.1156f), Vector3(12.5873f, -25.3853f, -9.14041f));
  data[58].mAabb = Aabb(Vector3(34.2492f, -34.9756f, -9.01249f), Vector3(34.8935f, -27.0575f, -7.3106f));
  data[59].mAabb = Aabb(Vector3(2.19179f, -35.0746f, 27.8747f), Vector3(9.4359f, -29.4889f, 30.7743f));
  data[60].mAabb = Aabb(Vector3(11.1952f, -5.86583f, -23.1915f), Vector3(13.2538f, 1.93424f, -16.4835f));
  data[61].mAabb = Aabb(Vector3(-24.0206f, -2.36642f, -13.1952f), Vector3(-22.6351f, 1.03304f, -11.8584f));
  data[62].mAabb = Aabb(Vector3(28.5384f, -28.4756f, 0.801744f), Vector3(31.4907f, -25.8397f, 3.06423f));
  data[63].mAabb = Aabb(Vector3(-42.987f, -17.256f, -1.78648f), Vector3(-35.395f, -11.6582f, -0.81289f));
  data[64].mAabb = Aabb(Vector3(-0.562454f, -18.7968f, 14.1235f), Vector3(1.05663f, -14.5617f, 19.1904f));
  data[65].mAabb = Aabb(Vector3(25.747f, 3.46377f, -20.047f), Vector3(30.916f, 7.73416f, -16.3323f));
  data[66].mAabb = Aabb(Vector3(-18.9284f, 8.91646f, -24.2816f), Vector3(-13.9787f, 10.6796f, -17.5709f));
  data[67].mAabb = Aabb(Vector3(13.4588f, -23.4088f, -25.6926f), Vector3(16.5145f, -15.529f, -21.958f));
  data[68].mAabb = Aabb(Vector3(33.9571f, 19.2515f, -20.9461f), Vector3(37.8327f, 27.1126f, -19.3792f));
  data[69].mAabb = Aabb(Vector3(10.401f, -39.9703f, 4.63375f), Vector3(18.2558f, -36.7496f, 6.47688f));
  data[70].mAabb = Aabb(Vector3(-28.3131f, 0.715831f, 29.808f), Vector3(-27.6521f, 3.13209f, 32.3369f));
  data[71].mAabb = Aabb(Vector3(-2.43907f, -21.8059f, 19.8537f), Vector3(0.301674f, -15.464f, 23.6268f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest13(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(32);
  data[0].mAabb = Aabb(Vector3(15.2187f, 31.8734f, -13.4591f), Vector3(18.7209f, 37.4181f, -6.2639f));
  data[1].mAabb = Aabb(Vector3(9.36389f, -32.2232f, 19.6607f), Vector3(10.568f, -27.7907f, 24.1596f));
  data[2].mAabb = Aabb(Vector3(3.05739f, 42.0993f, 0.284164f), Vector3(6.42391f, 48.421f, 7.8843f));
  data[3].mAabb = Aabb(Vector3(-4.13501f, 42.0551f, -9.68701f), Vector3(2.40423f, 44.9315f, -7.60358f));
  data[4].mAabb = Aabb(Vector3(-14.6435f, 20.8781f, 13.0286f), Vector3(-9.92822f, 24.1568f, 14.6787f));
  data[5].mAabb = Aabb(Vector3(-20.1542f, 29.7993f, 22.2695f), Vector3(-16.7155f, 37.3461f, 27.4876f));
  data[6].mAabb = Aabb(Vector3(22.3509f, 40.4515f, 7.44919f), Vector3(25.6416f, 41.1611f, 13.1525f));
  data[7].mAabb = Aabb(Vector3(-4.72947f, 3.64803f, -29.1202f), Vector3(1.00192f, 8.25451f, -22.4573f));
  data[8].mAabb = Aabb(Vector3(35.725f, 8.27794f, 7.80762f), Vector3(38.7485f, 12.0942f, 10.3851f));
  data[9].mAabb = Aabb(Vector3(43.9284f, 1.28033f, 1.9794f), Vector3(47.0402f, 2.90034f, 6.36228f));
  data[10].mAabb = Aabb(Vector3(17.9299f, -0.872064f, 9.79222f), Vector3(22.1191f, 3.01285f, 17.6619f));
  data[11].mAabb = Aabb(Vector3(-20.5557f, 11.8566f, -8.99516f), Vector3(-19.1201f, 12.5709f, -3.87911f));
  data[12].mAabb = Aabb(Vector3(-17.9145f, 28.614f, 10.1011f), Vector3(-10.7175f, 36.3884f, 13.4463f));
  data[13].mAabb = Aabb(Vector3(-15.0009f, 20.0637f, 41.4815f), Vector3(-10.5732f, 23.1693f, 43.7231f));
  data[14].mAabb = Aabb(Vector3(14.5264f, 24.9611f, 30.7836f), Vector3(16.8467f, 28.133f, 33.0018f));
  data[15].mAabb = Aabb(Vector3(-20.571f, -39.1249f, -32.4455f), Vector3(-12.7565f, -32.3725f, -27.7748f));
  data[16].mAabb = Aabb(Vector3(4.64656f, 14.8877f, -46.0501f), Vector3(7.73012f, 20.5727f, -40.3226f));
  data[17].mAabb = Aabb(Vector3(2.82261f, -10.3805f, 22.3724f), Vector3(7.51444f, -9.68101f, 29.6362f));
  data[18].mAabb = Aabb(Vector3(-10.3788f, -35.1073f, 6.83246f), Vector3(-7.9628f, -31.8802f, 8.6582f));
  data[19].mAabb = Aabb(Vector3(-18.4284f, 10.6956f, -45.3179f), Vector3(-13.683f, 12.1704f, -43.0239f));
  data[20].mAabb = Aabb(Vector3(12.5868f, 2.32365f, -31.1077f), Vector3(13.0736f, 6.88861f, -30.1139f));
  data[21].mAabb = Aabb(Vector3(16.632f, 42.928f, -5.97681f), Vector3(21.9591f, 48.8271f, 0.0883439f));
  data[22].mAabb = Aabb(Vector3(-0.259309f, 10.0757f, -12.9381f), Vector3(5.87357f, 17.5592f, -11.3483f));
  data[23].mAabb = Aabb(Vector3(-17.6886f, 28.9226f, -32.7227f), Vector3(-17.0773f, 33.3964f, -30.1271f));
  data[24].mAabb = Aabb(Vector3(41.5593f, -4.18319f, -26.6424f), Vector3(42.7507f, -1.94669f, -25.2938f));
  data[25].mAabb = Aabb(Vector3(-25.4844f, -26.7788f, -13.85f), Vector3(-20.6487f, -21.0687f, -7.3636f));
  data[26].mAabb = Aabb(Vector3(-1.95836f, -27.223f, -41.8362f), Vector3(3.29453f, -26.6785f, -41.1932f));
  data[27].mAabb = Aabb(Vector3(25.548f, 7.86077f, -37.4743f), Vector3(26.5868f, 10.6194f, -34.9963f));
  data[28].mAabb = Aabb(Vector3(-25.1824f, 33.3745f, -19.2673f), Vector3(-23.0419f, 33.9721f, -11.5479f));
  data[29].mAabb = Aabb(Vector3(-10.7664f, 25.2616f, -9.13075f), Vector3(-6.65168f, 32.7667f, -7.31336f));
  data[30].mAabb = Aabb(Vector3(25.4996f, -15.011f, 29.7865f), Vector3(27.9361f, -7.47856f, 36.5041f));
  data[31].mAabb = Aabb(Vector3(-38.4145f, 0.352018f, 25.8377f), Vector3(-33.2277f, 7.8436f, 29.1762f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest14(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(53);
  data[0].mAabb = Aabb(Vector3(41.3409f, 14.085f, -13.4443f), Vector3(46.436f, 19.4374f, -7.81494f));
  data[1].mAabb = Aabb(Vector3(-17.7964f, -15.9604f, -27.9735f), Vector3(-17.2204f, -12.7447f, -24.6141f));
  data[2].mAabb = Aabb(Vector3(-1.25254f, -38.6572f, 22.4633f), Vector3(6.00525f, -33.6583f, 26.3492f));
  data[3].mAabb = Aabb(Vector3(20.4049f, 27.4343f, 30.022f), Vector3(25.626f, 28.6468f, 37.3635f));
  data[4].mAabb = Aabb(Vector3(-31.6782f, 21.688f, 9.75055f), Vector3(-31.0606f, 24.9001f, 17.3068f));
  data[5].mAabb = Aabb(Vector3(-5.6224f, 30.2529f, 24.4008f), Vector3(2.21083f, 32.1658f, 29.4893f));
  data[6].mAabb = Aabb(Vector3(-17.9467f, 12.9991f, -36.4399f), Vector3(-11.8602f, 15.49f, -29.2004f));
  data[7].mAabb = Aabb(Vector3(-8.62954f, -8.63432f, 15.638f), Vector3(-2.9116f, -7.63429f, 20.5852f));
  data[8].mAabb = Aabb(Vector3(21.9061f, 26.0155f, -4.27524f), Vector3(27.525f, 27.8684f, 3.56333f));
  data[9].mAabb = Aabb(Vector3(17.7988f, 3.99202f, -26.6556f), Vector3(21.4882f, 10.599f, -24.4597f));
  data[10].mAabb = Aabb(Vector3(-18.9073f, -47.6284f, -8.86517f), Vector3(-14.8899f, -43.3587f, -3.56101f));
  data[11].mAabb = Aabb(Vector3(34.3469f, -0.754116f, 3.48701f), Vector3(37.9672f, 4.35544f, 8.20807f));
  data[12].mAabb = Aabb(Vector3(-32.9453f, -26.1554f, 8.04675f), Vector3(-25.7348f, -25.0761f, 10.0917f));
  data[13].mAabb = Aabb(Vector3(3.47893f, 17.7395f, 18.9736f), Vector3(5.98124f, 25.5407f, 25.0135f));
  data[14].mAabb = Aabb(Vector3(23.9332f, -17.5604f, 14.6127f), Vector3(30.9525f, -12.2189f, 19.3307f));
  data[15].mAabb = Aabb(Vector3(-31.6236f, -7.47194f, 29.6794f), Vector3(-24.3027f, -5.95746f, 32.9669f));
  data[16].mAabb = Aabb(Vector3(-28.3464f, 36.4892f, 4.52337f), Vector3(-22.9242f, 41.1792f, 9.6371f));
  data[17].mAabb = Aabb(Vector3(13.8722f, 0.259681f, -21.5004f), Vector3(16.7348f, 2.7105f, -19.5241f));
  data[18].mAabb = Aabb(Vector3(-45.0433f, -9.64699f, -18.1172f), Vector3(-43.9122f, -5.19197f, -16.2729f));
  data[19].mAabb = Aabb(Vector3(3.13927f, -4.46038f, 18.4119f), Vector3(5.50404f, 1.42084f, 24.7563f));
  data[20].mAabb = Aabb(Vector3(-17.0825f, 4.31057f, 27.8981f), Vector3(-15.19f, 5.52004f, 30.6504f));
  data[21].mAabb = Aabb(Vector3(-46.4605f, 13.1518f, 1.80172f), Vector3(-43.3401f, 13.7329f, 7.30093f));
  data[22].mAabb = Aabb(Vector3(7.52054f, -39.6526f, -5.29498f), Vector3(8.04556f, -35.3451f, -0.346857f));
  data[23].mAabb = Aabb(Vector3(-25.4153f, -8.27704f, -4.94356f), Vector3(-18.0636f, -0.415048f, 2.43484f));
  data[24].mAabb = Aabb(Vector3(-6.54283f, 6.60458f, -35.7699f), Vector3(-5.63673f, 12.9775f, -29.3795f));
  data[25].mAabb = Aabb(Vector3(39.522f, 5.53633f, 7.98651f), Vector3(45.9847f, 7.99527f, 9.51513f));
  data[26].mAabb = Aabb(Vector3(-41.3893f, 9.52675f, -5.23094f), Vector3(-39.8686f, 14.6307f, 2.69182f));
  data[27].mAabb = Aabb(Vector3(-18.1018f, -3.16347f, -25.4275f), Vector3(-12.7148f, -1.22083f, -23.8996f));
  data[28].mAabb = Aabb(Vector3(-29.2667f, 14.9251f, -9.06494f), Vector3(-21.6828f, 22.6818f, -2.58577f));
  data[29].mAabb = Aabb(Vector3(-21.0751f, -20.0634f, -44.1508f), Vector3(-13.1364f, -12.9508f, -41.7002f));
  data[30].mAabb = Aabb(Vector3(-36.8749f, -31.0188f, -4.80809f), Vector3(-34.7254f, -24.3546f, 1.95869f));
  data[31].mAabb = Aabb(Vector3(-41.9514f, -14.0222f, -19.7718f), Vector3(-40.0681f, -9.98559f, -15.5731f));
  data[32].mAabb = Aabb(Vector3(13.2768f, -9.47351f, 14.7495f), Vector3(13.6977f, -7.91079f, 21.295f));
  data[33].mAabb = Aabb(Vector3(-32.0674f, -16.6541f, -3.45242f), Vector3(-30.6302f, -10.0525f, 1.05293f));
  data[34].mAabb = Aabb(Vector3(-29.2754f, -7.63976f, 8.60678f), Vector3(-25.6066f, -3.75949f, 14.2171f));
  data[35].mAabb = Aabb(Vector3(8.38674f, 41.6324f, 1.33818f), Vector3(11.8992f, 42.2627f, 7.36413f));
  data[36].mAabb = Aabb(Vector3(18.1f, -1.54336f, -23.9263f), Vector3(25.4774f, 6.00853f, -22.734f));
  data[37].mAabb = Aabb(Vector3(-3.64494f, -26.2619f, -37.3759f), Vector3(2.96852f, -22.2237f, -35.2489f));
  data[38].mAabb = Aabb(Vector3(20.2875f, -42.9105f, -8.13527f), Vector3(21.9129f, -36.9845f, -3.44367f));
  data[39].mAabb = Aabb(Vector3(16.8032f, -31.9152f, 28.8309f), Vector3(18.7094f, -26.6359f, 29.8202f));
  data[40].mAabb = Aabb(Vector3(13.5719f, -19.3174f, -30.4966f), Vector3(17.888f, -17.9934f, -26.0462f));
  data[41].mAabb = Aabb(Vector3(38.8311f, -21.0262f, -17.4784f), Vector3(40.5954f, -18.8693f, -10.4456f));
  data[42].mAabb = Aabb(Vector3(-39.1175f, -14.7636f, 26.5279f), Vector3(-34.6474f, -11.5511f, 27.2115f));
  data[43].mAabb = Aabb(Vector3(-5.20546f, 7.92902f, -9.33046f), Vector3(2.50392f, 9.9809f, -5.25234f));
  data[44].mAabb = Aabb(Vector3(11.9037f, -27.614f, 29.2577f), Vector3(12.4952f, -20.4599f, 36.1365f));
  data[45].mAabb = Aabb(Vector3(21.6157f, 19.8437f, -23.468f), Vector3(27.4724f, 20.2785f, -19.8071f));
  data[46].mAabb = Aabb(Vector3(-32.6796f, -14.9626f, 13.8427f), Vector3(-28.958f, -11.2646f, 20.814f));
  data[47].mAabb = Aabb(Vector3(23.5485f, -25.5642f, 15.2916f), Vector3(29.3279f, -21.6378f, 20.5948f));
  data[48].mAabb = Aabb(Vector3(16.4673f, -16.3643f, -27.411f), Vector3(24.2576f, -14.5916f, -21.5927f));
  data[49].mAabb = Aabb(Vector3(12.5211f, 9.79481f, 25.3617f), Vector3(18.2232f, 10.5573f, 25.9231f));
  data[50].mAabb = Aabb(Vector3(17.9953f, -10.779f, -34.2142f), Vector3(20.0762f, -9.03486f, -31.5386f));
  data[51].mAabb = Aabb(Vector3(-23.8245f, -23.2638f, -22.7129f), Vector3(-17.4852f, -17.5284f, -18.251f));
  data[52].mAabb = Aabb(Vector3(19.673f, 42.6772f, -1.99748f), Vector3(25.2914f, 44.1771f, 0.394424f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest15(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(38);
  data[0].mAabb = Aabb(Vector3(-11.4269f, 28.2195f, -29.5633f), Vector3(-8.49317f, 36.0787f, -22.1362f));
  data[1].mAabb = Aabb(Vector3(-16.0314f, -11.5264f, -47.3108f), Vector3(-15.5975f, -10.0674f, -44.2458f));
  data[2].mAabb = Aabb(Vector3(-13.6657f, 32.9853f, -26.0487f), Vector3(-8.61201f, 39.4137f, -24.9146f));
  data[3].mAabb = Aabb(Vector3(5.37893f, 45.1759f, -7.45711f), Vector3(8.63505f, 52.4868f, -4.53314f));
  data[4].mAabb = Aabb(Vector3(-17.1372f, 11.0199f, 9.96888f), Vector3(-12.0207f, 17.4434f, 15.9554f));
  data[5].mAabb = Aabb(Vector3(-13.7526f, -6.7343f, 6.09865f), Vector3(-8.82903f, -5.08135f, 11.6208f));
  data[6].mAabb = Aabb(Vector3(-7.41176f, -26.2642f, 13.1639f), Vector3(-2.07049f, -25.3922f, 15.2102f));
  data[7].mAabb = Aabb(Vector3(24.2374f, -22.8289f, -25.4342f), Vector3(28.5412f, -21.6948f, -24.4759f));
  data[8].mAabb = Aabb(Vector3(-10.3025f, -40.0967f, 20.878f), Vector3(-7.27627f, -33.6857f, 22.0898f));
  data[9].mAabb = Aabb(Vector3(7.92496f, 22.1758f, 9.03624f), Vector3(14.4644f, 22.7254f, 9.81198f));
  data[10].mAabb = Aabb(Vector3(-2.11526f, -11.7581f, -5.03753f), Vector3(-0.348206f, -9.67627f, -3.16725f));
  data[11].mAabb = Aabb(Vector3(-13.945f, 4.4051f, -29.8948f), Vector3(-12.0314f, 5.50116f, -24.4461f));
  data[12].mAabb = Aabb(Vector3(5.8796f, -35.0339f, -35.1935f), Vector3(9.6265f, -34.1243f, -33.9708f));
  data[13].mAabb = Aabb(Vector3(23.3193f, 2.27721f, -6.1706f), Vector3(25.9399f, 3.98559f, 0.448658f));
  data[14].mAabb = Aabb(Vector3(-21.4234f, -47.7539f, -3.13611f), Vector3(-16.7072f, -40.7377f, -1.74874f));
  data[15].mAabb = Aabb(Vector3(32.2175f, 1.90363f, -36.1349f), Vector3(33.5714f, 6.44794f, -28.4378f));
  data[16].mAabb = Aabb(Vector3(14.3275f, -1.55136f, -10.6626f), Vector3(16.1959f, 0.886939f, -8.2675f));
  data[17].mAabb = Aabb(Vector3(-18.2276f, 28.9002f, -35.9303f), Vector3(-17.6007f, 34.7768f, -31.2997f));
  data[18].mAabb = Aabb(Vector3(-21.6686f, 1.26657f, -36.4947f), Vector3(-15.8377f, 6.47864f, -34.7019f));
  data[19].mAabb = Aabb(Vector3(19.6336f, 37.9895f, -9.68366f), Vector3(26.7669f, 38.6453f, -8.0161f));
  data[20].mAabb = Aabb(Vector3(14.8882f, 31.6742f, 11.7125f), Vector3(21.0644f, 32.5546f, 13.2746f));
  data[21].mAabb = Aabb(Vector3(-24.6368f, -14.6893f, 9.58833f), Vector3(-21.3714f, -12.28f, 13.5015f));
  data[22].mAabb = Aabb(Vector3(24.8011f, 8.41147f, 17.6481f), Vector3(28.0753f, 10.2061f, 21.7185f));
  data[23].mAabb = Aabb(Vector3(27.5062f, 2.58596f, 14.0512f), Vector3(30.407f, 10.5185f, 14.7518f));
  data[24].mAabb = Aabb(Vector3(20.0417f, 32.5383f, -23.5293f), Vector3(22.7314f, 38.5046f, -18.1642f));
  data[25].mAabb = Aabb(Vector3(-4.67953f, 5.31958f, 4.79064f), Vector3(1.28728f, 12.5611f, 7.97578f));
  data[26].mAabb = Aabb(Vector3(11.8027f, 30.8779f, -16.3442f), Vector3(13.1471f, 34.3112f, -10.8234f));
  data[27].mAabb = Aabb(Vector3(-0.0936913f, -29.324f, 30.2201f), Vector3(4.40656f, -23.078f, 35.9961f));
  data[28].mAabb = Aabb(Vector3(-18.8299f, -20.2683f, -1.07568f), Vector3(-12.778f, -13.1624f, 5.28149f));
  data[29].mAabb = Aabb(Vector3(21.2053f, -35.8245f, 19.608f), Vector3(27.9176f, -32.8186f, 22.8244f));
  data[30].mAabb = Aabb(Vector3(-2.15035f, 3.13635f, 45.1673f), Vector3(5.08888f, 8.38577f, 46.2035f));
  data[31].mAabb = Aabb(Vector3(19.1501f, -18.4142f, -31.4788f), Vector3(22.9197f, -11.7806f, -30.152f));
  data[32].mAabb = Aabb(Vector3(27.5992f, -30.9861f, 6.76252f), Vector3(29.2675f, -28.4142f, 8.61494f));
  data[33].mAabb = Aabb(Vector3(-21.3823f, -40.2875f, 18.2097f), Vector3(-15.9726f, -38.5824f, 19.4298f));
  data[34].mAabb = Aabb(Vector3(26.8522f, -9.27366f, -24.3376f), Vector3(29.0212f, -7.79884f, -20.0087f));
  data[35].mAabb = Aabb(Vector3(11.2487f, 1.33635f, -13.9758f), Vector3(11.9421f, 1.77949f, -12.5706f));
  data[36].mAabb = Aabb(Vector3(11.7636f, -24.4799f, 25.5848f), Vector3(18.3594f, -17.6473f, 27.9143f));
  data[37].mAabb = Aabb(Vector3(-4.96045f, 37.0814f, 17.5987f), Vector3(-4.54004f, 39.0132f, 22.7887f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest16(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(29);
  data[0].mAabb = Aabb(Vector3(12.0302f, 5.25573f, -34.6972f), Vector3(17.5359f, 6.57167f, -27.1376f));
  data[1].mAabb = Aabb(Vector3(-42.4265f, -10.3099f, -26.0898f), Vector3(-40.6318f, -5.5837f, -22.5811f));
  data[2].mAabb = Aabb(Vector3(12.0608f, 37.5157f, 20.4999f), Vector3(18.6423f, 38.3172f, 22.9347f));
  data[3].mAabb = Aabb(Vector3(-11.207f, -1.57418f, 0.0539639f), Vector3(-3.81658f, 3.60589f, 3.36621f));
  data[4].mAabb = Aabb(Vector3(21.8078f, 16.4868f, -29.287f), Vector3(23.6043f, 20.7762f, -26.7587f));
  data[5].mAabb = Aabb(Vector3(-41.7356f, -3.51065f, -10.3358f), Vector3(-36.4612f, 3.78054f, -3.57017f));
  data[6].mAabb = Aabb(Vector3(7.50225f, -10.4003f, -37.6476f), Vector3(11.9202f, -9.49424f, -34.5689f));
  data[7].mAabb = Aabb(Vector3(7.14019f, -5.68061f, 38.896f), Vector3(7.73456f, -4.85778f, 41.2538f));
  data[8].mAabb = Aabb(Vector3(-16.837f, 20.6515f, -19.0608f), Vector3(-14.2071f, 27.0497f, -14.5086f));
  data[9].mAabb = Aabb(Vector3(-36.159f, -26.9241f, -14.5295f), Vector3(-30.1247f, -24.297f, -7.90561f));
  data[10].mAabb = Aabb(Vector3(-6.58286f, -36.9473f, 19.4969f), Vector3(0.335368f, -29.519f, 23.4952f));
  data[11].mAabb = Aabb(Vector3(24.9616f, -8.20976f, 21.4399f), Vector3(31.6361f, -2.89633f, 25.8253f));
  data[12].mAabb = Aabb(Vector3(30.0232f, 8.94565f, 9.88069f), Vector3(31.4827f, 12.8032f, 13.9361f));
  data[13].mAabb = Aabb(Vector3(27.1773f, -16.6205f, -22.6081f), Vector3(28.8154f, -9.46335f, -20.1344f));
  data[14].mAabb = Aabb(Vector3(-31.6534f, 38.1462f, -3.48148f), Vector3(-26.2236f, 40.6202f, -3.06293f));
  data[15].mAabb = Aabb(Vector3(-3.76451f, -3.37893f, 36.7769f), Vector3(-0.225189f, -1.96651f, 44.4218f));
  data[16].mAabb = Aabb(Vector3(-15.9782f, 31.1845f, 15.7802f), Vector3(-10.4372f, 33.0118f, 19.3604f));
  data[17].mAabb = Aabb(Vector3(-33.8253f, 25.0977f, 11.3112f), Vector3(-31.6872f, 29.6861f, 12.9108f));
  data[18].mAabb = Aabb(Vector3(18.6629f, 18.9244f, -19.1207f), Vector3(22.3857f, 22.961f, -16.6629f));
  data[19].mAabb = Aabb(Vector3(27.192f, -29.8469f, -18.1724f), Vector3(28.417f, -27.9949f, -13.1482f));
  data[20].mAabb = Aabb(Vector3(22.9337f, 17.2789f, 5.57621f), Vector3(24.9921f, 19.3104f, 7.2999f));
  data[21].mAabb = Aabb(Vector3(1.29194f, -25.3793f, 29.301f), Vector3(7.23068f, -22.2572f, 36.4582f));
  data[22].mAabb = Aabb(Vector3(36.9925f, 2.82484f, 3.99866f), Vector3(38.6821f, 3.714f, 6.4395f));
  data[23].mAabb = Aabb(Vector3(-9.76698f, -17.0002f, 7.25424f), Vector3(-8.63358f, -12.5839f, 12.0565f));
  data[24].mAabb = Aabb(Vector3(-12.255f, -12.0009f, 40.3847f), Vector3(-7.25374f, -5.47143f, 45.0139f));
  data[25].mAabb = Aabb(Vector3(41.0096f, -10.7363f, -4.39274f), Vector3(44.22f, -8.32604f, -1.09534f));
  data[26].mAabb = Aabb(Vector3(-20.2076f, 22.5608f, 7.1826f), Vector3(-13.6095f, 24.9924f, 14.9465f));
  data[27].mAabb = Aabb(Vector3(-33.382f, 31.8213f, -17.1628f), Vector3(-27.7617f, 32.9979f, -14.2138f));
  data[28].mAabb = Aabb(Vector3(-23.8205f, -27.1259f, -26.2107f), Vector3(-15.8307f, -19.8906f, -21.9862f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest17(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(71);
  data[0].mAabb = Aabb(Vector3(-25.5756f, 19.1238f, 28.6433f), Vector3(-19.728f, 25.2022f, 33.2294f));
  data[1].mAabb = Aabb(Vector3(4.661f, 29.571f, -9.58502f), Vector3(7.16841f, 36.3299f, -3.13346f));
  data[2].mAabb = Aabb(Vector3(28.9318f, -11.4647f, -25.0528f), Vector3(34.7101f, -6.19394f, -23.976f));
  data[3].mAabb = Aabb(Vector3(-24.0327f, 30.0996f, -18.2097f), Vector3(-17.2228f, 34.3684f, -15.9025f));
  data[4].mAabb = Aabb(Vector3(7.13305f, -12.5663f, -0.753874f), Vector3(10.8667f, -10.2505f, 3.95813f));
  data[5].mAabb = Aabb(Vector3(-0.841058f, -14.6845f, 7.2795f), Vector3(4.16111f, -14.2273f, 12.5503f));
  data[6].mAabb = Aabb(Vector3(-16.4202f, -36.7253f, -2.87308f), Vector3(-12.2721f, -35.9985f, 1.03781f));
  data[7].mAabb = Aabb(Vector3(-1.49427f, -24.2525f, -19.7601f), Vector3(4.10468f, -17.6776f, -15.5509f));
  data[8].mAabb = Aabb(Vector3(26.5703f, -12.1371f, 34.1447f), Vector3(30.5295f, -7.66032f, 40.3399f));
  data[9].mAabb = Aabb(Vector3(-17.2544f, 11.0731f, 37.0917f), Vector3(-16.313f, 17.7603f, 44.9442f));
  data[10].mAabb = Aabb(Vector3(16.4931f, 2.93963f, -40.6584f), Vector3(22.1069f, 7.57162f, -39.3158f));
  data[11].mAabb = Aabb(Vector3(-21.1319f, -10.0744f, 10.821f), Vector3(-17.5257f, -6.77005f, 16.5781f));
  data[12].mAabb = Aabb(Vector3(23.4522f, 25.5209f, -28.7944f), Vector3(28.7826f, 27.738f, -22.9563f));
  data[13].mAabb = Aabb(Vector3(-1.92023f, 8.02618f, -38.5109f), Vector3(0.92605f, 14.5258f, -30.9113f));
  data[14].mAabb = Aabb(Vector3(-29.7025f, -25.8586f, 29.0596f), Vector3(-26.7748f, -21.4803f, 34.0982f));
  data[15].mAabb = Aabb(Vector3(10.0406f, 2.8993f, 24.9952f), Vector3(13.3275f, 7.1792f, 26.9098f));
  data[16].mAabb = Aabb(Vector3(33.1815f, -33.9289f, -6.54522f), Vector3(40.5163f, -30.8261f, -5.68343f));
  data[17].mAabb = Aabb(Vector3(2.0424f, -3.11092f, 7.40924f), Vector3(9.9211f, -1.73886f, 13.3965f));
  data[18].mAabb = Aabb(Vector3(9.47908f, 23.9286f, 0.326178f), Vector3(9.97185f, 26.6893f, 4.5372f));
  data[19].mAabb = Aabb(Vector3(8.01294f, 31.9833f, -22.9659f), Vector3(8.93921f, 36.5691f, -20.5534f));
  data[20].mAabb = Aabb(Vector3(23.886f, 21.5821f, -29.1039f), Vector3(24.8512f, 28.5126f, -23.9553f));
  data[21].mAabb = Aabb(Vector3(-23.1098f, -47.1589f, -0.314868f), Vector3(-17.1038f, -43.2425f, 2.12389f));
  data[22].mAabb = Aabb(Vector3(-6.03434f, -45.6494f, 25.2286f), Vector3(1.52798f, -37.6796f, 28.4611f));
  data[23].mAabb = Aabb(Vector3(22.2516f, -4.74265f, -6.72719f), Vector3(23.2296f, -2.39227f, -5.52793f));
  data[24].mAabb = Aabb(Vector3(-15.2768f, -43.539f, 17.6893f), Vector3(-12.9781f, -39.7425f, 19.5167f));
  data[25].mAabb = Aabb(Vector3(22.0379f, -28.2019f, -3.47245f), Vector3(22.5534f, -21.4665f, 0.68128f));
  data[26].mAabb = Aabb(Vector3(-40.1486f, 6.24433f, -0.055748f), Vector3(-34.356f, 7.98285f, 3.14401f));
  data[27].mAabb = Aabb(Vector3(19.5685f, -36.1447f, -5.7907f), Vector3(24.322f, -33.8667f, -1.94707f));
  data[28].mAabb = Aabb(Vector3(24.6896f, 4.9701f, -33.505f), Vector3(31.9108f, 8.48924f, -26.4894f));
  data[29].mAabb = Aabb(Vector3(-31.0753f, -11.5015f, 29.0516f), Vector3(-28.1975f, -6.07048f, 31.7342f));
  data[30].mAabb = Aabb(Vector3(32.7143f, 8.75985f, 0.589261f), Vector3(37.8582f, 15.9972f, 4.03696f));
  data[31].mAabb = Aabb(Vector3(-15.7011f, 5.11991f, 5.86959f), Vector3(-11.8401f, 10.053f, 12.355f));
  data[32].mAabb = Aabb(Vector3(18.7079f, -8.56591f, 18.4966f), Vector3(22.8132f, -3.35894f, 20.0036f));
  data[33].mAabb = Aabb(Vector3(7.98004f, 8.06108f, -28.1444f), Vector3(9.941f, 15.4242f, -27.2893f));
  data[34].mAabb = Aabb(Vector3(31.6741f, -8.26242f, -39.147f), Vector3(37.4066f, -2.34408f, -31.3335f));
  data[35].mAabb = Aabb(Vector3(4.89235f, 21.6593f, -31.3631f), Vector3(6.08675f, 26.2316f, -29.0255f));
  data[36].mAabb = Aabb(Vector3(-36.3004f, -10.7872f, 31.2361f), Vector3(-29.8637f, -5.00666f, 35.247f));
  data[37].mAabb = Aabb(Vector3(-8.02433f, 43.773f, 15.4533f), Vector3(-1.62913f, 47.1289f, 21.909f));
  data[38].mAabb = Aabb(Vector3(34.558f, -5.69252f, 27.747f), Vector3(36.9905f, 1.62024f, 32.9974f));
  data[39].mAabb = Aabb(Vector3(-9.84417f, -0.28008f, -32.1688f), Vector3(-3.57073f, 2.84708f, -31.6311f));
  data[40].mAabb = Aabb(Vector3(7.13034f, 17.4467f, -7.61086f), Vector3(13.7201f, 19.2884f, -2.86986f));
  data[41].mAabb = Aabb(Vector3(-23.0801f, -20.8431f, 23.2764f), Vector3(-22.5945f, -19.6866f, 31.127f));
  data[42].mAabb = Aabb(Vector3(-10.5329f, -46.5566f, -22.189f), Vector3(-8.70693f, -40.7827f, -21.3963f));
  data[43].mAabb = Aabb(Vector3(7.06689f, 19.8086f, -18.1891f), Vector3(11.9974f, 22.1462f, -14.0393f));
  data[44].mAabb = Aabb(Vector3(-14.8336f, -35.2075f, 10.9153f), Vector3(-12.078f, -27.5123f, 13.4702f));
  data[45].mAabb = Aabb(Vector3(20.4902f, 6.73319f, -46.6449f), Vector3(24.1683f, 13.3766f, -39.0812f));
  data[46].mAabb = Aabb(Vector3(-21.6023f, 25.3083f, -22.6082f), Vector3(-15.6958f, 31.8826f, -16.9392f));
  data[47].mAabb = Aabb(Vector3(1.21334f, 7.78683f, -17.4346f), Vector3(3.36542f, 12.221f, -16.9195f));
  data[48].mAabb = Aabb(Vector3(-16.5048f, -22.642f, 3.75751f), Vector3(-8.68737f, -16.7248f, 5.00038f));
  data[49].mAabb = Aabb(Vector3(9.91738f, -20.9524f, -45.6405f), Vector3(15.489f, -14.9703f, -38.2364f));
  data[50].mAabb = Aabb(Vector3(-23.1516f, -0.637864f, 23.4871f), Vector3(-22.6229f, 6.71201f, 25.2528f));
  data[51].mAabb = Aabb(Vector3(-16.3348f, -7.51829f, -3.00863f), Vector3(-15.068f, -1.3476f, -1.05463f));
  data[52].mAabb = Aabb(Vector3(5.41955f, -27.0224f, 24.4912f), Vector3(7.59714f, -21.7451f, 27.4586f));
  data[53].mAabb = Aabb(Vector3(8.56183f, -17.4261f, 11.5583f), Vector3(13.0451f, -15.4907f, 17.5f));
  data[54].mAabb = Aabb(Vector3(21.8935f, 18.7756f, 10.0946f), Vector3(23.7053f, 22.0714f, 12.1377f));
  data[55].mAabb = Aabb(Vector3(-24.0311f, -25.9427f, -26.9866f), Vector3(-20.9473f, -24.5353f, -19.3683f));
  data[56].mAabb = Aabb(Vector3(-20.9182f, 6.27708f, 13.8554f), Vector3(-15.5839f, 7.08483f, 20.3067f));
  data[57].mAabb = Aabb(Vector3(39.9601f, 4.97932f, -4.50756f), Vector3(45.1225f, 10.4996f, -3.7724f));
  data[58].mAabb = Aabb(Vector3(-7.04987f, -29.3313f, -15.9479f), Vector3(-6.16048f, -28.4194f, -14.2506f));
  data[59].mAabb = Aabb(Vector3(39.1422f, -22.6343f, 1.89912f), Vector3(41.3251f, -15.1895f, 2.3905f));
  data[60].mAabb = Aabb(Vector3(-6.83666f, 9.21292f, 31.5449f), Vector3(0.971064f, 12.4375f, 33.8623f));
  data[61].mAabb = Aabb(Vector3(16.6127f, 1.60803f, 18.1823f), Vector3(22.6669f, 7.42268f, 21.0888f));
  data[62].mAabb = Aabb(Vector3(-36.6718f, 18.016f, 5.40836f), Vector3(-32.059f, 20.3139f, 7.8833f));
  data[63].mAabb = Aabb(Vector3(-44.1193f, 5.12673f, -2.70548f), Vector3(-40.9657f, 6.2302f, -0.364141f));
  data[64].mAabb = Aabb(Vector3(8.9495f, 8.49249f, 24.2549f), Vector3(15.566f, 9.38954f, 27.8332f));
  data[65].mAabb = Aabb(Vector3(10.1417f, -25.5466f, 2.65799f), Vector3(16.6556f, -24.0299f, 5.92756f));
  data[66].mAabb = Aabb(Vector3(-35.475f, 20.4349f, 17.3484f), Vector3(-30.4747f, 26.0329f, 21.0867f));
  data[67].mAabb = Aabb(Vector3(-8.89887f, -18.2133f, 2.56879f), Vector3(-5.31595f, -10.4522f, 6.79025f));
  data[68].mAabb = Aabb(Vector3(-31.3844f, -31.137f, -27.6999f), Vector3(-23.8786f, -24.7682f, -22.8264f));
  data[69].mAabb = Aabb(Vector3(-18.8159f, -3.19056f, 6.10012f), Vector3(-15.2448f, -0.137851f, 10.1049f));
  data[70].mAabb = Aabb(Vector3(-25.0517f, 38.7087f, -3.5858f), Vector3(-18.4104f, 45.106f, 2.29195f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest18(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(52);
  data[0].mAabb = Aabb(Vector3(-31.0373f, -31.6902f, 2.05105f), Vector3(-30.5158f, -27.937f, 6.9347f));
  data[1].mAabb = Aabb(Vector3(10.8337f, 10.6219f, -19.4968f), Vector3(18.0942f, 12.9577f, -17.6031f));
  data[2].mAabb = Aabb(Vector3(15.9019f, 16.9041f, -40.7024f), Vector3(17.7896f, 21.7418f, -35.8125f));
  data[3].mAabb = Aabb(Vector3(-35.2845f, 5.75026f, 11.289f), Vector3(-32.0077f, 13.3318f, 17.4877f));
  data[4].mAabb = Aabb(Vector3(8.90939f, -27.8492f, -10.1529f), Vector3(13.8807f, -24.3646f, -3.00366f));
  data[5].mAabb = Aabb(Vector3(21.7153f, -17.054f, 29.5786f), Vector3(23.8681f, -11.4282f, 35.9404f));
  data[6].mAabb = Aabb(Vector3(-7.96585f, 14.333f, -47.8239f), Vector3(-1.30206f, 15.7658f, -45.2121f));
  data[7].mAabb = Aabb(Vector3(-33.8394f, 2.88024f, -5.7623f), Vector3(-29.013f, 4.65194f, -1.83587f));
  data[8].mAabb = Aabb(Vector3(10.2337f, 4.34391f, 1.90979f), Vector3(13.2231f, 10.9843f, 7.81467f));
  data[9].mAabb = Aabb(Vector3(27.228f, -36.3495f, -16.3516f), Vector3(32.8372f, -34.8037f, -10.8273f));
  data[10].mAabb = Aabb(Vector3(-1.5472f, 25.4867f, 3.40387f), Vector3(1.82837f, 26.4176f, 10.4448f));
  data[11].mAabb = Aabb(Vector3(24.7476f, 26.2195f, 1.19041f), Vector3(30.7353f, 28.7682f, 1.96615f));
  data[12].mAabb = Aabb(Vector3(43.9224f, -3.75261f, -2.93813f), Vector3(51.5093f, 0.686409f, 2.20088f));
  data[13].mAabb = Aabb(Vector3(27.7555f, 5.19371f, -13.403f), Vector3(33.9278f, 12.6498f, -7.46867f));
  data[14].mAabb = Aabb(Vector3(14.134f, -42.3322f, -0.890292f), Vector3(17.1744f, -39.4235f, 4.27794f));
  data[15].mAabb = Aabb(Vector3(9.96584f, -42.2712f, 17.8917f), Vector3(13.5736f, -41.3348f, 20.8749f));
  data[16].mAabb = Aabb(Vector3(24.5566f, -19.7219f, -21.6211f), Vector3(30.574f, -18.0024f, -14.6913f));
  data[17].mAabb = Aabb(Vector3(9.35029f, 33.1484f, 6.71485f), Vector3(10.409f, 37.3944f, 9.61957f));
  data[18].mAabb = Aabb(Vector3(-37.4232f, -25.3263f, -24.1352f), Vector3(-30.5481f, -22.2351f, -20.0478f));
  data[19].mAabb = Aabb(Vector3(-26.0065f, 26.1759f, 29.6764f), Vector3(-18.1241f, 32.0374f, 31.703f));
  data[20].mAabb = Aabb(Vector3(-31.2905f, -2.40557f, -41.1277f), Vector3(-28.91f, 0.731326f, -33.8685f));
  data[21].mAabb = Aabb(Vector3(-18.7988f, -17.1801f, 39.9355f), Vector3(-12.1011f, -13.6621f, 46.8973f));
  data[22].mAabb = Aabb(Vector3(31.7475f, 15.0394f, 15.1593f), Vector3(37.4211f, 17.8629f, 17.7439f));
  data[23].mAabb = Aabb(Vector3(25.6952f, 9.84695f, -38.3586f), Vector3(31.5657f, 11.457f, -34.9042f));
  data[24].mAabb = Aabb(Vector3(-18.249f, 13.0572f, -32.3577f), Vector3(-14.0772f, 20.963f, -28.1804f));
  data[25].mAabb = Aabb(Vector3(14.8982f, 13.1327f, 19.3747f), Vector3(20.5173f, 14.8529f, 26.0187f));
  data[26].mAabb = Aabb(Vector3(-12.9032f, -18.8983f, 17.4438f), Vector3(-6.17008f, -14.6084f, 22.9214f));
  data[27].mAabb = Aabb(Vector3(-28.2109f, -22.4847f, -25.2818f), Vector3(-22.4521f, -17.447f, -18.0223f));
  data[28].mAabb = Aabb(Vector3(-5.94514f, -9.89766f, 24.6932f), Vector3(0.0392914f, -4.40054f, 27.8095f));
  data[29].mAabb = Aabb(Vector3(23.5805f, 18.829f, 25.2544f), Vector3(28.0747f, 22.4579f, 29.7101f));
  data[30].mAabb = Aabb(Vector3(39.0447f, 22.599f, 6.62583f), Vector3(43.7762f, 29.2832f, 11.3295f));
  data[31].mAabb = Aabb(Vector3(-22.7193f, 34.932f, 26.5859f), Vector3(-20.4446f, 37.0564f, 27.1932f));
  data[32].mAabb = Aabb(Vector3(38.8412f, 22.132f, 0.481249f), Vector3(39.6026f, 24.8157f, 4.63521f));
  data[33].mAabb = Aabb(Vector3(38.805f, -6.04243f, -27.9068f), Vector3(44.5285f, -4.86125f, -23.5386f));
  data[34].mAabb = Aabb(Vector3(-12.0077f, -34.0276f, 13.5825f), Vector3(-9.05539f, -30.6964f, 16.7424f));
  data[35].mAabb = Aabb(Vector3(-21.6817f, -5.84944f, 4.05293f), Vector3(-14.0296f, 1.23602f, 4.96575f));
  data[36].mAabb = Aabb(Vector3(-34.8833f, -29.9796f, 9.23405f), Vector3(-31.486f, -24.0448f, 10.8624f));
  data[37].mAabb = Aabb(Vector3(-6.62826f, 1.97504f, 13.0241f), Vector3(-0.0521443f, 8.43333f, 17.0948f));
  data[38].mAabb = Aabb(Vector3(34.2865f, 11.7743f, 30.4133f), Vector3(35.5495f, 14.3302f, 35.7047f));
  data[39].mAabb = Aabb(Vector3(8.72854f, -27.8873f, 12.0355f), Vector3(12.4713f, -27.0615f, 16.9008f));
  data[40].mAabb = Aabb(Vector3(4.70027f, -20.8621f, 13.6331f), Vector3(7.78892f, -16.1013f, 17.335f));
  data[41].mAabb = Aabb(Vector3(-43.8026f, -21.9084f, -7.29984f), Vector3(-40.7232f, -19.8908f, -0.127633f));
  data[42].mAabb = Aabb(Vector3(-27.3256f, -12.0665f, 26.9419f), Vector3(-23.2851f, -8.16256f, 31.7732f));
  data[43].mAabb = Aabb(Vector3(2.82141f, -30.4408f, 2.63875f), Vector3(8.10492f, -23.2888f, 5.64506f));
  data[44].mAabb = Aabb(Vector3(28.7422f, -15.8665f, 9.74657f), Vector3(32.7788f, -14.2562f, 13.2219f));
  data[45].mAabb = Aabb(Vector3(-47.5387f, 14.0231f, 10.4753f), Vector3(-41.2812f, 20.2005f, 12.6287f));
  data[46].mAabb = Aabb(Vector3(0.226171f, 10.1914f, -37.9435f), Vector3(2.67421f, 15.9043f, -30.255f));
  data[47].mAabb = Aabb(Vector3(-11.4345f, -11.1549f, -7.02173f), Vector3(-5.12651f, -8.42896f, -0.365359f));
  data[48].mAabb = Aabb(Vector3(-9.95883f, 21.8857f, 2.68675f), Vector3(-7.46093f, 26.5998f, 3.13778f));
  data[49].mAabb = Aabb(Vector3(17.9015f, -30.8526f, -37.9618f), Vector3(20.2208f, -28.406f, -31.0935f));
  data[50].mAabb = Aabb(Vector3(-16.9768f, -15.2826f, 0.224813f), Vector3(-9.91522f, -9.25219f, 6.61282f));
  data[51].mAabb = Aabb(Vector3(12.6366f, -1.33923f, 3.66575f), Vector3(19.9485f, 1.43608f, 7.25563f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest19(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(52);
  data[0].mAabb = Aabb(Vector3(-13.6571f, 21.071f, 17.7559f), Vector3(-9.70868f, 23.7783f, 23.0777f));
  data[1].mAabb = Aabb(Vector3(-10.0891f, 12.6565f, -22.592f), Vector3(-6.29444f, 16.9916f, -20.9701f));
  data[2].mAabb = Aabb(Vector3(21.998f, 3.54374f, -26.0477f), Vector3(26.8575f, 8.28196f, -19.5716f));
  data[3].mAabb = Aabb(Vector3(18.3535f, -17.3756f, -24.865f), Vector3(20.4175f, -15.4205f, -23.9797f));
  data[4].mAabb = Aabb(Vector3(-5.84667f, -23.0917f, 40.5459f), Vector3(-2.57965f, -15.9065f, 42.7982f));
  data[5].mAabb = Aabb(Vector3(-2.2851f, 28.1201f, 15.6434f), Vector3(-0.647932f, 29.1714f, 21.0883f));
  data[6].mAabb = Aabb(Vector3(2.52683f, 1.75909f, -27.3482f), Vector3(4.90273f, 5.26199f, -20.4694f));
  data[7].mAabb = Aabb(Vector3(-23.624f, -3.03102f, -2.13147f), Vector3(-20.0305f, -1.7849f, 1.91835f));
  data[8].mAabb = Aabb(Vector3(3.93246f, 18.3981f, -19.145f), Vector3(7.33354f, 19.4107f, -11.8499f));
  data[9].mAabb = Aabb(Vector3(17.6569f, 41.3501f, -7.70851f), Vector3(20.5345f, 42.7403f, -0.409205f));
  data[10].mAabb = Aabb(Vector3(25.4683f, 17.7181f, -2.41735f), Vector3(30.5118f, 20.2418f, -0.282669f));
  data[11].mAabb = Aabb(Vector3(19.2856f, -34.0752f, -24.8493f), Vector3(22.5635f, -31.0039f, -19.0834f));
  data[12].mAabb = Aabb(Vector3(31.1278f, -2.32064f, -31.7059f), Vector3(35.8307f, 3.22589f, -28.5674f));
  data[13].mAabb = Aabb(Vector3(-6.67623f, 48.442f, -12.3465f), Vector3(-0.199156f, 49.1618f, -6.01973f));
  data[14].mAabb = Aabb(Vector3(-3.54711f, 16.7056f, 0.520968f), Vector3(0.492734f, 20.3621f, 7.83071f));
  data[15].mAabb = Aabb(Vector3(-16.1798f, 3.8873f, -20.652f), Vector3(-13.7016f, 9.46166f, -15.7303f));
  data[16].mAabb = Aabb(Vector3(-1.75915f, 38.1026f, 18.2999f), Vector3(0.738987f, 39.2772f, 23.4257f));
  data[17].mAabb = Aabb(Vector3(-44.4345f, -7.26913f, 28.0438f), Vector3(-36.7063f, -4.70373f, 28.9902f));
  data[18].mAabb = Aabb(Vector3(-21.359f, 19.0154f, 23.6396f), Vector3(-17.1551f, 21.9396f, 26.3572f));
  data[19].mAabb = Aabb(Vector3(4.3567f, 19.9655f, 34.2055f), Vector3(7.79953f, 21.3515f, 36.9017f));
  data[20].mAabb = Aabb(Vector3(16.7467f, -37.9487f, 20.3779f), Vector3(23.3952f, -32.5226f, 22.1074f));
  data[21].mAabb = Aabb(Vector3(-11.8202f, 16.2604f, -21.4561f), Vector3(-8.96556f, 21.0659f, -13.9865f));
  data[22].mAabb = Aabb(Vector3(-7.14784f, -1.42472f, -21.5728f), Vector3(-2.97393f, 3.07529f, -15.6009f));
  data[23].mAabb = Aabb(Vector3(-18.7064f, 7.56407f, 20.76f), Vector3(-17.6215f, 9.85763f, 25.3078f));
  data[24].mAabb = Aabb(Vector3(-13.398f, 35.659f, -21.6757f), Vector3(-8.33155f, 43.2856f, -15.4962f));
  data[25].mAabb = Aabb(Vector3(34.7471f, -8.23898f, 18.7201f), Vector3(40.7125f, -6.22305f, 26.1816f));
  data[26].mAabb = Aabb(Vector3(29.8524f, -14.4086f, -37.1018f), Vector3(33.9301f, -9.16868f, -32.7147f));
  data[27].mAabb = Aabb(Vector3(35.6131f, -30.2241f, 4.40098f), Vector3(37.9219f, -26.1626f, 8.55448f));
  data[28].mAabb = Aabb(Vector3(20.2347f, -16.5204f, 26.8303f), Vector3(28.2145f, -13.2126f, 33.2677f));
  data[29].mAabb = Aabb(Vector3(-6.6367f, 4.1842f, 32.5459f), Vector3(-4.28283f, 8.15121f, 38.8035f));
  data[30].mAabb = Aabb(Vector3(-28.8854f, -15.9729f, 1.7589f), Vector3(-26.1145f, -13.0072f, 7.889f));
  data[31].mAabb = Aabb(Vector3(12.4372f, 33.2992f, 2.27149f), Vector3(16.9231f, 38.7005f, 4.7694f));
  data[32].mAabb = Aabb(Vector3(6.8379f, -12.0639f, 7.40251f), Vector3(12.582f, -5.29876f, 10.9286f));
  data[33].mAabb = Aabb(Vector3(17.0938f, -11.67f, -35.1821f), Vector3(22.4455f, -9.80249f, -30.1547f));
  data[34].mAabb = Aabb(Vector3(1.3647f, -9.78108f, -41.607f), Vector3(8.79158f, -4.08263f, -36.6849f));
  data[35].mAabb = Aabb(Vector3(36.7593f, 19.4596f, -1.87664f), Vector3(38.2408f, 24.5525f, -0.563254f));
  data[36].mAabb = Aabb(Vector3(-24.8724f, -22.1454f, 2.08023f), Vector3(-17.463f, -18.3804f, 3.48384f));
  data[37].mAabb = Aabb(Vector3(-12.8781f, -0.841847f, 40.1921f), Vector3(-8.95024f, 3.11867f, 48.1796f));
  data[38].mAabb = Aabb(Vector3(-2.5811f, 4.06051f, 41.1539f), Vector3(-0.307251f, 7.89972f, 43.845f));
  data[39].mAabb = Aabb(Vector3(9.18527f, 2.20979f, -27.9509f), Vector3(11.2179f, 9.8635f, -26.6839f));
  data[40].mAabb = Aabb(Vector3(9.50658f, 25.0024f, 5.80185f), Vector3(9.93812f, 29.0052f, 7.39356f));
  data[41].mAabb = Aabb(Vector3(-14.8912f, 3.38362f, 34.907f), Vector3(-8.64909f, 7.05143f, 38.8729f));
  data[42].mAabb = Aabb(Vector3(14.5077f, -6.94565f, -27.1194f), Vector3(20.1948f, -2.84109f, -20.5482f));
  data[43].mAabb = Aabb(Vector3(29.88f, 11.2352f, -20.6936f), Vector3(37.1524f, 18.3947f, -15.7921f));
  data[44].mAabb = Aabb(Vector3(3.87334f, -7.63566f, 13.3395f), Vector3(10.2113f, -4.32481f, 15.8906f));
  data[45].mAabb = Aabb(Vector3(11.1133f, -10.6231f, 40.7884f), Vector3(15.4593f, -8.73609f, 46.7051f));
  data[46].mAabb = Aabb(Vector3(35.9361f, 21.6325f, 18.4037f), Vector3(38.7605f, 25.24f, 26.2596f));
  data[47].mAabb = Aabb(Vector3(39.7626f, 13.6645f, 23.9682f), Vector3(40.3706f, 16.0791f, 25.4915f));
  data[48].mAabb = Aabb(Vector3(1.93067f, -7.57635f, 39.2482f), Vector3(6.27111f, 0.0400188f, 43.0565f));
  data[49].mAabb = Aabb(Vector3(17.9015f, 10.6466f, -6.78177f), Vector3(22.3361f, 18.0815f, -2.79782f));
  data[50].mAabb = Aabb(Vector3(12.5809f, -28.2388f, -1.74385f), Vector3(17.1992f, -25.348f, 1.95527f));
  data[51].mAabb = Aabb(Vector3(8.49209f, 9.33199f, -12.5264f), Vector3(11.6397f, 14.8057f, -10.0844f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest20(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(30);
  data[0].mAabb = Aabb(Vector3(34.8656f, 12.997f, -4.08115f), Vector3(42.0983f, 16.9383f, 1.93066f));
  data[1].mAabb = Aabb(Vector3(-22.122f, -3.26779f, -29.2628f), Vector3(-15.2068f, 1.90718f, -26.2595f));
  data[2].mAabb = Aabb(Vector3(37.1204f, 15.4574f, 6.51484f), Vector3(37.8876f, 18.1977f, 13.8401f));
  data[3].mAabb = Aabb(Vector3(20.6679f, 43.059f, 4.56778f), Vector3(25.6279f, 43.9421f, 7.85823f));
  data[4].mAabb = Aabb(Vector3(18.6587f, 16.533f, -28.4038f), Vector3(26.5212f, 18.5116f, -23.5572f));
  data[5].mAabb = Aabb(Vector3(14.65f, -24.8839f, -25.9386f), Vector3(19.2762f, -18.1046f, -24.6955f));
  data[6].mAabb = Aabb(Vector3(-1.79568f, 21.8927f, -1.40191f), Vector3(-0.955687f, 27.9209f, 3.44231f));
  data[7].mAabb = Aabb(Vector3(-13.2881f, -45.8448f, 19.2807f), Vector3(-6.57884f, -42.2484f, 21.9865f));
  data[8].mAabb = Aabb(Vector3(-17.5947f, -4.76668f, -31.7801f), Vector3(-12.9133f, 1.69092f, -27.7022f));
  data[9].mAabb = Aabb(Vector3(-28.7683f, 28.1934f, -22.6252f), Vector3(-24.8541f, 32.4288f, -15.2981f));
  data[10].mAabb = Aabb(Vector3(-27.6215f, 23.9726f, 10.8375f), Vector3(-21.2593f, 30.045f, 18.77f));
  data[11].mAabb = Aabb(Vector3(-35.7368f, -21.8153f, -6.15697f), Vector3(-33.7933f, -20.8642f, 0.298303f));
  data[12].mAabb = Aabb(Vector3(-17.5267f, 8.51485f, -21.3699f), Vector3(-16.5805f, 13.6007f, -18.8179f));
  data[13].mAabb = Aabb(Vector3(-14.4832f, 3.74167f, -41.1794f), Vector3(-13.96f, 6.06817f, -40.7163f));
  data[14].mAabb = Aabb(Vector3(24.424f, -16.5589f, -20.1916f), Vector3(32.3698f, -16.0703f, -18.8063f));
  data[15].mAabb = Aabb(Vector3(21.3266f, 5.79235f, 27.5594f), Vector3(26.7024f, 13.592f, 33.3768f));
  data[16].mAabb = Aabb(Vector3(5.71792f, -11.5107f, 35.3196f), Vector3(7.37945f, -3.63544f, 36.8742f));
  data[17].mAabb = Aabb(Vector3(-3.8723f, -24.3159f, -31.5993f), Vector3(-2.31538f, -17.4105f, -28.3982f));
  data[18].mAabb = Aabb(Vector3(-13.8552f, 15.3022f, 24.1071f), Vector3(-6.83535f, 20.0919f, 24.9702f));
  data[19].mAabb = Aabb(Vector3(-16.4731f, -16.2642f, 14.8471f), Vector3(-11.7068f, -13.2674f, 17.0537f));
  data[20].mAabb = Aabb(Vector3(21.9677f, -41.8919f, -15.8873f), Vector3(22.5755f, -39.4311f, -13.8378f));
  data[21].mAabb = Aabb(Vector3(6.76081f, -16.8487f, -45.8634f), Vector3(13.8041f, -12.6463f, -39.1557f));
  data[22].mAabb = Aabb(Vector3(-27.4822f, 15.5848f, -8.29314f), Vector3(-22.2471f, 16.1616f, -5.18779f));
  data[23].mAabb = Aabb(Vector3(15.2706f, -17.429f, 38.901f), Vector3(17.1341f, -13.2412f, 42.1249f));
  data[24].mAabb = Aabb(Vector3(25.1885f, 35.8574f, 7.23699f), Vector3(27.7058f, 37.4304f, 13.904f));
  data[25].mAabb = Aabb(Vector3(-36.0505f, 22.6464f, 11.5178f), Vector3(-32.2024f, 24.5295f, 18.7114f));
  data[26].mAabb = Aabb(Vector3(17.049f, -19.9887f, 15.5054f), Vector3(23.2612f, -13.7005f, 17.1989f));
  data[27].mAabb = Aabb(Vector3(-46.7658f, -1.31851f, -2.48642f), Vector3(-41.8729f, 5.41765f, -1.82711f));
  data[28].mAabb = Aabb(Vector3(-4.96272f, -16.6296f, 3.06579f), Vector3(-0.561739f, -8.77314f, 6.70971f));
  data[29].mAabb = Aabb(Vector3(6.36581f, -1.16545f, 30.0764f), Vector3(8.706f, 1.49064f, 31.5668f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest21(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(45);
  data[0].mAabb = Aabb(Vector3(26.9962f, 4.07132f, 28.9198f), Vector3(34.5632f, 11.1171f, 32.5872f));
  data[1].mAabb = Aabb(Vector3(-39.0303f, 26.3177f, -17.2935f), Vector3(-32.5873f, 28.5006f, -12.8765f));
  data[2].mAabb = Aabb(Vector3(3.02063f, -32.6106f, -1.38043f), Vector3(4.13339f, -29.0622f, 5.04562f));
  data[3].mAabb = Aabb(Vector3(-21.3055f, -35.8956f, -32.9038f), Vector3(-18.7281f, -28.9678f, -29.0094f));
  data[4].mAabb = Aabb(Vector3(-17.8945f, 17.4564f, -40.7741f), Vector3(-12.0091f, 18.756f, -36.3339f));
  data[5].mAabb = Aabb(Vector3(21.911f, 15.4184f, 16.3692f), Vector3(24.0573f, 21.0925f, 20.3105f));
  data[6].mAabb = Aabb(Vector3(0.941146f, -9.17962f, 39.1145f), Vector3(6.28102f, -5.33901f, 46.6838f));
  data[7].mAabb = Aabb(Vector3(-34.0685f, 12.5147f, 17.8938f), Vector3(-27.411f, 19.011f, 25.0347f));
  data[8].mAabb = Aabb(Vector3(-16.6204f, 41.9587f, -20.0587f), Vector3(-15.3763f, 43.8283f, -13.7526f));
  data[9].mAabb = Aabb(Vector3(22.2541f, 17.5643f, 23.2157f), Vector3(29.4891f, 20.4066f, 30.5023f));
  data[10].mAabb = Aabb(Vector3(-14.6492f, -2.16899f, 41.3105f), Vector3(-10.9346f, 3.81962f, 43.1054f));
  data[11].mAabb = Aabb(Vector3(22.7647f, -20.4472f, 26.0705f), Vector3(25.7476f, -15.555f, 26.8323f));
  data[12].mAabb = Aabb(Vector3(-6.26473f, 15.1466f, 24.0172f), Vector3(0.573019f, 16.2327f, 28.9465f));
  data[13].mAabb = Aabb(Vector3(5.16735f, 19.2167f, 2.52788f), Vector3(12.8359f, 26.3762f, 9.31158f));
  data[14].mAabb = Aabb(Vector3(10.9855f, -0.694907f, 31.654f), Vector3(16.6756f, 3.82969f, 36.8941f));
  data[15].mAabb = Aabb(Vector3(-25.4619f, -18.4007f, 26.5478f), Vector3(-21.8279f, -17.9981f, 34.465f));
  data[16].mAabb = Aabb(Vector3(4.81061f, -5.39017f, 32.9605f), Vector3(12.7839f, -1.69916f, 38.2543f));
  data[17].mAabb = Aabb(Vector3(33.8374f, -11.7275f, -0.0595508f), Vector3(37.0908f, -8.8198f, 7.2212f));
  data[18].mAabb = Aabb(Vector3(36.6584f, 15.8423f, -4.3249f), Vector3(41.5281f, 16.5183f, 2.97928f));
  data[19].mAabb = Aabb(Vector3(21.8392f, -15.2001f, 34.0027f), Vector3(23.8829f, -8.7963f, 41.45f));
  data[20].mAabb = Aabb(Vector3(-8.23044f, 31.0584f, -10.0027f), Vector3(-1.89438f, 31.5018f, -7.92435f));
  data[21].mAabb = Aabb(Vector3(-21.5045f, 4.04665f, -37.4353f), Vector3(-14.9602f, 5.72186f, -36.3771f));
  data[22].mAabb = Aabb(Vector3(10.6156f, -42.7541f, -5.23044f), Vector3(17.2634f, -39.7051f, 1.37212f));
  data[23].mAabb = Aabb(Vector3(-29.583f, 27.4218f, -29.3776f), Vector3(-24.9069f, 29.354f, -23.2146f));
  data[24].mAabb = Aabb(Vector3(6.24331f, -33.5459f, -14.2403f), Vector3(6.84533f, -30.0669f, -11.4553f));
  data[25].mAabb = Aabb(Vector3(6.16033f, 3.39717f, -33.6559f), Vector3(7.05529f, 4.39906f, -32.9632f));
  data[26].mAabb = Aabb(Vector3(6.73934f, 21.2076f, -34.4006f), Vector3(14.1379f, 27.6683f, -28.3333f));
  data[27].mAabb = Aabb(Vector3(39.5397f, -0.572442f, -11.9848f), Vector3(46.1903f, 4.23234f, -10.0994f));
  data[28].mAabb = Aabb(Vector3(2.08474f, -29.6284f, 9.55969f), Vector3(4.28762f, -23.0117f, 11.9739f));
  data[29].mAabb = Aabb(Vector3(-43.5274f, -4.21357f, 23.3774f), Vector3(-41.4667f, 0.560598f, 24.0483f));
  data[30].mAabb = Aabb(Vector3(-6.35983f, 14.8839f, -4.65819f), Vector3(-5.14549f, 17.0049f, 0.540427f));
  data[31].mAabb = Aabb(Vector3(14.9536f, -5.76528f, -19.1017f), Vector3(17.4737f, -4.47718f, -14.6689f));
  data[32].mAabb = Aabb(Vector3(6.63769f, -31.0456f, 19.5422f), Vector3(9.27754f, -23.628f, 20.4329f));
  data[33].mAabb = Aabb(Vector3(3.42487f, -35.8714f, 8.1664f), Vector3(6.3739f, -29.3017f, 12.7198f));
  data[34].mAabb = Aabb(Vector3(33.6719f, -33.0146f, -5.9449f), Vector3(40.2684f, -29.0462f, -1.27835f));
  data[35].mAabb = Aabb(Vector3(7.1516f, -0.502194f, 17.0585f), Vector3(8.94974f, 5.41869f, 17.6197f));
  data[36].mAabb = Aabb(Vector3(-1.63613f, 6.76355f, 9.73379f), Vector3(4.71152f, 14.1549f, 12.177f));
  data[37].mAabb = Aabb(Vector3(-40.0587f, -8.41447f, -3.0322f), Vector3(-33.3362f, -4.06035f, 0.65672f));
  data[38].mAabb = Aabb(Vector3(-0.135072f, -5.41144f, 36.3323f), Vector3(6.55632f, 2.13813f, 36.7952f));
  data[39].mAabb = Aabb(Vector3(-21.6539f, -22.1278f, 36.2482f), Vector3(-18.0202f, -21.4462f, 43.5023f));
  data[40].mAabb = Aabb(Vector3(16.5809f, -13.5949f, -19.8583f), Vector3(24.0892f, -8.03931f, -15.3314f));
  data[41].mAabb = Aabb(Vector3(-17.3866f, 24.2283f, -22.6283f), Vector3(-13.5384f, 25.1539f, -16.3493f));
  data[42].mAabb = Aabb(Vector3(-18.1853f, 10.4014f, -42.157f), Vector3(-17.5025f, 13.4553f, -36.5551f));
  data[43].mAabb = Aabb(Vector3(-30.9834f, 8.02503f, 1.71961f), Vector3(-24.3449f, 12.3367f, 2.27849f));
  data[44].mAabb = Aabb(Vector3(26.3395f, 6.63209f, 26.4567f), Vector3(28.3549f, 7.1745f, 33.1599f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest22(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(68);
  data[0].mAabb = Aabb(Vector3(15.8536f, 19.6215f, 29.8871f), Vector3(18.6447f, 25.4624f, 37.2748f));
  data[1].mAabb = Aabb(Vector3(31.8839f, 5.72023f, 28.9605f), Vector3(32.4569f, 10.364f, 30.1749f));
  data[2].mAabb = Aabb(Vector3(1.89349f, 5.9557f, -24.7995f), Vector3(3.07257f, 12.5643f, -23.9725f));
  data[3].mAabb = Aabb(Vector3(-30.2493f, -25.609f, -0.998544f), Vector3(-28.785f, -24.9622f, 0.782663f));
  data[4].mAabb = Aabb(Vector3(11.5067f, 3.561f, 33.8074f), Vector3(16.0302f, 8.68679f, 39.9579f));
  data[5].mAabb = Aabb(Vector3(23.5247f, -11.3569f, -34.1792f), Vector3(26.0662f, -3.46382f, -29.4732f));
  data[6].mAabb = Aabb(Vector3(15.8657f, 17.2406f, -29.9776f), Vector3(21.0771f, 17.9403f, -28.9481f));
  data[7].mAabb = Aabb(Vector3(-29.047f, -4.67295f, 39.9641f), Vector3(-21.2351f, 1.14796f, 42.2528f));
  data[8].mAabb = Aabb(Vector3(11.1164f, 43.5273f, 2.51846f), Vector3(14.4347f, 51.3965f, 10.2696f));
  data[9].mAabb = Aabb(Vector3(-3.53495f, -17.3968f, 23.5018f), Vector3(-1.03496f, -13.9588f, 24.7607f));
  data[10].mAabb = Aabb(Vector3(-11.6215f, -36.3229f, 11.9621f), Vector3(-8.3867f, -35.3465f, 19.7102f));
  data[11].mAabb = Aabb(Vector3(11.6996f, -47.5215f, -17.6922f), Vector3(14.8798f, -41.7419f, -16.8461f));
  data[12].mAabb = Aabb(Vector3(-15.947f, -9.04352f, -29.6325f), Vector3(-11.5201f, -3.5123f, -28.6682f));
  data[13].mAabb = Aabb(Vector3(27.6775f, -25.8735f, 15.1096f), Vector3(33.6487f, -20.9091f, 18.573f));
  data[14].mAabb = Aabb(Vector3(-26.6129f, 0.683484f, 9.30597f), Vector3(-22.4622f, 2.40717f, 14.8653f));
  data[15].mAabb = Aabb(Vector3(-27.4333f, 28.5337f, -21.0494f), Vector3(-22.9163f, 33.643f, -13.6346f));
  data[16].mAabb = Aabb(Vector3(22.4161f, -8.53847f, -5.67807f), Vector3(25.7392f, -7.6834f, -3.20893f));
  data[17].mAabb = Aabb(Vector3(-2.34181f, -29.679f, -22.5967f), Vector3(0.115736f, -26.7147f, -19.3592f));
  data[18].mAabb = Aabb(Vector3(-4.17507f, 3.56353f, 7.68241f), Vector3(-1.20377f, 9.20817f, 15.62f));
  data[19].mAabb = Aabb(Vector3(-4.89907f, 10.9136f, 16.8549f), Vector3(-2.79268f, 12.846f, 23.5518f));
  data[20].mAabb = Aabb(Vector3(-1.1022f, -21.3005f, 40.124f), Vector3(4.16461f, -18.9262f, 45.0483f));
  data[21].mAabb = Aabb(Vector3(0.340106f, -10.6739f, 21.5343f), Vector3(0.784638f, -6.54062f, 27.1743f));
  data[22].mAabb = Aabb(Vector3(1.60294f, 14.4177f, 16.6801f), Vector3(8.16189f, 21.8594f, 24.3878f));
  data[23].mAabb = Aabb(Vector3(13.1458f, -6.36289f, -30.0776f), Vector3(17.6933f, -1.38415f, -24.3529f));
  data[24].mAabb = Aabb(Vector3(34.267f, -9.38112f, 11.0814f), Vector3(38.2865f, -4.71155f, 16.8761f));
  data[25].mAabb = Aabb(Vector3(-0.0664349f, 34.5934f, -3.35439f), Vector3(6.28563f, 37.9087f, 3.2811f));
  data[26].mAabb = Aabb(Vector3(-38.7208f, 30.13f, 5.87562f), Vector3(-35.4067f, 31.2805f, 6.52032f));
  data[27].mAabb = Aabb(Vector3(31.2328f, 13.4772f, -13.5699f), Vector3(36.1137f, 19.4818f, -10.9718f));
  data[28].mAabb = Aabb(Vector3(19.3803f, 20.0414f, -17.9924f), Vector3(22.687f, 27.6184f, -15.0635f));
  data[29].mAabb = Aabb(Vector3(13.2658f, -3.10248f, 44.7575f), Vector3(13.8998f, -1.1058f, 50.7649f));
  data[30].mAabb = Aabb(Vector3(-27.6913f, 21.3224f, 24.1016f), Vector3(-21.6748f, 24.9457f, 30.3286f));
  data[31].mAabb = Aabb(Vector3(33.5344f, 4.53689f, 12.0292f), Vector3(38.1974f, 10.901f, 17.6054f));
  data[32].mAabb = Aabb(Vector3(-27.227f, -23.6772f, 11.8715f), Vector3(-22.1935f, -17.7305f, 14.3566f));
  data[33].mAabb = Aabb(Vector3(15.4885f, 16.445f, 9.81774f), Vector3(17.7217f, 21.3992f, 12.0415f));
  data[34].mAabb = Aabb(Vector3(-0.759244f, 28.9268f, -39.5455f), Vector3(-0.147482f, 31.8867f, -37.6087f));
  data[35].mAabb = Aabb(Vector3(-12.3936f, 20.0923f, 0.600991f), Vector3(-7.59715f, 26.6213f, 4.31426f));
  data[36].mAabb = Aabb(Vector3(20.9606f, -33.1068f, -8.23454f), Vector3(23.2075f, -29.9572f, -7.02669f));
  data[37].mAabb = Aabb(Vector3(5.26249f, 13.7056f, -40.2807f), Vector3(6.24188f, 16.3531f, -33.0311f));
  data[38].mAabb = Aabb(Vector3(29.3558f, -2.74572f, -31.9162f), Vector3(35.5091f, 3.94613f, -25.2037f));
  data[39].mAabb = Aabb(Vector3(35.5737f, -6.27881f, 16.4102f), Vector3(36.6765f, -2.11974f, 19.4612f));
  data[40].mAabb = Aabb(Vector3(14.262f, -37.2939f, -25.5913f), Vector3(21.5144f, -34.5578f, -21.7368f));
  data[41].mAabb = Aabb(Vector3(13.0193f, -1.3593f, -17.3694f), Vector3(14.1629f, 6.40691f, -12.0581f));
  data[42].mAabb = Aabb(Vector3(16.3316f, 1.76572f, -21.8142f), Vector3(19.0196f, 9.08056f, -19.8653f));
  data[43].mAabb = Aabb(Vector3(-19.5603f, 20.6095f, 15.5045f), Vector3(-12.1081f, 21.3317f, 22.2599f));
  data[44].mAabb = Aabb(Vector3(-10.4086f, -8.62528f, 13.0994f), Vector3(-9.53354f, -7.58211f, 20.4711f));
  data[45].mAabb = Aabb(Vector3(13.6654f, 20.3444f, -36.5234f), Vector3(15.0036f, 21.8689f, -28.9117f));
  data[46].mAabb = Aabb(Vector3(23.8628f, -38.4955f, -20.6271f), Vector3(24.5615f, -36.5238f, -18.9758f));
  data[47].mAabb = Aabb(Vector3(1.40092f, -36.1411f, -29.0889f), Vector3(9.03817f, -34.6756f, -21.483f));
  data[48].mAabb = Aabb(Vector3(10.3223f, 1.22148f, 41.9818f), Vector3(10.7982f, 4.77425f, 47.0032f));
  data[49].mAabb = Aabb(Vector3(15.6154f, 2.98778f, 41.6033f), Vector3(17.5842f, 5.4945f, 46.9961f));
  data[50].mAabb = Aabb(Vector3(-32.646f, -35.3145f, 8.1402f), Vector3(-31.3556f, -29.8294f, 13.8746f));
  data[51].mAabb = Aabb(Vector3(-5.1421f, -0.956563f, 31.2489f), Vector3(-1.94026f, 0.177994f, 31.6848f));
  data[52].mAabb = Aabb(Vector3(-22.6825f, -9.23554f, 17.2008f), Vector3(-19.1677f, -5.03681f, 20.0605f));
  data[53].mAabb = Aabb(Vector3(-21.2914f, -15.0141f, -27.3347f), Vector3(-19.0551f, -7.75093f, -23.5838f));
  data[54].mAabb = Aabb(Vector3(-18.0577f, 41.4532f, 15.2477f), Vector3(-11.3265f, 44.9935f, 18.9227f));
  data[55].mAabb = Aabb(Vector3(3.37939f, -13.8279f, -32.4219f), Vector3(8.5961f, -12.7836f, -25.5009f));
  data[56].mAabb = Aabb(Vector3(31.9422f, 14.4441f, 20.9112f), Vector3(36.2073f, 18.0697f, 23.8718f));
  data[57].mAabb = Aabb(Vector3(-14.4835f, -43.1178f, 0.316066f), Vector3(-12.5961f, -35.2644f, 7.31617f));
  data[58].mAabb = Aabb(Vector3(-28.5474f, 11.183f, -9.8139f), Vector3(-23.2066f, 16.8009f, -4.09991f));
  data[59].mAabb = Aabb(Vector3(24.4852f, 0.0643866f, -31.1281f), Vector3(24.8905f, 4.36424f, -24.8113f));
  data[60].mAabb = Aabb(Vector3(22.7821f, 19.3287f, -37.4432f), Vector3(30.459f, 24.9251f, -30.8492f));
  data[61].mAabb = Aabb(Vector3(22.1717f, 4.31384f, -2.76737f), Vector3(29.8894f, 7.05784f, -1.5811f));
  data[62].mAabb = Aabb(Vector3(-16.9136f, 30.0835f, -19.6568f), Vector3(-10.1848f, 37.7606f, -16.8497f));
  data[63].mAabb = Aabb(Vector3(18.4096f, -37.3217f, -14.8637f), Vector3(24.0318f, -32.9567f, -7.1133f));
  data[64].mAabb = Aabb(Vector3(5.43949f, -6.07048f, 34.3527f), Vector3(7.83186f, 0.678664f, 41.3045f));
  data[65].mAabb = Aabb(Vector3(8.21705f, -27.748f, 21.2359f), Vector3(15.0381f, -26.6948f, 23.3875f));
  data[66].mAabb = Aabb(Vector3(-20.0836f, 36.9757f, -10.8075f), Vector3(-14.2988f, 38.3633f, -3.48038f));
  data[67].mAabb = Aabb(Vector3(12.8215f, -48.9269f, 2.8112f), Vector3(18.2992f, -43.9417f, 8.46906f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest23(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(54);
  data[0].mAabb = Aabb(Vector3(3.43515f, -27.3444f, 25.0632f), Vector3(5.26019f, -23.0965f, 26.9592f));
  data[1].mAabb = Aabb(Vector3(24.826f, 17.7646f, 6.67505f), Vector3(26.7743f, 18.7632f, 14.2432f));
  data[2].mAabb = Aabb(Vector3(-36.2072f, 26.1236f, 1.25446f), Vector3(-28.8926f, 32.4288f, 8.42109f));
  data[3].mAabb = Aabb(Vector3(10.2676f, -16.4412f, -25.8875f), Vector3(11.041f, -13.1308f, -24.7782f));
  data[4].mAabb = Aabb(Vector3(-17.4262f, -23.6016f, 17.5359f), Vector3(-13.9958f, -19.0585f, 22.5404f));
  data[5].mAabb = Aabb(Vector3(-48.7334f, -7.099f, -5.10987f), Vector3(-45.1307f, -6.65934f, -2.81283f));
  data[6].mAabb = Aabb(Vector3(-7.35578f, -11.0351f, -14.5851f), Vector3(-5.8754f, -4.48399f, -10.6849f));
  data[7].mAabb = Aabb(Vector3(18.634f, -45.7991f, -19.027f), Vector3(21.7031f, -38.2192f, -13.7567f));
  data[8].mAabb = Aabb(Vector3(3.30119f, -11.6326f, -15.9436f), Vector3(10.6865f, -5.17778f, -11.1272f));
  data[9].mAabb = Aabb(Vector3(8.44593f, -13.918f, 22.337f), Vector3(15.8754f, -12.9644f, 28.5249f));
  data[10].mAabb = Aabb(Vector3(4.75161f, 4.38916f, 2.55452f), Vector3(5.7085f, 8.71452f, 5.37088f));
  data[11].mAabb = Aabb(Vector3(-11.8025f, -7.11923f, 0.223166f), Vector3(-10.3592f, 0.4983f, 6.6912f));
  data[12].mAabb = Aabb(Vector3(-0.971194f, 29.0055f, 12.0105f), Vector3(3.46573f, 30.0246f, 13.6027f));
  data[13].mAabb = Aabb(Vector3(39.0716f, 4.42108f, -26.0647f), Vector3(41.1666f, 6.37508f, -22.9072f));
  data[14].mAabb = Aabb(Vector3(5.52161f, 20.1395f, -44.6782f), Vector3(10.9211f, 24.4539f, -42.9756f));
  data[15].mAabb = Aabb(Vector3(-30.1862f, -33.864f, -6.25897f), Vector3(-23.6265f, -30.0438f, -1.11532f));
  data[16].mAabb = Aabb(Vector3(2.95419f, -10.9418f, 22.5388f), Vector3(7.49108f, -8.53409f, 25.6764f));
  data[17].mAabb = Aabb(Vector3(24.2279f, -10.3871f, 32.6796f), Vector3(30.2613f, -8.48182f, 36.401f));
  data[18].mAabb = Aabb(Vector3(-41.7828f, 6.44653f, 4.67973f), Vector3(-35.1454f, 7.87681f, 10.4972f));
  data[19].mAabb = Aabb(Vector3(32.8642f, 7.78372f, -18.4883f), Vector3(40.1011f, 13.8551f, -13.8584f));
  data[20].mAabb = Aabb(Vector3(-2.26512f, 13.0314f, 29.7217f), Vector3(2.60322f, 20.0793f, 32.764f));
  data[21].mAabb = Aabb(Vector3(22.731f, -4.91562f, 7.57722f), Vector3(29.9385f, -0.685354f, 12.045f));
  data[22].mAabb = Aabb(Vector3(26.4404f, -0.0377482f, -1.18892f), Vector3(31.1172f, 1.16917f, 3.51521f));
  data[23].mAabb = Aabb(Vector3(-40.053f, 17.0774f, -13.745f), Vector3(-32.4657f, 23.0011f, -10.3423f));
  data[24].mAabb = Aabb(Vector3(-2.05427f, 14.9471f, -13.1157f), Vector3(-1.43184f, 21.8384f, -11.4458f));
  data[25].mAabb = Aabb(Vector3(-9.75947f, 32.9414f, 14.114f), Vector3(-3.33342f, 34.31f, 19.5996f));
  data[26].mAabb = Aabb(Vector3(-5.98204f, 46.6668f, -10.0211f), Vector3(-0.330898f, 49.8122f, -3.06549f));
  data[27].mAabb = Aabb(Vector3(-32.1955f, -28.5431f, 5.30341f), Vector3(-31.6897f, -25.6126f, 12.5867f));
  data[28].mAabb = Aabb(Vector3(-26.9808f, 12.5689f, -13.2746f), Vector3(-26.4553f, 16.2054f, -11.779f));
  data[29].mAabb = Aabb(Vector3(-18.9932f, 17.3939f, 30.7511f), Vector3(-14.3882f, 22.7785f, 32.8918f));
  data[30].mAabb = Aabb(Vector3(-15.6324f, 12.5958f, 2.0871f), Vector3(-13.9089f, 20.4044f, 5.81476f));
  data[31].mAabb = Aabb(Vector3(-16.4476f, 43.1284f, 10.7269f), Vector3(-9.73814f, 44.6591f, 11.5154f));
  data[32].mAabb = Aabb(Vector3(17.2851f, -39.4407f, 18.8904f), Vector3(18.8003f, -38.343f, 26.0879f));
  data[33].mAabb = Aabb(Vector3(4.9982f, -22.0389f, 24.1368f), Vector3(7.38268f, -18.5149f, 28.5394f));
  data[34].mAabb = Aabb(Vector3(-37.6946f, 14.0464f, 24.7043f), Vector3(-36.3575f, 16.1136f, 30.1084f));
  data[35].mAabb = Aabb(Vector3(-3.05826f, -4.01003f, -45.958f), Vector3(1.4675f, -2.72982f, -39.1237f));
  data[36].mAabb = Aabb(Vector3(28.6069f, 1.18853f, 14.2346f), Vector3(34.7737f, 7.31468f, 21.9273f));
  data[37].mAabb = Aabb(Vector3(10.4373f, -0.679536f, -36.1031f), Vector3(14.9275f, 5.2439f, -28.3828f));
  data[38].mAabb = Aabb(Vector3(29.6627f, 8.07294f, 33.3075f), Vector3(33.0812f, 14.1678f, 40.3166f));
  data[39].mAabb = Aabb(Vector3(-13.3104f, -5.08333f, -5.57081f), Vector3(-12.078f, -1.84855f, 1.21452f));
  data[40].mAabb = Aabb(Vector3(21.5308f, 9.6443f, 8.46772f), Vector3(28.4004f, 17.3231f, 9.39654f));
  data[41].mAabb = Aabb(Vector3(-10.9404f, 31.7773f, 1.82411f), Vector3(-4.8917f, 34.8437f, 8.47399f));
  data[42].mAabb = Aabb(Vector3(12.0005f, -28.0499f, 35.7922f), Vector3(18.7276f, -20.7366f, 39.765f));
  data[43].mAabb = Aabb(Vector3(27.1799f, -22.2741f, -20.393f), Vector3(29.9264f, -20.191f, -18.3358f));
  data[44].mAabb = Aabb(Vector3(-16.8507f, -33.592f, 18.8789f), Vector3(-11.6969f, -31.1513f, 19.5011f));
  data[45].mAabb = Aabb(Vector3(-21.3866f, -33.0826f, 10.27f), Vector3(-14.935f, -25.2898f, 15.9003f));
  data[46].mAabb = Aabb(Vector3(12.5543f, 29.0273f, 31.6463f), Vector3(13.7128f, 30.7146f, 36.6914f));
  data[47].mAabb = Aabb(Vector3(-8.41456f, 1.16253f, 11.7648f), Vector3(-5.15218f, 3.19285f, 16.2342f));
  data[48].mAabb = Aabb(Vector3(-11.1415f, -0.147533f, 9.01853f), Vector3(-5.77288f, 6.04658f, 11.1653f));
  data[49].mAabb = Aabb(Vector3(-5.46862f, 13.0981f, -37.8518f), Vector3(-0.299685f, 20.1539f, -33.7415f));
  data[50].mAabb = Aabb(Vector3(23.8588f, 11.1045f, -39.3638f), Vector3(25.6541f, 16.6763f, -35.0053f));
  data[51].mAabb = Aabb(Vector3(-17.6979f, -32.1186f, 29.848f), Vector3(-15.2556f, -28.8891f, 30.7926f));
  data[52].mAabb = Aabb(Vector3(-15.5975f, 39.2457f, 14.6066f), Vector3(-10.092f, 44.5844f, 20.9798f));
  data[53].mAabb = Aabb(Vector3(-10.7883f, -10.6534f, -13.2828f), Vector3(-8.47384f, -4.82433f, -11.6576f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest24(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(50);
  data[0].mAabb = Aabb(Vector3(-42.6785f, 7.69573f, -4.06955f), Vector3(-38.8344f, 12.6232f, 2.05127f));
  data[1].mAabb = Aabb(Vector3(40.6134f, 3.33532f, 2.41273f), Vector3(47.1749f, 8.73387f, 5.88525f));
  data[2].mAabb = Aabb(Vector3(-5.62086f, -3.16774f, 39.4587f), Vector3(-2.96269f, 2.00862f, 40.1992f));
  data[3].mAabb = Aabb(Vector3(28.1782f, -20.0452f, -3.20601f), Vector3(35.8009f, -16.9245f, -1.50993f));
  data[4].mAabb = Aabb(Vector3(12.5306f, 45.9422f, 5.57761f), Vector3(14.9249f, 47.1767f, 7.56873f));
  data[5].mAabb = Aabb(Vector3(-2.51602f, 26.5457f, 35.8502f), Vector3(-1.75999f, 33.0163f, 38.4386f));
  data[6].mAabb = Aabb(Vector3(5.90701f, 31.6066f, 1.48748f), Vector3(8.09017f, 38.4613f, 8.87075f));
  data[7].mAabb = Aabb(Vector3(-7.36033f, -25.2671f, -22.8515f), Vector3(-4.52031f, -22.9154f, -17.8222f));
  data[8].mAabb = Aabb(Vector3(8.1221f, 42.4973f, -2.46604f), Vector3(13.0992f, 44.3184f, -1.02509f));
  data[9].mAabb = Aabb(Vector3(-28.0211f, -11.056f, -20.0056f), Vector3(-22.9471f, -5.93411f, -14.132f));
  data[10].mAabb = Aabb(Vector3(19.0333f, -42.6273f, 12.0529f), Vector3(26.6777f, -40.111f, 13.5068f));
  data[11].mAabb = Aabb(Vector3(-8.37861f, 29.5851f, -12.1517f), Vector3(-4.14811f, 33.2787f, -6.46064f));
  data[12].mAabb = Aabb(Vector3(-27.3783f, 5.62397f, 15.1843f), Vector3(-21.2779f, 9.40149f, 18.1417f));
  data[13].mAabb = Aabb(Vector3(-39.1405f, 14.0057f, -1.73391f), Vector3(-33.07f, 21.3423f, 5.48468f));
  data[14].mAabb = Aabb(Vector3(1.56827f, -9.42781f, 48.0971f), Vector3(4.45792f, -4.82365f, 48.5544f));
  data[15].mAabb = Aabb(Vector3(44.1179f, 10.7153f, 8.69285f), Vector3(49.5582f, 12.5498f, 10.2273f));
  data[16].mAabb = Aabb(Vector3(0.221791f, 17.6731f, -34.1386f), Vector3(1.04763f, 24.9557f, -29.827f));
  data[17].mAabb = Aabb(Vector3(8.13254f, -17.731f, -23.3287f), Vector3(12.6956f, -13.8672f, -21.756f));
  data[18].mAabb = Aabb(Vector3(-0.769997f, -10.675f, 32.398f), Vector3(-0.259825f, -5.79024f, 33.6745f));
  data[19].mAabb = Aabb(Vector3(-37.504f, -7.74894f, -15.9591f), Vector3(-31.8703f, -5.29186f, -11.9749f));
  data[20].mAabb = Aabb(Vector3(-38.2601f, -20.8591f, -15.1039f), Vector3(-37.7268f, -14.5478f, -7.46733f));
  data[21].mAabb = Aabb(Vector3(25.1445f, 24.6093f, 21.9224f), Vector3(26.3776f, 30.4207f, 29.2813f));
  data[22].mAabb = Aabb(Vector3(-7.12318f, -13.4432f, 32.8604f), Vector3(-4.14493f, -6.01192f, 35.6853f));
  data[23].mAabb = Aabb(Vector3(41.2884f, -13.8393f, 6.43862f), Vector3(46.3602f, -8.73347f, 12.2644f));
  data[24].mAabb = Aabb(Vector3(-20.4183f, -1.17592f, 7.2597f), Vector3(-12.5837f, 1.91645f, 13.712f));
  data[25].mAabb = Aabb(Vector3(32.9061f, 20.2758f, -15.63f), Vector3(35.0832f, 25.4668f, -13.1947f));
  data[26].mAabb = Aabb(Vector3(-16.1523f, -14.8389f, 0.324913f), Vector3(-9.61607f, -13.0837f, 3.37414f));
  data[27].mAabb = Aabb(Vector3(7.42553f, -15.401f, 1.5164f), Vector3(12.8626f, -13.1917f, 8.46107f));
  data[28].mAabb = Aabb(Vector3(-2.00224f, -23.6626f, -42.3877f), Vector3(1.83466f, -22.9451f, -34.5434f));
  data[29].mAabb = Aabb(Vector3(0.736749f, 22.1681f, 34.5396f), Vector3(7.1454f, 26.9831f, 36.151f));
  data[30].mAabb = Aabb(Vector3(-6.27958f, 28.6789f, -14.4029f), Vector3(-4.0447f, 33.9708f, -13.7232f));
  data[31].mAabb = Aabb(Vector3(7.5041f, -33.0367f, 20.3713f), Vector3(14.8152f, -31.1875f, 27.1866f));
  data[32].mAabb = Aabb(Vector3(-22.5277f, 16.8789f, 23.9508f), Vector3(-21.5695f, 21.176f, 30.1389f));
  data[33].mAabb = Aabb(Vector3(14.7314f, 2.38687f, 15.4474f), Vector3(20.44f, 5.92688f, 17.5594f));
  data[34].mAabb = Aabb(Vector3(-35.1161f, -21.1079f, -24.5879f), Vector3(-30.5908f, -20.6789f, -22.8558f));
  data[35].mAabb = Aabb(Vector3(-33.8261f, 12.8555f, -17.0116f), Vector3(-29.0255f, 18.7372f, -15.2712f));
  data[36].mAabb = Aabb(Vector3(-12.7585f, -13.7923f, -21.3772f), Vector3(-11.0675f, -5.9231f, -14.1496f));
  data[37].mAabb = Aabb(Vector3(-32.4312f, -9.73474f, -29.4389f), Vector3(-28.0024f, -4.47095f, -27.2493f));
  data[38].mAabb = Aabb(Vector3(2.7486f, -15.9177f, 12.1691f), Vector3(3.74283f, -14.2235f, 20.128f));
  data[39].mAabb = Aabb(Vector3(-17.0413f, 19.6664f, 3.87041f), Vector3(-9.32662f, 23.8733f, 5.91023f));
  data[40].mAabb = Aabb(Vector3(-12.4052f, -28.1093f, 20.7063f), Vector3(-4.69028f, -23.0526f, 24.4061f));
  data[41].mAabb = Aabb(Vector3(7.90641f, -30.5685f, 18.9459f), Vector3(13.9481f, -24.4992f, 20.6366f));
  data[42].mAabb = Aabb(Vector3(-6.52163f, 16.7139f, 11.4416f), Vector3(-0.865622f, 18.9984f, 13.8933f));
  data[43].mAabb = Aabb(Vector3(-6.91701f, 1.74463f, -3.42236f), Vector3(0.773578f, 9.73396f, -2.63316f));
  data[44].mAabb = Aabb(Vector3(31.9325f, 14.8833f, 12.1571f), Vector3(35.2951f, 15.56f, 13.4705f));
  data[45].mAabb = Aabb(Vector3(-3.94889f, -25.508f, -22.47f), Vector3(0.494761f, -20.3873f, -15.1013f));
  data[46].mAabb = Aabb(Vector3(8.9943f, -17.2086f, -32.9662f), Vector3(11.9842f, -12.0587f, -32.1737f));
  data[47].mAabb = Aabb(Vector3(-19.5179f, -26.8214f, 12.1822f), Vector3(-17.2478f, -18.9923f, 12.6924f));
  data[48].mAabb = Aabb(Vector3(-33.9255f, 9.69236f, 25.366f), Vector3(-29.2926f, 10.1891f, 29.2397f));
  data[49].mAabb = Aabb(Vector3(9.90489f, -19.3854f, 23.0492f), Vector3(12.7094f, -18.0776f, 27.9959f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void AabbSpatialPartitionSelfQueryFuzzTest25(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  PrintTestHeader(file, testName);

  std::vector<SpatialPartitionData> data;
  data.resize(46);
  data[0].mAabb = Aabb(Vector3(-12.907f, -34.0479f, -10.1282f), Vector3(-12.353f, -27.2071f, -9.30767f));
  data[1].mAabb = Aabb(Vector3(-21.4431f, -18.0547f, -41.7765f), Vector3(-14.835f, -14.2739f, -40.5137f));
  data[2].mAabb = Aabb(Vector3(-11.7776f, -34.423f, 26.0697f), Vector3(-8.61801f, -32.6367f, 29.298f));
  data[3].mAabb = Aabb(Vector3(-0.62818f, 31.0418f, 29.513f), Vector3(3.70669f, 34.9107f, 31.158f));
  data[4].mAabb = Aabb(Vector3(5.23973f, 9.39792f, -6.07075f), Vector3(9.19329f, 13.5758f, -2.91599f));
  data[5].mAabb = Aabb(Vector3(-2.14412f, 34.2687f, 9.30831f), Vector3(0.617496f, 40.3007f, 16.5705f));
  data[6].mAabb = Aabb(Vector3(-30.8581f, -17.8825f, -7.54199f), Vector3(-26.9068f, -10.8211f, -0.958217f));
  data[7].mAabb = Aabb(Vector3(13.7491f, -9.10349f, 20.5157f), Vector3(19.7403f, -2.19222f, 25.6649f));
  data[8].mAabb = Aabb(Vector3(-27.8068f, -15.249f, 5.86678f), Vector3(-20.5544f, -7.89794f, 12.3956f));
  data[9].mAabb = Aabb(Vector3(-6.15743f, 34.5004f, -18.5921f), Vector3(0.905295f, 37.8811f, -14.0902f));
  data[10].mAabb = Aabb(Vector3(-10.7765f, 4.77226f, 41.2311f), Vector3(-10.1721f, 6.36351f, 43.6307f));
  data[11].mAabb = Aabb(Vector3(29.5377f, 15.3318f, 13.106f), Vector3(31.9748f, 20.4806f, 18.6286f));
  data[12].mAabb = Aabb(Vector3(20.9707f, -36.1775f, 4.70681f), Vector3(23.479f, -35.0898f, 11.5622f));
  data[13].mAabb = Aabb(Vector3(13.458f, 2.79324f, 23.7564f), Vector3(17.1613f, 5.28048f, 27.8401f));
  data[14].mAabb = Aabb(Vector3(-28.507f, -9.08115f, -21.226f), Vector3(-24.5275f, -1.80712f, -16.4697f));
  data[15].mAabb = Aabb(Vector3(-29.596f, 5.91054f, 25.5958f), Vector3(-22.2739f, 12.5597f, 31.9174f));
  data[16].mAabb = Aabb(Vector3(-33.0126f, -1.36826f, -43.9177f), Vector3(-26.135f, 4.60388f, -36.489f));
  data[17].mAabb = Aabb(Vector3(-28.023f, -35.5342f, 0.905351f), Vector3(-27.0053f, -32.3938f, 1.5795f));
  data[18].mAabb = Aabb(Vector3(-38.3188f, 9.64847f, 11.4469f), Vector3(-33.6026f, 14.6639f, 18.7002f));
  data[19].mAabb = Aabb(Vector3(-18.9556f, 2.13316f, 43.3877f), Vector3(-13.3198f, 5.93851f, 49.2618f));
  data[20].mAabb = Aabb(Vector3(-35.521f, -4.06745f, -30.3149f), Vector3(-30.0554f, 2.62116f, -24.1255f));
  data[21].mAabb = Aabb(Vector3(20.7652f, -2.51009f, 33.173f), Vector3(23.8339f, 4.97987f, 38.7805f));
  data[22].mAabb = Aabb(Vector3(-19.1817f, 13.4021f, 39.1307f), Vector3(-17.1208f, 21.2553f, 45.9809f));
  data[23].mAabb = Aabb(Vector3(-35.6336f, -0.753111f, 32.0813f), Vector3(-28.1592f, 1.29135f, 34.4382f));
  data[24].mAabb = Aabb(Vector3(-4.30039f, 19.1668f, 32.6918f), Vector3(1.02859f, 21.9854f, 35.6299f));
  data[25].mAabb = Aabb(Vector3(-27.6035f, 31.1993f, -2.65375f), Vector3(-26.4154f, 38.6288f, -1.51896f));
  data[26].mAabb = Aabb(Vector3(-7.51003f, -27.3754f, -11.6965f), Vector3(-0.466092f, -21.5513f, -9.6414f));
  data[27].mAabb = Aabb(Vector3(-19.3712f, 44.6967f, -7.28172f), Vector3(-11.6185f, 48.5816f, -3.65937f));
  data[28].mAabb = Aabb(Vector3(-15.9641f, -25.7583f, -30.8668f), Vector3(-12.9369f, -18.3718f, -27.1672f));
  data[29].mAabb = Aabb(Vector3(-16.1898f, -24.8643f, -38.3178f), Vector3(-15.5242f, -21.5351f, -32.4896f));
  data[30].mAabb = Aabb(Vector3(-4.20743f, -15.2055f, -4.27692f), Vector3(0.59643f, -12.2185f, -0.813909f));
  data[31].mAabb = Aabb(Vector3(-28.6608f, -8.26252f, -22.8417f), Vector3(-24.7912f, -6.71789f, -19.0669f));
  data[32].mAabb = Aabb(Vector3(-11.5803f, 35.1596f, -0.0100639f), Vector3(-9.05643f, 35.9114f, 7.02715f));
  data[33].mAabb = Aabb(Vector3(-5.42918f, 19.2882f, -21.0664f), Vector3(1.1583f, 20.2073f, -13.1357f));
  data[34].mAabb = Aabb(Vector3(-3.47328f, 14.1083f, -13.3364f), Vector3(1.79376f, 16.2995f, -9.89034f));
  data[35].mAabb = Aabb(Vector3(-37.33f, -4.43437f, -20.0114f), Vector3(-34.4086f, -3.53546f, -17.5154f));
  data[36].mAabb = Aabb(Vector3(13.866f, -32.3484f, 23.4072f), Vector3(21.3047f, -25.2892f, 26.1229f));
  data[37].mAabb = Aabb(Vector3(-14.142f, -24.0925f, 25.09f), Vector3(-7.31609f, -22.5708f, 27.3481f));
  data[38].mAabb = Aabb(Vector3(-16.7962f, -45.2309f, 11.2653f), Vector3(-9.42455f, -39.233f, 15.0565f));
  data[39].mAabb = Aabb(Vector3(17.2629f, -7.88147f, -18.1837f), Vector3(20.5292f, -7.0939f, -11.8593f));
  data[40].mAabb = Aabb(Vector3(-22.1151f, 1.87672f, 19.0834f), Vector3(-19.2674f, 6.30553f, 24.6005f));
  data[41].mAabb = Aabb(Vector3(-30.9846f, 23.7563f, -26.1445f), Vector3(-25.6063f, 24.5903f, -24.6929f));
  data[42].mAabb = Aabb(Vector3(16.012f, -1.78612f, -29.9323f), Vector3(22.0579f, 1.56347f, -27.4418f));
  data[43].mAabb = Aabb(Vector3(30.0609f, -29.7401f, -20.5292f), Vector3(33.6985f, -26.0662f, -16.2505f));
  data[44].mAabb = Aabb(Vector3(-18.8166f, -0.112067f, -12.7115f), Vector3(-16.1795f, 3.19345f, -10.1083f));
  data[45].mAabb = Aabb(Vector3(20.009f, -26.3102f, 31.6562f), Vector3(27.2649f, -22.4485f, 38.0342f));

  for (size_t i = 0; i < data.size(); ++i)
    data[i].mClientData = (void*)i;

  std::vector<Proxy> proxies;
  proxies.resize(data.size());

  BoundingAabbSpatialPartition spatialPartition;
  for (size_t i = 0; i < data.size(); ++i)
    spatialPartition.CreateProxy(proxies[i], data[i]);
  Application::mStatistics.Clear();
  PrintSpatialPartitionSelfQuery(spatialPartition, file);
  if (file != NULL)
  {
    fprintf(file, "  Statistics (%s): %d", "mAabbAabbTests", Application::mStatistics.mAabbAabbTests);
  }
}

void DebugDrawingPoints1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  gDebugDrawer->DrawPoint(Vector3(0, 0, 0));
  gDebugDrawer->DrawPoint(Vector3(1, 0, 0));
  gDebugDrawer->DrawPoint(Vector3(0, 1, 0));
  gDebugDrawer->DrawPoint(Vector3(0, 0, 1));
}

void DebugDrawingLines1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  gDebugDrawer->DrawLine(LineSegment(Vector3(0, 0, 0), Vector3(1, 0, 0)));
  gDebugDrawer->DrawLine(LineSegment(Vector3(0, 0, 0), Vector3(0, 1, 0)));
  gDebugDrawer->DrawLine(LineSegment(Vector3(0, 0, 0), Vector3(0, 0, 1)));
}

void DebugDrawingRays1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  gDebugDrawer->DrawRay(Ray(Vector3(0, 0, 0), Vector3(1, 0, 0)), 5.0f);
  gDebugDrawer->DrawRay(Ray(Vector3(0, 0, 0), Vector3(0, 1, 0)), 5.0f);
  gDebugDrawer->DrawRay(Ray(Vector3(0, 0, 0), Vector3(0, 0, 1)), 5.0f);
}

void DebugDrawingSpheres1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  gDebugDrawer->DrawSphere(Sphere(Vector3(0.577812f, 0.776177f, -0.602959f), 0.464431f));
  gDebugDrawer->DrawSphere(Sphere(Vector3(0.207284f, -6.23721f, -1.81981f), 4.92792f));
  gDebugDrawer->DrawSphere(Sphere(Vector3(-1.47537f, -3.06628f, 5.96103f), 4.30209f));
  gDebugDrawer->DrawSphere(Sphere(Vector3(0.429898f, 0.439505f, -3.27661f), 2.48084f));
  gDebugDrawer->DrawSphere(Sphere(Vector3(-4.36159f, -2.82456f, 3.94174f), 2.29526f));
}

void DebugDrawingAabbs1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  gDebugDrawer->DrawAabb(Aabb(Vector3(-0.403611f, -1.15883f, 0.148383f), Vector3(9.11458f, -1.08467f, 1.5852f)));
  gDebugDrawer->DrawAabb(Aabb(Vector3(-4.35473f, 3.87758f, -5.91895f), Vector3(-1.90989f, 5.3357f, 5.60585f)));
  gDebugDrawer->DrawAabb(Aabb(Vector3(0.964619f, -8.42168f, -2.07626f), Vector3(2.97204f, -1.10177f, 0.241842f)));
  gDebugDrawer->DrawAabb(Aabb(Vector3(-4.96121f, -0.145595f, -5.8373f), Vector3(-3.95404f, 0.285578f, -3.56056f)));
  gDebugDrawer->DrawAabb(Aabb(Vector3(2.04614f, 0.412525f, -0.525727f), Vector3(6.36345f, 5.07618f, 1.69215f)));
}

void DebugDrawingTriangles1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  gDebugDrawer->DrawTriangle(Triangle(Vector3(0, 0, 0), Vector3(1, 1, 0), Vector3(1, 1, 1)));
}

void DebugDrawingPlanes1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  Plane plane(Vector3(0.0665589f, -0.520518f, -0.851253f), Vector3(0.577812f, 0.776177f, -0.602959f));
  gDebugDrawer->DrawPlane(plane, 3, 4);
}

void DebugDrawingQuads1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  Vector3 p0 = Vector3(-2.18192f, -1.94761f, 0.846782f);
  Vector3 p1 = Vector3(-2.18192f, 3.30789f, -2.36682f);
  Vector3 p2 = Vector3(3.33754f, 3.49997f, -2.0527f);
  Vector3 p3 = Vector3(3.33754f, -1.75554f, 1.1609f);
  gDebugDrawer->DrawQuad(p0, p1, p2, p3);
}

void DebugDrawingFrustum1(const std::string& testName, int debuggingIndex, FILE* file = NULL)
{
  Frustum frustum;
  frustum.Set(Vector3(-2.0169f, -9.57391f, -1.3047f), Vector3(2.42922f, -9.57391f, -1.3047f), Vector3(2.42922f, -2.83268f, -1.3047f), Vector3(-2.0169f, -2.83268f, -1.3047f), Vector3(-0.94259f, -8.4996f, -2.31514f), Vector3(1.3549f, -8.4996f, -2.31514f), Vector3(1.3549f, -3.90699f, -2.31514f), Vector3(-0.94259f, -3.90699f, -2.31514f));
  gDebugDrawer->DrawFrustum(frustum);
}

void RegisterAabbSurfaceAreaTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(AabbSurfaceAreaTest1, list);
  DeclareSimpleUnitTest(AabbSurfaceAreaTest2, list);
}

void RegisterAabbVolumeTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(AabbVolumeTest1, list);
  DeclareSimpleUnitTest(AabbVolumeTest2, list);
}

void RegisterAabbContainsTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(AabbContainsTest1, list);
  DeclareSimpleUnitTest(AabbContainsTest2, list);
  DeclareSimpleUnitTest(AabbContainsTest3, list);
  DeclareSimpleUnitTest(AabbContainsTest4, list);
  DeclareSimpleUnitTest(AabbContainsTest5, list);
}

void RegisterAabbTransformTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(AabbTransformTest1, list);
  DeclareSimpleUnitTest(AabbTransformTest2, list);
  DeclareSimpleUnitTest(AabbTransformTest3, list);
  DeclareSimpleUnitTest(AabbTransformTest4, list);
  DeclareSimpleUnitTest(AabbTransformTest5, list);
  DeclareSimpleUnitTest(AabbTransformTest6, list);
  DeclareSimpleUnitTest(AabbTransformTest7, list);
}

void RegisterSphereCentroidTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(SphereCentroidTest1, list);
  DeclareSimpleUnitTest(SphereCentroidTest2, list);
  DeclareSimpleUnitTest(SphereCentroidTest3, list);
  DeclareSimpleUnitTest(SphereCentroidTest4, list);
  DeclareSimpleUnitTest(SphereCentroidTest5, list);
  DeclareSimpleUnitTest(SphereCentroidTest6, list);
  DeclareSimpleUnitTest(SphereCentroidTest7, list);
  DeclareSimpleUnitTest(SphereCentroidTest8, list);
  DeclareSimpleUnitTest(SphereCentroidTest9, list);
  DeclareSimpleUnitTest(SphereCentroidTest10, list);
  DeclareSimpleUnitTest(SphereCentroidTest11, list);
  DeclareSimpleUnitTest(SphereCentroidTest12, list);
  DeclareSimpleUnitTest(SphereCentroidTest13, list);
  DeclareSimpleUnitTest(SphereCentroidTest14, list);
  DeclareSimpleUnitTest(SphereCentroidTest15, list);
  DeclareSimpleUnitTest(SphereCentroidTest16, list);
  DeclareSimpleUnitTest(SphereCentroidTest17, list);
  DeclareSimpleUnitTest(SphereCentroidTest18, list);
  DeclareSimpleUnitTest(SphereCentroidTest19, list);
  DeclareSimpleUnitTest(SphereCentroidTest20, list);
  DeclareSimpleUnitTest(SphereCentroidTest21, list);
  DeclareSimpleUnitTest(SphereCentroidTest22, list);
  DeclareSimpleUnitTest(SphereCentroidTest23, list);
  DeclareSimpleUnitTest(SphereCentroidTest24, list);
  DeclareSimpleUnitTest(SphereCentroidTest25, list);
  DeclareSimpleUnitTest(SphereCentroidTest26, list);
  DeclareSimpleUnitTest(SphereCentroidTest27, list);
  DeclareSimpleUnitTest(SphereCentroidTest28, list);
  DeclareSimpleUnitTest(SphereCentroidTest29, list);
  DeclareSimpleUnitTest(SphereCentroidTest30, list);
  DeclareSimpleUnitTest(SphereCentroidTest31, list);
  DeclareSimpleUnitTest(SphereCentroidTest32, list);
  DeclareSimpleUnitTest(SphereCentroidTest33, list);
  DeclareSimpleUnitTest(SphereCentroidTest34, list);
  DeclareSimpleUnitTest(SphereCentroidTest35, list);
  DeclareSimpleUnitTest(SphereCentroidTest36, list);
  DeclareSimpleUnitTest(SphereCentroidTest37, list);
  DeclareSimpleUnitTest(SphereCentroidTest38, list);
  DeclareSimpleUnitTest(SphereCentroidTest39, list);
  DeclareSimpleUnitTest(SphereCentroidTest40, list);
  DeclareSimpleUnitTest(SphereCentroidTest41, list);
  DeclareSimpleUnitTest(SphereCentroidTest42, list);
  DeclareSimpleUnitTest(SphereCentroidTest43, list);
  DeclareSimpleUnitTest(SphereCentroidTest44, list);
  DeclareSimpleUnitTest(SphereCentroidTest45, list);
  DeclareSimpleUnitTest(SphereCentroidTest46, list);
  DeclareSimpleUnitTest(SphereCentroidTest47, list);
  DeclareSimpleUnitTest(SphereCentroidTest48, list);
  DeclareSimpleUnitTest(SphereCentroidTest49, list);
  DeclareSimpleUnitTest(SphereCentroidTest50, list);
  DeclareSimpleUnitTest(SphereCentroidTest51, list);
  DeclareSimpleUnitTest(SphereCentroidTest52, list);
}

void RegisterSphereRitterTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(SphereRitterTest1, list);
  DeclareSimpleUnitTest(SphereRitterTest2, list);
  DeclareSimpleUnitTest(SphereRitterTest3, list);
  DeclareSimpleUnitTest(SphereRitterTest4, list);
  DeclareSimpleUnitTest(SphereRitterTest5, list);
  DeclareSimpleUnitTest(SphereRitterTest6, list);
  DeclareSimpleUnitTest(SphereRitterTest7, list);
  DeclareSimpleUnitTest(SphereRitterTest8, list);
  DeclareSimpleUnitTest(SphereRitterTest9, list);
  DeclareSimpleUnitTest(SphereRitterTest10, list);
  DeclareSimpleUnitTest(SphereRitterTest11, list);
  DeclareSimpleUnitTest(SphereRitterTest12, list);
  DeclareSimpleUnitTest(SphereRitterTest13, list);
  DeclareSimpleUnitTest(SphereRitterTest14, list);
  DeclareSimpleUnitTest(SphereRitterTest15, list);
  DeclareSimpleUnitTest(SphereRitterTest16, list);
  DeclareSimpleUnitTest(SphereRitterTest17, list);
  DeclareSimpleUnitTest(SphereRitterTest18, list);
  DeclareSimpleUnitTest(SphereRitterTest19, list);
  DeclareSimpleUnitTest(SphereRitterTest20, list);
  DeclareSimpleUnitTest(SphereRitterTest21, list);
  DeclareSimpleUnitTest(SphereRitterTest22, list);
  DeclareSimpleUnitTest(SphereRitterTest23, list);
  DeclareSimpleUnitTest(SphereRitterTest24, list);
  DeclareSimpleUnitTest(SphereRitterTest25, list);
  DeclareSimpleUnitTest(SphereRitterTest26, list);
  DeclareSimpleUnitTest(SphereRitterTest27, list);
  DeclareSimpleUnitTest(SphereRitterTest28, list);
  DeclareSimpleUnitTest(SphereRitterTest29, list);
  DeclareSimpleUnitTest(SphereRitterTest30, list);
  DeclareSimpleUnitTest(SphereRitterTest31, list);
  DeclareSimpleUnitTest(SphereRitterTest32, list);
  DeclareSimpleUnitTest(SphereRitterTest33, list);
  DeclareSimpleUnitTest(SphereRitterTest34, list);
  DeclareSimpleUnitTest(SphereRitterTest35, list);
  DeclareSimpleUnitTest(SphereRitterTest36, list);
  DeclareSimpleUnitTest(SphereRitterTest37, list);
  DeclareSimpleUnitTest(SphereRitterTest38, list);
  DeclareSimpleUnitTest(SphereRitterTest39, list);
  DeclareSimpleUnitTest(SphereRitterTest40, list);
  DeclareSimpleUnitTest(SphereRitterTest41, list);
  DeclareSimpleUnitTest(SphereRitterTest42, list);
  DeclareSimpleUnitTest(SphereRitterTest43, list);
  DeclareSimpleUnitTest(SphereRitterTest44, list);
  DeclareSimpleUnitTest(SphereRitterTest45, list);
  DeclareSimpleUnitTest(SphereRitterTest46, list);
  DeclareSimpleUnitTest(SphereRitterTest47, list);
  DeclareSimpleUnitTest(SphereRitterTest48, list);
  DeclareSimpleUnitTest(SphereRitterTest49, list);
  DeclareSimpleUnitTest(SphereRitterTest50, list);
  DeclareSimpleUnitTest(SphereRitterTest51, list);
  DeclareSimpleUnitTest(SphereRitterTest52, list);
}

void RegisterSpherePCATests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(SpherePCATest1, list);
  DeclareSimpleUnitTest(SpherePCATest2, list);
  DeclareSimpleUnitTest(SpherePCATest3, list);
  DeclareSimpleUnitTest(SpherePCATest4, list);
  DeclareSimpleUnitTest(SpherePCATest5, list);
  DeclareSimpleUnitTest(SpherePCATest6, list);
  DeclareSimpleUnitTest(SpherePCATest7, list);
  DeclareSimpleUnitTest(SpherePCATest8, list);
  DeclareSimpleUnitTest(SpherePCATest9, list);
  DeclareSimpleUnitTest(SpherePCATest10, list);
  DeclareSimpleUnitTest(SpherePCATest11, list);
  DeclareSimpleUnitTest(SpherePCATest12, list);
  DeclareSimpleUnitTest(SpherePCATest13, list);
  DeclareSimpleUnitTest(SpherePCATest14, list);
  DeclareSimpleUnitTest(SpherePCATest15, list);
  DeclareSimpleUnitTest(SpherePCATest16, list);
  DeclareSimpleUnitTest(SpherePCATest17, list);
  DeclareSimpleUnitTest(SpherePCATest18, list);
  DeclareSimpleUnitTest(SpherePCATest19, list);
  DeclareSimpleUnitTest(SpherePCATest20, list);
  DeclareSimpleUnitTest(SpherePCATest21, list);
  DeclareSimpleUnitTest(SpherePCATest22, list);
  DeclareSimpleUnitTest(SpherePCATest23, list);
  DeclareSimpleUnitTest(SpherePCATest24, list);
  DeclareSimpleUnitTest(SpherePCATest25, list);
  DeclareSimpleUnitTest(SpherePCATest26, list);
  DeclareSimpleUnitTest(SpherePCATest27, list);
  DeclareSimpleUnitTest(SpherePCATest28, list);
  DeclareSimpleUnitTest(SpherePCATest29, list);
  DeclareSimpleUnitTest(SpherePCATest30, list);
  DeclareSimpleUnitTest(SpherePCATest31, list);
  DeclareSimpleUnitTest(SpherePCATest32, list);
  DeclareSimpleUnitTest(SpherePCATest33, list);
  DeclareSimpleUnitTest(SpherePCATest34, list);
  DeclareSimpleUnitTest(SpherePCATest35, list);
  DeclareSimpleUnitTest(SpherePCATest36, list);
  DeclareSimpleUnitTest(SpherePCATest37, list);
  DeclareSimpleUnitTest(SpherePCATest38, list);
  DeclareSimpleUnitTest(SpherePCATest39, list);
  DeclareSimpleUnitTest(SpherePCATest40, list);
  DeclareSimpleUnitTest(SpherePCATest41, list);
  DeclareSimpleUnitTest(SpherePCATest42, list);
  DeclareSimpleUnitTest(SpherePCATest43, list);
  DeclareSimpleUnitTest(SpherePCATest44, list);
  DeclareSimpleUnitTest(SpherePCATest45, list);
  DeclareSimpleUnitTest(SpherePCATest46, list);
  DeclareSimpleUnitTest(SpherePCATest47, list);
  DeclareSimpleUnitTest(SpherePCATest48, list);
  DeclareSimpleUnitTest(SpherePCATest49, list);
  DeclareSimpleUnitTest(SpherePCATest50, list);
  DeclareSimpleUnitTest(SpherePCATest51, list);
  DeclareSimpleUnitTest(SpherePCATest52, list);
}

void RegisterSphereSpatialPartitionStructureTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(BoundingSphereSpatialPartitionStructure1, list);
  DeclareSimpleUnitTest(BoundingSphereSpatialPartitionStructure2, list);
  DeclareSimpleUnitTest(BoundingSphereSpatialPartitionStructure3, list);
}

void RegisterSphereSpatialPartitionRayCastTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(BoundingSphereSpatialPartitionRayCastTest1, list);
  DeclareSimpleUnitTest(BoundingSphereSpatialPartitionRayCastTest2, list);
  DeclareSimpleUnitTest(BoundingSphereSpatialPartitionRayCastTest3, list);
}

void RegisterSphereSpatialPartitionFrustumCastTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(BoundingSphereSpatialPartitionFrustumCastTest1, list);
}

void RegisterSphereSpatialPartitionSelfQueryTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(BoundingSphereSpatialPartitionSelfQuery1, list);
  DeclareSimpleUnitTest(BoundingSphereSpatialPartitionSelfQuery2, list);
}

void RegisterSphereSpatialPartitionStructureFuzzTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest1, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest2, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest3, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest4, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest5, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest6, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest7, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest8, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest9, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest10, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest11, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest12, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest13, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest14, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest15, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest16, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest17, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest18, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest19, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest20, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest21, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest22, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest23, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest24, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionStructureFuzzTest25, list);
}

void RegisterSphereSpatialPartitionRayCastFuzzTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest1, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest2, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest3, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest4, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest5, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest6, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest7, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest8, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest9, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest10, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest11, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest12, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest13, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest14, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest15, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest16, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest17, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest18, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest19, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest20, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest21, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest22, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest23, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest24, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionRayCastFuzzTest25, list);
}

void RegisterSphereSpatialPartitionFrustumCastFuzzTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest1, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest2, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest3, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest4, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest5, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest6, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest7, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest8, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest9, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest10, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest11, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest12, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest13, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest14, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest15, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest16, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest17, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest18, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest19, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest20, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest21, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest22, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest23, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest24, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionFrustumCastFuzzTest25, list);
}

void RegisterSphereSpatialPartitionSelfQueryFuzzTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest1, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest2, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest3, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest4, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest5, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest6, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest7, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest8, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest9, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest10, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest11, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest12, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest13, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest14, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest15, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest16, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest17, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest18, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest19, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest20, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest21, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest22, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest23, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest24, list);
  DeclareSimpleUnitTest(SphereSpatialPartitionSelfQueryFuzzTest25, list);
}

void RegisterAabbSpatialPartitionStructureTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(BoundingAabbSpatialPartitionStructure1, list);
}

void RegisterAabbSpatialPartitionRayCastTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(BoundingAabbSpatialPartitionRayCastTest1, list);
  DeclareSimpleUnitTest(BoundingAabbSpatialPartitionRayCastTest2, list);
}

void RegisterAabbSpatialPartitionFrustumCastTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(BoundingAabbSpatialPartitionFrustumCastTest1, list);
  DeclareSimpleUnitTest(BoundingAabbSpatialPartitionFrustumCastTest2, list);
}

void RegisterAabbSpatialPartitionSelfQueryTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(TestBoundingAabbSpatialPartitionSelfQuery1, list);
  DeclareSimpleUnitTest(BoundingAabbSpatialPartitionSelfQuery2, list);
}

void RegisterAabbSpatialPartitionStructureFuzzTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest1, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest2, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest3, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest4, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest5, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest6, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest7, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest8, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest9, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest10, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest11, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest12, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest13, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest14, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest15, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest16, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest17, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest18, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest19, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest20, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest21, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest22, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest23, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest24, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionStructureFuzzTest25, list);
}

void RegisterAabbSpatialPartitionRayCastFuzzTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest1, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest2, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest3, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest4, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest5, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest6, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest7, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest8, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest9, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest10, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest11, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest12, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest13, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest14, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest15, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest16, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest17, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest18, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest19, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest20, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest21, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest22, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest23, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest24, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionRayCastFuzzTest25, list);
}

void RegisterAabbSpatialPartitionFrustumCastFuzzTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest1, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest2, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest3, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest4, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest5, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest6, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest7, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest8, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest9, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest10, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest11, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest12, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest13, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest14, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest15, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest16, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest17, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest18, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest19, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest20, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest21, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest22, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest23, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest24, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionFrustumCastFuzzTest25, list);
}

void RegisterAabbSpatialPartitionSelfQueryFuzzTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest1, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest2, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest3, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest4, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest5, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest6, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest7, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest8, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest9, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest10, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest11, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest12, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest13, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest14, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest15, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest16, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest17, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest18, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest19, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest20, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest21, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest22, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest23, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest24, list);
  DeclareSimpleUnitTest(AabbSpatialPartitionSelfQueryFuzzTest25, list);
}

void RegisterDebugDrawingPointsTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(DebugDrawingPoints1, list);
}

void RegisterDebugDrawingLinesTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(DebugDrawingLines1, list);
}

void RegisterDebugDrawingRaysTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(DebugDrawingRays1, list);
}

void RegisterDebugDrawingSpheresTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(DebugDrawingSpheres1, list);
}

void RegisterDebugDrawingAabbsTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(DebugDrawingAabbs1, list);
}

void RegisterDebugDrawingTrianglesTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(DebugDrawingTriangles1, list);
}

void RegisterDebugDrawingPlanesTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(DebugDrawingPlanes1, list);
}

void RegisterDebugDrawingQuadsTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(DebugDrawingQuads1, list);
}

void RegisterDebugDrawingFrustumTests(AssignmentUnitTestList& list)
{
  DeclareSimpleUnitTest(DebugDrawingFrustum1, list);
}

void InitializeAssignment2Tests()
{
  mTestFns.push_back(AssignmentUnitTestList());
  AssignmentUnitTestList& list = mTestFns[1];

  // Add Aabb Shape Tests
  RegisterAabbSurfaceAreaTests(list);
  RegisterAabbVolumeTests(list);
  RegisterAabbContainsTests(list);
  RegisterAabbTransformTests(list);
  // Add Sphere Shape Tests
  RegisterSphereCentroidTests(list);
  RegisterSphereRitterTests(list);
  RegisterSpherePCATests(list);
  // Add Sphere Spatial Partition Tests
  RegisterSphereSpatialPartitionStructureTests(list);
  RegisterSphereSpatialPartitionRayCastTests(list);
  RegisterSphereSpatialPartitionFrustumCastTests(list);
  RegisterSphereSpatialPartitionSelfQueryTests(list);
  RegisterSphereSpatialPartitionStructureFuzzTests(list);
  RegisterSphereSpatialPartitionRayCastFuzzTests(list);
  RegisterSphereSpatialPartitionFrustumCastFuzzTests(list);
  RegisterSphereSpatialPartitionSelfQueryFuzzTests(list);
  // Add Aabb Spatial Partition Tests
  RegisterAabbSpatialPartitionStructureTests(list);
  RegisterAabbSpatialPartitionRayCastTests(list);
  RegisterAabbSpatialPartitionFrustumCastTests(list);
  RegisterAabbSpatialPartitionSelfQueryTests(list);
  RegisterAabbSpatialPartitionStructureFuzzTests(list);
  RegisterAabbSpatialPartitionRayCastFuzzTests(list);
  RegisterAabbSpatialPartitionFrustumCastFuzzTests(list);
  RegisterAabbSpatialPartitionSelfQueryFuzzTests(list);
  // Add Debug Drawing Tests
  RegisterDebugDrawingPointsTests(list);
  RegisterDebugDrawingLinesTests(list);
  RegisterDebugDrawingRaysTests(list);
  RegisterDebugDrawingSpheresTests(list);
  RegisterDebugDrawingAabbsTests(list);
  RegisterDebugDrawingTrianglesTests(list);
  RegisterDebugDrawingPlanesTests(list);
  RegisterDebugDrawingQuadsTests(list);
  RegisterDebugDrawingFrustumTests(list);
}
